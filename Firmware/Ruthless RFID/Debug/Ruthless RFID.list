
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e82c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e9cc  0800e9cc  0001e9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0ac  0800f0ac  0002063c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0ac  0800f0ac  0001f0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0b4  0800f0b4  0002063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0b4  0800f0b4  0001f0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0b8  0800f0b8  0001f0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000063c  20000000  0800f0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000063c  0800f6f8  0002063c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006be4  0800f6f8  00026be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ba0  00000000  00000000  0002066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526b  00000000  00000000  0004620c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  0004b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  0004d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3d4  00000000  00000000  0004f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ad6  00000000  00000000  0006b534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e566  00000000  00000000  0009000a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008964  00000000  00000000  0012e5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000063c 	.word	0x2000063c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e9b4 	.word	0x0800e9b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000640 	.word	0x20000640
 80001dc:	0800e9b4 	.word	0x0800e9b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fb6c 	bl	8002c9c <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000065c 	.word	0x2000065c

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fc47 	bl	8002e90 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000065c 	.word	0x2000065c

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fb29 	bl	8002c9c <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 ff21 	bl	800249c <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000065c 	.word	0x2000065c

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fbf5 	bl	8002e90 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fef3 	bl	800249c <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000065c 	.word	0x2000065c

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f001 fe83 	bl	800249c <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR);
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH,&result[1]);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 f8fd 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 f8f8 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fe53 	bl	800249c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 f8f0 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f001 fe4b 	bl	800249c <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	//SET_ANTGAIN();
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	//MFRC_REGW(TModeReg,0x80); //timer starts automatically after every transmission
	//MFRC_REGW(TPrescalerRegLO,0xA9); //Set prescaler to 169 => f_timer=40kHz, use this for timeouts
	//MFRC_REGW(TReloadHI,0x03); //Set reload counter to 4000 => 100ms timeout
	//MFRC_REGW(TReloadLO,0xE8);
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);


	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fdf5 	bl	800249c <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d fb4e 	bl	800e090 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d fafb 	bl	800e090 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fcd1 	bl	800249c <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 fcc6 	bl	800249c <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 fcbf 	bl	800249c <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 fcb6 	bl	800249c <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00d fa32 	bl	800e090 <memcpy>
	CDC_Transmit_FS(send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00c fda5 	bl	800d788 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fc2c 	bl	800249c <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b090      	sub	sp, #64	; 0x40
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fc0e 	bl	800249c <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0018 	add.w	r0, r7, #24
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d fad8 	bl	800e29c <siprintf>
						Print(mess);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fbb0 	bl	800249c <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fbab 	bl	800249c <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d fa75 	bl	800e29c <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000658 	.word	0x20000658
 8000dec:	0800ea9c 	.word	0x0800ea9c
 8000df0:	0800eab4 	.word	0x0800eab4
 8000df4:	0800eac0 	.word	0x0800eac0
 8000df8:	0800eacc 	.word	0x0800eacc
 8000dfc:	0800ead8 	.word	0x0800ead8

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d f94b 	bl	800e0ac <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 fdd0 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 fdcb 	bl	80029e0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 fd56 	bl	8005906 <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 fdbb 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fb16 	bl	800249c <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 fdb1 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fb0c 	bl	800249c <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006b0 	.word	0x200006b0

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 fd97 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 fd92 	bl	80029e0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 fd1d 	bl	8005906 <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 fd82 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 fd7d 	bl	80029e0 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 fd76 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 fd71 	bl	80029e0 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006b0 	.word	0x200006b0

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SCREEN_INIT>:
 * @param data: Array of strings that form the basis of the screen
 *
 * @param seldata: Array of data on where to place select arrow "->"
 * */

void SCREEN_INIT(Screen* screen,int datasize,int selsize,char** data,uint8_t (*dataloc)[2],uint8_t (*seldata)[2]){
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]

    screen->datsize=datasize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
    screen->selsize=selsize;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    screen->data=(char**)malloc((screen->datsize)*sizeof(char*));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00d f870 	bl	800e080 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]
    screen->dataloc=(uint8_t (*)[2])malloc(screen->datsize*sizeof(uint8_t*));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00d f866 	bl	800e080 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	60da      	str	r2, [r3, #12]
    screen->seldata=(uint8_t (*)[2])malloc(screen->selsize*sizeof(uint8_t*));
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00d f85c 	bl	800e080 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	611a      	str	r2, [r3, #16]

    for(int j=0;j<screen->datsize;j++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e024      	b.n	8001020 <SCREEN_INIT+0xa6>
        screen->data[j]=malloc((strlen(data[j])+1)*sizeof(char));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8fd 	bl	80001e0 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18d4      	adds	r4, r2, r3
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	f00d f843 	bl	800e080 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6023      	str	r3, [r4, #0]
        strcpy(screen->data[j],data[j]);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f00d f961 	bl	800e2dc <strcpy>
    for(int j=0;j<screen->datsize;j++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbd5      	blt.n	8000fd6 <SCREEN_INIT+0x5c>
    }

    memcpy(screen->dataloc,dataloc,datasize*2);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68d8      	ldr	r0, [r3, #12]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	461a      	mov	r2, r3
 8001034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001036:	f00d f82b 	bl	800e090 <memcpy>
    memcpy(screen->seldata,seldata,selsize*2);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6918      	ldr	r0, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	461a      	mov	r2, r3
 8001044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001046:	f00d f823 	bl	800e090 <memcpy>

}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <OLED_INIT+0xc8>)
 8001060:	f001 fcbe 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <OLED_INIT+0xc8>)
 800106a:	f001 fcb9 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <OLED_INIT+0xcc>)
 8001074:	f001 fcb4 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f001 fa0f 	bl	800249c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4826      	ldr	r0, [pc, #152]	; (800111c <OLED_INIT+0xc8>)
 8001084:	f001 fcac 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f001 fa07 	bl	800249c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <OLED_INIT+0xc8>)
 8001094:	f001 fca4 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001098:	2064      	movs	r0, #100	; 0x64
 800109a:	f001 f9ff 	bl	800249c <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <OLED_INIT+0xd0>)
 80010a0:	463c      	mov	r4, r7
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	c403      	stmia	r4!, {r0, r1}
 80010ae:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	e00c      	b.n	80010d0 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80010b6:	463a      	mov	r2, r7
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff feb2 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f001 f9e9 	bl	800249c <HAL_Delay>
	for(int i=0;i<25;i++){
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	ddef      	ble.n	80010b6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80010d6:	20a7      	movs	r0, #167	; 0xa7
 80010d8:	f7ff fea6 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <OLED_INIT+0xd4>)
 80010de:	f7ff ff19 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80010e2:	20af      	movs	r0, #175	; 0xaf
 80010e4:	f7ff fea0 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f001 f9d6 	bl	800249c <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80010f0:	20ae      	movs	r0, #174	; 0xae
 80010f2:	f7ff fe99 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 f9d0 	bl	800249c <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80010fc:	20a6      	movs	r0, #166	; 0xa6
 80010fe:	f7ff fe93 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f001 f9ca 	bl	800249c <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001108:	20af      	movs	r0, #175	; 0xaf
 800110a:	f7ff fe8d 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 800110e:	f7ff fe77 	bl	8000e00 <OLED_Clear>


}
 8001112:	bf00      	nop
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	0800ebbc 	.word	0x0800ebbc
 8001128:	20000000 	.word	0x20000000

0800112c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001138:	2005      	movs	r0, #5
 800113a:	f00c ffa1 	bl	800e080 <malloc>
 800113e:	4603      	mov	r3, r0
 8001140:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e013      	b.n	8001170 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f1a3 0220 	sub.w	r2, r3, #32
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <OLED_InvChar+0x5c>)
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	18ca      	adds	r2, r1, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	440b      	add	r3, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b05      	cmp	r3, #5
 8001174:	dde8      	ble.n	8001148 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8001176:	2205      	movs	r2, #5
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f00c ff88 	bl	800e090 <memcpy>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800ed7c 	.word	0x0800ed7c

0800118c <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b50      	subs	r3, #80	; 0x50
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe39 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe32 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe29 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 80011d6:	2006      	movs	r0, #6
 80011d8:	f00c ff52 	bl	800e080 <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f1a3 0220 	sub.w	r2, r3, #32
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <OLED_drawChar+0x98>)
 80011f4:	4413      	add	r3, r2
 80011f6:	2205      	movs	r2, #5
 80011f8:	4619      	mov	r1, r3
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f00c ff48 	bl	800e090 <memcpy>
 8001200:	e004      	b.n	800120c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff90 	bl	800112c <OLED_InvChar>
	}

	*(data+5)=0x00;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3305      	adds	r3, #5
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001214:	2106      	movs	r1, #6
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe40 	bl	8000e9c <OLED_data>

	}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	0800ed7c 	.word	0x0800ed7c

08001228 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	603a      	str	r2, [r7, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e014      	b.n	800126e <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	4413      	add	r3, r2
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	79f8      	ldrb	r0, [r7, #7]
 8001264:	f7ff ff92 	bl	800118c <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7fe ffb6 	bl	80001e0 <strlen>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8e3      	bhi.n	8001244 <OLED_Printlin+0x1c>


	}
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4613      	mov	r3, r2
 8001294:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f7fe ffa2 	bl	80001e0 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	0fda      	lsrs	r2, r3, #31
 80012a4:	4413      	add	r3, r2
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	425b      	negs	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	3340      	adds	r3, #64	; 0x40
 80012b6:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	79f8      	ldrb	r0, [r7, #7]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	f7ff ffb1 	bl	8001228 <OLED_Printlin>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b094      	sub	sp, #80	; 0x50
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80012d6:	2320      	movs	r3, #32
 80012d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
 80012f0:	e018      	b.n	8001324 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80012f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f6:	4413      	add	r3, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b20      	cmp	r3, #32
 8001302:	d10b      	bne.n	800131c <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001306:	b2d9      	uxtb	r1, r3
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]
	                i++;
 8001314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001316:	3301      	adds	r3, #1
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800131a:	e000      	b.n	800131e <OLED_Print+0x50>
	            }
	            else{
	                continue;
 800131c:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800131e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001320:	3301      	adds	r3, #1
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
 8001324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001326:	2b15      	cmp	r3, #21
 8001328:	dde3      	ble.n	80012f2 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b20      	cmp	r3, #32
 8001334:	d102      	bne.n	800133c <OLED_Print+0x6e>
	            last_ind++;
 8001336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001338:	3301      	adds	r3, #1
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 800133c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff4c 	bl	80001e0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	2b15      	cmp	r3, #21
 800134c:	d828      	bhi.n	80013a0 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800134e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800135e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f00c ffbe 	bl	800e2ec <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	f107 0220 	add.w	r2, r7, #32
 8001376:	18d0      	adds	r0, r2, r3
 8001378:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137e:	f1c3 0315 	rsb	r3, r3, #21
 8001382:	461a      	mov	r2, r3
 8001384:	f00c fe92 	bl	800e0ac <memset>
	            thisline[21]=' ';
 8001388:	2320      	movs	r3, #32
 800138a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	b2d8      	uxtb	r0, r3
 8001392:	f107 0220 	add.w	r2, r7, #32
 8001396:	2300      	movs	r3, #0
 8001398:	2102      	movs	r1, #2
 800139a:	f7ff ff45 	bl	8001228 <OLED_Printlin>




	    }
}
 800139e:	e05e      	b.n	800145e <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80013a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a2:	3314      	adds	r3, #20
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d03a      	beq.n	8001424 <OLED_Print+0x156>
 80013ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b0:	3315      	adds	r3, #21
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d033      	beq.n	8001424 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80013bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	18d1      	adds	r1, r2, r3
 80013c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c4:	3b01      	subs	r3, #1
 80013c6:	3350      	adds	r3, #80	; 0x50
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00c ff89 	bl	800e2ec <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80013da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013dc:	3b01      	subs	r3, #1
 80013de:	3350      	adds	r3, #80	; 0x50
 80013e0:	443b      	add	r3, r7
 80013e2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	1898      	adds	r0, r3, r2
 80013ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80013f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f4:	3b01      	subs	r3, #1
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	443b      	add	r3, r7
 80013fa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013fe:	f1c3 0315 	rsb	r3, r3, #21
 8001402:	461a      	mov	r2, r3
 8001404:	f00c fe52 	bl	800e0ac <memset>
	            thisline[21]=' ';
 8001408:	2320      	movs	r3, #32
 800140a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001410:	3b01      	subs	r3, #1
 8001412:	3350      	adds	r3, #80	; 0x50
 8001414:	443b      	add	r3, r7
 8001416:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800141a:	461a      	mov	r2, r3
 800141c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141e:	4413      	add	r3, r2
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
 8001422:	e00e      	b.n	8001442 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	18d1      	adds	r1, r2, r3
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2215      	movs	r2, #21
 8001430:	4618      	mov	r0, r3
 8001432:	f00c ff5b 	bl	800e2ec <strncpy>
	            thisline[21]=' ';
 8001436:	2320      	movs	r3, #32
 8001438:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	3315      	adds	r3, #21
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001448:	b2d8      	uxtb	r0, r3
 800144a:	f107 0220 	add.w	r2, r7, #32
 800144e:	2300      	movs	r3, #0
 8001450:	2102      	movs	r1, #2
 8001452:	f7ff fee9 	bl	8001228 <OLED_Printlin>
	        line++;
 8001456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001458:	3301      	adds	r3, #1
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 800145c:	e746      	b.n	80012ec <OLED_Print+0x1e>
}
 800145e:	3750      	adds	r7, #80	; 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(Screen* screen,uint8_t invert){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001470:	f7ff fcc6 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, screen->data[0], invert);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4619      	mov	r1, r3
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff01 	bl	8001286 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e01a      	b.n	80014c0 <OLED_SCREEN+0x5c>
		OLED_Printlin(screen->dataloc[i+1][0], screen->dataloc[i+1][1], screen->data[i+1], invert);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	7818      	ldrb	r0, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	7859      	ldrb	r1, [r3, #1]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f7ff feb7 	bl	8001228 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbde      	blt.n	800148a <OLED_SCREEN+0x26>
	}
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(Screen* screen,uint8_t dataindx,char* data){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	460b      	mov	r3, r1
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe75 	bl	80001e0 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	3302      	adds	r3, #2
 8001506:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	7818      	ldrb	r0, [r3, #0]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	b2d9      	uxtb	r1, r3
 8001518:	2300      	movs	r3, #0
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	f7ff fe84 	bl	8001228 <OLED_Printlin>
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(Screen* screen,uint8_t selopt, int restore){
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	460b      	mov	r3, r1
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <OLED_SELECT+0x110>)
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4611      	mov	r1, r2
 8001540:	8019      	strh	r1, [r3, #0]
 8001542:	3302      	adds	r3, #2
 8001544:	0c12      	lsrs	r2, r2, #16
 8001546:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d116      	bne.n	800157c <OLED_SELECT+0x54>
			if(selopt==0){
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10b      	bne.n	800156c <OLED_SELECT+0x44>
			rest=screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001560:	3b01      	subs	r3, #1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	e009      	b.n	8001580 <OLED_SELECT+0x58>
			}
			else{
				rest=screen->data[selopt];
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	7afb      	ldrb	r3, [r7, #11]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e001      	b.n	8001580 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <OLED_SELECT+0x114>)
 800157e:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d124      	bne.n	80015d0 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001592:	3b01      	subs	r3, #1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	3b01      	subs	r3, #1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	785b      	ldrb	r3, [r3, #1]
 80015cc:	773b      	strb	r3, [r7, #28]
 80015ce:	e021      	b.n	8001614 <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015da:	3b01      	subs	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015ee:	3b01      	subs	r3, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001614:	7fb9      	ldrb	r1, [r7, #30]
 8001616:	7ff8      	ldrb	r0, [r7, #31]
 8001618:	2300      	movs	r3, #0
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f7ff fe04 	bl	8001228 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001620:	f107 0214 	add.w	r2, r7, #20
 8001624:	7f39      	ldrb	r1, [r7, #28]
 8001626:	7f78      	ldrb	r0, [r7, #29]
 8001628:	2300      	movs	r3, #0
 800162a:	f7ff fdfd 	bl	8001228 <OLED_Printlin>

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0800ebdc 	.word	0x0800ebdc
 800163c:	0800ebd8 	.word	0x0800ebd8

08001640 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001644:	2108      	movs	r1, #8
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <BUZZ+0x20>)
 8001648:	f004 fcf2 	bl	8006030 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800164c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001650:	f000 ff24 	bl	800249c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001654:	2108      	movs	r1, #8
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <BUZZ+0x20>)
 8001658:	f004 fd9a 	bl	8006190 <HAL_TIM_PWM_Stop>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000760 	.word	0x20000760

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fed6 	bl	8002418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f864 	bl	8001738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 fa2c 	bl	8001acc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001674:	f000 f8ca 	bl	800180c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001678:	f000 f8f6 	bl	8001868 <MX_SPI1_Init>
  MX_SPI2_Init();
 800167c:	f000 f92c 	bl	80018d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001680:	f000 f960 	bl	8001944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001684:	f000 f9d4 	bl	8001a30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001688:	f009 f848 	bl	800a71c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <main+0x90>)
 800168e:	2104      	movs	r1, #4
 8001690:	2001      	movs	r0, #1
 8001692:	f009 f93b 	bl	800a90c <osMessageQueueNew>
 8001696:	4603      	mov	r3, r0
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <main+0x94>)
 800169a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <main+0x98>)
 800169e:	2100      	movs	r1, #0
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <main+0x9c>)
 80016a2:	f009 f885 	bl	800a7b0 <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <main+0xa0>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <main+0xa4>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4816      	ldr	r0, [pc, #88]	; (800170c <main+0xa8>)
 80016b2:	f009 f87d 	bl	800a7b0 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <main+0xac>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <main+0xb0>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4815      	ldr	r0, [pc, #84]	; (8001718 <main+0xb4>)
 80016c2:	f009 f875 	bl	800a7b0 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <main+0xb8>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <main+0xbc>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <main+0xc0>)
 80016d2:	f009 f86d 	bl	800a7b0 <osThreadNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <main+0xc4>)
 80016da:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <main+0xc8>)
 80016de:	2100      	movs	r1, #0
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <main+0xcc>)
 80016e2:	f009 f865 	bl	800a7b0 <osThreadNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <main+0xd0>)
 80016ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016ec:	f009 f83a 	bl	800a764 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <main+0x8c>
 80016f2:	bf00      	nop
 80016f4:	0800f048 	.word	0x0800f048
 80016f8:	20000804 	.word	0x20000804
 80016fc:	0800ef94 	.word	0x0800ef94
 8001700:	08001bb5 	.word	0x08001bb5
 8001704:	200007f0 	.word	0x200007f0
 8001708:	0800efb8 	.word	0x0800efb8
 800170c:	08001c3d 	.word	0x08001c3d
 8001710:	200007f4 	.word	0x200007f4
 8001714:	0800efdc 	.word	0x0800efdc
 8001718:	08001cfd 	.word	0x08001cfd
 800171c:	200007f8 	.word	0x200007f8
 8001720:	0800f000 	.word	0x0800f000
 8001724:	08001d0d 	.word	0x08001d0d
 8001728:	200007fc 	.word	0x200007fc
 800172c:	0800f024 	.word	0x0800f024
 8001730:	08001dd9 	.word	0x08001dd9
 8001734:	20000800 	.word	0x20000800

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2230      	movs	r2, #48	; 0x30
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00c fcb0 	bl	800e0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <SystemClock_Config+0xcc>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <SystemClock_Config+0xd0>)
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b0:	23a8      	movs	r3, #168	; 0xa8
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b8:	2307      	movs	r3, #7
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fb63 	bl	8004e8c <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017cc:	f000 fba6 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fdc5 	bl	800537c <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f8:	f000 fb90 	bl	8001f1c <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_I2C1_Init+0x50>)
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <MX_I2C1_Init+0x54>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_I2C1_Init+0x50>)
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_I2C1_Init+0x58>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_I2C1_Init+0x50>)
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_I2C1_Init+0x50>)
 800184a:	f001 f8e3 	bl	8002a14 <HAL_I2C_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001854:	f000 fb62 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000065c 	.word	0x2000065c
 8001860:	40005400 	.word	0x40005400
 8001864:	000186a0 	.word	0x000186a0

08001868 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_SPI1_Init+0x68>)
 800186e:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <MX_SPI1_Init+0x6c>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_SPI1_Init+0x68>)
 800187c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001880:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_SPI1_Init+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_SPI1_Init+0x68>)
 800189e:	2218      	movs	r2, #24
 80018a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018b6:	220a      	movs	r2, #10
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018bc:	f003 ff9a 	bl	80057f4 <HAL_SPI_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018c6:	f000 fb29 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200006b0 	.word	0x200006b0
 80018d4:	40013000 	.word	0x40013000

080018d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI2_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <MX_SPI2_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SPI2_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SPI2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SPI2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI2_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI2_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SPI2_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI2_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SPI2_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI2_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SPI2_Init+0x64>)
 800192a:	f003 ff63 	bl	80057f4 <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 faf2 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000708 	.word	0x20000708
 8001940:	40003800 	.word	0x40003800

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800197e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800198c:	2231      	movs	r2, #49	; 0x31
 800198e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800199e:	f004 f9b9 	bl	8005d14 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019a8:	f000 fab8 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b6:	4619      	mov	r1, r3
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019ba:	f004 fe17 	bl	80065ec <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019c4:	f000 faaa 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019ca:	f004 fad7 	bl	8005f7c <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019d4:	f000 faa2 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019e8:	f005 f9bc 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019f2:	f000 fa93 	bl	8001f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f6:	2360      	movs	r3, #96	; 0x60
 80019f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 80019fa:	2318      	movs	r3, #24
 80019fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a0e:	f004 fd2b 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a18:	f000 fa80 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a1e:	f000 fbab 	bl	8002178 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3738      	adds	r7, #56	; 0x38
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000760 	.word	0x20000760

08001a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <MX_TIM3_Init+0x98>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a54:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a76:	f004 f94d 	bl	8005d14 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a80:	f000 fa4c 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a92:	f004 fdab 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a9c:	f000 fa3e 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001aae:	f005 f959 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ab8:	f000 fa30 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200007a8 	.word	0x200007a8
 8001ac8:	40000400 	.word	0x40000400

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b3c:	481b      	ldr	r0, [pc, #108]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b3e:	f000 ff4f 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2122      	movs	r1, #34	; 0x22
 8001b46:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b48:	f000 ff4a 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4813      	ldr	r0, [pc, #76]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b60:	f000 fda2 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001b64:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b7e:	f000 fd93 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001b82:	2322      	movs	r3, #34	; 0x22
 8001b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b9a:	f000 fd85 	bl	80026a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bbc:	f00b fd26 	bl	800d60c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <Start_Init+0x70>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f009 ff6b 	bl	800baa0 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <Start_Init+0x74>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f009 ff66 	bl	800baa0 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <Start_Init+0x78>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 ff61 	bl	800baa0 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <Start_Init+0x7c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f009 ff5c 	bl	800baa0 <vTaskSuspend>
    MFRC_INIT();
 8001be8:	f7fe fdf6 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001bec:	f7fe fdac 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8001bf0:	f7ff fa30 	bl	8001054 <OLED_INIT>
    OLED_Print(TC);
 8001bf4:	480f      	ldr	r0, [pc, #60]	; (8001c34 <Start_Init+0x80>)
 8001bf6:	f7ff fb6a 	bl	80012ce <OLED_Print>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)!=0);
 8001bfa:	bf00      	nop
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <Start_Init+0x84>)
 8001c00:	f000 fed6 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f8      	bne.n	8001bfc <Start_Init+0x48>
    vTaskResume(HomeHandle);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <Start_Init+0x78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 ffee 	bl	800bbf0 <vTaskResume>
    osDelay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f008 fe5e 	bl	800a8d6 <osDelay>
    vTaskSuspend(NULL);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f009 ff40 	bl	800baa0 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8001c20:	e7ce      	b.n	8001bc0 <Start_Init+0xc>
 8001c22:	bf00      	nop
 8001c24:	200007f4 	.word	0x200007f4
 8001c28:	200007f8 	.word	0x200007f8
 8001c2c:	200007fc 	.word	0x200007fc
 8001c30:	20000800 	.word	0x20000800
 8001c34:	2000043c 	.word	0x2000043c
 8001c38:	40020000 	.word	0x40020000

08001c3c <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	b095      	sub	sp, #84	; 0x54
 8001c40:	af06      	add	r7, sp, #24
 8001c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Screen read;
	SCREEN_INIT(&read, 3, 1, READ_SCREEN, READ_DATLOC, READ_SEL);
 8001c44:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <StartReadCard+0xa0>)
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <StartReadCard+0xa4>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <StartReadCard+0xa8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	2103      	movs	r1, #3
 8001c56:	f7ff f990 	bl	8000f7a <SCREEN_INIT>
	OLED_SCREEN(&read, NORMAL);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fbff 	bl	8001464 <OLED_SCREEN>
	MFRC_ANTON();
 8001c66:	f7fe fd35 	bl	80006d4 <MFRC_ANTON>
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8001c6a:	201a      	movs	r0, #26
 8001c6c:	f00c fa08 	bl	800e080 <malloc>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if(DumpINFO(cardinf)==PCD_OK){
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ffe9 	bl	8000c50 <DumpINFO>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2bcc      	cmp	r3, #204	; 0xcc
 8001c82:	d1f7      	bne.n	8001c74 <StartReadCard+0x38>
			BUZZ();
 8001c84:	f7ff fcdc 	bl	8001640 <BUZZ>
			MFRC_ANTOFF();
 8001c88:	f7fe fd5e 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	7c3b      	ldrb	r3, [r7, #16]
 8001c90:	461e      	mov	r6, r3
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	469c      	mov	ip, r3
 8001c96:	7cbb      	ldrb	r3, [r7, #18]
 8001c98:	7cfa      	ldrb	r2, [r7, #19]
 8001c9a:	7d39      	ldrb	r1, [r7, #20]
 8001c9c:	7d7c      	ldrb	r4, [r7, #21]
 8001c9e:	7dbd      	ldrb	r5, [r7, #22]
 8001ca0:	9504      	str	r5, [sp, #16]
 8001ca2:	9403      	str	r4, [sp, #12]
 8001ca4:	9102      	str	r1, [sp, #8]
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4663      	mov	r3, ip
 8001cac:	4632      	mov	r2, r6
 8001cae:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <StartReadCard+0xac>)
 8001cb0:	f00c faf4 	bl	800e29c <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <StartReadCard+0xb0>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 010c 	add.w	r1, r7, #12
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f009 f8be 	bl	800ae40 <xQueueGenericSend>
			CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <StartReadCard+0xb4>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <StartReadCard+0xb8>)
 8001cca:	f008 fd71 	bl	800a7b0 <osThreadNew>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <StartReadCard+0xbc>)
 8001cd2:	6013      	str	r3, [r2, #0]
			vTaskDelete(NULL);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f009 fe3d 	bl	800b954 <vTaskDelete>
	if(DumpINFO(cardinf)==PCD_OK){
 8001cda:	e7cb      	b.n	8001c74 <StartReadCard+0x38>
 8001cdc:	0800ef80 	.word	0x0800ef80
 8001ce0:	0800ef78 	.word	0x0800ef78
 8001ce4:	2000041c 	.word	0x2000041c
 8001ce8:	0800ecf8 	.word	0x0800ecf8
 8001cec:	20000804 	.word	0x20000804
 8001cf0:	0800f024 	.word	0x0800f024
 8001cf4:	08001dd9 	.word	0x08001dd9
 8001cf8:	20000800 	.word	0x20000800

08001cfc <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f008 fde6 	bl	800a8d6 <osDelay>
 8001d0a:	e7fb      	b.n	8001d04 <StartWriteCard+0x8>

08001d0c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	Screen HOME;
	uint32_t count = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
	SCREEN_INIT(&HOME,7,6,(char**)HOME_SCREEN,HOME_DATLOC,HOME_SEL);
 8001d18:	f107 0008 	add.w	r0, r7, #8
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <StartHome+0xac>)
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <StartHome+0xb0>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <StartHome+0xb4>)
 8001d26:	2206      	movs	r2, #6
 8001d28:	2107      	movs	r1, #7
 8001d2a:	f7ff f926 	bl	8000f7a <SCREEN_INIT>
	OLED_SCREEN(&HOME, NORMAL);
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fb95 	bl	8001464 <OLED_SCREEN>
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4821      	ldr	r0, [pc, #132]	; (8001dc4 <StartHome+0xb8>)
 8001d3e:	f000 fe37 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f8      	bne.n	8001d3a <StartHome+0x2e>
		  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <StartHome+0xbc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d50:	e017      	b.n	8001d82 <StartHome+0x76>
			  HAL_TIM_Base_Start(&htim3);
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <StartHome+0xbc>)
 8001d54:	f004 f82e 	bl	8005db4 <HAL_TIM_Base_Start>
			  if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <StartHome+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10d      	bne.n	8001d82 <StartHome+0x76>
				  HAL_TIM_Base_Stop(&htim3);
 8001d66:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <StartHome+0xbc>)
 8001d68:	f004 f87e 	bl	8005e68 <HAL_TIM_Base_Stop>
				  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <StartHome+0xc0>)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4817      	ldr	r0, [pc, #92]	; (8001dd0 <StartHome+0xc4>)
 8001d72:	f008 fd1d 	bl	800a7b0 <osThreadNew>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <StartHome+0xc8>)
 8001d7a:	6013      	str	r3, [r2, #0]
				  vTaskDelete(NULL);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f009 fde9 	bl	800b954 <vTaskDelete>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d82:	2102      	movs	r1, #2
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <StartHome+0xb8>)
 8001d86:	f000 fe13 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e0      	beq.n	8001d52 <StartHome+0x46>
				  }
			  }
		  HAL_TIM_Base_Stop(&htim3);
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <StartHome+0xbc>)
 8001d92:	f004 f869 	bl	8005e68 <HAL_TIM_Base_Stop>
		  count++;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
		  if(count == 6) {
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d101      	bne.n	8001da6 <StartHome+0x9a>
			  count = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
		  	 }
		  OLED_SELECT(&HOME, count, OLED_RESTORE);
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	b2d9      	uxtb	r1, r3
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	2201      	movs	r2, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fbb9 	bl	8001528 <OLED_SELECT>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001db6:	e7c0      	b.n	8001d3a <StartHome+0x2e>
 8001db8:	0800ef6c 	.word	0x0800ef6c
 8001dbc:	0800ef5c 	.word	0x0800ef5c
 8001dc0:	20000400 	.word	0x20000400
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	200007a8 	.word	0x200007a8
 8001dcc:	0800efb8 	.word	0x0800efb8
 8001dd0:	08001c3d 	.word	0x08001c3d
 8001dd4:	200007f4 	.word	0x200007f4

08001dd8 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b090      	sub	sp, #64	; 0x40
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 Screen found;
	 uint32_t count = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <CardFoundStart+0xf8>)
 8001de6:	f107 0408 	add.w	r4, r7, #8
 8001dea:	461d      	mov	r5, r3
 8001dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	8023      	strh	r3, [r4, #0]
	 SCREEN_INIT(&found, 5, 2, (char**)CARD_FOUNDSCREEN, CARD_FOUNDATLOC, CARD_FOUNDSEL);
 8001df4:	f107 0020 	add.w	r0, r7, #32
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <CardFoundStart+0xfc>)
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <CardFoundStart+0x100>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <CardFoundStart+0x104>)
 8001e02:	2202      	movs	r2, #2
 8001e04:	2105      	movs	r1, #5
 8001e06:	f7ff f8b8 	bl	8000f7a <SCREEN_INIT>
	 OLED_SCREEN(&found, NORMAL);
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb27 	bl	8001464 <OLED_SCREEN>
	 while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 8001e16:	bf00      	nop
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <CardFoundStart+0x108>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f107 011c 	add.w	r1, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f009 f9a6 	bl	800b174 <xQueueReceive>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d1f4      	bne.n	8001e18 <CardFoundStart+0x40>
	 OLED_SCRNREF(&found, 1, cardinf);
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fb4d 	bl	80014d6 <OLED_SCRNREF>
	 OLED_SCRNREF(&found, 2, type);
 8001e3c:	f107 0208 	add.w	r2, r7, #8
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fb45 	bl	80014d6 <OLED_SCRNREF>
  /* Infinite loop */
  for(;;)
  {

 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <CardFoundStart+0x10c>)
 8001e50:	f000 fdae 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f8      	bne.n	8001e4c <CardFoundStart+0x74>
 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001e5a:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <CardFoundStart+0x110>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e62:	e01a      	b.n	8001e9a <CardFoundStart+0xc2>
 	    	HAL_TIM_Base_Start(&htim3);
 8001e64:	4820      	ldr	r0, [pc, #128]	; (8001ee8 <CardFoundStart+0x110>)
 8001e66:	f003 ffa5 	bl	8005db4 <HAL_TIM_Base_Start>
 	    	if((__HAL_TIM_GET_COUNTER(&htim3)==999)&&(count==1)){
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <CardFoundStart+0x110>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d110      	bne.n	8001e9a <CardFoundStart+0xc2>
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10d      	bne.n	8001e9a <CardFoundStart+0xc2>
 	    		HAL_TIM_Base_Stop(&htim3);
 8001e7e:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <CardFoundStart+0x110>)
 8001e80:	f003 fff2 	bl	8005e68 <HAL_TIM_Base_Stop>
 	    		HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <CardFoundStart+0x114>)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <CardFoundStart+0x118>)
 8001e8a:	f008 fc91 	bl	800a7b0 <osThreadNew>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <CardFoundStart+0x11c>)
 8001e92:	6013      	str	r3, [r2, #0]
 	    		vTaskDelete(NULL);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f009 fd5d 	bl	800b954 <vTaskDelete>
 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <CardFoundStart+0x10c>)
 8001e9e:	f000 fd87 	bl	80029b0 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0dd      	beq.n	8001e64 <CardFoundStart+0x8c>

 	    		}
 	    	}
 	    count++;
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3301      	adds	r3, #1
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
 	    if (count == 2) {
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d101      	bne.n	8001eb8 <CardFoundStart+0xe0>
 	    	count = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
 	    }
 	    OLED_SELECT(&found, count, OLED_NORESTORE);
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	b2d9      	uxtb	r1, r3
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb30 	bl	8001528 <OLED_SELECT>
 	    HAL_TIM_Base_Stop(&htim3);
 8001ec8:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <CardFoundStart+0x110>)
 8001eca:	f003 ffcd 	bl	8005e68 <HAL_TIM_Base_Stop>
 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001ece:	e7bd      	b.n	8001e4c <CardFoundStart+0x74>
 8001ed0:	0800ed08 	.word	0x0800ed08
 8001ed4:	0800ef90 	.word	0x0800ef90
 8001ed8:	0800ef84 	.word	0x0800ef84
 8001edc:	20000428 	.word	0x20000428
 8001ee0:	20000804 	.word	0x20000804
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	200007a8 	.word	0x200007a8
 8001eec:	0800f000 	.word	0x0800f000
 8001ef0:	08001d0d 	.word	0x08001d0d
 8001ef4:	200007fc 	.word	0x200007fc

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0a:	f000 faa7 	bl	800245c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40000c00 	.word	0x40000c00

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_MspInit+0x54>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_MspInit+0x54>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_MspInit+0x54>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_MspInit+0x54>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_MspInit+0x54>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_MspInit+0x54>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	210f      	movs	r1, #15
 8001f6a:	f06f 0001 	mvn.w	r0, #1
 8001f6e:	f000 fb71 	bl	8002654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_I2C_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <HAL_I2C_MspInit+0x8c>)
 8001fda:	f000 fb65 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40005400 	.word	0x40005400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <HAL_SPI_MspInit+0xe8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12c      	bne.n	800208c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_SPI_MspInit+0xec>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_SPI_MspInit+0xec>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_SPI_MspInit+0xec>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_SPI_MspInit+0xec>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_SPI_MspInit+0xec>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_SPI_MspInit+0xec>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800206a:	23a0      	movs	r3, #160	; 0xa0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207a:	2305      	movs	r3, #5
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	481e      	ldr	r0, [pc, #120]	; (8002100 <HAL_SPI_MspInit+0xf0>)
 8002086:	f000 fb0f 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800208a:	e031      	b.n	80020f0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_SPI_MspInit+0xf4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12c      	bne.n	80020f0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_SPI_MspInit+0xec>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_SPI_MspInit+0xec>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_SPI_MspInit+0xec>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_SPI_MspInit+0xec>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_SPI_MspInit+0xec>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_SPI_MspInit+0xec>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e0:	2305      	movs	r3, #5
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_SPI_MspInit+0xf8>)
 80020ec:	f000 fadc 	bl	80026a8 <HAL_GPIO_Init>
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013000 	.word	0x40013000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40003800 	.word	0x40003800
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d10e      	bne.n	800213c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800213a:	e012      	b.n	8002162 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_TIM_Base_MspInit+0x68>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10d      	bne.n	8002162 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_TIM_Base_MspInit+0x64>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40000400 	.word	0x40000400

08002178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d11d      	bne.n	80021d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b6:	2304      	movs	r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4619      	mov	r1, r3
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <HAL_TIM_MspPostInit+0x6c>)
 80021d2:	f000 fa69 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_InitTick+0xe4>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_InitTick+0xe4>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_InitTick+0xe4>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002214:	f107 0210 	add.w	r2, r7, #16
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fab6 	bl	8005790 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800222e:	f003 fa9b 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8002232:	6378      	str	r0, [r7, #52]	; 0x34
 8002234:	e004      	b.n	8002240 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002236:	f003 fa97 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 800223a:	4603      	mov	r3, r0
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <HAL_InitTick+0xe8>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0c9b      	lsrs	r3, r3, #18
 800224a:	3b01      	subs	r3, #1
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_InitTick+0xec>)
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_InitTick+0xf0>)
 8002252:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_InitTick+0xec>)
 8002256:	f240 32e7 	movw	r2, #999	; 0x3e7
 800225a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_InitTick+0xec>)
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <HAL_InitTick+0xec>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_InitTick+0xec>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_InitTick+0xec>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002274:	4817      	ldr	r0, [pc, #92]	; (80022d4 <HAL_InitTick+0xec>)
 8002276:	f003 fd4d 	bl	8005d14 <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11b      	bne.n	80022c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <HAL_InitTick+0xec>)
 800228a:	f003 fe15 	bl	8005eb8 <HAL_TIM_Base_Start_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800229c:	2032      	movs	r0, #50	; 0x32
 800229e:	f000 f9f5 	bl	800268c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d808      	bhi.n	80022ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	2032      	movs	r0, #50	; 0x32
 80022ae:	f000 f9d1 	bl	8002654 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_InitTick+0xf4>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e002      	b.n	80022c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3738      	adds	r7, #56	; 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	20000808 	.word	0x20000808
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	200004dc 	.word	0x200004dc

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM5_IRQHandler+0x10>)
 8002312:	f003 ffa1 	bl	8006258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000808 	.word	0x20000808

08002320 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <OTG_FS_IRQHandler+0x10>)
 8002326:	f001 fc84 	bl	8003c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200064a8 	.word	0x200064a8

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f00b fe62 	bl	800e02c <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	220c      	movs	r2, #12
 800236c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20010000 	.word	0x20010000
 8002394:	00000400 	.word	0x00000400
 8002398:	20000850 	.word	0x20000850
 800239c:	20006be8 	.word	0x20006be8

080023a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <SystemInit+0x20>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <SystemInit+0x20>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e0:	4c0b      	ldr	r4, [pc, #44]	; (8002410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ee:	f7ff ffd7 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f00b fe21 	bl	800e038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7ff f935 	bl	8001664 <main>
  bx  lr    
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	2000063c 	.word	0x2000063c
  ldr r2, =_sidata
 8002408:	0800f0bc 	.word	0x0800f0bc
  ldr r2, =_sbss
 800240c:	2000063c 	.word	0x2000063c
  ldr r4, =_ebss
 8002410:	20006be4 	.word	0x20006be4

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>
	...

08002418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_Init+0x40>)
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_Init+0x40>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x40>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 f8fc 	bl	800263e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	200f      	movs	r0, #15
 8002448:	f7ff fece 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fd6c 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023c00 	.word	0x40023c00

0800245c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x20>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x24>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_IncTick+0x24>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200004e0 	.word	0x200004e0
 8002480:	20000854 	.word	0x20000854

08002484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return uwTick;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_GetTick+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000854 	.word	0x20000854

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff ffee 	bl	8002484 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffde 	bl	8002484 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200004e0 	.word	0x200004e0

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff4c 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002666:	f7ff ff61 	bl	800252c <__NVIC_GetPriorityGrouping>
 800266a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7ff ffb1 	bl	80025d8 <NVIC_EncodePriority>
 8002676:	4602      	mov	r2, r0
 8002678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff80 	bl	8002584 <__NVIC_SetPriority>
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff54 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e159      	b.n	8002978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 8148 	bne.w	8002972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a2 	beq.w	8002972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <HAL_GPIO_Init+0x2e8>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a56      	ldr	r2, [pc, #344]	; (8002990 <HAL_GPIO_Init+0x2e8>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_GPIO_Init+0x2ec>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a49      	ldr	r2, [pc, #292]	; (8002998 <HAL_GPIO_Init+0x2f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x202>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a48      	ldr	r2, [pc, #288]	; (800299c <HAL_GPIO_Init+0x2f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x1fe>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_GPIO_Init+0x2f8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x1fa>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <HAL_GPIO_Init+0x2fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x1f6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a45      	ldr	r2, [pc, #276]	; (80029a8 <HAL_GPIO_Init+0x300>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x1f2>
 8002896:	2304      	movs	r3, #4
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x204>
 800289a:	2307      	movs	r3, #7
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x204>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028aa:	2300      	movs	r3, #0
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028bc:	4935      	ldr	r1, [pc, #212]	; (8002994 <HAL_GPIO_Init+0x2ec>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_GPIO_Init+0x304>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <HAL_GPIO_Init+0x304>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_GPIO_Init+0x304>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a24      	ldr	r2, [pc, #144]	; (80029ac <HAL_GPIO_Init+0x304>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_GPIO_Init+0x304>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002942:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <HAL_GPIO_Init+0x304>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_GPIO_Init+0x304>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_GPIO_Init+0x304>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	f67f aea2 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e12b      	b.n	8002c7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff faa0 	bl	8001f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	; 0x24
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a78:	f002 fe76 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a81      	ldr	r2, [pc, #516]	; (8002c88 <HAL_I2C_Init+0x274>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d807      	bhi.n	8002a98 <HAL_I2C_Init+0x84>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a80      	ldr	r2, [pc, #512]	; (8002c8c <HAL_I2C_Init+0x278>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e006      	b.n	8002aa6 <HAL_I2C_Init+0x92>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a7d      	ldr	r2, [pc, #500]	; (8002c90 <HAL_I2C_Init+0x27c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0e7      	b.n	8002c7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a78      	ldr	r2, [pc, #480]	; (8002c94 <HAL_I2C_Init+0x280>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_I2C_Init+0x274>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_I2C_Init+0xd4>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	e009      	b.n	8002afc <HAL_I2C_Init+0xe8>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	4a69      	ldr	r2, [pc, #420]	; (8002c98 <HAL_I2C_Init+0x284>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	3301      	adds	r3, #1
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	495c      	ldr	r1, [pc, #368]	; (8002c88 <HAL_I2C_Init+0x274>)
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	d819      	bhi.n	8002b50 <HAL_I2C_Init+0x13c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e59      	subs	r1, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2a:	1c59      	adds	r1, r3, #1
 8002b2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b30:	400b      	ands	r3, r1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_I2C_Init+0x138>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e59      	subs	r1, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	e051      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e04f      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <HAL_I2C_Init+0x168>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e012      	b.n	8002ba2 <HAL_I2C_Init+0x18e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Init+0x196>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e022      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_I2C_Init+0x1bc>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e58      	subs	r0, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	440b      	add	r3, r1
 8002bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bce:	e00f      	b.n	8002bf0 <HAL_I2C_Init+0x1dc>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	6809      	ldr	r1, [r1, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6911      	ldr	r1, [r2, #16]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	000186a0 	.word	0x000186a0
 8002c8c:	001e847f 	.word	0x001e847f
 8002c90:	003d08ff 	.word	0x003d08ff
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb6:	f7ff fbe5 	bl	8002484 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	f040 80d9 	bne.w	8002e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2319      	movs	r3, #25
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	496d      	ldr	r1, [pc, #436]	; (8002e88 <HAL_I2C_Mem_Write+0x1ec>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fc7f 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0cc      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0x56>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0c5      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d007      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2221      	movs	r2, #33	; 0x21
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a4d      	ldr	r2, [pc, #308]	; (8002e8c <HAL_I2C_Mem_Write+0x1f0>)
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5a:	88f8      	ldrh	r0, [r7, #6]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	8979      	ldrh	r1, [r7, #10]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4603      	mov	r3, r0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fab6 	bl	80032dc <I2C_RequestMemoryWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d052      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e081      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fd00 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e06b      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <HAL_I2C_Mem_Write+0x180>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1aa      	bne.n	8002d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fcec 	bl	8003806 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d107      	bne.n	8002e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e016      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	00100002 	.word	0x00100002
 8002e8c:	ffff0000 	.word	0xffff0000

08002e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	; 0x30
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7ff faeb 	bl	8002484 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	f040 8208 	bne.w	80032ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2319      	movs	r3, #25
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	497b      	ldr	r1, [pc, #492]	; (80030b4 <HAL_I2C_Mem_Read+0x224>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fb85 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e1fb      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Mem_Read+0x56>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e1f4      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d007      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2222      	movs	r2, #34	; 0x22
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	; (80030b8 <HAL_I2C_Mem_Read+0x228>)
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f4e:	88f8      	ldrh	r0, [r7, #6]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	8979      	ldrh	r1, [r7, #10]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa52 	bl	8003408 <I2C_RequestMemoryRead>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1b0      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e184      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d11b      	bne.n	8002fde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e164      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11b      	bne.n	800301e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	e144      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003034:	e138      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	2b03      	cmp	r3, #3
 800303c:	f200 80f1 	bhi.w	8003222 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	2b01      	cmp	r3, #1
 8003046:	d123      	bne.n	8003090 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fc1b 	bl	8003888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e139      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800308e:	e10b      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b02      	cmp	r3, #2
 8003096:	d14e      	bne.n	8003136 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2200      	movs	r2, #0
 80030a0:	4906      	ldr	r1, [pc, #24]	; (80030bc <HAL_I2C_Mem_Read+0x22c>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fa98 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e10e      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000
 80030bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003134:	e0b8      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	2200      	movs	r2, #0
 800313e:	4966      	ldr	r1, [pc, #408]	; (80032d8 <HAL_I2C_Mem_Read+0x448>)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fa49 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0bf      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	2200      	movs	r2, #0
 800319a:	494f      	ldr	r1, [pc, #316]	; (80032d8 <HAL_I2C_Mem_Read+0x448>)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fa1b 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e091      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003220:	e042      	b.n	80032a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fb2e 	bl	8003888 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e04c      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d118      	bne.n	80032a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f47f aec2 	bne.w	8003036 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010004 	.word	0x00010004

080032dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	460b      	mov	r3, r1
 80032f0:	813b      	strh	r3, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	2200      	movs	r2, #0
 800330e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f960 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332c:	d103      	bne.n	8003336 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e05f      	b.n	80033fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	492d      	ldr	r1, [pc, #180]	; (8003404 <I2C_RequestMemoryWrite+0x128>)
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f998 	bl	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04c      	b.n	80033fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fa02 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b04      	cmp	r3, #4
 800338c:	d107      	bne.n	800339e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02b      	b.n	80033fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	e021      	b.n	80033f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	6a39      	ldr	r1, [r7, #32]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f9dc 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d107      	bne.n	80033ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e005      	b.n	80033fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	00010002 	.word	0x00010002

08003408 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003430:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2200      	movs	r2, #0
 800344a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8c2 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	d103      	bne.n	8003472 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0aa      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003484:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	4952      	ldr	r1, [pc, #328]	; (80035d4 <I2C_RequestMemoryRead+0x1cc>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8fa 	bl	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e097      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f964 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d107      	bne.n	80034da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e076      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]
 80034ee:	e021      	b.n	8003534 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f93e 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e050      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352a:	893b      	ldrh	r3, [r7, #8]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6a39      	ldr	r1, [r7, #32]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f923 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2b04      	cmp	r3, #4
 800354a:	d107      	bne.n	800355c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e035      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f82b 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d103      	bne.n	80035a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e013      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	4906      	ldr	r1, [pc, #24]	; (80035d4 <I2C_RequestMemoryRead+0x1cc>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f863 	bl	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	00010002 	.word	0x00010002

080035d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	e025      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d021      	beq.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe ff47 	bl	8002484 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e023      	b.n	800367e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10d      	bne.n	800365c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	e00c      	b.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	429a      	cmp	r2, r3
 800367a:	d0b6      	beq.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003694:	e051      	b.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d123      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e046      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d021      	beq.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fec5 	bl	8002484 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e020      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e00b      	b.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d18d      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003790:	e02d      	b.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f8ce 	bl	8003934 <I2C_IsAcknowledgeFailed>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e02d      	b.n	80037fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d021      	beq.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7fe fe6b 	bl	8002484 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e007      	b.n	80037fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d1ca      	bne.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003812:	e02d      	b.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f88d 	bl	8003934 <I2C_IsAcknowledgeFailed>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e02d      	b.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d021      	beq.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382c:	f7fe fe2a 	bl	8002484 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b04      	cmp	r3, #4
 800387c:	d1ca      	bne.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003894:	e042      	b.n	800391c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d119      	bne.n	80038d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0210 	mvn.w	r2, #16
 80038ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e029      	b.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d8:	f7fe fdd4 	bl	8002484 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d116      	bne.n	800391c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e007      	b.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d1b5      	bne.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d11b      	bne.n	8003984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003994:	b08f      	sub	sp, #60	; 0x3c
 8003996:	af0a      	add	r7, sp, #40	; 0x28
 8003998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e10f      	b.n	8003bc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f00a f82a 	bl	800da18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fb55 	bl	8007092 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	687e      	ldr	r6, [r7, #4]
 80039f0:	466d      	mov	r5, sp
 80039f2:	f106 0410 	add.w	r4, r6, #16
 80039f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a06:	1d33      	adds	r3, r6, #4
 8003a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	f003 fa2c 	bl	8006e68 <USB_CoreInit>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0d0      	b.n	8003bc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fb43 	bl	80070b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	e04a      	b.n	8003aca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333d      	adds	r3, #61	; 0x3d
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	333c      	adds	r3, #60	; 0x3c
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	b298      	uxth	r0, r3
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3344      	adds	r3, #68	; 0x44
 8003a70:	4602      	mov	r2, r0
 8003a72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3340      	adds	r3, #64	; 0x40
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3348      	adds	r3, #72	; 0x48
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334c      	adds	r3, #76	; 0x4c
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3354      	adds	r3, #84	; 0x54
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3af      	bcc.n	8003a34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e044      	b.n	8003b64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	3301      	adds	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3b5      	bcc.n	8003ada <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	687e      	ldr	r6, [r7, #4]
 8003b76:	466d      	mov	r5, sp
 8003b78:	f106 0410 	add.w	r4, r6, #16
 8003b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b88:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8c:	1d33      	adds	r3, r6, #4
 8003b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	f003 fadb 	bl	800714c <USB_DevInit>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e00d      	b.n	8003bc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f004 fc2a 	bl	8008416 <USB_DevDisconnect>

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_PCD_Start+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e020      	b.n	8003c2a <HAL_PCD_Start+0x5e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d109      	bne.n	8003c0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fa2d 	bl	8007070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fbda 	bl	80083d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c32:	b590      	push	{r4, r7, lr}
 8003c34:	b08d      	sub	sp, #52	; 0x34
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f004 fc98 	bl	800857e <USB_GetMode>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 848a 	bne.w	800456a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 fbfc 	bl	8008458 <USB_ReadInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8480 	beq.w	8004568 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 fbe9 	bl	8008458 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d107      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f002 0202 	and.w	r2, r2, #2
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fbd7 	bl	8008458 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d161      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0210 	bic.w	r2, r2, #16
 8003cc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	0c5b      	lsrs	r3, r3, #17
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d124      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d035      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6a38      	ldr	r0, [r7, #32]
 8003d10:	f004 fa0e 	bl	8008130 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d20:	441a      	add	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d32:	441a      	add	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
 8003d38:	e016      	b.n	8003d68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	0c5b      	lsrs	r3, r3, #17
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d110      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6a38      	ldr	r0, [r7, #32]
 8003d52:	f004 f9ed 	bl	8008130 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d62:	441a      	add	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0210 	orr.w	r2, r2, #16
 8003d76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 fb6b 	bl	8008458 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d8c:	f040 80a7 	bne.w	8003ede <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fb70 	bl	800847e <USB_ReadDevAllOutEpInterrupt>
 8003d9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003da0:	e099      	b.n	8003ed6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 808e 	beq.w	8003eca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 fb94 	bl	80084e6 <USB_ReadDevOutEPInterrupt>
 8003dbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2301      	movs	r3, #1
 8003dda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fec2 	bl	8004b68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 ff98 	bl	8004d38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2310      	movs	r3, #16
 8003e22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d030      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d109      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d108      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f009 fec9 	bl	800dc10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af62 	bne.w	8003da2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 fab8 	bl	8008458 <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef2:	f040 80db 	bne.w	80040ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 fad9 	bl	80084b2 <USB_ReadDevAllInEpInterrupt>
 8003f00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f06:	e0cd      	b.n	80040a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80c2 	beq.w	8004098 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 faff 	bl	8008522 <USB_ReadDevInEPInterrupt>
 8003f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d057      	beq.n	8003fe0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69f9      	ldr	r1, [r7, #28]
 8003f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f50:	4013      	ands	r3, r2
 8003f52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d132      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334c      	adds	r3, #76	; 0x4c
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4403      	add	r3, r0
 8003f8e:	3348      	adds	r3, #72	; 0x48
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4419      	add	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4403      	add	r3, r0
 8003fa2:	334c      	adds	r3, #76	; 0x4c
 8003fa4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d113      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3354      	adds	r3, #84	; 0x54
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	f004 fb06 	bl	80085e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f009 fd9d 	bl	800db1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	461a      	mov	r2, r3
 8004014:	2310      	movs	r3, #16
 8004016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	461a      	mov	r2, r3
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800403e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004040:	6a38      	ldr	r0, [r7, #32]
 8004042:	f003 f9e7 	bl	8007414 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3338      	adds	r3, #56	; 0x38
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	78db      	ldrb	r3, [r3, #3]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f009 fde0 	bl	800dc34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	2302      	movs	r3, #2
 8004084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fcdb 	bl	8004a4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	3301      	adds	r3, #1
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f af2e 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 f9d1 	bl	8008458 <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c0:	d122      	bne.n	8004108 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d108      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040e8:	2100      	movs	r1, #0
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fec2 	bl	8004e74 <HAL_PCDEx_LPM_Callback>
 80040f0:	e002      	b.n	80040f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f009 fd7e 	bl	800dbf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 f9a3 	bl	8008458 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411c:	d112      	bne.n	8004144 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f009 fd3a 	bl	800dba8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004142:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 f985 	bl	8008458 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	f040 80b7 	bne.w	80042ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2110      	movs	r1, #16
 8004176:	4618      	mov	r0, r3
 8004178:	f003 f94c 	bl	8007414 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004180:	e046      	b.n	8004210 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	461a      	mov	r2, r3
 8004190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004194:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	3301      	adds	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	429a      	cmp	r2, r3
 8004218:	d3b3      	bcc.n	8004182 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800422c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f043 030b 	orr.w	r3, r3, #11
 800424a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425c:	f043 030b 	orr.w	r3, r3, #11
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	e015      	b.n	8004290 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004276:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800427a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428a:	f043 030b 	orr.w	r3, r3, #11
 800428e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b4:	461a      	mov	r2, r3
 80042b6:	f004 f993 	bl	80085e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 f8c2 	bl	8008458 <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	d124      	bne.n	800432a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 f958 	bl	800859a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 f90d 	bl	800750e <USB_GetDevSpeed>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681c      	ldr	r4, [r3, #0]
 8004300:	f001 fa26 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8004304:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	4620      	mov	r0, r4
 8004310:	f002 fe0c 	bl	8006f2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f009 fc28 	bl	800db6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004328:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f004 f892 	bl	8008458 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d10a      	bne.n	8004354 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f009 fc05 	bl	800db4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f002 0208 	and.w	r2, r2, #8
 8004352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f004 f87d 	bl	8008458 <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d122      	bne.n	80043ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004374:	2301      	movs	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	e014      	b.n	80043a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fb27 	bl	80049ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	3301      	adds	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3e5      	bcc.n	800437a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 f850 	bl	8008458 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c2:	d13b      	bne.n	800443c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c4:	2301      	movs	r3, #1
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	e02b      	b.n	8004422 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3340      	adds	r3, #64	; 0x40
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d115      	bne.n	800441c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da12      	bge.n	800441c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	333f      	adds	r3, #63	; 0x3f
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fae8 	bl	80049ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	3301      	adds	r3, #1
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	429a      	cmp	r2, r3
 800442a:	d3ce      	bcc.n	80043ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800443a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f004 f809 	bl	8008458 <USB_ReadInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004450:	d155      	bne.n	80044fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	e045      	b.n	80044e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d12e      	bne.n	80044de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004480:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004482:	2b00      	cmp	r3, #0
 8004484:	da2b      	bge.n	80044de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004492:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004496:	429a      	cmp	r2, r3
 8004498:	d121      	bne.n	80044de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044da:	6053      	str	r3, [r2, #4]
            break;
 80044dc:	e007      	b.n	80044ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	3301      	adds	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3b4      	bcc.n	8004458 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 ffa8 	bl	8008458 <USB_ReadInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d10a      	bne.n	800452a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f009 fb9f 	bl	800dc58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f003 ff92 	bl	8008458 <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d115      	bne.n	800456a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f009 fb8f 	bl	800dc74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	e000      	b.n	800456a <HAL_PCD_IRQHandler+0x938>
      return;
 8004568:	bf00      	nop
    }
  }
}
 800456a:	3734      	adds	r7, #52	; 0x34
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}

08004570 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_PCD_SetAddress+0x1a>
 8004586:	2302      	movs	r3, #2
 8004588:	e013      	b.n	80045b2 <HAL_PCD_SetAddress+0x42>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fef0 	bl	8008388 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	4608      	mov	r0, r1
 80045c4:	4611      	mov	r1, r2
 80045c6:	461a      	mov	r2, r3
 80045c8:	4603      	mov	r3, r0
 80045ca:	70fb      	strb	r3, [r7, #3]
 80045cc:	460b      	mov	r3, r1
 80045ce:	803b      	strh	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da0f      	bge.n	8004600 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	3338      	adds	r3, #56	; 0x38
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	3304      	adds	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	705a      	strb	r2, [r3, #1]
 80045fe:	e00f      	b.n	8004620 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	3304      	adds	r3, #4
 8004618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800462c:	883a      	ldrh	r2, [r7, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	78ba      	ldrb	r2, [r7, #2]
 8004636:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800464a:	78bb      	ldrb	r3, [r7, #2]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d102      	bne.n	8004656 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_PCD_EP_Open+0xaa>
 8004660:	2302      	movs	r3, #2
 8004662:	e00e      	b.n	8004682 <HAL_PCD_EP_Open+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	4618      	mov	r0, r3
 8004674:	f002 ff70 	bl	8007558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004680:	7afb      	ldrb	r3, [r7, #11]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da0f      	bge.n	80046be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3338      	adds	r3, #56	; 0x38
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	705a      	strb	r2, [r3, #1]
 80046bc:	e00f      	b.n	80046de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_PCD_EP_Close+0x6e>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e00e      	b.n	8004716 <HAL_PCD_EP_Close+0x8c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f002 ffae 	bl	8007668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	460b      	mov	r3, r1
 800472c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	3304      	adds	r3, #4
 8004746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004760:	7afb      	ldrb	r3, [r7, #11]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	b2da      	uxtb	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d102      	bne.n	800477a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	f003 fa8d 	bl	8007cb0 <USB_EP0StartXfer>
 8004796:	e008      	b.n	80047aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	f003 f83b 	bl	8007820 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 020f 	and.w	r2, r3, #15
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	3338      	adds	r3, #56	; 0x38
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2201      	movs	r2, #1
 8004822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	b2da      	uxtb	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	f003 fa2b 	bl	8007cb0 <USB_EP0StartXfer>
 800485a:	e008      	b.n	800486e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	f002 ffd9 	bl	8007820 <USB_EPStartXfer>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d901      	bls.n	8004896 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e050      	b.n	8004938 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800489a:	2b00      	cmp	r3, #0
 800489c:	da0f      	bge.n	80048be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3338      	adds	r3, #56	; 0x38
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	3304      	adds	r3, #4
 80048b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	705a      	strb	r2, [r3, #1]
 80048bc:	e00d      	b.n	80048da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	4413      	add	r3, r2
 80048d0:	3304      	adds	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_PCD_EP_SetStall+0x82>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e01e      	b.n	8004938 <HAL_PCD_EP_SetStall+0xc0>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	4618      	mov	r0, r3
 800490a:	f003 fc69 	bl	80081e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	b2d9      	uxtb	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004928:	461a      	mov	r2, r3
 800492a:	f003 fe59 	bl	80085e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 020f 	and.w	r2, r3, #15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d901      	bls.n	800495e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e042      	b.n	80049e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800495e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004962:	2b00      	cmp	r3, #0
 8004964:	da0f      	bge.n	8004986 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	3338      	adds	r3, #56	; 0x38
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	3304      	adds	r3, #4
 800497c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	705a      	strb	r2, [r3, #1]
 8004984:	e00f      	b.n	80049a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	4413      	add	r3, r2
 800499c:	3304      	adds	r3, #4
 800499e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_PCD_EP_ClrStall+0x86>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e00e      	b.n	80049e4 <HAL_PCD_EP_ClrStall+0xa4>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f003 fc71 	bl	80082bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da0c      	bge.n	8004a1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f003 020f 	and.w	r2, r3, #15
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	3338      	adds	r3, #56	; 0x38
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	3304      	adds	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e00c      	b.n	8004a34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 020f 	and.w	r2, r3, #15
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68f9      	ldr	r1, [r7, #12]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 fa90 	bl	8007f60 <USB_EPStopXfer>
 8004a40:	4603      	mov	r3, r0
 8004a42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a44:	7afb      	ldrb	r3, [r7, #11]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b08a      	sub	sp, #40	; 0x28
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3338      	adds	r3, #56	; 0x38
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	3304      	adds	r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d901      	bls.n	8004a86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06c      	b.n	8004b60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d902      	bls.n	8004aa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aaa:	e02b      	b.n	8004b04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d902      	bls.n	8004ac8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3303      	adds	r3, #3
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6919      	ldr	r1, [r3, #16]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	6978      	ldr	r0, [r7, #20]
 8004ae8:	f003 fae4 	bl	80080b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d809      	bhi.n	8004b2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d203      	bcs.n	8004b2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1be      	bne.n	8004aac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d811      	bhi.n	8004b5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2201      	movs	r2, #1
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	333c      	adds	r3, #60	; 0x3c
 8004b80:	3304      	adds	r3, #4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d17b      	bne.n	8004c96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4a61      	ldr	r2, [pc, #388]	; (8004d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	f240 80b9 	bls.w	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80b3 	beq.w	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd0:	6093      	str	r3, [r2, #8]
 8004bd2:	e0a7      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	2320      	movs	r3, #32
 8004bee:	6093      	str	r3, [r2, #8]
 8004bf0:	e098      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 8093 	bne.w	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	4a4b      	ldr	r2, [pc, #300]	; (8004d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d90f      	bls.n	8004c26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	6093      	str	r3, [r2, #8]
 8004c24:	e07e      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	0159      	lsls	r1, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	440b      	add	r3, r1
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d114      	bne.n	8004c88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c70:	461a      	mov	r2, r3
 8004c72:	2101      	movs	r1, #1
 8004c74:	f003 fcb4 	bl	80085e0 <USB_EP0_OutStart>
 8004c78:	e006      	b.n	8004c88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f008 ff28 	bl	800dae4 <HAL_PCD_DataOutStageCallback>
 8004c94:	e046      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d124      	bne.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	6093      	str	r3, [r2, #8]
 8004cbc:	e032      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f008 feff 	bl	800dae4 <HAL_PCD_DataOutStageCallback>
 8004ce6:	e01d      	b.n	8004d24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d114      	bne.n	8004d18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d10:	461a      	mov	r2, r3
 8004d12:	2100      	movs	r1, #0
 8004d14:	f003 fc64 	bl	80085e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f008 fee0 	bl	800dae4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	4f54300a 	.word	0x4f54300a
 8004d34:	4f54310a 	.word	0x4f54310a

08004d38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	333c      	adds	r3, #60	; 0x3c
 8004d50:	3304      	adds	r3, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d90e      	bls.n	8004d8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d009      	beq.n	8004d8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	461a      	mov	r2, r3
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f008 fe97 	bl	800dac0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d90c      	bls.n	8004db4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d108      	bne.n	8004db4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dac:	461a      	mov	r2, r3
 8004dae:	2101      	movs	r1, #1
 8004db0:	f003 fc16 	bl	80085e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	4f54300a 	.word	0x4f54300a

08004dc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004de2:	883b      	ldrh	r3, [r7, #0]
 8004de4:	0419      	lsls	r1, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
 8004df0:	e028      	b.n	8004e44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e00d      	b.n	8004e22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3340      	adds	r3, #64	; 0x40
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3ec      	bcc.n	8004e06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e2c:	883b      	ldrh	r3, [r7, #0]
 8004e2e:	0418      	lsls	r0, r3, #16
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	4302      	orrs	r2, r0
 8004e3c:	3340      	adds	r3, #64	; 0x40
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e267      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d075      	beq.n	8004f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eaa:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb6:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d112      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b82      	ldr	r3, [pc, #520]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ece:	d10b      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	4b7e      	ldr	r3, [pc, #504]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05b      	beq.n	8004f94 <HAL_RCC_OscConfig+0x108>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d157      	bne.n	8004f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e242      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCC_OscConfig+0x74>
 8004ef2:	4b76      	ldr	r3, [pc, #472]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a75      	ldr	r2, [pc, #468]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e01d      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x98>
 8004f0a:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6f      	ldr	r2, [pc, #444]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6c      	ldr	r2, [pc, #432]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0xb0>
 8004f24:	4b69      	ldr	r3, [pc, #420]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a68      	ldr	r2, [pc, #416]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b66      	ldr	r3, [pc, #408]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a65      	ldr	r2, [pc, #404]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d013      	beq.n	8004f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fd fa9e 	bl	8002484 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fd fa9a 	bl	8002484 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e207      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0xc0>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fa8a 	bl	8002484 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fd fa86 	bl	8002484 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e1f3      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f86:	4b51      	ldr	r3, [pc, #324]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0xe8>
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d063      	beq.n	800506a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d116      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e1c7      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4937      	ldr	r1, [pc, #220]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	e03a      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ffc:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <HAL_RCC_OscConfig+0x244>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fd fa3f 	bl	8002484 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500a:	f7fd fa3b 	bl	8002484 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1a8      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4925      	ldr	r1, [pc, #148]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503e:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <HAL_RCC_OscConfig+0x244>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fa1e 	bl	8002484 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd fa1a 	bl	8002484 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e187      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_RCC_OscConfig+0x248>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd f9fe 	bl	8002484 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7fd f9fa 	bl	8002484 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e167      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_OscConfig+0x240>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x200>
 80050aa:	e01b      	b.n	80050e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCC_OscConfig+0x248>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fd f9e7 	bl	8002484 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	e00e      	b.n	80050d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fd f9e3 	bl	8002484 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d907      	bls.n	80050d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e150      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	42470000 	.word	0x42470000
 80050d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b88      	ldr	r3, [pc, #544]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ea      	bne.n	80050ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8097 	beq.w	8005220 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b81      	ldr	r3, [pc, #516]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	4b7d      	ldr	r3, [pc, #500]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4a7c      	ldr	r2, [pc, #496]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	; 0x40
 8005112:	4b7a      	ldr	r3, [pc, #488]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b77      	ldr	r3, [pc, #476]	; (8005300 <HAL_RCC_OscConfig+0x474>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <HAL_RCC_OscConfig+0x474>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a73      	ldr	r2, [pc, #460]	; (8005300 <HAL_RCC_OscConfig+0x474>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fd f9a3 	bl	8002484 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fd f99f 	bl	8002484 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e10c      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <HAL_RCC_OscConfig+0x474>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x2ea>
 8005168:	4b64      	ldr	r3, [pc, #400]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a63      	ldr	r2, [pc, #396]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	e01c      	b.n	80051b0 <HAL_RCC_OscConfig+0x324>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b05      	cmp	r3, #5
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x30c>
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	4a5e      	ldr	r2, [pc, #376]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005184:	f043 0304 	orr.w	r3, r3, #4
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
 800518a:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a5b      	ldr	r2, [pc, #364]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0x324>
 8005198:	4b58      	ldr	r3, [pc, #352]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
 80051a4:	4b55      	ldr	r3, [pc, #340]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a54      	ldr	r2, [pc, #336]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fd f964 	bl	8002484 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fd f960 	bl	8002484 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0cb      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d6:	4b49      	ldr	r3, [pc, #292]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ee      	beq.n	80051c0 <HAL_RCC_OscConfig+0x334>
 80051e2:	e014      	b.n	800520e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e4:	f7fd f94e 	bl	8002484 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fd f94a 	bl	8002484 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0b5      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005202:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ee      	bne.n	80051ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	4a38      	ldr	r2, [pc, #224]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800521e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a1 	beq.w	800536c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b08      	cmp	r3, #8
 8005234:	d05c      	beq.n	80052f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d141      	bne.n	80052c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_OscConfig+0x478>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fd f91e 	bl	8002484 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524c:	f7fd f91a 	bl	8002484 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e087      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b27      	ldr	r3, [pc, #156]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	491b      	ldr	r1, [pc, #108]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_RCC_OscConfig+0x478>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529a:	f7fd f8f3 	bl	8002484 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a2:	f7fd f8ef 	bl	8002484 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e05c      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b4:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x416>
 80052c0:	e054      	b.n	800536c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCC_OscConfig+0x478>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fd f8dc 	bl	8002484 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fd f8d8 	bl	8002484 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e045      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_RCC_OscConfig+0x470>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x444>
 80052ee:	e03d      	b.n	800536c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e038      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
 80052fc:	40023800 	.word	0x40023800
 8005300:	40007000 	.word	0x40007000
 8005304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <HAL_RCC_OscConfig+0x4ec>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d028      	beq.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d121      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800533e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005340:	4293      	cmp	r3, r2
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cc      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d90c      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b65      	ldr	r3, [pc, #404]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0b8      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a58      	ldr	r2, [pc, #352]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e8:	4b53      	ldr	r3, [pc, #332]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a52      	ldr	r2, [pc, #328]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	494d      	ldr	r1, [pc, #308]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	4b47      	ldr	r3, [pc, #284]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d119      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d003      	beq.n	800543a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	2b03      	cmp	r3, #3
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e06f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544a:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e067      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	4b37      	ldr	r3, [pc, #220]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4934      	ldr	r1, [pc, #208]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800546c:	f7fd f80a 	bl	8002484 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7fd f806 	bl	8002484 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e04f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 020c 	and.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d1eb      	bne.n	8005474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d20c      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b22      	ldr	r3, [pc, #136]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e032      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4916      	ldr	r1, [pc, #88]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490e      	ldr	r1, [pc, #56]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005502:	f000 f821 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490a      	ldr	r1, [pc, #40]	; (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc fe60 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00
 8005538:	40023800 	.word	0x40023800
 800553c:	0800f060 	.word	0x0800f060
 8005540:	200004d8 	.word	0x200004d8
 8005544:	200004dc 	.word	0x200004dc

08005548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800554c:	b094      	sub	sp, #80	; 0x50
 800554e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
 8005554:	2300      	movs	r3, #0
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	2300      	movs	r3, #0
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005560:	4b79      	ldr	r3, [pc, #484]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d00d      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x40>
 800556c:	2b08      	cmp	r3, #8
 800556e:	f200 80e1 	bhi.w	8005734 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x34>
 8005576:	2b04      	cmp	r3, #4
 8005578:	d003      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x3a>
 800557a:	e0db      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4b73      	ldr	r3, [pc, #460]	; (800574c <HAL_RCC_GetSysClockFreq+0x204>)
 800557e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005580:	e0db      	b.n	800573a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005582:	4b72      	ldr	r3, [pc, #456]	; (800574c <HAL_RCC_GetSysClockFreq+0x204>)
 8005584:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005586:	e0d8      	b.n	800573a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005588:	4b6f      	ldr	r3, [pc, #444]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005592:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d063      	beq.n	8005666 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559e:	4b6a      	ldr	r3, [pc, #424]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	2200      	movs	r2, #0
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
 80055b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055ba:	4622      	mov	r2, r4
 80055bc:	462b      	mov	r3, r5
 80055be:	f04f 0000 	mov.w	r0, #0
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	0159      	lsls	r1, r3, #5
 80055c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055cc:	0150      	lsls	r0, r2, #5
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4621      	mov	r1, r4
 80055d4:	1a51      	subs	r1, r2, r1
 80055d6:	6139      	str	r1, [r7, #16]
 80055d8:	4629      	mov	r1, r5
 80055da:	eb63 0301 	sbc.w	r3, r3, r1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055ec:	4659      	mov	r1, fp
 80055ee:	018b      	lsls	r3, r1, #6
 80055f0:	4651      	mov	r1, sl
 80055f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055f6:	4651      	mov	r1, sl
 80055f8:	018a      	lsls	r2, r1, #6
 80055fa:	4651      	mov	r1, sl
 80055fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005600:	4659      	mov	r1, fp
 8005602:	eb63 0901 	sbc.w	r9, r3, r1
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561a:	4690      	mov	r8, r2
 800561c:	4699      	mov	r9, r3
 800561e:	4623      	mov	r3, r4
 8005620:	eb18 0303 	adds.w	r3, r8, r3
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	462b      	mov	r3, r5
 8005628:	eb49 0303 	adc.w	r3, r9, r3
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563a:	4629      	mov	r1, r5
 800563c:	028b      	lsls	r3, r1, #10
 800563e:	4621      	mov	r1, r4
 8005640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005644:	4621      	mov	r1, r4
 8005646:	028a      	lsls	r2, r1, #10
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564e:	2200      	movs	r2, #0
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
 8005652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005658:	f7fa fe1a 	bl	8000290 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4613      	mov	r3, r2
 8005662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005664:	e058      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005666:	4b38      	ldr	r3, [pc, #224]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	099b      	lsrs	r3, r3, #6
 800566c:	2200      	movs	r2, #0
 800566e:	4618      	mov	r0, r3
 8005670:	4611      	mov	r1, r2
 8005672:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005676:	623b      	str	r3, [r7, #32]
 8005678:	2300      	movs	r3, #0
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
 800567c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f04f 0100 	mov.w	r1, #0
 800568c:	0159      	lsls	r1, r3, #5
 800568e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005692:	0150      	lsls	r0, r2, #5
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4641      	mov	r1, r8
 800569a:	ebb2 0a01 	subs.w	sl, r2, r1
 800569e:	4649      	mov	r1, r9
 80056a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056b8:	ebb2 040a 	subs.w	r4, r2, sl
 80056bc:	eb63 050b 	sbc.w	r5, r3, fp
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	00eb      	lsls	r3, r5, #3
 80056ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ce:	00e2      	lsls	r2, r4, #3
 80056d0:	4614      	mov	r4, r2
 80056d2:	461d      	mov	r5, r3
 80056d4:	4643      	mov	r3, r8
 80056d6:	18e3      	adds	r3, r4, r3
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	464b      	mov	r3, r9
 80056dc:	eb45 0303 	adc.w	r3, r5, r3
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ee:	4629      	mov	r1, r5
 80056f0:	028b      	lsls	r3, r1, #10
 80056f2:	4621      	mov	r1, r4
 80056f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056f8:	4621      	mov	r1, r4
 80056fa:	028a      	lsls	r2, r1, #10
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	2200      	movs	r2, #0
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	61fa      	str	r2, [r7, #28]
 8005708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800570c:	f7fa fdc0 	bl	8000290 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_GetSysClockFreq+0x200>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	3301      	adds	r3, #1
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005732:	e002      	b.n	800573a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <HAL_RCC_GetSysClockFreq+0x204>)
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800573c:	4618      	mov	r0, r3
 800573e:	3750      	adds	r7, #80	; 0x50
 8005740:	46bd      	mov	sp, r7
 8005742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800
 800574c:	00f42400 	.word	0x00f42400

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <HAL_RCC_GetHCLKFreq+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200004d8 	.word	0x200004d8

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800576c:	f7ff fff0 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0a9b      	lsrs	r3, r3, #10
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	0800f070 	.word	0x0800f070

08005790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	220f      	movs	r2, #15
 800579e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <HAL_RCC_GetClockConfig+0x5c>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0203 	and.w	r2, r3, #3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <HAL_RCC_GetClockConfig+0x5c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <HAL_RCC_GetClockConfig+0x5c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCC_GetClockConfig+0x5c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_RCC_GetClockConfig+0x60>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0207 	and.w	r2, r3, #7
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	601a      	str	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40023c00 	.word	0x40023c00

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07b      	b.n	80058fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc fbe2 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	f003 0104 	and.w	r1, r3, #4
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f003 0210 	and.w	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_SPI_Transmit+0x22>
 8005924:	2302      	movs	r3, #2
 8005926:	e126      	b.n	8005b76 <HAL_SPI_Transmit+0x270>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005930:	f7fc fda8 	bl	8002484 <HAL_GetTick>
 8005934:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800594a:	e10b      	b.n	8005b64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x52>
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800595c:	e102      	b.n	8005b64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2203      	movs	r2, #3
 8005962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a4:	d10f      	bne.n	80059c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d007      	beq.n	80059e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d14b      	bne.n	8005a86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_SPI_Transmit+0xf6>
 80059f6:	8afb      	ldrh	r3, [r7, #22]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d13e      	bne.n	8005a7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a20:	e02b      	b.n	8005a7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d112      	bne.n	8005a56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	1c9a      	adds	r2, r3, #2
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a54:	e011      	b.n	8005a7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a56:	f7fc fd15 	bl	8002484 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d803      	bhi.n	8005a6e <HAL_SPI_Transmit+0x168>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d102      	bne.n	8005a74 <HAL_SPI_Transmit+0x16e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a78:	e074      	b.n	8005b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ce      	bne.n	8005a22 <HAL_SPI_Transmit+0x11c>
 8005a84:	e04c      	b.n	8005b20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Transmit+0x18e>
 8005a8e:	8afb      	ldrh	r3, [r7, #22]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d140      	bne.n	8005b16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	7812      	ldrb	r2, [r2, #0]
 8005aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aba:	e02c      	b.n	8005b16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d113      	bne.n	8005af2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8005af0:	e011      	b.n	8005b16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af2:	f7fc fcc7 	bl	8002484 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d803      	bhi.n	8005b0a <HAL_SPI_Transmit+0x204>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d102      	bne.n	8005b10 <HAL_SPI_Transmit+0x20a>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b14:	e026      	b.n	8005b64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1cd      	bne.n	8005abc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f8b3 	bl	8005c90 <SPI_EndRxTxTransaction>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e000      	b.n	8005b64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b90:	f7fc fc78 	bl	8002484 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba0:	f7fc fc70 	bl	8002484 <HAL_GetTick>
 8005ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	015b      	lsls	r3, r3, #5
 8005bac:	0d1b      	lsrs	r3, r3, #20
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bb6:	e054      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d050      	beq.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc0:	f7fc fc60 	bl	8002484 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d902      	bls.n	8005bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13d      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d111      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	d004      	beq.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d107      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d10f      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e017      	b.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d19b      	bne.n	8005bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200004d8 	.word	0x200004d8

08005c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <SPI_EndRxTxTransaction+0x7c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <SPI_EndRxTxTransaction+0x80>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	0d5b      	lsrs	r3, r3, #21
 8005ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cba:	d112      	bne.n	8005ce2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff ff5a 	bl	8005b80 <SPI_WaitFlagStateUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e00f      	b.n	8005d02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d0f2      	beq.n	8005ce2 <SPI_EndRxTxTransaction+0x52>
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cfe:	bf00      	nop
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200004d8 	.word	0x200004d8
 8005d10:	165e9f81 	.word	0x165e9f81

08005d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e041      	b.n	8005daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fc f9e6 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f000 fd3a 	bl	80067cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e03c      	b.n	8005e46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <HAL_TIM_Base_Start+0xa0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_TIM_Base_Start+0x5c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d013      	beq.n	8005e10 <HAL_TIM_Base_Start+0x5c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_TIM_Base_Start+0xa4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_TIM_Base_Start+0x5c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_TIM_Base_Start+0xa8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_TIM_Base_Start+0x5c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_TIM_Base_Start+0xac>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIM_Base_Start+0x5c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_TIM_Base_Start+0xb0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d111      	bne.n	8005e34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d010      	beq.n	8005e44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e32:	e007      	b.n	8005e44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40014000 	.word	0x40014000

08005e68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10f      	bne.n	8005ea0 <HAL_TIM_Base_Stop+0x38>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	f240 4344 	movw	r3, #1092	; 0x444
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <HAL_TIM_Base_Stop+0x38>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d001      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e044      	b.n	8005f5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_TIM_Base_Start_IT+0xb0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x6c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efa:	d013      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x6c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <HAL_TIM_Base_Start_IT+0xb4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x6c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x6c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x6c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d111      	bne.n	8005f48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b06      	cmp	r3, #6
 8005f34:	d010      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0201 	orr.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f46:	e007      	b.n	8005f58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	40014000 	.word	0x40014000

08005f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e041      	b.n	8006012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f839 	bl	800601a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f000 fc06 	bl	80067cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_TIM_PWM_Start+0x24>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e022      	b.n	800609a <HAL_TIM_PWM_Start+0x6a>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d109      	bne.n	800606e <HAL_TIM_PWM_Start+0x3e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e015      	b.n	800609a <HAL_TIM_PWM_Start+0x6a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d109      	bne.n	8006088 <HAL_TIM_PWM_Start+0x58>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e008      	b.n	800609a <HAL_TIM_PWM_Start+0x6a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e068      	b.n	8006174 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x82>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b0:	e013      	b.n	80060da <HAL_TIM_PWM_Start+0xaa>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d104      	bne.n	80060c2 <HAL_TIM_PWM_Start+0x92>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060c0:	e00b      	b.n	80060da <HAL_TIM_PWM_Start+0xaa>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d0:	e003      	b.n	80060da <HAL_TIM_PWM_Start+0xaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fe18 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_TIM_PWM_Start+0x14c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d107      	bne.n	8006102 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1d      	ldr	r2, [pc, #116]	; (800617c <HAL_TIM_PWM_Start+0x14c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIM_PWM_Start+0x10e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d013      	beq.n	800613e <HAL_TIM_PWM_Start+0x10e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a19      	ldr	r2, [pc, #100]	; (8006180 <HAL_TIM_PWM_Start+0x150>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_TIM_PWM_Start+0x10e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a17      	ldr	r2, [pc, #92]	; (8006184 <HAL_TIM_PWM_Start+0x154>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIM_PWM_Start+0x10e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <HAL_TIM_PWM_Start+0x158>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIM_PWM_Start+0x10e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <HAL_TIM_PWM_Start+0x15c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d111      	bne.n	8006162 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b06      	cmp	r3, #6
 800614e:	d010      	beq.n	8006172 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	e007      	b.n	8006172 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40014000 	.word	0x40014000

08006190 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fdb8 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <HAL_TIM_PWM_Stop+0xc4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d117      	bne.n	80061e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a1a      	ldr	r2, [r3, #32]
 80061b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80061bc:	4013      	ands	r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10f      	bne.n	80061e2 <HAL_TIM_PWM_Stop+0x52>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	f240 4344 	movw	r3, #1092	; 0x444
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_TIM_PWM_Stop+0x52>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <HAL_TIM_PWM_Stop+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	f240 4344 	movw	r3, #1092	; 0x444
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d107      	bne.n	8006212 <HAL_TIM_PWM_Stop+0x82>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Stop+0x92>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006220:	e013      	b.n	800624a <HAL_TIM_PWM_Stop+0xba>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Stop+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	e00b      	b.n	800624a <HAL_TIM_PWM_Stop+0xba>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PWM_Stop+0xb2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006240:	e003      	b.n	800624a <HAL_TIM_PWM_Stop+0xba>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40010000 	.word	0x40010000

08006258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0202 	mvn.w	r2, #2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa77 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa69 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa7a 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0204 	mvn.w	r2, #4
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa4d 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa3f 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa50 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0208 	mvn.w	r2, #8
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2204      	movs	r2, #4
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa23 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa15 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa26 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b10      	cmp	r3, #16
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0210 	mvn.w	r2, #16
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9f9 	bl	800678e <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9eb 	bl	800677a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9fc 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0201 	mvn.w	r2, #1
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fd8e 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd26 	bl	8006e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9c1 	bl	80067b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b20      	cmp	r3, #32
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b20      	cmp	r3, #32
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0220 	mvn.w	r2, #32
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fcf0 	bl	8006e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006482:	2302      	movs	r3, #2
 8006484:	e0ae      	b.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	f200 809f 	bhi.w	80065d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080065d5 	.word	0x080065d5
 80064a4:	080065d5 	.word	0x080065d5
 80064a8:	080065d5 	.word	0x080065d5
 80064ac:	08006511 	.word	0x08006511
 80064b0:	080065d5 	.word	0x080065d5
 80064b4:	080065d5 	.word	0x080065d5
 80064b8:	080065d5 	.word	0x080065d5
 80064bc:	08006553 	.word	0x08006553
 80064c0:	080065d5 	.word	0x080065d5
 80064c4:	080065d5 	.word	0x080065d5
 80064c8:	080065d5 	.word	0x080065d5
 80064cc:	08006593 	.word	0x08006593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f9f8 	bl	80068cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0208 	orr.w	r2, r2, #8
 80064ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0204 	bic.w	r2, r2, #4
 80064fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6999      	ldr	r1, [r3, #24]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
      break;
 800650e:	e064      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fa3e 	bl	8006998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
      break;
 8006550:	e043      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fa89 	bl	8006a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0208 	orr.w	r2, r2, #8
 800656c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0204 	bic.w	r2, r2, #4
 800657c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69d9      	ldr	r1, [r3, #28]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	61da      	str	r2, [r3, #28]
      break;
 8006590:	e023      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fad3 	bl	8006b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	021a      	lsls	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	61da      	str	r2, [r3, #28]
      break;
 80065d2:	e002      	b.n	80065da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x1c>
 8006604:	2302      	movs	r3, #2
 8006606:	e0b4      	b.n	8006772 <HAL_TIM_ConfigClockSource+0x186>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006640:	d03e      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	f200 8087 	bhi.w	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	f000 8086 	beq.w	800675e <HAL_TIM_ConfigClockSource+0x172>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d87f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d01a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xa6>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d87b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b60      	cmp	r3, #96	; 0x60
 8006662:	d050      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x11a>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d877      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d03c      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xfa>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d873      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d058      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x13a>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d86f      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d064      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d86b      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d060      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d867      	bhi.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05c      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d05a      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	e062      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f000 fb19 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	609a      	str	r2, [r3, #8]
      break;
 80066be:	e04f      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 fb02 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e2:	609a      	str	r2, [r3, #8]
      break;
 80066e4:	e03c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 fa76 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2150      	movs	r1, #80	; 0x50
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 facf 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006704:	e02c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6859      	ldr	r1, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	461a      	mov	r2, r3
 8006714:	f000 fa95 	bl	8006c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2160      	movs	r1, #96	; 0x60
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fabf 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006724:	e01c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	461a      	mov	r2, r3
 8006734:	f000 fa56 	bl	8006be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	4618      	mov	r0, r3
 8006740:	f000 faaf 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006744:	e00c      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f000 faa6 	bl	8006ca2 <TIM_ITRx_SetConfig>
      break;
 8006756:	e003      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800675e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a34      	ldr	r2, [pc, #208]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a31      	ldr	r2, [pc, #196]	; (80068b4 <TIM_Base_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <TIM_Base_SetConfig+0xec>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0x38>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <TIM_Base_SetConfig+0xf0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01b      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006824:	d017      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <TIM_Base_SetConfig+0xe8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <TIM_Base_SetConfig+0xec>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a20      	ldr	r2, [pc, #128]	; (80068bc <TIM_Base_SetConfig+0xf0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <TIM_Base_SetConfig+0xf4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <TIM_Base_SetConfig+0xf8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <TIM_Base_SetConfig+0xfc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <TIM_Base_SetConfig+0xe4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0302 	bic.w	r3, r3, #2
 8006914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <TIM_OC1_SetConfig+0xc8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10c      	bne.n	8006942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0308 	bic.w	r3, r3, #8
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a13      	ldr	r2, [pc, #76]	; (8006994 <TIM_OC1_SetConfig+0xc8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d111      	bne.n	800696e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40010000 	.word	0x40010000

08006998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0320 	bic.w	r3, r3, #32
 80069e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <TIM_OC2_SetConfig+0xd4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10d      	bne.n	8006a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <TIM_OC2_SetConfig+0xd4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d113      	bne.n	8006a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000

08006a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1d      	ldr	r2, [pc, #116]	; (8006b40 <TIM_OC3_SetConfig+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d10d      	bne.n	8006aea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a14      	ldr	r2, [pc, #80]	; (8006b40 <TIM_OC3_SetConfig+0xd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d113      	bne.n	8006b1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40010000 	.word	0x40010000

08006b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <TIM_OC4_SetConfig+0x9c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d109      	bne.n	8006bb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	621a      	str	r2, [r3, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40010000 	.word	0x40010000

08006be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 030a 	bic.w	r3, r3, #10
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f043 0307 	orr.w	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e050      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d013      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40014000 	.word	0x40014000

08006e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e68:	b084      	sub	sp, #16
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	f107 001c 	add.w	r0, r7, #28
 8006e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d122      	bne.n	8006ec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fbee 	bl	800869c <USB_CoreReset>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
 8006ec4:	e01a      	b.n	8006efc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fbe2 	bl	800869c <USB_CoreReset>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
 8006eee:	e005      	b.n	8006efc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d10b      	bne.n	8006f1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f043 0206 	orr.w	r2, r3, #6
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f26:	b004      	add	sp, #16
 8006f28:	4770      	bx	lr
	...

08006f2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d165      	bne.n	800700c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4a41      	ldr	r2, [pc, #260]	; (8007048 <USB_SetTurnaroundTime+0x11c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d906      	bls.n	8006f56 <USB_SetTurnaroundTime+0x2a>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4a40      	ldr	r2, [pc, #256]	; (800704c <USB_SetTurnaroundTime+0x120>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d202      	bcs.n	8006f56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f50:	230f      	movs	r3, #15
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e062      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4a3c      	ldr	r2, [pc, #240]	; (800704c <USB_SetTurnaroundTime+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d306      	bcc.n	8006f6c <USB_SetTurnaroundTime+0x40>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4a3b      	ldr	r2, [pc, #236]	; (8007050 <USB_SetTurnaroundTime+0x124>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d202      	bcs.n	8006f6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f66:	230e      	movs	r3, #14
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e057      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a38      	ldr	r2, [pc, #224]	; (8007050 <USB_SetTurnaroundTime+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d306      	bcc.n	8006f82 <USB_SetTurnaroundTime+0x56>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a37      	ldr	r2, [pc, #220]	; (8007054 <USB_SetTurnaroundTime+0x128>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d202      	bcs.n	8006f82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f7c:	230d      	movs	r3, #13
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e04c      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4a33      	ldr	r2, [pc, #204]	; (8007054 <USB_SetTurnaroundTime+0x128>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d306      	bcc.n	8006f98 <USB_SetTurnaroundTime+0x6c>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4a32      	ldr	r2, [pc, #200]	; (8007058 <USB_SetTurnaroundTime+0x12c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d802      	bhi.n	8006f98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f92:	230c      	movs	r3, #12
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e041      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	; (8007058 <USB_SetTurnaroundTime+0x12c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d906      	bls.n	8006fae <USB_SetTurnaroundTime+0x82>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	; (800705c <USB_SetTurnaroundTime+0x130>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d802      	bhi.n	8006fae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fa8:	230b      	movs	r3, #11
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e036      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <USB_SetTurnaroundTime+0x130>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d906      	bls.n	8006fc4 <USB_SetTurnaroundTime+0x98>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <USB_SetTurnaroundTime+0x134>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d802      	bhi.n	8006fc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fbe:	230a      	movs	r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e02b      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4a26      	ldr	r2, [pc, #152]	; (8007060 <USB_SetTurnaroundTime+0x134>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d906      	bls.n	8006fda <USB_SetTurnaroundTime+0xae>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a25      	ldr	r2, [pc, #148]	; (8007064 <USB_SetTurnaroundTime+0x138>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d202      	bcs.n	8006fda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd4:	2309      	movs	r3, #9
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e020      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a21      	ldr	r2, [pc, #132]	; (8007064 <USB_SetTurnaroundTime+0x138>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d306      	bcc.n	8006ff0 <USB_SetTurnaroundTime+0xc4>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	; (8007068 <USB_SetTurnaroundTime+0x13c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d802      	bhi.n	8006ff0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fea:	2308      	movs	r3, #8
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e015      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <USB_SetTurnaroundTime+0x13c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d906      	bls.n	8007006 <USB_SetTurnaroundTime+0xda>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a1c      	ldr	r2, [pc, #112]	; (800706c <USB_SetTurnaroundTime+0x140>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d202      	bcs.n	8007006 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007000:	2307      	movs	r3, #7
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e00a      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007006:	2306      	movs	r3, #6
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e007      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007012:	2309      	movs	r3, #9
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e001      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007018:	2309      	movs	r3, #9
 800701a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	029b      	lsls	r3, r3, #10
 8007030:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	00d8acbf 	.word	0x00d8acbf
 800704c:	00e4e1c0 	.word	0x00e4e1c0
 8007050:	00f42400 	.word	0x00f42400
 8007054:	01067380 	.word	0x01067380
 8007058:	011a499f 	.word	0x011a499f
 800705c:	01312cff 	.word	0x01312cff
 8007060:	014ca43f 	.word	0x014ca43f
 8007064:	016e3600 	.word	0x016e3600
 8007068:	01a6ab1f 	.word	0x01a6ab1f
 800706c:	01e84800 	.word	0x01e84800

08007070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d115      	bne.n	8007102 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070e2:	2001      	movs	r0, #1
 80070e4:	f7fb f9da 	bl	800249c <HAL_Delay>
      ms++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 fa45 	bl	800857e <USB_GetMode>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d01e      	beq.n	8007138 <USB_SetCurrentMode+0x84>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b31      	cmp	r3, #49	; 0x31
 80070fe:	d9f0      	bls.n	80070e2 <USB_SetCurrentMode+0x2e>
 8007100:	e01a      	b.n	8007138 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d115      	bne.n	8007134 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007114:	2001      	movs	r0, #1
 8007116:	f7fb f9c1 	bl	800249c <HAL_Delay>
      ms++;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fa2c 	bl	800857e <USB_GetMode>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <USB_SetCurrentMode+0x84>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b31      	cmp	r3, #49	; 0x31
 8007130:	d9f0      	bls.n	8007114 <USB_SetCurrentMode+0x60>
 8007132:	e001      	b.n	8007138 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e005      	b.n	8007144 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b32      	cmp	r3, #50	; 0x32
 800713c:	d101      	bne.n	8007142 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800714c:	b084      	sub	sp, #16
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800715a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	e009      	b.n	8007180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3340      	adds	r3, #64	; 0x40
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3301      	adds	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b0e      	cmp	r3, #14
 8007184:	d9f2      	bls.n	800716c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d11c      	bne.n	80071c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719a:	f043 0302 	orr.w	r3, r3, #2
 800719e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
 80071c4:	e00b      	b.n	80071de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f0:	4619      	mov	r1, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	461a      	mov	r2, r3
 80071fa:	680b      	ldr	r3, [r1, #0]
 80071fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	2b01      	cmp	r3, #1
 8007202:	d10c      	bne.n	800721e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800720a:	2100      	movs	r1, #0
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f965 	bl	80074dc <USB_SetDevSpeed>
 8007212:	e008      	b.n	8007226 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007214:	2101      	movs	r1, #1
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f960 	bl	80074dc <USB_SetDevSpeed>
 800721c:	e003      	b.n	8007226 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800721e:	2103      	movs	r1, #3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f95b 	bl	80074dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007226:	2110      	movs	r1, #16
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8f3 	bl	8007414 <USB_FlushTxFifo>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f91f 	bl	800747c <USB_FlushRxFifo>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	461a      	mov	r2, r3
 8007250:	2300      	movs	r3, #0
 8007252:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	461a      	mov	r2, r3
 800725c:	2300      	movs	r3, #0
 800725e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	e043      	b.n	80072fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007288:	d118      	bne.n	80072bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	461a      	mov	r2, r3
 800729e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	e013      	b.n	80072ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	461a      	mov	r2, r3
 80072b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e008      	b.n	80072ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	461a      	mov	r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	461a      	mov	r2, r3
 80072ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	3301      	adds	r3, #1
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3b7      	bcc.n	8007272 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e043      	b.n	8007390 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731e:	d118      	bne.n	8007352 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	461a      	mov	r2, r3
 8007334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e013      	b.n	8007364 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007348:	461a      	mov	r2, r3
 800734a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e008      	b.n	8007364 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	461a      	mov	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3301      	adds	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d3b7      	bcc.n	8007308 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f043 0210 	orr.w	r2, r3, #16
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <USB_DevInit+0x2c4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d107      	bne.n	8007400 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800740c:	b004      	add	sp, #16
 800740e:	4770      	bx	lr
 8007410:	803c3800 	.word	0x803c3800

08007414 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4a13      	ldr	r2, [pc, #76]	; (8007478 <USB_FlushTxFifo+0x64>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d901      	bls.n	8007434 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e01b      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	daf2      	bge.n	8007422 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	019b      	lsls	r3, r3, #6
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a08      	ldr	r2, [pc, #32]	; (8007478 <USB_FlushTxFifo+0x64>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e006      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b20      	cmp	r3, #32
 8007468:	d0f0      	beq.n	800744c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	00030d40 	.word	0x00030d40

0800747c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a11      	ldr	r2, [pc, #68]	; (80074d8 <USB_FlushRxFifo+0x5c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e018      	b.n	80074cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	daf2      	bge.n	8007488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2210      	movs	r2, #16
 80074aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <USB_FlushRxFifo+0x5c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e006      	b.n	80074cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d0f0      	beq.n	80074ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	00030d40 	.word	0x00030d40

080074dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
 8007532:	e00a      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d002      	beq.n	8007540 <USB_GetDevSpeed+0x32>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d102      	bne.n	8007546 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007540:	2302      	movs	r3, #2
 8007542:	75fb      	strb	r3, [r7, #23]
 8007544:	e001      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007546:	230f      	movs	r3, #15
 8007548:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d13a      	bne.n	80075ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2101      	movs	r1, #1
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	68f9      	ldr	r1, [r7, #12]
 800758e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007592:	4313      	orrs	r3, r2
 8007594:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d155      	bne.n	8007658 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	059b      	lsls	r3, r3, #22
 80075ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d0:	4313      	orrs	r3, r2
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e036      	b.n	8007658 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f0:	69da      	ldr	r2, [r3, #28]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	2101      	movs	r1, #1
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007608:	4313      	orrs	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11a      	bne.n	8007658 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800763e:	430b      	orrs	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007656:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d161      	bne.n	8007748 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d11f      	bne.n	80076dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	43db      	mvns	r3, r3
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fc:	4013      	ands	r3, r2
 80076fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007720:	4013      	ands	r3, r2
 8007722:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	0159      	lsls	r1, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	440b      	add	r3, r1
 800773a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773e:	4619      	mov	r1, r3
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <USB_DeactivateEndpoint+0x1b0>)
 8007742:	4013      	ands	r3, r2
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	e060      	b.n	800780a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800775a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775e:	d11f      	bne.n	80077a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	440a      	add	r2, r1
 8007796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	2101      	movs	r1, #1
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	43db      	mvns	r3, r3
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c0:	4013      	ands	r3, r2
 80077c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	43db      	mvns	r3, r3
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e4:	4013      	ands	r3, r2
 80077e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	0159      	lsls	r1, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	4619      	mov	r1, r3
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <USB_DeactivateEndpoint+0x1b4>)
 8007806:	4013      	ands	r3, r2
 8007808:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	ec337800 	.word	0xec337800
 800781c:	eff37800 	.word	0xeff37800

08007820 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 815c 	bne.w	8007afa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d132      	bne.n	80078b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800786c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a8:	0cdb      	lsrs	r3, r3, #19
 80078aa:	04db      	lsls	r3, r3, #19
 80078ac:	6113      	str	r3, [r2, #16]
 80078ae:	e074      	b.n	800799a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ca:	0cdb      	lsrs	r3, r3, #19
 80078cc:	04db      	lsls	r3, r3, #19
 80078ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6999      	ldr	r1, [r3, #24]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	440b      	add	r3, r1
 800790c:	1e59      	subs	r1, r3, #1
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	fbb1 f3f3 	udiv	r3, r1, r3
 8007916:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007918:	4b9d      	ldr	r3, [pc, #628]	; (8007b90 <USB_EPStartXfer+0x370>)
 800791a:	400b      	ands	r3, r1
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	0148      	lsls	r0, r1, #5
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	4401      	add	r1, r0
 8007924:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007928:	4313      	orrs	r3, r2
 800792a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	0148      	lsls	r0, r1, #5
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	4401      	add	r1, r0
 800794a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d11f      	bne.n	800799a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007974:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007978:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	440a      	add	r2, r1
 8007990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007998:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d14b      	bne.n	8007a38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b4:	461a      	mov	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d128      	bne.n	8007a16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d110      	bne.n	80079f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e00f      	b.n	8007a16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e133      	b.n	8007ca0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d015      	beq.n	8007a8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 811b 	beq.w	8007ca0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a80:	69f9      	ldr	r1, [r7, #28]
 8007a82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a86:	4313      	orrs	r3, r2
 8007a88:	634b      	str	r3, [r1, #52]	; 0x34
 8007a8a:	e109      	b.n	8007ca0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d110      	bne.n	8007abe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e00f      	b.n	8007ade <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007adc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6919      	ldr	r1, [r3, #16]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	b298      	uxth	r0, r3
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4603      	mov	r3, r0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fade 	bl	80080b4 <USB_WritePacket>
 8007af8:	e0d2      	b.n	8007ca0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	0cdb      	lsrs	r3, r3, #19
 8007b16:	04db      	lsls	r3, r3, #19
 8007b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d126      	bne.n	8007b94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b5c:	69b9      	ldr	r1, [r7, #24]
 8007b5e:	0148      	lsls	r0, r1, #5
 8007b60:	69f9      	ldr	r1, [r7, #28]
 8007b62:	4401      	add	r1, r0
 8007b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b8a:	6113      	str	r3, [r2, #16]
 8007b8c:	e03a      	b.n	8007c04 <USB_EPStartXfer+0x3e4>
 8007b8e:	bf00      	nop
 8007b90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	8afa      	ldrh	r2, [r7, #22]
 8007bb0:	fb03 f202 	mul.w	r2, r3, r2
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	8afb      	ldrh	r3, [r7, #22]
 8007bc8:	04d9      	lsls	r1, r3, #19
 8007bca:	4b38      	ldr	r3, [pc, #224]	; (8007cac <USB_EPStartXfer+0x48c>)
 8007bcc:	400b      	ands	r3, r1
 8007bce:	69b9      	ldr	r1, [r7, #24]
 8007bd0:	0148      	lsls	r0, r1, #5
 8007bd2:	69f9      	ldr	r1, [r7, #28]
 8007bd4:	4401      	add	r1, r0
 8007bd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	0148      	lsls	r0, r1, #5
 8007bf8:	69f9      	ldr	r1, [r7, #28]
 8007bfa:	4401      	add	r1, r0
 8007bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c00:	4313      	orrs	r3, r2
 8007c02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10d      	bne.n	8007c26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6919      	ldr	r1, [r3, #16]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c22:	460a      	mov	r2, r1
 8007c24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	791b      	ldrb	r3, [r3, #4]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d128      	bne.n	8007c80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d110      	bne.n	8007c60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	e00f      	b.n	8007c80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	1ff80000 	.word	0x1ff80000

08007cb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	f040 80ce 	bne.w	8007e6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d132      	bne.n	8007d40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d38:	0cdb      	lsrs	r3, r3, #19
 8007d3a:	04db      	lsls	r3, r3, #19
 8007d3c:	6113      	str	r3, [r2, #16]
 8007d3e:	e04e      	b.n	8007dde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5a:	0cdb      	lsrs	r3, r3, #19
 8007d5c:	04db      	lsls	r3, r3, #19
 8007d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	699a      	ldr	r2, [r3, #24]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d903      	bls.n	8007d98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dce:	6939      	ldr	r1, [r7, #16]
 8007dd0:	0148      	lsls	r0, r1, #5
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	4401      	add	r1, r0
 8007dd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d11e      	bne.n	8007e22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	e097      	b.n	8007f52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8083 	beq.w	8007f52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e62:	6979      	ldr	r1, [r7, #20]
 8007e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	634b      	str	r3, [r1, #52]	; 0x34
 8007e6c:	e071      	b.n	8007f52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	0cdb      	lsrs	r3, r3, #19
 8007e8a:	04db      	lsls	r3, r3, #19
 8007e8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f00:	6939      	ldr	r1, [r7, #16]
 8007f02:	0148      	lsls	r0, r1, #5
 8007f04:	6979      	ldr	r1, [r7, #20]
 8007f06:	4401      	add	r1, r0
 8007f08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10d      	bne.n	8007f32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6919      	ldr	r1, [r3, #16]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	460a      	mov	r2, r1
 8007f30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d14a      	bne.n	8008014 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f96:	f040 8086 	bne.w	80080a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	7812      	ldrb	r2, [r2, #0]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	7812      	ldrb	r2, [r2, #0]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d902      	bls.n	8007ff8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff6:	e056      	b.n	80080a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800800c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008010:	d0e7      	beq.n	8007fe2 <USB_EPStopXfer+0x82>
 8008012:	e048      	b.n	80080a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d13b      	bne.n	80080a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008050:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	7812      	ldrb	r2, [r2, #0]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008082:	4293      	cmp	r3, r2
 8008084:	d902      	bls.n	800808c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
          break;
 800808a:	e00c      	b.n	80080a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080a4:	d0e7      	beq.n	8008076 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b089      	sub	sp, #36	; 0x24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4611      	mov	r1, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	460b      	mov	r3, r1
 80080c4:	71fb      	strb	r3, [r7, #7]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d123      	bne.n	8008122 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080da:	88bb      	ldrh	r3, [r7, #4]
 80080dc:	3303      	adds	r3, #3
 80080de:	089b      	lsrs	r3, r3, #2
 80080e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080e2:	2300      	movs	r3, #0
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	e018      	b.n	800811a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	031a      	lsls	r2, r3, #12
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f4:	461a      	mov	r2, r3
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	3301      	adds	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	3301      	adds	r3, #1
 800810c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3301      	adds	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	3301      	adds	r3, #1
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	429a      	cmp	r2, r3
 8008120:	d3e2      	bcc.n	80080e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3724      	adds	r7, #36	; 0x24
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008130:	b480      	push	{r7}
 8008132:	b08b      	sub	sp, #44	; 0x2c
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	089b      	lsrs	r3, r3, #2
 800814a:	b29b      	uxth	r3, r3
 800814c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008156:	2300      	movs	r3, #0
 8008158:	623b      	str	r3, [r7, #32]
 800815a:	e014      	b.n	8008186 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	601a      	str	r2, [r3, #0]
    pDest++;
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	3301      	adds	r3, #1
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	3301      	adds	r3, #1
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	3301      	adds	r3, #1
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	3301      	adds	r3, #1
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	3301      	adds	r3, #1
 8008184:	623b      	str	r3, [r7, #32]
 8008186:	6a3a      	ldr	r2, [r7, #32]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	429a      	cmp	r2, r3
 800818c:	d3e6      	bcc.n	800815c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800818e:	8bfb      	ldrh	r3, [r7, #30]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01e      	beq.n	80081d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819e:	461a      	mov	r2, r3
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	701a      	strb	r2, [r3, #0]
      i++;
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	3301      	adds	r3, #1
 80081be:	623b      	str	r3, [r7, #32]
      pDest++;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	3301      	adds	r3, #1
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081c6:	8bfb      	ldrh	r3, [r7, #30]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081cc:	8bfb      	ldrh	r3, [r7, #30]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1ea      	bne.n	80081a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	372c      	adds	r7, #44	; 0x2c
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d12c      	bne.n	8008256 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	db12      	blt.n	8008234 <USB_EPSetStall+0x54>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00f      	beq.n	8008234 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008232:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e02b      	b.n	80082ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	db12      	blt.n	800828e <USB_EPSetStall+0xae>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00f      	beq.n	800828e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800828c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d128      	bne.n	800832a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d003      	beq.n	8008308 <USB_EPClearStall+0x4c>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d138      	bne.n	800837a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	e027      	b.n	800837a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	440a      	add	r2, r1
 8008340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	791b      	ldrb	r3, [r3, #4]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d003      	beq.n	800835a <USB_EPClearStall+0x9e>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d10f      	bne.n	800837a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	440a      	add	r2, r1
 8008370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008378:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083bc:	68f9      	ldr	r1, [r7, #12]
 80083be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083c2:	4313      	orrs	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008402:	f023 0302 	bic.w	r3, r3, #2
 8008406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008430:	f023 0303 	bic.w	r3, r3, #3
 8008434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008444:	f043 0302 	orr.w	r3, r3, #2
 8008448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4013      	ands	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	0c1b      	lsrs	r3, r3, #16
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	4013      	ands	r3, r2
 80084d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	b29b      	uxth	r3, r3
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4013      	ands	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008514:	68bb      	ldr	r3, [r7, #8]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008522:	b480      	push	{r7}
 8008524:	b087      	sub	sp, #28
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	01db      	lsls	r3, r3, #7
 8008554:	b2db      	uxtb	r3, r3
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4013      	ands	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008570:	68bb      	ldr	r3, [r7, #8]
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	f003 0301 	and.w	r3, r3, #1
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800859a:	b480      	push	{r7}
 800859c:	b085      	sub	sp, #20
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	460b      	mov	r3, r1
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	333c      	adds	r3, #60	; 0x3c
 80085f6:	3304      	adds	r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <USB_EP0_OutStart+0xb8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d90a      	bls.n	800861a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008614:	d101      	bne.n	800861a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	e037      	b.n	800868a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	461a      	mov	r2, r3
 8008622:	2300      	movs	r3, #0
 8008624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008648:	f043 0318 	orr.w	r3, r3, #24
 800864c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008660:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d10f      	bne.n	8008688 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008682:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	4f54300a 	.word	0x4f54300a

0800869c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <USB_CoreReset+0x64>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d901      	bls.n	80086ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e01b      	b.n	80086f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	daf2      	bge.n	80086a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f043 0201 	orr.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3301      	adds	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <USB_CoreReset+0x64>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d901      	bls.n	80086e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e006      	b.n	80086f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d0f0      	beq.n	80086d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	00030d40 	.word	0x00030d40

08008704 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008710:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008714:	f005 fc46 	bl	800dfa4 <USBD_static_malloc>
 8008718:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d109      	bne.n	8008734 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	32b0      	adds	r2, #176	; 0xb0
 800872a:	2100      	movs	r1, #0
 800872c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008730:	2302      	movs	r3, #2
 8008732:	e0d4      	b.n	80088de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008734:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008738:	2100      	movs	r1, #0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f005 fcb6 	bl	800e0ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32b0      	adds	r2, #176	; 0xb0
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32b0      	adds	r2, #176	; 0xb0
 800875a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	7c1b      	ldrb	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d138      	bne.n	80087de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800876c:	4b5e      	ldr	r3, [pc, #376]	; (80088e8 <USBD_CDC_Init+0x1e4>)
 800876e:	7819      	ldrb	r1, [r3, #0]
 8008770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008774:	2202      	movs	r2, #2
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f005 faf1 	bl	800dd5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800877c:	4b5a      	ldr	r3, [pc, #360]	; (80088e8 <USBD_CDC_Init+0x1e4>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f003 020f 	and.w	r2, r3, #15
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	3324      	adds	r3, #36	; 0x24
 8008792:	2201      	movs	r2, #1
 8008794:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008796:	4b55      	ldr	r3, [pc, #340]	; (80088ec <USBD_CDC_Init+0x1e8>)
 8008798:	7819      	ldrb	r1, [r3, #0]
 800879a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800879e:	2202      	movs	r2, #2
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f005 fadc 	bl	800dd5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087a6:	4b51      	ldr	r3, [pc, #324]	; (80088ec <USBD_CDC_Init+0x1e8>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 020f 	and.w	r2, r3, #15
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087be:	2201      	movs	r2, #1
 80087c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087c2:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <USBD_CDC_Init+0x1ec>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 020f 	and.w	r2, r3, #15
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3326      	adds	r3, #38	; 0x26
 80087d8:	2210      	movs	r2, #16
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e035      	b.n	800884a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087de:	4b42      	ldr	r3, [pc, #264]	; (80088e8 <USBD_CDC_Init+0x1e4>)
 80087e0:	7819      	ldrb	r1, [r3, #0]
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	2202      	movs	r2, #2
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f005 fab9 	bl	800dd5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087ec:	4b3e      	ldr	r3, [pc, #248]	; (80088e8 <USBD_CDC_Init+0x1e4>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 020f 	and.w	r2, r3, #15
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	3324      	adds	r3, #36	; 0x24
 8008802:	2201      	movs	r2, #1
 8008804:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <USBD_CDC_Init+0x1e8>)
 8008808:	7819      	ldrb	r1, [r3, #0]
 800880a:	2340      	movs	r3, #64	; 0x40
 800880c:	2202      	movs	r2, #2
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f005 faa5 	bl	800dd5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008814:	4b35      	ldr	r3, [pc, #212]	; (80088ec <USBD_CDC_Init+0x1e8>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f003 020f 	and.w	r2, r3, #15
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800882c:	2201      	movs	r2, #1
 800882e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008830:	4b2f      	ldr	r3, [pc, #188]	; (80088f0 <USBD_CDC_Init+0x1ec>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 020f 	and.w	r2, r3, #15
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	3326      	adds	r3, #38	; 0x26
 8008846:	2210      	movs	r2, #16
 8008848:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800884a:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <USBD_CDC_Init+0x1ec>)
 800884c:	7819      	ldrb	r1, [r3, #0]
 800884e:	2308      	movs	r3, #8
 8008850:	2203      	movs	r2, #3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f005 fa83 	bl	800dd5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008858:	4b25      	ldr	r3, [pc, #148]	; (80088f0 <USBD_CDC_Init+0x1ec>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	f003 020f 	and.w	r2, r3, #15
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	3324      	adds	r3, #36	; 0x24
 800886e:	2201      	movs	r2, #1
 8008870:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	33b0      	adds	r3, #176	; 0xb0
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088a8:	2302      	movs	r3, #2
 80088aa:	e018      	b.n	80088de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7c1b      	ldrb	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088b4:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <USBD_CDC_Init+0x1e8>)
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f005 fb3a 	bl	800df3c <USBD_LL_PrepareReceive>
 80088c8:	e008      	b.n	80088dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088ca:	4b08      	ldr	r3, [pc, #32]	; (80088ec <USBD_CDC_Init+0x1e8>)
 80088cc:	7819      	ldrb	r1, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088d4:	2340      	movs	r3, #64	; 0x40
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f005 fb30 	bl	800df3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	2000056b 	.word	0x2000056b
 80088ec:	2000056c 	.word	0x2000056c
 80088f0:	2000056d 	.word	0x2000056d

080088f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008900:	4b3a      	ldr	r3, [pc, #232]	; (80089ec <USBD_CDC_DeInit+0xf8>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f005 fa4f 	bl	800ddaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800890c:	4b37      	ldr	r3, [pc, #220]	; (80089ec <USBD_CDC_DeInit+0xf8>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	3324      	adds	r3, #36	; 0x24
 8008922:	2200      	movs	r2, #0
 8008924:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008926:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <USBD_CDC_DeInit+0xfc>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f005 fa3c 	bl	800ddaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008932:	4b2f      	ldr	r3, [pc, #188]	; (80089f0 <USBD_CDC_DeInit+0xfc>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 020f 	and.w	r2, r3, #15
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800894a:	2200      	movs	r2, #0
 800894c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <USBD_CDC_DeInit+0x100>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f005 fa28 	bl	800ddaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <USBD_CDC_DeInit+0x100>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f003 020f 	and.w	r2, r3, #15
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	3324      	adds	r3, #36	; 0x24
 8008970:	2200      	movs	r2, #0
 8008972:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008974:	4b1f      	ldr	r3, [pc, #124]	; (80089f4 <USBD_CDC_DeInit+0x100>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3326      	adds	r3, #38	; 0x26
 800898a:	2200      	movs	r2, #0
 800898c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	32b0      	adds	r2, #176	; 0xb0
 8008998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01f      	beq.n	80089e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	33b0      	adds	r3, #176	; 0xb0
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	32b0      	adds	r2, #176	; 0xb0
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f005 fafc 	bl	800dfc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32b0      	adds	r2, #176	; 0xb0
 80089d2:	2100      	movs	r1, #0
 80089d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000056b 	.word	0x2000056b
 80089f0:	2000056c 	.word	0x2000056c
 80089f4:	2000056d 	.word	0x2000056d

080089f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	32b0      	adds	r2, #176	; 0xb0
 8008a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e0bf      	b.n	8008ba8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d050      	beq.n	8008ad6 <USBD_CDC_Setup+0xde>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	f040 80af 	bne.w	8008b98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d03a      	beq.n	8008ab8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da1b      	bge.n	8008a84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	33b0      	adds	r3, #176	; 0xb0
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	88d2      	ldrh	r2, [r2, #6]
 8008a68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	88db      	ldrh	r3, [r3, #6]
 8008a6e:	2b07      	cmp	r3, #7
 8008a70:	bf28      	it	cs
 8008a72:	2307      	movcs	r3, #7
 8008a74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	89fa      	ldrh	r2, [r7, #14]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fd89 	bl	800a594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a82:	e090      	b.n	8008ba6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	785a      	ldrb	r2, [r3, #1]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b3f      	cmp	r3, #63	; 0x3f
 8008a94:	d803      	bhi.n	8008a9e <USBD_CDC_Setup+0xa6>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	88db      	ldrh	r3, [r3, #6]
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	e000      	b.n	8008aa0 <USBD_CDC_Setup+0xa8>
 8008a9e:	2240      	movs	r2, #64	; 0x40
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008aa6:	6939      	ldr	r1, [r7, #16]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fd9b 	bl	800a5ec <USBD_CtlPrepareRx>
      break;
 8008ab6:	e076      	b.n	8008ba6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	33b0      	adds	r3, #176	; 0xb0
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	7850      	ldrb	r0, [r2, #1]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	4798      	blx	r3
      break;
 8008ad4:	e067      	b.n	8008ba6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b0b      	cmp	r3, #11
 8008adc:	d851      	bhi.n	8008b82 <USBD_CDC_Setup+0x18a>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <USBD_CDC_Setup+0xec>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b15 	.word	0x08008b15
 8008ae8:	08008b91 	.word	0x08008b91
 8008aec:	08008b83 	.word	0x08008b83
 8008af0:	08008b83 	.word	0x08008b83
 8008af4:	08008b83 	.word	0x08008b83
 8008af8:	08008b83 	.word	0x08008b83
 8008afc:	08008b83 	.word	0x08008b83
 8008b00:	08008b83 	.word	0x08008b83
 8008b04:	08008b83 	.word	0x08008b83
 8008b08:	08008b83 	.word	0x08008b83
 8008b0c:	08008b3f 	.word	0x08008b3f
 8008b10:	08008b69 	.word	0x08008b69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d107      	bne.n	8008b30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b20:	f107 030a 	add.w	r3, r7, #10
 8008b24:	2202      	movs	r2, #2
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fd33 	bl	800a594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b2e:	e032      	b.n	8008b96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fcbd 	bl	800a4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b3c:	e02b      	b.n	8008b96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d107      	bne.n	8008b5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b4a:	f107 030d 	add.w	r3, r7, #13
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fd1e 	bl	800a594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b58:	e01d      	b.n	8008b96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fca8 	bl	800a4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b62:	2303      	movs	r3, #3
 8008b64:	75fb      	strb	r3, [r7, #23]
          break;
 8008b66:	e016      	b.n	8008b96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d00f      	beq.n	8008b94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fc9b 	bl	800a4b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b80:	e008      	b.n	8008b94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 fc94 	bl	800a4b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b8e:	e002      	b.n	8008b96 <USBD_CDC_Setup+0x19e>
          break;
 8008b90:	bf00      	nop
 8008b92:	e008      	b.n	8008ba6 <USBD_CDC_Setup+0x1ae>
          break;
 8008b94:	bf00      	nop
      }
      break;
 8008b96:	e006      	b.n	8008ba6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fc89 	bl	800a4b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32b0      	adds	r2, #176	; 0xb0
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e065      	b.n	8008ca6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	32b0      	adds	r2, #176	; 0xb0
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	f003 020f 	and.w	r2, r3, #15
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d02f      	beq.n	8008c64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3318      	adds	r3, #24
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	f003 010f 	and.w	r1, r3, #15
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	460b      	mov	r3, r1
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	440b      	add	r3, r1
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4403      	add	r3, r0
 8008c2c:	3348      	adds	r3, #72	; 0x48
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c34:	fb01 f303 	mul.w	r3, r1, r3
 8008c38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d112      	bne.n	8008c64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	f003 020f 	and.w	r2, r3, #15
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	3318      	adds	r3, #24
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c56:	78f9      	ldrb	r1, [r7, #3]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f005 f94c 	bl	800defa <USBD_LL_Transmit>
 8008c62:	e01f      	b.n	8008ca4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	33b0      	adds	r3, #176	; 0xb0
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	33b0      	adds	r3, #176	; 0xb0
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008ca0:	78fa      	ldrb	r2, [r7, #3]
 8008ca2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	32b0      	adds	r2, #176	; 0xb0
 8008cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	32b0      	adds	r2, #176	; 0xb0
 8008cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e01a      	b.n	8008d16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f005 f94a 	bl	800df7e <USBD_LL_GetRxDataSize>
 8008cea:	4602      	mov	r2, r0
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	33b0      	adds	r3, #176	; 0xb0
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d10:	4611      	mov	r1, r2
 8008d12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	32b0      	adds	r2, #176	; 0xb0
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e025      	b.n	8008d8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	33b0      	adds	r3, #176	; 0xb0
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01a      	beq.n	8008d8a <USBD_CDC_EP0_RxReady+0x6c>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d5a:	2bff      	cmp	r3, #255	; 0xff
 8008d5c:	d015      	beq.n	8008d8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	33b0      	adds	r3, #176	; 0xb0
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	22ff      	movs	r2, #255	; 0xff
 8008d86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d9c:	2182      	movs	r1, #130	; 0x82
 8008d9e:	4818      	ldr	r0, [pc, #96]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008da0:	f000 fd4f 	bl	8009842 <USBD_GetEpDesc>
 8008da4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008da6:	2101      	movs	r1, #1
 8008da8:	4815      	ldr	r0, [pc, #84]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008daa:	f000 fd4a 	bl	8009842 <USBD_GetEpDesc>
 8008dae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008db0:	2181      	movs	r1, #129	; 0x81
 8008db2:	4813      	ldr	r0, [pc, #76]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008db4:	f000 fd45 	bl	8009842 <USBD_GetEpDesc>
 8008db8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dd4:	711a      	strb	r2, [r3, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d006      	beq.n	8008dee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de8:	711a      	strb	r2, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2243      	movs	r2, #67	; 0x43
 8008df2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008df4:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000528 	.word	0x20000528

08008e04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e0c:	2182      	movs	r1, #130	; 0x82
 8008e0e:	4818      	ldr	r0, [pc, #96]	; (8008e70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e10:	f000 fd17 	bl	8009842 <USBD_GetEpDesc>
 8008e14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e16:	2101      	movs	r1, #1
 8008e18:	4815      	ldr	r0, [pc, #84]	; (8008e70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e1a:	f000 fd12 	bl	8009842 <USBD_GetEpDesc>
 8008e1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e20:	2181      	movs	r1, #129	; 0x81
 8008e22:	4813      	ldr	r0, [pc, #76]	; (8008e70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e24:	f000 fd0d 	bl	8009842 <USBD_GetEpDesc>
 8008e28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2210      	movs	r2, #16
 8008e34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	711a      	strb	r2, [r3, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f042 0202 	orr.w	r2, r2, #2
 8008e48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d006      	beq.n	8008e5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	711a      	strb	r2, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f042 0202 	orr.w	r2, r2, #2
 8008e5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2243      	movs	r2, #67	; 0x43
 8008e62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000528 	.word	0x20000528

08008e74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e7c:	2182      	movs	r1, #130	; 0x82
 8008e7e:	4818      	ldr	r0, [pc, #96]	; (8008ee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e80:	f000 fcdf 	bl	8009842 <USBD_GetEpDesc>
 8008e84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e86:	2101      	movs	r1, #1
 8008e88:	4815      	ldr	r0, [pc, #84]	; (8008ee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e8a:	f000 fcda 	bl	8009842 <USBD_GetEpDesc>
 8008e8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e90:	2181      	movs	r1, #129	; 0x81
 8008e92:	4813      	ldr	r0, [pc, #76]	; (8008ee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e94:	f000 fcd5 	bl	8009842 <USBD_GetEpDesc>
 8008e98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2210      	movs	r2, #16
 8008ea4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d006      	beq.n	8008eba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb4:	711a      	strb	r2, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d006      	beq.n	8008ece <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec8:	711a      	strb	r2, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2243      	movs	r2, #67	; 0x43
 8008ed2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ed4:	4b02      	ldr	r3, [pc, #8]	; (8008ee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000528 	.word	0x20000528

08008ee4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	220a      	movs	r2, #10
 8008ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ef2:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	200004e4 	.word	0x200004e4

08008f04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e009      	b.n	8008f2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	33b0      	adds	r3, #176	; 0xb0
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	32b0      	adds	r2, #176	; 0xb0
 8008f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e008      	b.n	8008f70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	32b0      	adds	r2, #176	; 0xb0
 8008f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e004      	b.n	8008faa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	32b0      	adds	r2, #176	; 0xb0
 8008fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32b0      	adds	r2, #176	; 0xb0
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e025      	b.n	8009036 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d11f      	bne.n	8009034 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <USBD_CDC_TransmitPacket+0x88>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4403      	add	r3, r0
 8009016:	3318      	adds	r3, #24
 8009018:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <USBD_CDC_TransmitPacket+0x88>)
 800901c:	7819      	ldrb	r1, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f004 ff65 	bl	800defa <USBD_LL_Transmit>

    ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	2000056b 	.word	0x2000056b

08009044 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32b0      	adds	r2, #176	; 0xb0
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32b0      	adds	r2, #176	; 0xb0
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800906e:	2303      	movs	r3, #3
 8009070:	e018      	b.n	80090a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7c1b      	ldrb	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <USBD_CDC_ReceivePacket+0x68>)
 800907c:	7819      	ldrb	r1, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f004 ff57 	bl	800df3c <USBD_LL_PrepareReceive>
 800908e:	e008      	b.n	80090a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <USBD_CDC_ReceivePacket+0x68>)
 8009092:	7819      	ldrb	r1, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800909a:	2340      	movs	r3, #64	; 0x40
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f004 ff4d 	bl	800df3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	2000056c 	.word	0x2000056c

080090b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e01f      	b.n	8009108 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	79fa      	ldrb	r2, [r7, #7]
 80090fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f004 fdc7 	bl	800dc90 <USBD_LL_Init>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e025      	b.n	8009174 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	32ae      	adds	r2, #174	; 0xae
 800913a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00f      	beq.n	8009164 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	32ae      	adds	r2, #174	; 0xae
 800914e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	f107 020e 	add.w	r2, r7, #14
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	4602      	mov	r2, r0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f004 fdcf 	bl	800dd28 <USBD_LL_Start>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f908 	bl	800a43e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	2b02      	cmp	r3, #2
 8009250:	d01a      	beq.n	8009288 <USBD_LL_SetupStage+0x72>
 8009252:	2b02      	cmp	r3, #2
 8009254:	d822      	bhi.n	800929c <USBD_LL_SetupStage+0x86>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <USBD_LL_SetupStage+0x4a>
 800925a:	2b01      	cmp	r3, #1
 800925c:	d00a      	beq.n	8009274 <USBD_LL_SetupStage+0x5e>
 800925e:	e01d      	b.n	800929c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb5f 	bl	800992c <USBD_StdDevReq>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
      break;
 8009272:	e020      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fbc7 	bl	8009a10 <USBD_StdItfReq>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
      break;
 8009286:	e016      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fc29 	bl	8009ae8 <USBD_StdEPReq>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	e00c      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f004 fd9c 	bl	800dde8 <USBD_LL_StallEP>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
      break;
 80092b4:	bf00      	nop
  }

  return ret;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	460b      	mov	r3, r1
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d16e      	bne.n	80093b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	f040 8098 	bne.w	800941c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d913      	bls.n	8009320 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	4293      	cmp	r3, r2
 8009310:	bf28      	it	cs
 8009312:	4613      	movcs	r3, r2
 8009314:	461a      	mov	r2, r3
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f001 f984 	bl	800a626 <USBD_CtlContinueRx>
 800931e:	e07d      	b.n	800941c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	2b02      	cmp	r3, #2
 800932c:	d014      	beq.n	8009358 <USBD_LL_DataOutStage+0x98>
 800932e:	2b02      	cmp	r3, #2
 8009330:	d81d      	bhi.n	800936e <USBD_LL_DataOutStage+0xae>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USBD_LL_DataOutStage+0x7c>
 8009336:	2b01      	cmp	r3, #1
 8009338:	d003      	beq.n	8009342 <USBD_LL_DataOutStage+0x82>
 800933a:	e018      	b.n	800936e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	75bb      	strb	r3, [r7, #22]
            break;
 8009340:	e018      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009348:	b2db      	uxtb	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fa5e 	bl	800980e <USBD_CoreFindIF>
 8009352:	4603      	mov	r3, r0
 8009354:	75bb      	strb	r3, [r7, #22]
            break;
 8009356:	e00d      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fa60 	bl	8009828 <USBD_CoreFindEP>
 8009368:	4603      	mov	r3, r0
 800936a:	75bb      	strb	r3, [r7, #22]
            break;
 800936c:	e002      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	75bb      	strb	r3, [r7, #22]
            break;
 8009372:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009374:	7dbb      	ldrb	r3, [r7, #22]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d119      	bne.n	80093ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b03      	cmp	r3, #3
 8009384:	d113      	bne.n	80093ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009386:	7dba      	ldrb	r2, [r7, #22]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	32ae      	adds	r2, #174	; 0xae
 800938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009396:	7dba      	ldrb	r2, [r7, #22]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800939e:	7dba      	ldrb	r2, [r7, #22]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	32ae      	adds	r2, #174	; 0xae
 80093a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 f94a 	bl	800a648 <USBD_CtlSendStatus>
 80093b4:	e032      	b.n	800941c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fa31 	bl	8009828 <USBD_CoreFindEP>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ca:	7dbb      	ldrb	r3, [r7, #22]
 80093cc:	2bff      	cmp	r3, #255	; 0xff
 80093ce:	d025      	beq.n	800941c <USBD_LL_DataOutStage+0x15c>
 80093d0:	7dbb      	ldrb	r3, [r7, #22]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d122      	bne.n	800941c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d117      	bne.n	8009412 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093e2:	7dba      	ldrb	r2, [r7, #22]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	32ae      	adds	r2, #174	; 0xae
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093f2:	7dba      	ldrb	r2, [r7, #22]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093fa:	7dba      	ldrb	r2, [r7, #22]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	32ae      	adds	r2, #174	; 0xae
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	7afa      	ldrb	r2, [r7, #11]
 8009408:	4611      	mov	r1, r2
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	e000      	b.n	800941e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b086      	sub	sp, #24
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	460b      	mov	r3, r1
 8009430:	607a      	str	r2, [r7, #4]
 8009432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009434:	7afb      	ldrb	r3, [r7, #11]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d16f      	bne.n	800951a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3314      	adds	r3, #20
 800943e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009446:	2b02      	cmp	r3, #2
 8009448:	d15a      	bne.n	8009500 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	429a      	cmp	r2, r3
 8009454:	d914      	bls.n	8009480 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	1ad2      	subs	r2, r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	461a      	mov	r2, r3
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f001 f8ac 	bl	800a5ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f004 fd5f 	bl	800df3c <USBD_LL_PrepareReceive>
 800947e:	e03f      	b.n	8009500 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d11c      	bne.n	80094c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009494:	429a      	cmp	r2, r3
 8009496:	d316      	bcc.n	80094c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d20f      	bcs.n	80094c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f001 f88d 	bl	800a5ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f004 fd3c 	bl	800df3c <USBD_LL_PrepareReceive>
 80094c4:	e01c      	b.n	8009500 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d10f      	bne.n	80094f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f2:	2180      	movs	r1, #128	; 0x80
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f004 fc77 	bl	800dde8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f8b7 	bl	800a66e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d03a      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe42 	bl	8009194 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009518:	e032      	b.n	8009580 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f97f 	bl	8009828 <USBD_CoreFindEP>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2bff      	cmp	r3, #255	; 0xff
 8009532:	d025      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d122      	bne.n	8009580 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d11c      	bne.n	8009580 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009546:	7dfa      	ldrb	r2, [r7, #23]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	32ae      	adds	r2, #174	; 0xae
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009556:	7dfa      	ldrb	r2, [r7, #23]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800955e:	7dfa      	ldrb	r2, [r7, #23]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	32ae      	adds	r2, #174	; 0xae
 8009564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	7afa      	ldrb	r2, [r7, #11]
 800956c:	4611      	mov	r1, r2
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009576:	7dbb      	ldrb	r3, [r7, #22]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	e000      	b.n	8009582 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d014      	beq.n	80095f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00e      	beq.n	80095f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	6852      	ldr	r2, [r2, #4]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	4611      	mov	r1, r2
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f004 fbb1 	bl	800dd5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2240      	movs	r2, #64	; 0x40
 8009608:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f004 fba3 	bl	800dd5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2240      	movs	r2, #64	; 0x40
 8009622:	621a      	str	r2, [r3, #32]

  return ret;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	78fa      	ldrb	r2, [r7, #3]
 800963e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2204      	movs	r2, #4
 8009668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b04      	cmp	r3, #4
 800968c:	d106      	bne.n	800969c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009694:	b2da      	uxtb	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d110      	bne.n	80096e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	32ae      	adds	r2, #174	; 0xae
 8009700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	e01c      	b.n	8009746 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b03      	cmp	r3, #3
 8009716:	d115      	bne.n	8009744 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	32ae      	adds	r2, #174	; 0xae
 8009722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32ae      	adds	r2, #174	; 0xae
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	4611      	mov	r1, r2
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	32ae      	adds	r2, #174	; 0xae
 8009764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800976c:	2303      	movs	r3, #3
 800976e:	e01c      	b.n	80097aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b03      	cmp	r3, #3
 800977a:	d115      	bne.n	80097a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	32ae      	adds	r2, #174	; 0xae
 8009786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32ae      	adds	r2, #174	; 0xae
 800979a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	4611      	mov	r1, r2
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6852      	ldr	r2, [r2, #4]
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	4611      	mov	r1, r2
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800981a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009834:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	885b      	ldrh	r3, [r3, #2]
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	429a      	cmp	r2, r3
 8009868:	d920      	bls.n	80098ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
 8009870:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009872:	e013      	b.n	800989c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009874:	f107 030a 	add.w	r3, r7, #10
 8009878:	4619      	mov	r1, r3
 800987a:	6978      	ldr	r0, [r7, #20]
 800987c:	f000 f81b 	bl	80098b6 <USBD_GetNextDesc>
 8009880:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b05      	cmp	r3, #5
 8009888:	d108      	bne.n	800989c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	789b      	ldrb	r3, [r3, #2]
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	429a      	cmp	r2, r3
 8009896:	d008      	beq.n	80098aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	885b      	ldrh	r3, [r3, #2]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	897b      	ldrh	r3, [r7, #10]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d8e5      	bhi.n	8009874 <USBD_GetEpDesc+0x32>
 80098a8:	e000      	b.n	80098ac <USBD_GetEpDesc+0x6a>
          break;
 80098aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098ac:	693b      	ldr	r3, [r7, #16]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	881a      	ldrh	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	4413      	add	r3, r2
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	3301      	adds	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800990e:	8a3b      	ldrh	r3, [r7, #16]
 8009910:	021b      	lsls	r3, r3, #8
 8009912:	b21a      	sxth	r2, r3
 8009914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009918:	4313      	orrs	r3, r2
 800991a:	b21b      	sxth	r3, r3
 800991c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800991e:	89fb      	ldrh	r3, [r7, #14]
}
 8009920:	4618      	mov	r0, r3
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009942:	2b40      	cmp	r3, #64	; 0x40
 8009944:	d005      	beq.n	8009952 <USBD_StdDevReq+0x26>
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d857      	bhi.n	80099fa <USBD_StdDevReq+0xce>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00f      	beq.n	800996e <USBD_StdDevReq+0x42>
 800994e:	2b20      	cmp	r3, #32
 8009950:	d153      	bne.n	80099fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	32ae      	adds	r2, #174	; 0xae
 800995c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]
      break;
 800996c:	e04a      	b.n	8009a04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	2b09      	cmp	r3, #9
 8009974:	d83b      	bhi.n	80099ee <USBD_StdDevReq+0xc2>
 8009976:	a201      	add	r2, pc, #4	; (adr r2, 800997c <USBD_StdDevReq+0x50>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	080099d1 	.word	0x080099d1
 8009980:	080099e5 	.word	0x080099e5
 8009984:	080099ef 	.word	0x080099ef
 8009988:	080099db 	.word	0x080099db
 800998c:	080099ef 	.word	0x080099ef
 8009990:	080099af 	.word	0x080099af
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099ef 	.word	0x080099ef
 800999c:	080099c7 	.word	0x080099c7
 80099a0:	080099b9 	.word	0x080099b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa3c 	bl	8009e24 <USBD_GetDescriptor>
          break;
 80099ac:	e024      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fba1 	bl	800a0f8 <USBD_SetAddress>
          break;
 80099b6:	e01f      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fbe0 	bl	800a180 <USBD_SetConfig>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
          break;
 80099c4:	e018      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc83 	bl	800a2d4 <USBD_GetConfig>
          break;
 80099ce:	e013      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fcb4 	bl	800a340 <USBD_GetStatus>
          break;
 80099d8:	e00e      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fce3 	bl	800a3a8 <USBD_SetFeature>
          break;
 80099e2:	e009      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fd07 	bl	800a3fa <USBD_ClrFeature>
          break;
 80099ec:	e004      	b.n	80099f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fd5e 	bl	800a4b2 <USBD_CtlError>
          break;
 80099f6:	bf00      	nop
      }
      break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fd58 	bl	800a4b2 <USBD_CtlError>
      break;
 8009a02:	bf00      	nop
  }

  return ret;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop

08009a10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a26:	2b40      	cmp	r3, #64	; 0x40
 8009a28:	d005      	beq.n	8009a36 <USBD_StdItfReq+0x26>
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d852      	bhi.n	8009ad4 <USBD_StdItfReq+0xc4>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <USBD_StdItfReq+0x26>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d14e      	bne.n	8009ad4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d840      	bhi.n	8009ac6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	889b      	ldrh	r3, [r3, #4]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d836      	bhi.n	8009abc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	889b      	ldrh	r3, [r3, #4]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fed9 	bl	800980e <USBD_CoreFindIF>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2bff      	cmp	r3, #255	; 0xff
 8009a64:	d01d      	beq.n	8009aa2 <USBD_StdItfReq+0x92>
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11a      	bne.n	8009aa2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a6c:	7bba      	ldrb	r2, [r7, #14]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	32ae      	adds	r2, #174	; 0xae
 8009a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00f      	beq.n	8009a9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a7c:	7bba      	ldrb	r2, [r7, #14]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a84:	7bba      	ldrb	r2, [r7, #14]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32ae      	adds	r2, #174	; 0xae
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a9a:	e004      	b.n	8009aa6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aa0:	e001      	b.n	8009aa6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	88db      	ldrh	r3, [r3, #6]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d110      	bne.n	8009ad0 <USBD_StdItfReq+0xc0>
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10d      	bne.n	8009ad0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fdc7 	bl	800a648 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009aba:	e009      	b.n	8009ad0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fcf7 	bl	800a4b2 <USBD_CtlError>
          break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fcf2 	bl	800a4b2 <USBD_CtlError>
          break;
 8009ace:	e000      	b.n	8009ad2 <USBD_StdItfReq+0xc2>
          break;
 8009ad0:	bf00      	nop
      }
      break;
 8009ad2:	e004      	b.n	8009ade <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fceb 	bl	800a4b2 <USBD_CtlError>
      break;
 8009adc:	bf00      	nop
  }

  return ret;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	889b      	ldrh	r3, [r3, #4]
 8009afa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	d007      	beq.n	8009b18 <USBD_StdEPReq+0x30>
 8009b08:	2b40      	cmp	r3, #64	; 0x40
 8009b0a:	f200 817f 	bhi.w	8009e0c <USBD_StdEPReq+0x324>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d02a      	beq.n	8009b68 <USBD_StdEPReq+0x80>
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	f040 817a 	bne.w	8009e0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fe83 	bl	8009828 <USBD_CoreFindEP>
 8009b22:	4603      	mov	r3, r0
 8009b24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b26:	7b7b      	ldrb	r3, [r7, #13]
 8009b28:	2bff      	cmp	r3, #255	; 0xff
 8009b2a:	f000 8174 	beq.w	8009e16 <USBD_StdEPReq+0x32e>
 8009b2e:	7b7b      	ldrb	r3, [r7, #13]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 8170 	bne.w	8009e16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b36:	7b7a      	ldrb	r2, [r7, #13]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b3e:	7b7a      	ldrb	r2, [r7, #13]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	32ae      	adds	r2, #174	; 0xae
 8009b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8163 	beq.w	8009e16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b50:	7b7a      	ldrb	r2, [r7, #13]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	32ae      	adds	r2, #174	; 0xae
 8009b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b66:	e156      	b.n	8009e16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d008      	beq.n	8009b82 <USBD_StdEPReq+0x9a>
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	f300 8145 	bgt.w	8009e00 <USBD_StdEPReq+0x318>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 809b 	beq.w	8009cb2 <USBD_StdEPReq+0x1ca>
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d03c      	beq.n	8009bfa <USBD_StdEPReq+0x112>
 8009b80:	e13e      	b.n	8009e00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d002      	beq.n	8009b94 <USBD_StdEPReq+0xac>
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d016      	beq.n	8009bc0 <USBD_StdEPReq+0xd8>
 8009b92:	e02c      	b.n	8009bee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00d      	beq.n	8009bb6 <USBD_StdEPReq+0xce>
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d00a      	beq.n	8009bb6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f004 f91f 	bl	800dde8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f004 f91b 	bl	800dde8 <USBD_LL_StallEP>
 8009bb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bb4:	e020      	b.n	8009bf8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fc7a 	bl	800a4b2 <USBD_CtlError>
              break;
 8009bbe:	e01b      	b.n	8009bf8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	885b      	ldrh	r3, [r3, #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10e      	bne.n	8009be6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <USBD_StdEPReq+0xfe>
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b80      	cmp	r3, #128	; 0x80
 8009bd2:	d008      	beq.n	8009be6 <USBD_StdEPReq+0xfe>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	88db      	ldrh	r3, [r3, #6]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f004 f901 	bl	800dde8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fd2e 	bl	800a648 <USBD_CtlSendStatus>

              break;
 8009bec:	e004      	b.n	8009bf8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fc5e 	bl	800a4b2 <USBD_CtlError>
              break;
 8009bf6:	bf00      	nop
          }
          break;
 8009bf8:	e107      	b.n	8009e0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d002      	beq.n	8009c0c <USBD_StdEPReq+0x124>
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d016      	beq.n	8009c38 <USBD_StdEPReq+0x150>
 8009c0a:	e04b      	b.n	8009ca4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00d      	beq.n	8009c2e <USBD_StdEPReq+0x146>
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	d00a      	beq.n	8009c2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f004 f8e3 	bl	800dde8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c22:	2180      	movs	r1, #128	; 0x80
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f004 f8df 	bl	800dde8 <USBD_LL_StallEP>
 8009c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c2c:	e040      	b.n	8009cb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fc3e 	bl	800a4b2 <USBD_CtlError>
              break;
 8009c36:	e03b      	b.n	8009cb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d136      	bne.n	8009cae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f004 f8e9 	bl	800de26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fcf7 	bl	800a648 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fde2 	bl	8009828 <USBD_CoreFindEP>
 8009c64:	4603      	mov	r3, r0
 8009c66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c68:	7b7b      	ldrb	r3, [r7, #13]
 8009c6a:	2bff      	cmp	r3, #255	; 0xff
 8009c6c:	d01f      	beq.n	8009cae <USBD_StdEPReq+0x1c6>
 8009c6e:	7b7b      	ldrb	r3, [r7, #13]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11c      	bne.n	8009cae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c74:	7b7a      	ldrb	r2, [r7, #13]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c7c:	7b7a      	ldrb	r2, [r7, #13]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	32ae      	adds	r2, #174	; 0xae
 8009c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d010      	beq.n	8009cae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c8c:	7b7a      	ldrb	r2, [r7, #13]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32ae      	adds	r2, #174	; 0xae
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ca2:	e004      	b.n	8009cae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fc03 	bl	800a4b2 <USBD_CtlError>
              break;
 8009cac:	e000      	b.n	8009cb0 <USBD_StdEPReq+0x1c8>
              break;
 8009cae:	bf00      	nop
          }
          break;
 8009cb0:	e0ab      	b.n	8009e0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d002      	beq.n	8009cc4 <USBD_StdEPReq+0x1dc>
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d032      	beq.n	8009d28 <USBD_StdEPReq+0x240>
 8009cc2:	e097      	b.n	8009df4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <USBD_StdEPReq+0x1f2>
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b80      	cmp	r3, #128	; 0x80
 8009cce:	d004      	beq.n	8009cda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fbed 	bl	800a4b2 <USBD_CtlError>
                break;
 8009cd8:	e091      	b.n	8009dfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da0b      	bge.n	8009cfa <USBD_StdEPReq+0x212>
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	3310      	adds	r3, #16
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	e00b      	b.n	8009d12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	4413      	add	r3, r2
 8009d10:	3304      	adds	r3, #4
 8009d12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fc37 	bl	800a594 <USBD_CtlSendData>
              break;
 8009d26:	e06a      	b.n	8009dfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	da11      	bge.n	8009d54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	f003 020f 	and.w	r2, r3, #15
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	440b      	add	r3, r1
 8009d42:	3324      	adds	r3, #36	; 0x24
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d117      	bne.n	8009d7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fbb0 	bl	800a4b2 <USBD_CtlError>
                  break;
 8009d52:	e054      	b.n	8009dfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	f003 020f 	and.w	r2, r3, #15
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fb9d 	bl	800a4b2 <USBD_CtlError>
                  break;
 8009d78:	e041      	b.n	8009dfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da0b      	bge.n	8009d9a <USBD_StdEPReq+0x2b2>
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d88:	4613      	mov	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	3310      	adds	r3, #16
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	3304      	adds	r3, #4
 8009d98:	e00b      	b.n	8009db2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4413      	add	r3, r2
 8009db0:	3304      	adds	r3, #4
 8009db2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <USBD_StdEPReq+0x2d8>
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b80      	cmp	r3, #128	; 0x80
 8009dbe:	d103      	bne.n	8009dc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	e00e      	b.n	8009de6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f004 f849 	bl	800de64 <USBD_LL_IsStallEP>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e002      	b.n	8009de6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2202      	movs	r2, #2
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fbd1 	bl	800a594 <USBD_CtlSendData>
              break;
 8009df2:	e004      	b.n	8009dfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fb5b 	bl	800a4b2 <USBD_CtlError>
              break;
 8009dfc:	bf00      	nop
          }
          break;
 8009dfe:	e004      	b.n	8009e0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fb55 	bl	800a4b2 <USBD_CtlError>
          break;
 8009e08:	bf00      	nop
      }
      break;
 8009e0a:	e005      	b.n	8009e18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fb4f 	bl	800a4b2 <USBD_CtlError>
      break;
 8009e14:	e000      	b.n	8009e18 <USBD_StdEPReq+0x330>
      break;
 8009e16:	bf00      	nop
  }

  return ret;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	885b      	ldrh	r3, [r3, #2]
 8009e3e:	0a1b      	lsrs	r3, r3, #8
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	3b01      	subs	r3, #1
 8009e44:	2b06      	cmp	r3, #6
 8009e46:	f200 8128 	bhi.w	800a09a <USBD_GetDescriptor+0x276>
 8009e4a:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <USBD_GetDescriptor+0x2c>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e6d 	.word	0x08009e6d
 8009e54:	08009e85 	.word	0x08009e85
 8009e58:	08009ec5 	.word	0x08009ec5
 8009e5c:	0800a09b 	.word	0x0800a09b
 8009e60:	0800a09b 	.word	0x0800a09b
 8009e64:	0800a03b 	.word	0x0800a03b
 8009e68:	0800a067 	.word	0x0800a067
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	f107 0108 	add.w	r1, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
      break;
 8009e82:	e112      	b.n	800a0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	7c1b      	ldrb	r3, [r3, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	f107 0208 	add.w	r2, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ea6:	e100      	b.n	800a0aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	f107 0208 	add.w	r2, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	701a      	strb	r2, [r3, #0]
      break;
 8009ec2:	e0f2      	b.n	800a0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	885b      	ldrh	r3, [r3, #2]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	f200 80ac 	bhi.w	800a028 <USBD_GetDescriptor+0x204>
 8009ed0:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <USBD_GetDescriptor+0xb4>)
 8009ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed6:	bf00      	nop
 8009ed8:	08009ef1 	.word	0x08009ef1
 8009edc:	08009f25 	.word	0x08009f25
 8009ee0:	08009f59 	.word	0x08009f59
 8009ee4:	08009f8d 	.word	0x08009f8d
 8009ee8:	08009fc1 	.word	0x08009fc1
 8009eec:	08009ff5 	.word	0x08009ff5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f12:	e091      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 facb 	bl	800a4b2 <USBD_CtlError>
            err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
          break;
 8009f22:	e089      	b.n	800a038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7c12      	ldrb	r2, [r2, #16]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
 8009f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f46:	e077      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fab1 	bl	800a4b2 <USBD_CtlError>
            err++;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	3301      	adds	r3, #1
 8009f54:	72fb      	strb	r3, [r7, #11]
          break;
 8009f56:	e06f      	b.n	800a038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7c12      	ldrb	r2, [r2, #16]
 8009f70:	f107 0108 	add.w	r1, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7a:	e05d      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa97 	bl	800a4b2 <USBD_CtlError>
            err++;
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	3301      	adds	r3, #1
 8009f88:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8a:	e055      	b.n	800a038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	7c12      	ldrb	r2, [r2, #16]
 8009fa4:	f107 0108 	add.w	r1, r7, #8
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
 8009fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fae:	e043      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa7d 	bl	800a4b2 <USBD_CtlError>
            err++;
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fbe:	e03b      	b.n	800a038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	7c12      	ldrb	r2, [r2, #16]
 8009fd8:	f107 0108 	add.w	r1, r7, #8
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
 8009fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fe2:	e029      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fa63 	bl	800a4b2 <USBD_CtlError>
            err++;
 8009fec:	7afb      	ldrb	r3, [r7, #11]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ff2:	e021      	b.n	800a038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a016:	e00f      	b.n	800a038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa49 	bl	800a4b2 <USBD_CtlError>
            err++;
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	3301      	adds	r3, #1
 800a024:	72fb      	strb	r3, [r7, #11]
          break;
 800a026:	e007      	b.n	800a038 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa41 	bl	800a4b2 <USBD_CtlError>
          err++;
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	3301      	adds	r3, #1
 800a034:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a036:	bf00      	nop
      }
      break;
 800a038:	e037      	b.n	800a0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7c1b      	ldrb	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04a:	f107 0208 	add.w	r2, r7, #8
 800a04e:	4610      	mov	r0, r2
 800a050:	4798      	blx	r3
 800a052:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a054:	e029      	b.n	800a0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fa2a 	bl	800a4b2 <USBD_CtlError>
        err++;
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	3301      	adds	r3, #1
 800a062:	72fb      	strb	r3, [r7, #11]
      break;
 800a064:	e021      	b.n	800a0aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7c1b      	ldrb	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10d      	bne.n	800a08a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a076:	f107 0208 	add.w	r2, r7, #8
 800a07a:	4610      	mov	r0, r2
 800a07c:	4798      	blx	r3
 800a07e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	2207      	movs	r2, #7
 800a086:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a088:	e00f      	b.n	800a0aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa10 	bl	800a4b2 <USBD_CtlError>
        err++;
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	3301      	adds	r3, #1
 800a096:	72fb      	strb	r3, [r7, #11]
      break;
 800a098:	e007      	b.n	800a0aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa08 	bl	800a4b2 <USBD_CtlError>
      err++;
 800a0a2:	7afb      	ldrb	r3, [r7, #11]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a0a8:	bf00      	nop
  }

  if (err != 0U)
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d11e      	bne.n	800a0ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	88db      	ldrh	r3, [r3, #6]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d016      	beq.n	800a0e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0b8:	893b      	ldrh	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00e      	beq.n	800a0dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	88da      	ldrh	r2, [r3, #6]
 800a0c2:	893b      	ldrh	r3, [r7, #8]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	bf28      	it	cs
 800a0c8:	4613      	movcs	r3, r2
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ce:	893b      	ldrh	r3, [r7, #8]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	68f9      	ldr	r1, [r7, #12]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fa5d 	bl	800a594 <USBD_CtlSendData>
 800a0da:	e009      	b.n	800a0f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9e7 	bl	800a4b2 <USBD_CtlError>
 800a0e4:	e004      	b.n	800a0f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 faae 	bl	800a648 <USBD_CtlSendStatus>
 800a0ec:	e000      	b.n	800a0f0 <USBD_GetDescriptor+0x2cc>
    return;
 800a0ee:	bf00      	nop
  }
}
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop

0800a0f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	889b      	ldrh	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d131      	bne.n	800a16e <USBD_SetAddress+0x76>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	88db      	ldrh	r3, [r3, #6]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d12d      	bne.n	800a16e <USBD_SetAddress+0x76>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	885b      	ldrh	r3, [r3, #2]
 800a116:	2b7f      	cmp	r3, #127	; 0x7f
 800a118:	d829      	bhi.n	800a16e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	885b      	ldrh	r3, [r3, #2]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d104      	bne.n	800a13c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f9bc 	bl	800a4b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a13a:	e01d      	b.n	800a178 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7bfa      	ldrb	r2, [r7, #15]
 800a140:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f003 feb7 	bl	800debc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa7a 	bl	800a648 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a162:	e009      	b.n	800a178 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16c:	e004      	b.n	800a178 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f99e 	bl	800a4b2 <USBD_CtlError>
  }
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	885b      	ldrh	r3, [r3, #2]
 800a192:	b2da      	uxtb	r2, r3
 800a194:	4b4e      	ldr	r3, [pc, #312]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a196:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a198:	4b4d      	ldr	r3, [pc, #308]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d905      	bls.n	800a1ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f985 	bl	800a4b2 <USBD_CtlError>
    return USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e08c      	b.n	800a2c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d002      	beq.n	800a1be <USBD_SetConfig+0x3e>
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d029      	beq.n	800a210 <USBD_SetConfig+0x90>
 800a1bc:	e075      	b.n	800a2aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1be:	4b44      	ldr	r3, [pc, #272]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d020      	beq.n	800a208 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1c6:	4b42      	ldr	r3, [pc, #264]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1d0:	4b3f      	ldr	r3, [pc, #252]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7fe ffe7 	bl	80091aa <USBD_SetClassConfig>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f962 	bl	800a4b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1f6:	e065      	b.n	800a2c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fa25 	bl	800a648 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2203      	movs	r2, #3
 800a202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a206:	e05d      	b.n	800a2c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa1d 	bl	800a648 <USBD_CtlSendStatus>
      break;
 800a20e:	e059      	b.n	800a2c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a210:	4b2f      	ldr	r3, [pc, #188]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d112      	bne.n	800a23e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a220:	4b2b      	ldr	r3, [pc, #172]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a22a:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7fe ffd6 	bl	80091e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa06 	bl	800a648 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a23c:	e042      	b.n	800a2c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d02a      	beq.n	800a2a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7fe ffc4 	bl	80091e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a264:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7fe ff9d 	bl	80091aa <USBD_SetClassConfig>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00f      	beq.n	800a29a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f918 	bl	800a4b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7fe ffa9 	bl	80091e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a298:	e014      	b.n	800a2c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f9d4 	bl	800a648 <USBD_CtlSendStatus>
      break;
 800a2a0:	e010      	b.n	800a2c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9d0 	bl	800a648 <USBD_CtlSendStatus>
      break;
 800a2a8:	e00c      	b.n	800a2c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f900 	bl	800a4b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2b2:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <USBD_SetConfig+0x150>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7fe ff92 	bl	80091e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c2:	bf00      	nop
  }

  return ret;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000858 	.word	0x20000858

0800a2d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88db      	ldrh	r3, [r3, #6]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d004      	beq.n	800a2f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f8e2 	bl	800a4b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ee:	e023      	b.n	800a338 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	dc02      	bgt.n	800a302 <USBD_GetConfig+0x2e>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dc03      	bgt.n	800a308 <USBD_GetConfig+0x34>
 800a300:	e015      	b.n	800a32e <USBD_GetConfig+0x5a>
 800a302:	2b03      	cmp	r3, #3
 800a304:	d00b      	beq.n	800a31e <USBD_GetConfig+0x4a>
 800a306:	e012      	b.n	800a32e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3308      	adds	r3, #8
 800a312:	2201      	movs	r2, #1
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f93c 	bl	800a594 <USBD_CtlSendData>
        break;
 800a31c:	e00c      	b.n	800a338 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3304      	adds	r3, #4
 800a322:	2201      	movs	r2, #1
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f934 	bl	800a594 <USBD_CtlSendData>
        break;
 800a32c:	e004      	b.n	800a338 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f8be 	bl	800a4b2 <USBD_CtlError>
        break;
 800a336:	bf00      	nop
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a350:	b2db      	uxtb	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	2b02      	cmp	r3, #2
 800a356:	d81e      	bhi.n	800a396 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	88db      	ldrh	r3, [r3, #6]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d004      	beq.n	800a36a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f8a5 	bl	800a4b2 <USBD_CtlError>
        break;
 800a368:	e01a      	b.n	800a3a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f043 0202 	orr.w	r2, r3, #2
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	330c      	adds	r3, #12
 800a38a:	2202      	movs	r2, #2
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f900 	bl	800a594 <USBD_CtlSendData>
      break;
 800a394:	e004      	b.n	800a3a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f88a 	bl	800a4b2 <USBD_CtlError>
      break;
 800a39e:	bf00      	nop
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	885b      	ldrh	r3, [r3, #2]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d107      	bne.n	800a3ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f940 	bl	800a648 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3c8:	e013      	b.n	800a3f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	885b      	ldrh	r3, [r3, #2]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d10b      	bne.n	800a3ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	889b      	ldrh	r3, [r3, #4]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	b2da      	uxtb	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f930 	bl	800a648 <USBD_CtlSendStatus>
}
 800a3e8:	e003      	b.n	800a3f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f860 	bl	800a4b2 <USBD_CtlError>
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d80b      	bhi.n	800a42a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	885b      	ldrh	r3, [r3, #2]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d10c      	bne.n	800a434 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f910 	bl	800a648 <USBD_CtlSendStatus>
      }
      break;
 800a428:	e004      	b.n	800a434 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f840 	bl	800a4b2 <USBD_CtlError>
      break;
 800a432:	e000      	b.n	800a436 <USBD_ClrFeature+0x3c>
      break;
 800a434:	bf00      	nop
  }
}
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3301      	adds	r3, #1
 800a458:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	781a      	ldrb	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3301      	adds	r3, #1
 800a466:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fa41 	bl	80098f0 <SWAPBYTE>
 800a46e:	4603      	mov	r3, r0
 800a470:	461a      	mov	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3301      	adds	r3, #1
 800a480:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff fa34 	bl	80098f0 <SWAPBYTE>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3301      	adds	r3, #1
 800a494:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3301      	adds	r3, #1
 800a49a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff fa27 	bl	80098f0 <SWAPBYTE>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	80da      	strh	r2, [r3, #6]
}
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4bc:	2180      	movs	r1, #128	; 0x80
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f003 fc92 	bl	800dde8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f003 fc8e 	bl	800dde8 <USBD_LL_StallEP>
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d036      	beq.n	800a558 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4ee:	6938      	ldr	r0, [r7, #16]
 800a4f0:	f000 f836 	bl	800a560 <USBD_GetLen>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	4413      	add	r3, r2
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	3301      	adds	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	4413      	add	r3, r2
 800a51a:	2203      	movs	r2, #3
 800a51c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	3301      	adds	r3, #1
 800a522:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a524:	e013      	b.n	800a54e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	4413      	add	r3, r2
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	7812      	ldrb	r2, [r2, #0]
 800a530:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3301      	adds	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
    idx++;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	3301      	adds	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4413      	add	r3, r2
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
    idx++;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	3301      	adds	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e7      	bne.n	800a526 <USBD_GetString+0x52>
 800a556:	e000      	b.n	800a55a <USBD_GetString+0x86>
    return;
 800a558:	bf00      	nop
  }
}
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a570:	e005      	b.n	800a57e <USBD_GetLen+0x1e>
  {
    len++;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	3301      	adds	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1f5      	bne.n	800a572 <USBD_GetLen+0x12>
  }

  return len;
 800a586:	7bfb      	ldrb	r3, [r7, #15]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f003 fc9d 	bl	800defa <USBD_LL_Transmit>

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	2100      	movs	r1, #0
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f003 fc8c 	bl	800defa <USBD_LL_Transmit>

  return USBD_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f003 fc90 	bl	800df3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	2100      	movs	r1, #0
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f003 fc7f 	bl	800df3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2204      	movs	r2, #4
 800a654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a658:	2300      	movs	r3, #0
 800a65a:	2200      	movs	r2, #0
 800a65c:	2100      	movs	r1, #0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f003 fc4b 	bl	800defa <USBD_LL_Transmit>

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2205      	movs	r2, #5
 800a67a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a67e:	2300      	movs	r3, #0
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f003 fc59 	bl	800df3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <__NVIC_SetPriority>:
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	db0a      	blt.n	800a6be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	490c      	ldr	r1, [pc, #48]	; (800a6e0 <__NVIC_SetPriority+0x4c>)
 800a6ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6b2:	0112      	lsls	r2, r2, #4
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a6bc:	e00a      	b.n	800a6d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	4908      	ldr	r1, [pc, #32]	; (800a6e4 <__NVIC_SetPriority+0x50>)
 800a6c4:	79fb      	ldrb	r3, [r7, #7]
 800a6c6:	f003 030f 	and.w	r3, r3, #15
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	0112      	lsls	r2, r2, #4
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	761a      	strb	r2, [r3, #24]
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	e000e100 	.word	0xe000e100
 800a6e4:	e000ed00 	.word	0xe000ed00

0800a6e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6ec:	4b05      	ldr	r3, [pc, #20]	; (800a704 <SysTick_Handler+0x1c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6f0:	f001 ff24 	bl	800c53c <xTaskGetSchedulerState>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d001      	beq.n	800a6fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6fa:	f002 fd0d 	bl	800d118 <xPortSysTickHandler>
  }
}
 800a6fe:	bf00      	nop
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	e000e010 	.word	0xe000e010

0800a708 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a70c:	2100      	movs	r1, #0
 800a70e:	f06f 0004 	mvn.w	r0, #4
 800a712:	f7ff ffbf 	bl	800a694 <__NVIC_SetPriority>
#endif
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a722:	f3ef 8305 	mrs	r3, IPSR
 800a726:	603b      	str	r3, [r7, #0]
  return(result);
 800a728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a72e:	f06f 0305 	mvn.w	r3, #5
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e00c      	b.n	800a750 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <osKernelInitialize+0x44>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <osKernelInitialize+0x44>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a744:	2300      	movs	r3, #0
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	e002      	b.n	800a750 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a74a:	f04f 33ff 	mov.w	r3, #4294967295
 800a74e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a750:	687b      	ldr	r3, [r7, #4]
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	2000085c 	.word	0x2000085c

0800a764 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a76a:	f3ef 8305 	mrs	r3, IPSR
 800a76e:	603b      	str	r3, [r7, #0]
  return(result);
 800a770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a776:	f06f 0305 	mvn.w	r3, #5
 800a77a:	607b      	str	r3, [r7, #4]
 800a77c:	e010      	b.n	800a7a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a77e:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <osKernelStart+0x48>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d109      	bne.n	800a79a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a786:	f7ff ffbf 	bl	800a708 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a78a:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <osKernelStart+0x48>)
 800a78c:	2202      	movs	r2, #2
 800a78e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a790:	f001 fa8c 	bl	800bcac <vTaskStartScheduler>
      stat = osOK;
 800a794:	2300      	movs	r3, #0
 800a796:	607b      	str	r3, [r7, #4]
 800a798:	e002      	b.n	800a7a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295
 800a79e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7a0:	687b      	ldr	r3, [r7, #4]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	2000085c 	.word	0x2000085c

0800a7b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08e      	sub	sp, #56	; 0x38
 800a7b4:	af04      	add	r7, sp, #16
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c0:	f3ef 8305 	mrs	r3, IPSR
 800a7c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d17f      	bne.n	800a8cc <osThreadNew+0x11c>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d07c      	beq.n	800a8cc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a7d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7d6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7d8:	2318      	movs	r3, #24
 800a7da:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d045      	beq.n	800a878 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <osThreadNew+0x4a>
        name = attr->name;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <osThreadNew+0x70>
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	2b38      	cmp	r3, #56	; 0x38
 800a812:	d805      	bhi.n	800a820 <osThreadNew+0x70>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <osThreadNew+0x74>
        return (NULL);
 800a820:	2300      	movs	r3, #0
 800a822:	e054      	b.n	800a8ce <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	089b      	lsrs	r3, r3, #2
 800a832:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <osThreadNew+0xaa>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	2b6b      	cmp	r3, #107	; 0x6b
 800a842:	d90a      	bls.n	800a85a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <osThreadNew+0xaa>
        mem = 1;
 800a854:	2301      	movs	r3, #1
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	e010      	b.n	800a87c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10c      	bne.n	800a87c <osThreadNew+0xcc>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d108      	bne.n	800a87c <osThreadNew+0xcc>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <osThreadNew+0xcc>
          mem = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e001      	b.n	800a87c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d110      	bne.n	800a8a4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6a3a      	ldr	r2, [r7, #32]
 800a896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 feb9 	bl	800b610 <xTaskCreateStatic>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	e013      	b.n	800a8cc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d110      	bne.n	800a8cc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f107 0310 	add.w	r3, r7, #16
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 ff04 	bl	800b6ca <xTaskCreate>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d001      	beq.n	800a8cc <osThreadNew+0x11c>
            hTask = NULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8cc:	693b      	ldr	r3, [r7, #16]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3728      	adds	r7, #40	; 0x28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8de:	f3ef 8305 	mrs	r3, IPSR
 800a8e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <osDelay+0x1c>
    stat = osErrorISR;
 800a8ea:	f06f 0305 	mvn.w	r3, #5
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	e007      	b.n	800a902 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f001 f89b 	bl	800ba38 <vTaskDelay>
    }
  }

  return (stat);
 800a902:	68fb      	ldr	r3, [r7, #12]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08a      	sub	sp, #40	; 0x28
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91c:	f3ef 8305 	mrs	r3, IPSR
 800a920:	613b      	str	r3, [r7, #16]
  return(result);
 800a922:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a924:	2b00      	cmp	r3, #0
 800a926:	d15f      	bne.n	800a9e8 <osMessageQueueNew+0xdc>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d05c      	beq.n	800a9e8 <osMessageQueueNew+0xdc>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d059      	beq.n	800a9e8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a934:	f04f 33ff 	mov.w	r3, #4294967295
 800a938:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d029      	beq.n	800a994 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d012      	beq.n	800a96e <osMessageQueueNew+0x62>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	2b4f      	cmp	r3, #79	; 0x4f
 800a94e:	d90e      	bls.n	800a96e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00a      	beq.n	800a96e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695a      	ldr	r2, [r3, #20]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	fb01 f303 	mul.w	r3, r1, r3
 800a964:	429a      	cmp	r2, r3
 800a966:	d302      	bcc.n	800a96e <osMessageQueueNew+0x62>
        mem = 1;
 800a968:	2301      	movs	r3, #1
 800a96a:	61bb      	str	r3, [r7, #24]
 800a96c:	e014      	b.n	800a998 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d110      	bne.n	800a998 <osMessageQueueNew+0x8c>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10c      	bne.n	800a998 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a982:	2b00      	cmp	r3, #0
 800a984:	d108      	bne.n	800a998 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d104      	bne.n	800a998 <osMessageQueueNew+0x8c>
          mem = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	e001      	b.n	800a998 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d10b      	bne.n	800a9b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	9100      	str	r1, [sp, #0]
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 f971 	bl	800ac94 <xQueueGenericCreateStatic>
 800a9b2:	61f8      	str	r0, [r7, #28]
 800a9b4:	e008      	b.n	800a9c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d105      	bne.n	800a9c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a9bc:	2200      	movs	r2, #0
 800a9be:	68b9      	ldr	r1, [r7, #8]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f9df 	bl	800ad84 <xQueueGenericCreate>
 800a9c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00c      	beq.n	800a9e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <osMessageQueueNew+0xd0>
        name = attr->name;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	e001      	b.n	800a9e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a9e0:	6979      	ldr	r1, [r7, #20]
 800a9e2:	69f8      	ldr	r0, [r7, #28]
 800a9e4:	f000 fdb6 	bl	800b554 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a9e8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4a07      	ldr	r2, [pc, #28]	; (800aa20 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	4a06      	ldr	r2, [pc, #24]	; (800aa24 <vApplicationGetIdleTaskMemory+0x30>)
 800aa0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa12:	601a      	str	r2, [r3, #0]
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20000860 	.word	0x20000860
 800aa24:	200008cc 	.word	0x200008cc

0800aa28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a07      	ldr	r2, [pc, #28]	; (800aa54 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4a06      	ldr	r2, [pc, #24]	; (800aa58 <vApplicationGetTimerTaskMemory+0x30>)
 800aa3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa46:	601a      	str	r2, [r3, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	20000ccc 	.word	0x20000ccc
 800aa58:	20000d38 	.word	0x20000d38

0800aa5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 0208 	add.w	r2, r3, #8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f04f 32ff 	mov.w	r2, #4294967295
 800aa74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f103 0208 	add.w	r2, r3, #8
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f103 0208 	add.w	r2, r3, #8
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d103      	bne.n	800ab1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	e00c      	b.n	800ab38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3308      	adds	r3, #8
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	e002      	b.n	800ab2c <vListInsert+0x2e>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d2f6      	bcs.n	800ab26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6892      	ldr	r2, [r2, #8]
 800ab86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6852      	ldr	r2, [r2, #4]
 800ab90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d103      	bne.n	800aba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	1e5a      	subs	r2, r3, #1
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abee:	f002 fa01 	bl	800cff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	441a      	add	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	68f9      	ldr	r1, [r7, #12]
 800ac22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac24:	fb01 f303 	mul.w	r3, r1, r3
 800ac28:	441a      	add	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	22ff      	movs	r2, #255	; 0xff
 800ac32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	22ff      	movs	r2, #255	; 0xff
 800ac3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d114      	bne.n	800ac6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01a      	beq.n	800ac82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3310      	adds	r3, #16
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 fab5 	bl	800c1c0 <xTaskRemoveFromEventList>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d012      	beq.n	800ac82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac5c:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <xQueueGenericReset+0xcc>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	e009      	b.n	800ac82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3310      	adds	r3, #16
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff fef2 	bl	800aa5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	3324      	adds	r3, #36	; 0x24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff feed 	bl	800aa5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac82:	f002 f9e7 	bl	800d054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac86:	2301      	movs	r3, #1
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08e      	sub	sp, #56	; 0x38
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <xQueueGenericCreateStatic+0x52>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <xQueueGenericCreateStatic+0x56>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <xQueueGenericCreateStatic+0x58>
 800acea:	2300      	movs	r3, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	623b      	str	r3, [r7, #32]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <xQueueGenericCreateStatic+0x7e>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <xQueueGenericCreateStatic+0x82>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <xQueueGenericCreateStatic+0x84>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	61fb      	str	r3, [r7, #28]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad32:	2350      	movs	r3, #80	; 0x50
 800ad34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b50      	cmp	r3, #80	; 0x50
 800ad3a:	d00a      	beq.n	800ad52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	61bb      	str	r3, [r7, #24]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00d      	beq.n	800ad7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	9300      	str	r3, [sp, #0]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 f83f 	bl	800adf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3730      	adds	r7, #48	; 0x30
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08a      	sub	sp, #40	; 0x28
 800ad88:	af02      	add	r7, sp, #8
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	613b      	str	r3, [r7, #16]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	fb02 f303 	mul.w	r3, r2, r3
 800adb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	3350      	adds	r3, #80	; 0x50
 800adbc:	4618      	mov	r0, r3
 800adbe:	f002 fa3b 	bl	800d238 <pvPortMalloc>
 800adc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	3350      	adds	r3, #80	; 0x50
 800add2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800addc:	79fa      	ldrb	r2, [r7, #7]
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	4613      	mov	r3, r2
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	68b9      	ldr	r1, [r7, #8]
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 f805 	bl	800adf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adee:	69bb      	ldr	r3, [r7, #24]
	}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	e002      	b.n	800ae1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae26:	2101      	movs	r1, #1
 800ae28:	69b8      	ldr	r0, [r7, #24]
 800ae2a:	f7ff fecb 	bl	800abc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	78fa      	ldrb	r2, [r7, #3]
 800ae32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08e      	sub	sp, #56	; 0x38
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10a      	bne.n	800ae72 <xQueueGenericSend+0x32>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae6e:	bf00      	nop
 800ae70:	e7fe      	b.n	800ae70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d103      	bne.n	800ae80 <xQueueGenericSend+0x40>
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <xQueueGenericSend+0x44>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <xQueueGenericSend+0x46>
 800ae84:	2300      	movs	r3, #0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <xQueueGenericSend+0x60>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d103      	bne.n	800aeae <xQueueGenericSend+0x6e>
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <xQueueGenericSend+0x72>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <xQueueGenericSend+0x74>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xQueueGenericSend+0x8e>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	623b      	str	r3, [r7, #32]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aece:	f001 fb35 	bl	800c53c <xTaskGetSchedulerState>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <xQueueGenericSend+0x9e>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <xQueueGenericSend+0xa2>
 800aede:	2301      	movs	r3, #1
 800aee0:	e000      	b.n	800aee4 <xQueueGenericSend+0xa4>
 800aee2:	2300      	movs	r3, #0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <xQueueGenericSend+0xbe>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	61fb      	str	r3, [r7, #28]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aefe:	f002 f879 	bl	800cff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <xQueueGenericSend+0xd4>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d129      	bne.n	800af68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	68b9      	ldr	r1, [r7, #8]
 800af18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1a:	f000 fa0b 	bl	800b334 <prvCopyDataToQueue>
 800af1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d010      	beq.n	800af4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 f947 	bl	800c1c0 <xTaskRemoveFromEventList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d013      	beq.n	800af60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af38:	4b3f      	ldr	r3, [pc, #252]	; (800b038 <xQueueGenericSend+0x1f8>)
 800af3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	e00a      	b.n	800af60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af50:	4b39      	ldr	r3, [pc, #228]	; (800b038 <xQueueGenericSend+0x1f8>)
 800af52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af60:	f002 f878 	bl	800d054 <vPortExitCritical>
				return pdPASS;
 800af64:	2301      	movs	r3, #1
 800af66:	e063      	b.n	800b030 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d103      	bne.n	800af76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af6e:	f002 f871 	bl	800d054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af72:	2300      	movs	r3, #0
 800af74:	e05c      	b.n	800b030 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d106      	bne.n	800af8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af7c:	f107 0314 	add.w	r3, r7, #20
 800af80:	4618      	mov	r0, r3
 800af82:	f001 f981 	bl	800c288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af86:	2301      	movs	r3, #1
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af8a:	f002 f863 	bl	800d054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af8e:	f000 fef3 	bl	800bd78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af92:	f002 f82f 	bl	800cff4 <vPortEnterCritical>
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af9c:	b25b      	sxtb	r3, r3
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d103      	bne.n	800afac <xQueueGenericSend+0x16c>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb2:	b25b      	sxtb	r3, r3
 800afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb8:	d103      	bne.n	800afc2 <xQueueGenericSend+0x182>
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc2:	f002 f847 	bl	800d054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afc6:	1d3a      	adds	r2, r7, #4
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 f970 	bl	800c2b4 <xTaskCheckForTimeOut>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d124      	bne.n	800b024 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afdc:	f000 faa2 	bl	800b524 <prvIsQueueFull>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d018      	beq.n	800b018 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	3310      	adds	r3, #16
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 f896 	bl	800c120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aff6:	f000 fa2d 	bl	800b454 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800affa:	f000 fecb 	bl	800bd94 <xTaskResumeAll>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f47f af7c 	bne.w	800aefe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b006:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <xQueueGenericSend+0x1f8>)
 800b008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	e772      	b.n	800aefe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b01a:	f000 fa1b 	bl	800b454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b01e:	f000 feb9 	bl	800bd94 <xTaskResumeAll>
 800b022:	e76c      	b.n	800aefe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b026:	f000 fa15 	bl	800b454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b02a:	f000 feb3 	bl	800bd94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b02e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b030:	4618      	mov	r0, r3
 800b032:	3738      	adds	r7, #56	; 0x38
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b090      	sub	sp, #64	; 0x40
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <xQueueGenericSendFromISR+0x3c>
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <xQueueGenericSendFromISR+0x40>
 800b078:	2301      	movs	r3, #1
 800b07a:	e000      	b.n	800b07e <xQueueGenericSendFromISR+0x42>
 800b07c:	2300      	movs	r3, #0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d103      	bne.n	800b0a6 <xQueueGenericSendFromISR+0x6a>
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d101      	bne.n	800b0aa <xQueueGenericSendFromISR+0x6e>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <xQueueGenericSendFromISR+0x70>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	623b      	str	r3, [r7, #32]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0c6:	f002 f877 	bl	800d1b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	61fa      	str	r2, [r7, #28]
 800b0e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d302      	bcc.n	800b0f8 <xQueueGenericSendFromISR+0xbc>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d12f      	bne.n	800b158 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b10e:	f000 f911 	bl	800b334 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b112:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11a:	d112      	bne.n	800b142 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2b00      	cmp	r3, #0
 800b122:	d016      	beq.n	800b152 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	3324      	adds	r3, #36	; 0x24
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 f849 	bl	800c1c0 <xTaskRemoveFromEventList>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00e      	beq.n	800b152 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00b      	beq.n	800b152 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	e007      	b.n	800b152 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b146:	3301      	adds	r3, #1
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	b25a      	sxtb	r2, r3
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b152:	2301      	movs	r3, #1
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b156:	e001      	b.n	800b15c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b158:	2300      	movs	r3, #0
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b166:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3740      	adds	r7, #64	; 0x40
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <xQueueReceive+0x30>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	623b      	str	r3, [r7, #32]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <xQueueReceive+0x3e>
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <xQueueReceive+0x42>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <xQueueReceive+0x44>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <xQueueReceive+0x5e>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	61fb      	str	r3, [r7, #28]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1d2:	f001 f9b3 	bl	800c53c <xTaskGetSchedulerState>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d102      	bne.n	800b1e2 <xQueueReceive+0x6e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <xQueueReceive+0x72>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e000      	b.n	800b1e8 <xQueueReceive+0x74>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <xQueueReceive+0x8e>
	__asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	61bb      	str	r3, [r7, #24]
}
 800b1fe:	bf00      	nop
 800b200:	e7fe      	b.n	800b200 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b202:	f001 fef7 	bl	800cff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01f      	beq.n	800b252 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b216:	f000 f8f7 	bl	800b408 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	1e5a      	subs	r2, r3, #1
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	3310      	adds	r3, #16
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 ffc6 	bl	800c1c0 <xTaskRemoveFromEventList>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d007      	beq.n	800b24a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b23a:	4b3d      	ldr	r3, [pc, #244]	; (800b330 <xQueueReceive+0x1bc>)
 800b23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b24a:	f001 ff03 	bl	800d054 <vPortExitCritical>
				return pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	e069      	b.n	800b326 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d103      	bne.n	800b260 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b258:	f001 fefc 	bl	800d054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b25c:	2300      	movs	r3, #0
 800b25e:	e062      	b.n	800b326 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b266:	f107 0310 	add.w	r3, r7, #16
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 f80c 	bl	800c288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b270:	2301      	movs	r3, #1
 800b272:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b274:	f001 feee 	bl	800d054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b278:	f000 fd7e 	bl	800bd78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b27c:	f001 feba 	bl	800cff4 <vPortEnterCritical>
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b286:	b25b      	sxtb	r3, r3
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28c:	d103      	bne.n	800b296 <xQueueReceive+0x122>
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b29c:	b25b      	sxtb	r3, r3
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d103      	bne.n	800b2ac <xQueueReceive+0x138>
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2ac:	f001 fed2 	bl	800d054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2b0:	1d3a      	adds	r2, r7, #4
 800b2b2:	f107 0310 	add.w	r3, r7, #16
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fffb 	bl	800c2b4 <xTaskCheckForTimeOut>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d123      	bne.n	800b30c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c6:	f000 f917 	bl	800b4f8 <prvIsQueueEmpty>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d017      	beq.n	800b300 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	3324      	adds	r3, #36	; 0x24
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 ff21 	bl	800c120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e0:	f000 f8b8 	bl	800b454 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2e4:	f000 fd56 	bl	800bd94 <xTaskResumeAll>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d189      	bne.n	800b202 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <xQueueReceive+0x1bc>)
 800b2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	e780      	b.n	800b202 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b302:	f000 f8a7 	bl	800b454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b306:	f000 fd45 	bl	800bd94 <xTaskResumeAll>
 800b30a:	e77a      	b.n	800b202 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30e:	f000 f8a1 	bl	800b454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b312:	f000 fd3f 	bl	800bd94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b318:	f000 f8ee 	bl	800b4f8 <prvIsQueueEmpty>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f43f af6f 	beq.w	800b202 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b326:	4618      	mov	r0, r3
 800b328:	3730      	adds	r7, #48	; 0x30
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	e000ed04 	.word	0xe000ed04

0800b334 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10d      	bne.n	800b36e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d14d      	bne.n	800b3f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 f90a 	bl	800c578 <xTaskPriorityDisinherit>
 800b364:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	609a      	str	r2, [r3, #8]
 800b36c:	e043      	b.n	800b3f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d119      	bne.n	800b3a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6858      	ldr	r0, [r3, #4]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	461a      	mov	r2, r3
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	f002 fe86 	bl	800e090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	441a      	add	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d32b      	bcc.n	800b3f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	605a      	str	r2, [r3, #4]
 800b3a6:	e026      	b.n	800b3f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68d8      	ldr	r0, [r3, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	f002 fe6c 	bl	800e090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c0:	425b      	negs	r3, r3
 800b3c2:	441a      	add	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d207      	bcs.n	800b3e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	425b      	negs	r3, r3
 800b3de:	441a      	add	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d105      	bne.n	800b3f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3fe:	697b      	ldr	r3, [r7, #20]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b416:	2b00      	cmp	r3, #0
 800b418:	d018      	beq.n	800b44c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	441a      	add	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	429a      	cmp	r2, r3
 800b432:	d303      	bcc.n	800b43c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68d9      	ldr	r1, [r3, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b444:	461a      	mov	r2, r3
 800b446:	6838      	ldr	r0, [r7, #0]
 800b448:	f002 fe22 	bl	800e090 <memcpy>
	}
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b45c:	f001 fdca 	bl	800cff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b466:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b468:	e011      	b.n	800b48e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d012      	beq.n	800b498 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3324      	adds	r3, #36	; 0x24
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fea2 	bl	800c1c0 <xTaskRemoveFromEventList>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b482:	f000 ff79 	bl	800c378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	3b01      	subs	r3, #1
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b492:	2b00      	cmp	r3, #0
 800b494:	dce9      	bgt.n	800b46a <prvUnlockQueue+0x16>
 800b496:	e000      	b.n	800b49a <prvUnlockQueue+0x46>
					break;
 800b498:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	22ff      	movs	r2, #255	; 0xff
 800b49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b4a2:	f001 fdd7 	bl	800d054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4a6:	f001 fda5 	bl	800cff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4b2:	e011      	b.n	800b4d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d012      	beq.n	800b4e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3310      	adds	r3, #16
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fe7d 	bl	800c1c0 <xTaskRemoveFromEventList>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4cc:	f000 ff54 	bl	800c378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dce9      	bgt.n	800b4b4 <prvUnlockQueue+0x60>
 800b4e0:	e000      	b.n	800b4e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	22ff      	movs	r2, #255	; 0xff
 800b4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4ec:	f001 fdb2 	bl	800d054 <vPortExitCritical>
}
 800b4f0:	bf00      	nop
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b500:	f001 fd78 	bl	800cff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d102      	bne.n	800b512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b50c:	2301      	movs	r3, #1
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	e001      	b.n	800b516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b516:	f001 fd9d 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800b51a:	68fb      	ldr	r3, [r7, #12]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b52c:	f001 fd62 	bl	800cff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b538:	429a      	cmp	r2, r3
 800b53a:	d102      	bne.n	800b542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	e001      	b.n	800b546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b546:	f001 fd85 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800b54a:	68fb      	ldr	r3, [r7, #12]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e014      	b.n	800b58e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b564:	4a0f      	ldr	r2, [pc, #60]	; (800b5a4 <vQueueAddToRegistry+0x50>)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10b      	bne.n	800b588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b570:	490c      	ldr	r1, [pc, #48]	; (800b5a4 <vQueueAddToRegistry+0x50>)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b57a:	4a0a      	ldr	r2, [pc, #40]	; (800b5a4 <vQueueAddToRegistry+0x50>)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	4413      	add	r3, r2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b586:	e006      	b.n	800b596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b07      	cmp	r3, #7
 800b592:	d9e7      	bls.n	800b564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20001538 	.word	0x20001538

0800b5a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5b8:	f001 fd1c 	bl	800cff4 <vPortEnterCritical>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5c2:	b25b      	sxtb	r3, r3
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d103      	bne.n	800b5d2 <vQueueWaitForMessageRestricted+0x2a>
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5d8:	b25b      	sxtb	r3, r3
 800b5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5de:	d103      	bne.n	800b5e8 <vQueueWaitForMessageRestricted+0x40>
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5e8:	f001 fd34 	bl	800d054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d106      	bne.n	800b602 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	3324      	adds	r3, #36	; 0x24
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fdb3 	bl	800c168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b602:	6978      	ldr	r0, [r7, #20]
 800b604:	f7ff ff26 	bl	800b454 <prvUnlockQueue>
	}
 800b608:	bf00      	nop
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08e      	sub	sp, #56	; 0x38
 800b614:	af04      	add	r7, sp, #16
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10a      	bne.n	800b63a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	623b      	str	r3, [r7, #32]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <xTaskCreateStatic+0x46>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	61fb      	str	r3, [r7, #28]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b656:	236c      	movs	r3, #108	; 0x6c
 800b658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b6c      	cmp	r3, #108	; 0x6c
 800b65e:	d00a      	beq.n	800b676 <xTaskCreateStatic+0x66>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	61bb      	str	r3, [r7, #24]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b676:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d01e      	beq.n	800b6bc <xTaskCreateStatic+0xac>
 800b67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b680:	2b00      	cmp	r3, #0
 800b682:	d01b      	beq.n	800b6bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	2202      	movs	r2, #2
 800b692:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b696:	2300      	movs	r3, #0
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	9302      	str	r3, [sp, #8]
 800b69e:	f107 0314 	add.w	r3, r7, #20
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 f850 	bl	800b754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6b6:	f000 f8dd 	bl	800b874 <prvAddNewTaskToReadyList>
 800b6ba:	e001      	b.n	800b6c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6c0:	697b      	ldr	r3, [r7, #20]
	}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3728      	adds	r7, #40	; 0x28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b08c      	sub	sp, #48	; 0x30
 800b6ce:	af04      	add	r7, sp, #16
 800b6d0:	60f8      	str	r0, [r7, #12]
 800b6d2:	60b9      	str	r1, [r7, #8]
 800b6d4:	603b      	str	r3, [r7, #0]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fdaa 	bl	800d238 <pvPortMalloc>
 800b6e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00e      	beq.n	800b70a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6ec:	206c      	movs	r0, #108	; 0x6c
 800b6ee:	f001 fda3 	bl	800d238 <pvPortMalloc>
 800b6f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	631a      	str	r2, [r3, #48]	; 0x30
 800b700:	e005      	b.n	800b70e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b702:	6978      	ldr	r0, [r7, #20]
 800b704:	f001 fe64 	bl	800d3d0 <vPortFree>
 800b708:	e001      	b.n	800b70e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d017      	beq.n	800b744 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b71c:	88fa      	ldrh	r2, [r7, #6]
 800b71e:	2300      	movs	r3, #0
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68b9      	ldr	r1, [r7, #8]
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f000 f80e 	bl	800b754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b738:	69f8      	ldr	r0, [r7, #28]
 800b73a:	f000 f89b 	bl	800b874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b73e:	2301      	movs	r3, #1
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	e002      	b.n	800b74a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b744:	f04f 33ff 	mov.w	r3, #4294967295
 800b748:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b74a:	69bb      	ldr	r3, [r7, #24]
	}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	461a      	mov	r2, r3
 800b76c:	21a5      	movs	r1, #165	; 0xa5
 800b76e:	f002 fc9d 	bl	800e0ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b77c:	3b01      	subs	r3, #1
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	f023 0307 	bic.w	r3, r3, #7
 800b78a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	617b      	str	r3, [r7, #20]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01f      	beq.n	800b7f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	e012      	b.n	800b7de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	4413      	add	r3, r2
 800b7be:	7819      	ldrb	r1, [r3, #0]
 800b7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	3334      	adds	r3, #52	; 0x34
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	2b1d      	cmp	r3, #29
 800b7e2:	d9e9      	bls.n	800b7b8 <prvInitialiseNewTask+0x64>
 800b7e4:	e000      	b.n	800b7e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b7e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b7f0:	e003      	b.n	800b7fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	2b37      	cmp	r3, #55	; 0x37
 800b7fe:	d901      	bls.n	800b804 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b800:	2337      	movs	r3, #55	; 0x37
 800b802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b80e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	2200      	movs	r2, #0
 800b814:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	3304      	adds	r3, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff f93e 	bl	800aa9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	3318      	adds	r3, #24
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff f939 	bl	800aa9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2200      	movs	r2, #0
 800b844:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	68f9      	ldr	r1, [r7, #12]
 800b852:	69b8      	ldr	r0, [r7, #24]
 800b854:	f001 faa0 	bl	800cd98 <pxPortInitialiseStack>
 800b858:	4602      	mov	r2, r0
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b86a:	bf00      	nop
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b87c:	f001 fbba 	bl	800cff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b880:	4b2d      	ldr	r3, [pc, #180]	; (800b938 <prvAddNewTaskToReadyList+0xc4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	4a2c      	ldr	r2, [pc, #176]	; (800b938 <prvAddNewTaskToReadyList+0xc4>)
 800b888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b88a:	4b2c      	ldr	r3, [pc, #176]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d109      	bne.n	800b8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b892:	4a2a      	ldr	r2, [pc, #168]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b898:	4b27      	ldr	r3, [pc, #156]	; (800b938 <prvAddNewTaskToReadyList+0xc4>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d110      	bne.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8a0:	f000 fd8e 	bl	800c3c0 <prvInitialiseTaskLists>
 800b8a4:	e00d      	b.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8a6:	4b26      	ldr	r3, [pc, #152]	; (800b940 <prvAddNewTaskToReadyList+0xcc>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8ae:	4b23      	ldr	r3, [pc, #140]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d802      	bhi.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8bc:	4a1f      	ldr	r2, [pc, #124]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <prvAddNewTaskToReadyList+0xd0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a1e      	ldr	r2, [pc, #120]	; (800b944 <prvAddNewTaskToReadyList+0xd0>)
 800b8ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	; (800b944 <prvAddNewTaskToReadyList+0xd0>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d8:	4b1b      	ldr	r3, [pc, #108]	; (800b948 <prvAddNewTaskToReadyList+0xd4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d903      	bls.n	800b8e8 <prvAddNewTaskToReadyList+0x74>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	4a18      	ldr	r2, [pc, #96]	; (800b948 <prvAddNewTaskToReadyList+0xd4>)
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4a15      	ldr	r2, [pc, #84]	; (800b94c <prvAddNewTaskToReadyList+0xd8>)
 800b8f6:	441a      	add	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f7ff f8d9 	bl	800aab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b904:	f001 fba6 	bl	800d054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b908:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <prvAddNewTaskToReadyList+0xcc>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00e      	beq.n	800b92e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b910:	4b0a      	ldr	r3, [pc, #40]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d207      	bcs.n	800b92e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b91e:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <prvAddNewTaskToReadyList+0xdc>)
 800b920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20001a4c 	.word	0x20001a4c
 800b93c:	20001578 	.word	0x20001578
 800b940:	20001a58 	.word	0x20001a58
 800b944:	20001a68 	.word	0x20001a68
 800b948:	20001a54 	.word	0x20001a54
 800b94c:	2000157c 	.word	0x2000157c
 800b950:	e000ed04 	.word	0xe000ed04

0800b954 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b95c:	f001 fb4a 	bl	800cff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d102      	bne.n	800b96c <vTaskDelete+0x18>
 800b966:	4b2c      	ldr	r3, [pc, #176]	; (800ba18 <vTaskDelete+0xc4>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	e000      	b.n	800b96e <vTaskDelete+0x1a>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff f8fb 	bl	800ab70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d004      	beq.n	800b98c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3318      	adds	r3, #24
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff f8f2 	bl	800ab70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b98c:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <vTaskDelete+0xc8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	4a22      	ldr	r2, [pc, #136]	; (800ba1c <vTaskDelete+0xc8>)
 800b994:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b996:	4b20      	ldr	r3, [pc, #128]	; (800ba18 <vTaskDelete+0xc4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d10b      	bne.n	800b9b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	481e      	ldr	r0, [pc, #120]	; (800ba20 <vTaskDelete+0xcc>)
 800b9a8:	f7ff f885 	bl	800aab6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b9ac:	4b1d      	ldr	r3, [pc, #116]	; (800ba24 <vTaskDelete+0xd0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4a1c      	ldr	r2, [pc, #112]	; (800ba24 <vTaskDelete+0xd0>)
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	e009      	b.n	800b9cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b9b8:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <vTaskDelete+0xd4>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	4a1a      	ldr	r2, [pc, #104]	; (800ba28 <vTaskDelete+0xd4>)
 800b9c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 fd6a 	bl	800c49c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b9c8:	f000 fd98 	bl	800c4fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b9cc:	f001 fb42 	bl	800d054 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b9d0:	4b16      	ldr	r3, [pc, #88]	; (800ba2c <vTaskDelete+0xd8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d01b      	beq.n	800ba10 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <vTaskDelete+0xc4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d116      	bne.n	800ba10 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b9e2:	4b13      	ldr	r3, [pc, #76]	; (800ba30 <vTaskDelete+0xdc>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <vTaskDelete+0xac>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	60bb      	str	r3, [r7, #8]
}
 800b9fc:	bf00      	nop
 800b9fe:	e7fe      	b.n	800b9fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ba00:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <vTaskDelete+0xe0>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba10:	bf00      	nop
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20001578 	.word	0x20001578
 800ba1c:	20001a68 	.word	0x20001a68
 800ba20:	20001a20 	.word	0x20001a20
 800ba24:	20001a34 	.word	0x20001a34
 800ba28:	20001a4c 	.word	0x20001a4c
 800ba2c:	20001a58 	.word	0x20001a58
 800ba30:	20001a74 	.word	0x20001a74
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d017      	beq.n	800ba7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <vTaskDelay+0x60>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <vTaskDelay+0x30>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba68:	f000 f986 	bl	800bd78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fdf0 	bl	800c654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba74:	f000 f98e 	bl	800bd94 <xTaskResumeAll>
 800ba78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <vTaskDelay+0x64>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20001a74 	.word	0x20001a74
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800baa8:	f001 faa4 	bl	800cff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <vTaskSuspend+0x18>
 800bab2:	4b30      	ldr	r3, [pc, #192]	; (800bb74 <vTaskSuspend+0xd4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	e000      	b.n	800baba <vTaskSuspend+0x1a>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff f855 	bl	800ab70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	3318      	adds	r3, #24
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff f84c 	bl	800ab70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3304      	adds	r3, #4
 800badc:	4619      	mov	r1, r3
 800bade:	4826      	ldr	r0, [pc, #152]	; (800bb78 <vTaskSuspend+0xd8>)
 800bae0:	f7fe ffe9 	bl	800aab6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b01      	cmp	r3, #1
 800baee:	d103      	bne.n	800baf8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800baf8:	f001 faac 	bl	800d054 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bafc:	4b1f      	ldr	r3, [pc, #124]	; (800bb7c <vTaskSuspend+0xdc>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bb04:	f001 fa76 	bl	800cff4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bb08:	f000 fcf8 	bl	800c4fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bb0c:	f001 faa2 	bl	800d054 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bb10:	4b18      	ldr	r3, [pc, #96]	; (800bb74 <vTaskSuspend+0xd4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d127      	bne.n	800bb6a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800bb1a:	4b18      	ldr	r3, [pc, #96]	; (800bb7c <vTaskSuspend+0xdc>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d017      	beq.n	800bb52 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bb22:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <vTaskSuspend+0xe0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <vTaskSuspend+0xa0>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	60bb      	str	r3, [r7, #8]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800bb40:	4b10      	ldr	r3, [pc, #64]	; (800bb84 <vTaskSuspend+0xe4>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb50:	e00b      	b.n	800bb6a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <vTaskSuspend+0xd8>)
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <vTaskSuspend+0xe8>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d103      	bne.n	800bb66 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800bb5e:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <vTaskSuspend+0xd4>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	601a      	str	r2, [r3, #0]
	}
 800bb64:	e001      	b.n	800bb6a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800bb66:	f000 fa7d 	bl	800c064 <vTaskSwitchContext>
	}
 800bb6a:	bf00      	nop
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20001578 	.word	0x20001578
 800bb78:	20001a38 	.word	0x20001a38
 800bb7c:	20001a58 	.word	0x20001a58
 800bb80:	20001a74 	.word	0x20001a74
 800bb84:	e000ed04 	.word	0xe000ed04
 800bb88:	20001a4c 	.word	0x20001a4c

0800bb8c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bb94:	2300      	movs	r3, #0
 800bb96:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	60fb      	str	r3, [r7, #12]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	4a0a      	ldr	r2, [pc, #40]	; (800bbe8 <prvTaskIsTaskSuspended+0x5c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d10a      	bne.n	800bbd8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc6:	4a09      	ldr	r2, [pc, #36]	; (800bbec <prvTaskIsTaskSuspended+0x60>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d005      	beq.n	800bbd8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbd8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bbda:	4618      	mov	r0, r3
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	20001a38 	.word	0x20001a38
 800bbec:	20001a0c 	.word	0x20001a0c

0800bbf0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <vTaskResume+0x28>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	60bb      	str	r3, [r7, #8]
}
 800bc14:	bf00      	nop
 800bc16:	e7fe      	b.n	800bc16 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800bc18:	4b20      	ldr	r3, [pc, #128]	; (800bc9c <vTaskResume+0xac>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d038      	beq.n	800bc94 <vTaskResume+0xa4>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d035      	beq.n	800bc94 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800bc28:	f001 f9e4 	bl	800cff4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7ff ffad 	bl	800bb8c <prvTaskIsTaskSuspended>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d02b      	beq.n	800bc90 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe ff97 	bl	800ab70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <vTaskResume+0xb0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d903      	bls.n	800bc56 <vTaskResume+0x66>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc52:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <vTaskResume+0xb0>)
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4a10      	ldr	r2, [pc, #64]	; (800bca4 <vTaskResume+0xb4>)
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f7fe ff22 	bl	800aab6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <vTaskResume+0xac>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d307      	bcc.n	800bc90 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bc80:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <vTaskResume+0xb8>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bc90:	f001 f9e0 	bl	800d054 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20001578 	.word	0x20001578
 800bca0:	20001a54 	.word	0x20001a54
 800bca4:	2000157c 	.word	0x2000157c
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08a      	sub	sp, #40	; 0x28
 800bcb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcba:	463a      	mov	r2, r7
 800bcbc:	1d39      	adds	r1, r7, #4
 800bcbe:	f107 0308 	add.w	r3, r7, #8
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fe96 	bl	800a9f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	9202      	str	r2, [sp, #8]
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	460a      	mov	r2, r1
 800bcda:	4921      	ldr	r1, [pc, #132]	; (800bd60 <vTaskStartScheduler+0xb4>)
 800bcdc:	4821      	ldr	r0, [pc, #132]	; (800bd64 <vTaskStartScheduler+0xb8>)
 800bcde:	f7ff fc97 	bl	800b610 <xTaskCreateStatic>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4a20      	ldr	r2, [pc, #128]	; (800bd68 <vTaskStartScheduler+0xbc>)
 800bce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bce8:	4b1f      	ldr	r3, [pc, #124]	; (800bd68 <vTaskStartScheduler+0xbc>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	e001      	b.n	800bcfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d102      	bne.n	800bd06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd00:	f000 fcfc 	bl	800c6fc <xTimerCreateTimerTask>
 800bd04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d116      	bne.n	800bd3a <vTaskStartScheduler+0x8e>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	613b      	str	r3, [r7, #16]
}
 800bd1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd20:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <vTaskStartScheduler+0xc0>)
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295
 800bd26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd28:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <vTaskStartScheduler+0xc4>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd2e:	4b11      	ldr	r3, [pc, #68]	; (800bd74 <vTaskStartScheduler+0xc8>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd34:	f001 f8bc 	bl	800ceb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd38:	e00e      	b.n	800bd58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d10a      	bne.n	800bd58 <vTaskStartScheduler+0xac>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	60fb      	str	r3, [r7, #12]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <vTaskStartScheduler+0xaa>
}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	0800ed1c 	.word	0x0800ed1c
 800bd64:	0800c391 	.word	0x0800c391
 800bd68:	20001a70 	.word	0x20001a70
 800bd6c:	20001a6c 	.word	0x20001a6c
 800bd70:	20001a58 	.word	0x20001a58
 800bd74:	20001a50 	.word	0x20001a50

0800bd78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd7c:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <vTaskSuspendAll+0x18>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3301      	adds	r3, #1
 800bd82:	4a03      	ldr	r2, [pc, #12]	; (800bd90 <vTaskSuspendAll+0x18>)
 800bd84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd86:	bf00      	nop
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	20001a74 	.word	0x20001a74

0800bd94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bda2:	4b42      	ldr	r3, [pc, #264]	; (800beac <xTaskResumeAll+0x118>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <xTaskResumeAll+0x2c>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	603b      	str	r3, [r7, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdc0:	f001 f918 	bl	800cff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdc4:	4b39      	ldr	r3, [pc, #228]	; (800beac <xTaskResumeAll+0x118>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4a38      	ldr	r2, [pc, #224]	; (800beac <xTaskResumeAll+0x118>)
 800bdcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdce:	4b37      	ldr	r3, [pc, #220]	; (800beac <xTaskResumeAll+0x118>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d162      	bne.n	800be9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdd6:	4b36      	ldr	r3, [pc, #216]	; (800beb0 <xTaskResumeAll+0x11c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d05e      	beq.n	800be9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdde:	e02f      	b.n	800be40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde0:	4b34      	ldr	r3, [pc, #208]	; (800beb4 <xTaskResumeAll+0x120>)
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3318      	adds	r3, #24
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe febf 	bl	800ab70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe feba 	bl	800ab70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be00:	4b2d      	ldr	r3, [pc, #180]	; (800beb8 <xTaskResumeAll+0x124>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d903      	bls.n	800be10 <xTaskResumeAll+0x7c>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	4a2a      	ldr	r2, [pc, #168]	; (800beb8 <xTaskResumeAll+0x124>)
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be14:	4613      	mov	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4a27      	ldr	r2, [pc, #156]	; (800bebc <xTaskResumeAll+0x128>)
 800be1e:	441a      	add	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3304      	adds	r3, #4
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	f7fe fe45 	bl	800aab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	4b23      	ldr	r3, [pc, #140]	; (800bec0 <xTaskResumeAll+0x12c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	429a      	cmp	r2, r3
 800be38:	d302      	bcc.n	800be40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800be3a:	4b22      	ldr	r3, [pc, #136]	; (800bec4 <xTaskResumeAll+0x130>)
 800be3c:	2201      	movs	r2, #1
 800be3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be40:	4b1c      	ldr	r3, [pc, #112]	; (800beb4 <xTaskResumeAll+0x120>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1cb      	bne.n	800bde0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be4e:	f000 fb55 	bl	800c4fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be52:	4b1d      	ldr	r3, [pc, #116]	; (800bec8 <xTaskResumeAll+0x134>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d010      	beq.n	800be80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be5e:	f000 f847 	bl	800bef0 <xTaskIncrementTick>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800be68:	4b16      	ldr	r3, [pc, #88]	; (800bec4 <xTaskResumeAll+0x130>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3b01      	subs	r3, #1
 800be72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f1      	bne.n	800be5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800be7a:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <xTaskResumeAll+0x134>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be80:	4b10      	ldr	r3, [pc, #64]	; (800bec4 <xTaskResumeAll+0x130>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be8c:	4b0f      	ldr	r3, [pc, #60]	; (800becc <xTaskResumeAll+0x138>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be9c:	f001 f8da 	bl	800d054 <vPortExitCritical>

	return xAlreadyYielded;
 800bea0:	68bb      	ldr	r3, [r7, #8]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20001a74 	.word	0x20001a74
 800beb0:	20001a4c 	.word	0x20001a4c
 800beb4:	20001a0c 	.word	0x20001a0c
 800beb8:	20001a54 	.word	0x20001a54
 800bebc:	2000157c 	.word	0x2000157c
 800bec0:	20001578 	.word	0x20001578
 800bec4:	20001a60 	.word	0x20001a60
 800bec8:	20001a5c 	.word	0x20001a5c
 800becc:	e000ed04 	.word	0xe000ed04

0800bed0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bed6:	4b05      	ldr	r3, [pc, #20]	; (800beec <xTaskGetTickCount+0x1c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bedc:	687b      	ldr	r3, [r7, #4]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	20001a50 	.word	0x20001a50

0800bef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bef6:	2300      	movs	r3, #0
 800bef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800befa:	4b4f      	ldr	r3, [pc, #316]	; (800c038 <xTaskIncrementTick+0x148>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f040 808f 	bne.w	800c022 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf04:	4b4d      	ldr	r3, [pc, #308]	; (800c03c <xTaskIncrementTick+0x14c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf0c:	4a4b      	ldr	r2, [pc, #300]	; (800c03c <xTaskIncrementTick+0x14c>)
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d120      	bne.n	800bf5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf18:	4b49      	ldr	r3, [pc, #292]	; (800c040 <xTaskIncrementTick+0x150>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00a      	beq.n	800bf38 <xTaskIncrementTick+0x48>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	603b      	str	r3, [r7, #0]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <xTaskIncrementTick+0x46>
 800bf38:	4b41      	ldr	r3, [pc, #260]	; (800c040 <xTaskIncrementTick+0x150>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	4b41      	ldr	r3, [pc, #260]	; (800c044 <xTaskIncrementTick+0x154>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a3f      	ldr	r2, [pc, #252]	; (800c040 <xTaskIncrementTick+0x150>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	4a3f      	ldr	r2, [pc, #252]	; (800c044 <xTaskIncrementTick+0x154>)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	4b3e      	ldr	r3, [pc, #248]	; (800c048 <xTaskIncrementTick+0x158>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3301      	adds	r3, #1
 800bf52:	4a3d      	ldr	r2, [pc, #244]	; (800c048 <xTaskIncrementTick+0x158>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	f000 fad1 	bl	800c4fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf5a:	4b3c      	ldr	r3, [pc, #240]	; (800c04c <xTaskIncrementTick+0x15c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d349      	bcc.n	800bff8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf64:	4b36      	ldr	r3, [pc, #216]	; (800c040 <xTaskIncrementTick+0x150>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d104      	bne.n	800bf78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6e:	4b37      	ldr	r3, [pc, #220]	; (800c04c <xTaskIncrementTick+0x15c>)
 800bf70:	f04f 32ff 	mov.w	r2, #4294967295
 800bf74:	601a      	str	r2, [r3, #0]
					break;
 800bf76:	e03f      	b.n	800bff8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf78:	4b31      	ldr	r3, [pc, #196]	; (800c040 <xTaskIncrementTick+0x150>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d203      	bcs.n	800bf98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf90:	4a2e      	ldr	r2, [pc, #184]	; (800c04c <xTaskIncrementTick+0x15c>)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf96:	e02f      	b.n	800bff8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fe fde7 	bl	800ab70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3318      	adds	r3, #24
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fdde 	bl	800ab70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4b25      	ldr	r3, [pc, #148]	; (800c050 <xTaskIncrementTick+0x160>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d903      	bls.n	800bfc8 <xTaskIncrementTick+0xd8>
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	4a22      	ldr	r2, [pc, #136]	; (800c050 <xTaskIncrementTick+0x160>)
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfcc:	4613      	mov	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4a1f      	ldr	r2, [pc, #124]	; (800c054 <xTaskIncrementTick+0x164>)
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f7fe fd69 	bl	800aab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <xTaskIncrementTick+0x168>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d3b8      	bcc.n	800bf64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bff2:	2301      	movs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bff6:	e7b5      	b.n	800bf64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bff8:	4b17      	ldr	r3, [pc, #92]	; (800c058 <xTaskIncrementTick+0x168>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffe:	4915      	ldr	r1, [pc, #84]	; (800c054 <xTaskIncrementTick+0x164>)
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d901      	bls.n	800c014 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c010:	2301      	movs	r3, #1
 800c012:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c014:	4b11      	ldr	r3, [pc, #68]	; (800c05c <xTaskIncrementTick+0x16c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c01c:	2301      	movs	r3, #1
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e004      	b.n	800c02c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c022:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <xTaskIncrementTick+0x170>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	4a0d      	ldr	r2, [pc, #52]	; (800c060 <xTaskIncrementTick+0x170>)
 800c02a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c02c:	697b      	ldr	r3, [r7, #20]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20001a74 	.word	0x20001a74
 800c03c:	20001a50 	.word	0x20001a50
 800c040:	20001a04 	.word	0x20001a04
 800c044:	20001a08 	.word	0x20001a08
 800c048:	20001a64 	.word	0x20001a64
 800c04c:	20001a6c 	.word	0x20001a6c
 800c050:	20001a54 	.word	0x20001a54
 800c054:	2000157c 	.word	0x2000157c
 800c058:	20001578 	.word	0x20001578
 800c05c:	20001a60 	.word	0x20001a60
 800c060:	20001a5c 	.word	0x20001a5c

0800c064 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c06a:	4b28      	ldr	r3, [pc, #160]	; (800c10c <vTaskSwitchContext+0xa8>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c072:	4b27      	ldr	r3, [pc, #156]	; (800c110 <vTaskSwitchContext+0xac>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c078:	e041      	b.n	800c0fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c07a:	4b25      	ldr	r3, [pc, #148]	; (800c110 <vTaskSwitchContext+0xac>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c080:	4b24      	ldr	r3, [pc, #144]	; (800c114 <vTaskSwitchContext+0xb0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	60fb      	str	r3, [r7, #12]
 800c086:	e010      	b.n	800c0aa <vTaskSwitchContext+0x46>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	607b      	str	r3, [r7, #4]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <vTaskSwitchContext+0x3e>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	491b      	ldr	r1, [pc, #108]	; (800c118 <vTaskSwitchContext+0xb4>)
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0e4      	beq.n	800c088 <vTaskSwitchContext+0x24>
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4a13      	ldr	r2, [pc, #76]	; (800c118 <vTaskSwitchContext+0xb4>)
 800c0ca:	4413      	add	r3, r2
 800c0cc:	60bb      	str	r3, [r7, #8]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	605a      	str	r2, [r3, #4]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d104      	bne.n	800c0ee <vTaskSwitchContext+0x8a>
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	605a      	str	r2, [r3, #4]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	4a09      	ldr	r2, [pc, #36]	; (800c11c <vTaskSwitchContext+0xb8>)
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	4a06      	ldr	r2, [pc, #24]	; (800c114 <vTaskSwitchContext+0xb0>)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6013      	str	r3, [r2, #0]
}
 800c0fe:	bf00      	nop
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20001a74 	.word	0x20001a74
 800c110:	20001a60 	.word	0x20001a60
 800c114:	20001a54 	.word	0x20001a54
 800c118:	2000157c 	.word	0x2000157c
 800c11c:	20001578 	.word	0x20001578

0800c120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <vTaskPlaceOnEventList+0x44>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3318      	adds	r3, #24
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7fe fcd5 	bl	800aafe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c154:	2101      	movs	r1, #1
 800c156:	6838      	ldr	r0, [r7, #0]
 800c158:	f000 fa7c 	bl	800c654 <prvAddCurrentTaskToDelayedList>
}
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20001578 	.word	0x20001578

0800c168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	617b      	str	r3, [r7, #20]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <vTaskPlaceOnEventListRestricted+0x54>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3318      	adds	r3, #24
 800c196:	4619      	mov	r1, r3
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7fe fc8c 	bl	800aab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	68b8      	ldr	r0, [r7, #8]
 800c1ae:	f000 fa51 	bl	800c654 <prvAddCurrentTaskToDelayedList>
	}
 800c1b2:	bf00      	nop
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20001578 	.word	0x20001578

0800c1c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10a      	bne.n	800c1ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60fb      	str	r3, [r7, #12]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	3318      	adds	r3, #24
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe fcbd 	bl	800ab70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1f6:	4b1e      	ldr	r3, [pc, #120]	; (800c270 <xTaskRemoveFromEventList+0xb0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d11d      	bne.n	800c23a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	3304      	adds	r3, #4
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fcb4 	bl	800ab70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	4b19      	ldr	r3, [pc, #100]	; (800c274 <xTaskRemoveFromEventList+0xb4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d903      	bls.n	800c21c <xTaskRemoveFromEventList+0x5c>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	4a16      	ldr	r2, [pc, #88]	; (800c274 <xTaskRemoveFromEventList+0xb4>)
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4a13      	ldr	r2, [pc, #76]	; (800c278 <xTaskRemoveFromEventList+0xb8>)
 800c22a:	441a      	add	r2, r3
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4610      	mov	r0, r2
 800c234:	f7fe fc3f 	bl	800aab6 <vListInsertEnd>
 800c238:	e005      	b.n	800c246 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	3318      	adds	r3, #24
 800c23e:	4619      	mov	r1, r3
 800c240:	480e      	ldr	r0, [pc, #56]	; (800c27c <xTaskRemoveFromEventList+0xbc>)
 800c242:	f7fe fc38 	bl	800aab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24a:	4b0d      	ldr	r3, [pc, #52]	; (800c280 <xTaskRemoveFromEventList+0xc0>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	429a      	cmp	r2, r3
 800c252:	d905      	bls.n	800c260 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c254:	2301      	movs	r3, #1
 800c256:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <xTaskRemoveFromEventList+0xc4>)
 800c25a:	2201      	movs	r2, #1
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e001      	b.n	800c264 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c264:	697b      	ldr	r3, [r7, #20]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20001a74 	.word	0x20001a74
 800c274:	20001a54 	.word	0x20001a54
 800c278:	2000157c 	.word	0x2000157c
 800c27c:	20001a0c 	.word	0x20001a0c
 800c280:	20001578 	.word	0x20001578
 800c284:	20001a60 	.word	0x20001a60

0800c288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c290:	4b06      	ldr	r3, [pc, #24]	; (800c2ac <vTaskInternalSetTimeOutState+0x24>)
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <vTaskInternalSetTimeOutState+0x28>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	605a      	str	r2, [r3, #4]
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20001a64 	.word	0x20001a64
 800c2b0:	20001a50 	.word	0x20001a50

0800c2b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10a      	bne.n	800c2da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	613b      	str	r3, [r7, #16]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	60fb      	str	r3, [r7, #12]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c2f6:	f000 fe7d 	bl	800cff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2fa:	4b1d      	ldr	r3, [pc, #116]	; (800c370 <xTaskCheckForTimeOut+0xbc>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c312:	d102      	bne.n	800c31a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c314:	2300      	movs	r3, #0
 800c316:	61fb      	str	r3, [r7, #28]
 800c318:	e023      	b.n	800c362 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b15      	ldr	r3, [pc, #84]	; (800c374 <xTaskCheckForTimeOut+0xc0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	d007      	beq.n	800c336 <xTaskCheckForTimeOut+0x82>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d302      	bcc.n	800c336 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	e015      	b.n	800c362 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d20b      	bcs.n	800c358 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff ff9b 	bl	800c288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c352:	2300      	movs	r3, #0
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	e004      	b.n	800c362 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c35e:	2301      	movs	r3, #1
 800c360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c362:	f000 fe77 	bl	800d054 <vPortExitCritical>

	return xReturn;
 800c366:	69fb      	ldr	r3, [r7, #28]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20001a50 	.word	0x20001a50
 800c374:	20001a64 	.word	0x20001a64

0800c378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c378:	b480      	push	{r7}
 800c37a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c37c:	4b03      	ldr	r3, [pc, #12]	; (800c38c <vTaskMissedYield+0x14>)
 800c37e:	2201      	movs	r2, #1
 800c380:	601a      	str	r2, [r3, #0]
}
 800c382:	bf00      	nop
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	20001a60 	.word	0x20001a60

0800c390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c398:	f000 f852 	bl	800c440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c39c:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <prvIdleTask+0x28>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d9f9      	bls.n	800c398 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3a4:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <prvIdleTask+0x2c>)
 800c3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3b4:	e7f0      	b.n	800c398 <prvIdleTask+0x8>
 800c3b6:	bf00      	nop
 800c3b8:	2000157c 	.word	0x2000157c
 800c3bc:	e000ed04 	.word	0xe000ed04

0800c3c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	607b      	str	r3, [r7, #4]
 800c3ca:	e00c      	b.n	800c3e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4a12      	ldr	r2, [pc, #72]	; (800c420 <prvInitialiseTaskLists+0x60>)
 800c3d8:	4413      	add	r3, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fb3e 	bl	800aa5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	607b      	str	r3, [r7, #4]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b37      	cmp	r3, #55	; 0x37
 800c3ea:	d9ef      	bls.n	800c3cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3ec:	480d      	ldr	r0, [pc, #52]	; (800c424 <prvInitialiseTaskLists+0x64>)
 800c3ee:	f7fe fb35 	bl	800aa5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3f2:	480d      	ldr	r0, [pc, #52]	; (800c428 <prvInitialiseTaskLists+0x68>)
 800c3f4:	f7fe fb32 	bl	800aa5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3f8:	480c      	ldr	r0, [pc, #48]	; (800c42c <prvInitialiseTaskLists+0x6c>)
 800c3fa:	f7fe fb2f 	bl	800aa5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3fe:	480c      	ldr	r0, [pc, #48]	; (800c430 <prvInitialiseTaskLists+0x70>)
 800c400:	f7fe fb2c 	bl	800aa5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c404:	480b      	ldr	r0, [pc, #44]	; (800c434 <prvInitialiseTaskLists+0x74>)
 800c406:	f7fe fb29 	bl	800aa5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c40a:	4b0b      	ldr	r3, [pc, #44]	; (800c438 <prvInitialiseTaskLists+0x78>)
 800c40c:	4a05      	ldr	r2, [pc, #20]	; (800c424 <prvInitialiseTaskLists+0x64>)
 800c40e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvInitialiseTaskLists+0x7c>)
 800c412:	4a05      	ldr	r2, [pc, #20]	; (800c428 <prvInitialiseTaskLists+0x68>)
 800c414:	601a      	str	r2, [r3, #0]
}
 800c416:	bf00      	nop
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	2000157c 	.word	0x2000157c
 800c424:	200019dc 	.word	0x200019dc
 800c428:	200019f0 	.word	0x200019f0
 800c42c:	20001a0c 	.word	0x20001a0c
 800c430:	20001a20 	.word	0x20001a20
 800c434:	20001a38 	.word	0x20001a38
 800c438:	20001a04 	.word	0x20001a04
 800c43c:	20001a08 	.word	0x20001a08

0800c440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c446:	e019      	b.n	800c47c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c448:	f000 fdd4 	bl	800cff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c44c:	4b10      	ldr	r3, [pc, #64]	; (800c490 <prvCheckTasksWaitingTermination+0x50>)
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3304      	adds	r3, #4
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe fb89 	bl	800ab70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c45e:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <prvCheckTasksWaitingTermination+0x54>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3b01      	subs	r3, #1
 800c464:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <prvCheckTasksWaitingTermination+0x54>)
 800c466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <prvCheckTasksWaitingTermination+0x58>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <prvCheckTasksWaitingTermination+0x58>)
 800c470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c472:	f000 fdef 	bl	800d054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f810 	bl	800c49c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c47c:	4b06      	ldr	r3, [pc, #24]	; (800c498 <prvCheckTasksWaitingTermination+0x58>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e1      	bne.n	800c448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20001a20 	.word	0x20001a20
 800c494:	20001a4c 	.word	0x20001a4c
 800c498:	20001a34 	.word	0x20001a34

0800c49c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d108      	bne.n	800c4c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 ff8c 	bl	800d3d0 <vPortFree>
				vPortFree( pxTCB );
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 ff89 	bl	800d3d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4be:	e018      	b.n	800c4f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d103      	bne.n	800c4d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 ff80 	bl	800d3d0 <vPortFree>
	}
 800c4d0:	e00f      	b.n	800c4f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d00a      	beq.n	800c4f2 <prvDeleteTCB+0x56>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	60fb      	str	r3, [r7, #12]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <prvDeleteTCB+0x54>
	}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c502:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <prvResetNextTaskUnblockTime+0x38>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c50c:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <prvResetNextTaskUnblockTime+0x3c>)
 800c50e:	f04f 32ff 	mov.w	r2, #4294967295
 800c512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c514:	e008      	b.n	800c528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c516:	4b07      	ldr	r3, [pc, #28]	; (800c534 <prvResetNextTaskUnblockTime+0x38>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4a04      	ldr	r2, [pc, #16]	; (800c538 <prvResetNextTaskUnblockTime+0x3c>)
 800c526:	6013      	str	r3, [r2, #0]
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	20001a04 	.word	0x20001a04
 800c538:	20001a6c 	.word	0x20001a6c

0800c53c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c542:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <xTaskGetSchedulerState+0x34>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c54a:	2301      	movs	r3, #1
 800c54c:	607b      	str	r3, [r7, #4]
 800c54e:	e008      	b.n	800c562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c550:	4b08      	ldr	r3, [pc, #32]	; (800c574 <xTaskGetSchedulerState+0x38>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c558:	2302      	movs	r3, #2
 800c55a:	607b      	str	r3, [r7, #4]
 800c55c:	e001      	b.n	800c562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c55e:	2300      	movs	r3, #0
 800c560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c562:	687b      	ldr	r3, [r7, #4]
	}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20001a58 	.word	0x20001a58
 800c574:	20001a74 	.word	0x20001a74

0800c578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d056      	beq.n	800c63c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c58e:	4b2e      	ldr	r3, [pc, #184]	; (800c648 <xTaskPriorityDisinherit+0xd0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	429a      	cmp	r2, r3
 800c596:	d00a      	beq.n	800c5ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	60fb      	str	r3, [r7, #12]
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10a      	bne.n	800c5cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	60bb      	str	r3, [r7, #8]
}
 800c5c8:	bf00      	nop
 800c5ca:	e7fe      	b.n	800c5ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5d0:	1e5a      	subs	r2, r3, #1
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d02c      	beq.n	800c63c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d128      	bne.n	800c63c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fabe 	bl	800ab70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <xTaskPriorityDisinherit+0xd4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d903      	bls.n	800c61c <xTaskPriorityDisinherit+0xa4>
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <xTaskPriorityDisinherit+0xd4>)
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4a09      	ldr	r2, [pc, #36]	; (800c650 <xTaskPriorityDisinherit+0xd8>)
 800c62a:	441a      	add	r2, r3
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	3304      	adds	r3, #4
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fe fa3f 	bl	800aab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c638:	2301      	movs	r3, #1
 800c63a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c63c:	697b      	ldr	r3, [r7, #20]
	}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20001578 	.word	0x20001578
 800c64c:	20001a54 	.word	0x20001a54
 800c650:	2000157c 	.word	0x2000157c

0800c654 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c65e:	4b21      	ldr	r3, [pc, #132]	; (800c6e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c664:	4b20      	ldr	r3, [pc, #128]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3304      	adds	r3, #4
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fa80 	bl	800ab70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d10a      	bne.n	800c68e <prvAddCurrentTaskToDelayedList+0x3a>
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c67e:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3304      	adds	r3, #4
 800c684:	4619      	mov	r1, r3
 800c686:	4819      	ldr	r0, [pc, #100]	; (800c6ec <prvAddCurrentTaskToDelayedList+0x98>)
 800c688:	f7fe fa15 	bl	800aab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c68c:	e026      	b.n	800c6dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4413      	add	r3, r2
 800c694:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c696:	4b14      	ldr	r3, [pc, #80]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d209      	bcs.n	800c6ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6a6:	4b12      	ldr	r3, [pc, #72]	; (800c6f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	f7fe fa23 	bl	800aafe <vListInsert>
}
 800c6b8:	e010      	b.n	800c6dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	f7fe fa19 	bl	800aafe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d202      	bcs.n	800c6dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6d6:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6013      	str	r3, [r2, #0]
}
 800c6dc:	bf00      	nop
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20001a50 	.word	0x20001a50
 800c6e8:	20001578 	.word	0x20001578
 800c6ec:	20001a38 	.word	0x20001a38
 800c6f0:	20001a08 	.word	0x20001a08
 800c6f4:	20001a04 	.word	0x20001a04
 800c6f8:	20001a6c 	.word	0x20001a6c

0800c6fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	; 0x28
 800c700:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c706:	f000 fb07 	bl	800cd18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c70a:	4b1c      	ldr	r3, [pc, #112]	; (800c77c <xTimerCreateTimerTask+0x80>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d021      	beq.n	800c756 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c71a:	1d3a      	adds	r2, r7, #4
 800c71c:	f107 0108 	add.w	r1, r7, #8
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe f97f 	bl	800aa28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	9202      	str	r2, [sp, #8]
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	2302      	movs	r3, #2
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	2300      	movs	r3, #0
 800c73a:	460a      	mov	r2, r1
 800c73c:	4910      	ldr	r1, [pc, #64]	; (800c780 <xTimerCreateTimerTask+0x84>)
 800c73e:	4811      	ldr	r0, [pc, #68]	; (800c784 <xTimerCreateTimerTask+0x88>)
 800c740:	f7fe ff66 	bl	800b610 <xTaskCreateStatic>
 800c744:	4603      	mov	r3, r0
 800c746:	4a10      	ldr	r2, [pc, #64]	; (800c788 <xTimerCreateTimerTask+0x8c>)
 800c748:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <xTimerCreateTimerTask+0x8c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c752:	2301      	movs	r3, #1
 800c754:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	613b      	str	r3, [r7, #16]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c772:	697b      	ldr	r3, [r7, #20]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20001aa8 	.word	0x20001aa8
 800c780:	0800ed24 	.word	0x0800ed24
 800c784:	0800c8c1 	.word	0x0800c8c1
 800c788:	20001aac 	.word	0x20001aac

0800c78c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08a      	sub	sp, #40	; 0x28
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c79a:	2300      	movs	r3, #0
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	623b      	str	r3, [r7, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <xTimerGenericCommand+0x98>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d02a      	beq.n	800c818 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b05      	cmp	r3, #5
 800c7d2:	dc18      	bgt.n	800c806 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7d4:	f7ff feb2 	bl	800c53c <xTaskGetSchedulerState>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d109      	bne.n	800c7f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c7de:	4b11      	ldr	r3, [pc, #68]	; (800c824 <xTimerGenericCommand+0x98>)
 800c7e0:	6818      	ldr	r0, [r3, #0]
 800c7e2:	f107 0110 	add.w	r1, r7, #16
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ea:	f7fe fb29 	bl	800ae40 <xQueueGenericSend>
 800c7ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c7f0:	e012      	b.n	800c818 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <xTimerGenericCommand+0x98>)
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f107 0110 	add.w	r1, r7, #16
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f7fe fb1f 	bl	800ae40 <xQueueGenericSend>
 800c802:	6278      	str	r0, [r7, #36]	; 0x24
 800c804:	e008      	b.n	800c818 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c806:	4b07      	ldr	r3, [pc, #28]	; (800c824 <xTimerGenericCommand+0x98>)
 800c808:	6818      	ldr	r0, [r3, #0]
 800c80a:	f107 0110 	add.w	r1, r7, #16
 800c80e:	2300      	movs	r3, #0
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	f7fe fc13 	bl	800b03c <xQueueGenericSendFromISR>
 800c816:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3728      	adds	r7, #40	; 0x28
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	20001aa8 	.word	0x20001aa8

0800c828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af02      	add	r7, sp, #8
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c832:	4b22      	ldr	r3, [pc, #136]	; (800c8bc <prvProcessExpiredTimer+0x94>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	3304      	adds	r3, #4
 800c840:	4618      	mov	r0, r3
 800c842:	f7fe f995 	bl	800ab70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	d022      	beq.n	800c89a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	18d1      	adds	r1, r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	6978      	ldr	r0, [r7, #20]
 800c862:	f000 f8d1 	bl	800ca08 <prvInsertTimerInActiveList>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01f      	beq.n	800c8ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c86c:	2300      	movs	r3, #0
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	2300      	movs	r3, #0
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	2100      	movs	r1, #0
 800c876:	6978      	ldr	r0, [r7, #20]
 800c878:	f7ff ff88 	bl	800c78c <xTimerGenericCommand>
 800c87c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d113      	bne.n	800c8ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	60fb      	str	r3, [r7, #12]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a0:	f023 0301 	bic.w	r3, r3, #1
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	6a1b      	ldr	r3, [r3, #32]
 800c8b0:	6978      	ldr	r0, [r7, #20]
 800c8b2:	4798      	blx	r3
}
 800c8b4:	bf00      	nop
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20001aa0 	.word	0x20001aa0

0800c8c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8c8:	f107 0308 	add.w	r3, r7, #8
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 f857 	bl	800c980 <prvGetNextExpireTime>
 800c8d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f803 	bl	800c8e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c8de:	f000 f8d5 	bl	800ca8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8e2:	e7f1      	b.n	800c8c8 <prvTimerTask+0x8>

0800c8e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8ee:	f7ff fa43 	bl	800bd78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8f2:	f107 0308 	add.w	r3, r7, #8
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f866 	bl	800c9c8 <prvSampleTimeNow>
 800c8fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d130      	bne.n	800c966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10a      	bne.n	800c920 <prvProcessTimerOrBlockTask+0x3c>
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d806      	bhi.n	800c920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c912:	f7ff fa3f 	bl	800bd94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c916:	68f9      	ldr	r1, [r7, #12]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ff85 	bl	800c828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c91e:	e024      	b.n	800c96a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d008      	beq.n	800c938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c926:	4b13      	ldr	r3, [pc, #76]	; (800c974 <prvProcessTimerOrBlockTask+0x90>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <prvProcessTimerOrBlockTask+0x50>
 800c930:	2301      	movs	r3, #1
 800c932:	e000      	b.n	800c936 <prvProcessTimerOrBlockTask+0x52>
 800c934:	2300      	movs	r3, #0
 800c936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c938:	4b0f      	ldr	r3, [pc, #60]	; (800c978 <prvProcessTimerOrBlockTask+0x94>)
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	4619      	mov	r1, r3
 800c946:	f7fe fe2f 	bl	800b5a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c94a:	f7ff fa23 	bl	800bd94 <xTaskResumeAll>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c954:	4b09      	ldr	r3, [pc, #36]	; (800c97c <prvProcessTimerOrBlockTask+0x98>)
 800c956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	f3bf 8f6f 	isb	sy
}
 800c964:	e001      	b.n	800c96a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c966:	f7ff fa15 	bl	800bd94 <xTaskResumeAll>
}
 800c96a:	bf00      	nop
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20001aa4 	.word	0x20001aa4
 800c978:	20001aa8 	.word	0x20001aa8
 800c97c:	e000ed04 	.word	0xe000ed04

0800c980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c988:	4b0e      	ldr	r3, [pc, #56]	; (800c9c4 <prvGetNextExpireTime+0x44>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <prvGetNextExpireTime+0x16>
 800c992:	2201      	movs	r2, #1
 800c994:	e000      	b.n	800c998 <prvGetNextExpireTime+0x18>
 800c996:	2200      	movs	r2, #0
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9a4:	4b07      	ldr	r3, [pc, #28]	; (800c9c4 <prvGetNextExpireTime+0x44>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	60fb      	str	r3, [r7, #12]
 800c9ae:	e001      	b.n	800c9b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	20001aa0 	.word	0x20001aa0

0800c9c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9d0:	f7ff fa7e 	bl	800bed0 <xTaskGetTickCount>
 800c9d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <prvSampleTimeNow+0x3c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d205      	bcs.n	800c9ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9e0:	f000 f936 	bl	800cc50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	e002      	b.n	800c9f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9f2:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <prvSampleTimeNow+0x3c>)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20001ab0 	.word	0x20001ab0

0800ca08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca16:	2300      	movs	r3, #0
 800ca18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d812      	bhi.n	800ca54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	1ad2      	subs	r2, r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d302      	bcc.n	800ca42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	e01b      	b.n	800ca7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca42:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <prvInsertTimerInActiveList+0x7c>)
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fe f856 	bl	800aafe <vListInsert>
 800ca52:	e012      	b.n	800ca7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d206      	bcs.n	800ca6a <prvInsertTimerInActiveList+0x62>
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d302      	bcc.n	800ca6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	e007      	b.n	800ca7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca6a:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <prvInsertTimerInActiveList+0x80>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3304      	adds	r3, #4
 800ca72:	4619      	mov	r1, r3
 800ca74:	4610      	mov	r0, r2
 800ca76:	f7fe f842 	bl	800aafe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca7a:	697b      	ldr	r3, [r7, #20]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20001aa4 	.word	0x20001aa4
 800ca88:	20001aa0 	.word	0x20001aa0

0800ca8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08e      	sub	sp, #56	; 0x38
 800ca90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca92:	e0ca      	b.n	800cc2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da18      	bge.n	800cacc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca9a:	1d3b      	adds	r3, r7, #4
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10a      	bne.n	800cabc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	61fb      	str	r3, [r7, #28]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac2:	6850      	ldr	r0, [r2, #4]
 800cac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac6:	6892      	ldr	r2, [r2, #8]
 800cac8:	4611      	mov	r1, r2
 800caca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f2c0 80aa 	blt.w	800cc28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d004      	beq.n	800caea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	3304      	adds	r3, #4
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe f843 	bl	800ab70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800caea:	463b      	mov	r3, r7
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff ff6b 	bl	800c9c8 <prvSampleTimeNow>
 800caf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b09      	cmp	r3, #9
 800caf8:	f200 8097 	bhi.w	800cc2a <prvProcessReceivedCommands+0x19e>
 800cafc:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <prvProcessReceivedCommands+0x78>)
 800cafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb02:	bf00      	nop
 800cb04:	0800cb2d 	.word	0x0800cb2d
 800cb08:	0800cb2d 	.word	0x0800cb2d
 800cb0c:	0800cb2d 	.word	0x0800cb2d
 800cb10:	0800cba1 	.word	0x0800cba1
 800cb14:	0800cbb5 	.word	0x0800cbb5
 800cb18:	0800cbff 	.word	0x0800cbff
 800cb1c:	0800cb2d 	.word	0x0800cb2d
 800cb20:	0800cb2d 	.word	0x0800cb2d
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cbb5 	.word	0x0800cbb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	18d1      	adds	r1, r2, r3
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb4c:	f7ff ff5c 	bl	800ca08 <prvInsertTimerInActiveList>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d069      	beq.n	800cc2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb64:	f003 0304 	and.w	r3, r3, #4
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d05e      	beq.n	800cc2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	441a      	add	r2, r3
 800cb74:	2300      	movs	r3, #0
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb7e:	f7ff fe05 	bl	800c78c <xTimerGenericCommand>
 800cb82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d14f      	bne.n	800cc2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	61bb      	str	r3, [r7, #24]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cba6:	f023 0301 	bic.w	r3, r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cbb2:	e03a      	b.n	800cc2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbba:	f043 0301 	orr.w	r3, r3, #1
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	617b      	str	r3, [r7, #20]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	18d1      	adds	r1, r2, r3
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf8:	f7ff ff06 	bl	800ca08 <prvInsertTimerInActiveList>
					break;
 800cbfc:	e015      	b.n	800cc2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d103      	bne.n	800cc14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cc0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc0e:	f000 fbdf 	bl	800d3d0 <vPortFree>
 800cc12:	e00a      	b.n	800cc2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc1a:	f023 0301 	bic.w	r3, r3, #1
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc26:	e000      	b.n	800cc2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cc28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc2a:	4b08      	ldr	r3, [pc, #32]	; (800cc4c <prvProcessReceivedCommands+0x1c0>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	1d39      	adds	r1, r7, #4
 800cc30:	2200      	movs	r2, #0
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fa9e 	bl	800b174 <xQueueReceive>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f47f af2a 	bne.w	800ca94 <prvProcessReceivedCommands+0x8>
	}
}
 800cc40:	bf00      	nop
 800cc42:	bf00      	nop
 800cc44:	3730      	adds	r7, #48	; 0x30
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20001aa8 	.word	0x20001aa8

0800cc50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc56:	e048      	b.n	800ccea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc58:	4b2d      	ldr	r3, [pc, #180]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc62:	4b2b      	ldr	r3, [pc, #172]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	3304      	adds	r3, #4
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fd ff7d 	bl	800ab70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d02e      	beq.n	800ccea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	4413      	add	r3, r2
 800cc94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d90e      	bls.n	800ccbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccaa:	4b19      	ldr	r3, [pc, #100]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	f7fd ff22 	bl	800aafe <vListInsert>
 800ccba:	e016      	b.n	800ccea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f7ff fd60 	bl	800c78c <xTimerGenericCommand>
 800cccc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	603b      	str	r3, [r7, #0]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccea:	4b09      	ldr	r3, [pc, #36]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1b1      	bne.n	800cc58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccf4:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccfa:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <prvSwitchTimerLists+0xc4>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a04      	ldr	r2, [pc, #16]	; (800cd10 <prvSwitchTimerLists+0xc0>)
 800cd00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd02:	4a04      	ldr	r2, [pc, #16]	; (800cd14 <prvSwitchTimerLists+0xc4>)
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	6013      	str	r3, [r2, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20001aa0 	.word	0x20001aa0
 800cd14:	20001aa4 	.word	0x20001aa4

0800cd18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd1e:	f000 f969 	bl	800cff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd22:	4b15      	ldr	r3, [pc, #84]	; (800cd78 <prvCheckForValidListAndQueue+0x60>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d120      	bne.n	800cd6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd2a:	4814      	ldr	r0, [pc, #80]	; (800cd7c <prvCheckForValidListAndQueue+0x64>)
 800cd2c:	f7fd fe96 	bl	800aa5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd30:	4813      	ldr	r0, [pc, #76]	; (800cd80 <prvCheckForValidListAndQueue+0x68>)
 800cd32:	f7fd fe93 	bl	800aa5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd36:	4b13      	ldr	r3, [pc, #76]	; (800cd84 <prvCheckForValidListAndQueue+0x6c>)
 800cd38:	4a10      	ldr	r2, [pc, #64]	; (800cd7c <prvCheckForValidListAndQueue+0x64>)
 800cd3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd3c:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <prvCheckForValidListAndQueue+0x70>)
 800cd3e:	4a10      	ldr	r2, [pc, #64]	; (800cd80 <prvCheckForValidListAndQueue+0x68>)
 800cd40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd42:	2300      	movs	r3, #0
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	4b11      	ldr	r3, [pc, #68]	; (800cd8c <prvCheckForValidListAndQueue+0x74>)
 800cd48:	4a11      	ldr	r2, [pc, #68]	; (800cd90 <prvCheckForValidListAndQueue+0x78>)
 800cd4a:	2110      	movs	r1, #16
 800cd4c:	200a      	movs	r0, #10
 800cd4e:	f7fd ffa1 	bl	800ac94 <xQueueGenericCreateStatic>
 800cd52:	4603      	mov	r3, r0
 800cd54:	4a08      	ldr	r2, [pc, #32]	; (800cd78 <prvCheckForValidListAndQueue+0x60>)
 800cd56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd58:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <prvCheckForValidListAndQueue+0x60>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d005      	beq.n	800cd6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd60:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <prvCheckForValidListAndQueue+0x60>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	490b      	ldr	r1, [pc, #44]	; (800cd94 <prvCheckForValidListAndQueue+0x7c>)
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe fbf4 	bl	800b554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd6c:	f000 f972 	bl	800d054 <vPortExitCritical>
}
 800cd70:	bf00      	nop
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20001aa8 	.word	0x20001aa8
 800cd7c:	20001a78 	.word	0x20001a78
 800cd80:	20001a8c 	.word	0x20001a8c
 800cd84:	20001aa0 	.word	0x20001aa0
 800cd88:	20001aa4 	.word	0x20001aa4
 800cd8c:	20001b54 	.word	0x20001b54
 800cd90:	20001ab4 	.word	0x20001ab4
 800cd94:	0800ed2c 	.word	0x0800ed2c

0800cd98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3b04      	subs	r3, #4
 800cda8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3b04      	subs	r3, #4
 800cdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	f023 0201 	bic.w	r2, r3, #1
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3b04      	subs	r3, #4
 800cdc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdc8:	4a0c      	ldr	r2, [pc, #48]	; (800cdfc <pxPortInitialiseStack+0x64>)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3b14      	subs	r3, #20
 800cdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3b04      	subs	r3, #4
 800cdde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f06f 0202 	mvn.w	r2, #2
 800cde6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3b20      	subs	r3, #32
 800cdec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cdee:	68fb      	ldr	r3, [r7, #12]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	0800ce01 	.word	0x0800ce01

0800ce00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce0a:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <prvTaskExitError+0x54>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce12:	d00a      	beq.n	800ce2a <prvTaskExitError+0x2a>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	60fb      	str	r3, [r7, #12]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <prvTaskExitError+0x28>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	60bb      	str	r3, [r7, #8]
}
 800ce3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce3e:	bf00      	nop
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0fc      	beq.n	800ce40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce46:	bf00      	nop
 800ce48:	bf00      	nop
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	20000570 	.word	0x20000570
	...

0800ce60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <pxCurrentTCBConst2>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	6808      	ldr	r0, [r1, #0]
 800ce66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	f380 8809 	msr	PSP, r0
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f380 8811 	msr	BASEPRI, r0
 800ce7a:	4770      	bx	lr
 800ce7c:	f3af 8000 	nop.w

0800ce80 <pxCurrentTCBConst2>:
 800ce80:	20001578 	.word	0x20001578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop

0800ce88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce88:	4808      	ldr	r0, [pc, #32]	; (800ceac <prvPortStartFirstTask+0x24>)
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	6800      	ldr	r0, [r0, #0]
 800ce8e:	f380 8808 	msr	MSP, r0
 800ce92:	f04f 0000 	mov.w	r0, #0
 800ce96:	f380 8814 	msr	CONTROL, r0
 800ce9a:	b662      	cpsie	i
 800ce9c:	b661      	cpsie	f
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	df00      	svc	0
 800cea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceaa:	bf00      	nop
 800ceac:	e000ed08 	.word	0xe000ed08

0800ceb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ceb6:	4b46      	ldr	r3, [pc, #280]	; (800cfd0 <xPortStartScheduler+0x120>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a46      	ldr	r2, [pc, #280]	; (800cfd4 <xPortStartScheduler+0x124>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d10a      	bne.n	800ced6 <xPortStartScheduler+0x26>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	613b      	str	r3, [r7, #16]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ced6:	4b3e      	ldr	r3, [pc, #248]	; (800cfd0 <xPortStartScheduler+0x120>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a3f      	ldr	r2, [pc, #252]	; (800cfd8 <xPortStartScheduler+0x128>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d10a      	bne.n	800cef6 <xPortStartScheduler+0x46>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	60fb      	str	r3, [r7, #12]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cef6:	4b39      	ldr	r3, [pc, #228]	; (800cfdc <xPortStartScheduler+0x12c>)
 800cef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	22ff      	movs	r2, #255	; 0xff
 800cf06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	4b31      	ldr	r3, [pc, #196]	; (800cfe0 <xPortStartScheduler+0x130>)
 800cf1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf1e:	4b31      	ldr	r3, [pc, #196]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf20:	2207      	movs	r2, #7
 800cf22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf24:	e009      	b.n	800cf3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cf26:	4b2f      	ldr	r3, [pc, #188]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	4a2d      	ldr	r2, [pc, #180]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf3a:	78fb      	ldrb	r3, [r7, #3]
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf42:	2b80      	cmp	r3, #128	; 0x80
 800cf44:	d0ef      	beq.n	800cf26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf46:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f1c3 0307 	rsb	r3, r3, #7
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	d00a      	beq.n	800cf68 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60bb      	str	r3, [r7, #8]
}
 800cf64:	bf00      	nop
 800cf66:	e7fe      	b.n	800cf66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf68:	4b1e      	ldr	r3, [pc, #120]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	021b      	lsls	r3, r3, #8
 800cf6e:	4a1d      	ldr	r2, [pc, #116]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf72:	4b1c      	ldr	r3, [pc, #112]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf7a:	4a1a      	ldr	r2, [pc, #104]	; (800cfe4 <xPortStartScheduler+0x134>)
 800cf7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a17      	ldr	r2, [pc, #92]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf92:	4b15      	ldr	r3, [pc, #84]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a14      	ldr	r2, [pc, #80]	; (800cfe8 <xPortStartScheduler+0x138>)
 800cf98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf9e:	f000 f8dd 	bl	800d15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <xPortStartScheduler+0x13c>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cfa8:	f000 f8fc 	bl	800d1a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cfac:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <xPortStartScheduler+0x140>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <xPortStartScheduler+0x140>)
 800cfb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cfb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cfb8:	f7ff ff66 	bl	800ce88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cfbc:	f7ff f852 	bl	800c064 <vTaskSwitchContext>
	prvTaskExitError();
 800cfc0:	f7ff ff1e 	bl	800ce00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	e000ed00 	.word	0xe000ed00
 800cfd4:	410fc271 	.word	0x410fc271
 800cfd8:	410fc270 	.word	0x410fc270
 800cfdc:	e000e400 	.word	0xe000e400
 800cfe0:	20001ba4 	.word	0x20001ba4
 800cfe4:	20001ba8 	.word	0x20001ba8
 800cfe8:	e000ed20 	.word	0xe000ed20
 800cfec:	20000570 	.word	0x20000570
 800cff0:	e000ef34 	.word	0xe000ef34

0800cff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	607b      	str	r3, [r7, #4]
}
 800d00c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d00e:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <vPortEnterCritical+0x58>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	4a0d      	ldr	r2, [pc, #52]	; (800d04c <vPortEnterCritical+0x58>)
 800d016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d018:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <vPortEnterCritical+0x58>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d10f      	bne.n	800d040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <vPortEnterCritical+0x5c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00a      	beq.n	800d040 <vPortEnterCritical+0x4c>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	603b      	str	r3, [r7, #0]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <vPortEnterCritical+0x4a>
	}
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	20000570 	.word	0x20000570
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d05a:	4b12      	ldr	r3, [pc, #72]	; (800d0a4 <vPortExitCritical+0x50>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <vPortExitCritical+0x24>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	607b      	str	r3, [r7, #4]
}
 800d074:	bf00      	nop
 800d076:	e7fe      	b.n	800d076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <vPortExitCritical+0x50>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4a09      	ldr	r2, [pc, #36]	; (800d0a4 <vPortExitCritical+0x50>)
 800d080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d082:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <vPortExitCritical+0x50>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d105      	bne.n	800d096 <vPortExitCritical+0x42>
 800d08a:	2300      	movs	r3, #0
 800d08c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	f383 8811 	msr	BASEPRI, r3
}
 800d094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d096:	bf00      	nop
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	20000570 	.word	0x20000570
	...

0800d0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d0b0:	f3ef 8009 	mrs	r0, PSP
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	4b15      	ldr	r3, [pc, #84]	; (800d110 <pxCurrentTCBConst>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	f01e 0f10 	tst.w	lr, #16
 800d0c0:	bf08      	it	eq
 800d0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ca:	6010      	str	r0, [r2, #0]
 800d0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d0d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d0d4:	f380 8811 	msr	BASEPRI, r0
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f7fe ffc0 	bl	800c064 <vTaskSwitchContext>
 800d0e4:	f04f 0000 	mov.w	r0, #0
 800d0e8:	f380 8811 	msr	BASEPRI, r0
 800d0ec:	bc09      	pop	{r0, r3}
 800d0ee:	6819      	ldr	r1, [r3, #0]
 800d0f0:	6808      	ldr	r0, [r1, #0]
 800d0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f6:	f01e 0f10 	tst.w	lr, #16
 800d0fa:	bf08      	it	eq
 800d0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d100:	f380 8809 	msr	PSP, r0
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w

0800d110 <pxCurrentTCBConst>:
 800d110:	20001578 	.word	0x20001578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d114:	bf00      	nop
 800d116:	bf00      	nop

0800d118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d132:	f7fe fedd 	bl	800bef0 <xTaskIncrementTick>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <xPortSysTickHandler+0x40>)
 800d13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	2300      	movs	r3, #0
 800d146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	f383 8811 	msr	BASEPRI, r3
}
 800d14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	e000ed04 	.word	0xe000ed04

0800d15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d160:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <vPortSetupTimerInterrupt+0x34>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d166:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <vPortSetupTimerInterrupt+0x38>)
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <vPortSetupTimerInterrupt+0x3c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a0a      	ldr	r2, [pc, #40]	; (800d19c <vPortSetupTimerInterrupt+0x40>)
 800d172:	fba2 2303 	umull	r2, r3, r2, r3
 800d176:	099b      	lsrs	r3, r3, #6
 800d178:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <vPortSetupTimerInterrupt+0x44>)
 800d17a:	3b01      	subs	r3, #1
 800d17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d17e:	4b04      	ldr	r3, [pc, #16]	; (800d190 <vPortSetupTimerInterrupt+0x34>)
 800d180:	2207      	movs	r2, #7
 800d182:	601a      	str	r2, [r3, #0]
}
 800d184:	bf00      	nop
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	e000e010 	.word	0xe000e010
 800d194:	e000e018 	.word	0xe000e018
 800d198:	200004d8 	.word	0x200004d8
 800d19c:	10624dd3 	.word	0x10624dd3
 800d1a0:	e000e014 	.word	0xe000e014

0800d1a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d1a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d1b4 <vPortEnableVFP+0x10>
 800d1a8:	6801      	ldr	r1, [r0, #0]
 800d1aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d1ae:	6001      	str	r1, [r0, #0]
 800d1b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d1b2:	bf00      	nop
 800d1b4:	e000ed88 	.word	0xe000ed88

0800d1b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d1be:	f3ef 8305 	mrs	r3, IPSR
 800d1c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b0f      	cmp	r3, #15
 800d1c8:	d914      	bls.n	800d1f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d1ca:	4a17      	ldr	r2, [pc, #92]	; (800d228 <vPortValidateInterruptPriority+0x70>)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d1d4:	4b15      	ldr	r3, [pc, #84]	; (800d22c <vPortValidateInterruptPriority+0x74>)
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	7afa      	ldrb	r2, [r7, #11]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d20a      	bcs.n	800d1f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	607b      	str	r3, [r7, #4]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1f4:	4b0e      	ldr	r3, [pc, #56]	; (800d230 <vPortValidateInterruptPriority+0x78>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d1fc:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <vPortValidateInterruptPriority+0x7c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	429a      	cmp	r2, r3
 800d202:	d90a      	bls.n	800d21a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	603b      	str	r3, [r7, #0]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <vPortValidateInterruptPriority+0x60>
	}
 800d21a:	bf00      	nop
 800d21c:	3714      	adds	r7, #20
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	e000e3f0 	.word	0xe000e3f0
 800d22c:	20001ba4 	.word	0x20001ba4
 800d230:	e000ed0c 	.word	0xe000ed0c
 800d234:	20001ba8 	.word	0x20001ba8

0800d238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d240:	2300      	movs	r3, #0
 800d242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d244:	f7fe fd98 	bl	800bd78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d248:	4b5b      	ldr	r3, [pc, #364]	; (800d3b8 <pvPortMalloc+0x180>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d250:	f000 f920 	bl	800d494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d254:	4b59      	ldr	r3, [pc, #356]	; (800d3bc <pvPortMalloc+0x184>)
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4013      	ands	r3, r2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f040 8093 	bne.w	800d388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d01d      	beq.n	800d2a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d268:	2208      	movs	r2, #8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4413      	add	r3, r2
 800d26e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f003 0307 	and.w	r3, r3, #7
 800d276:	2b00      	cmp	r3, #0
 800d278:	d014      	beq.n	800d2a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f023 0307 	bic.w	r3, r3, #7
 800d280:	3308      	adds	r3, #8
 800d282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00a      	beq.n	800d2a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	617b      	str	r3, [r7, #20]
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d06e      	beq.n	800d388 <pvPortMalloc+0x150>
 800d2aa:	4b45      	ldr	r3, [pc, #276]	; (800d3c0 <pvPortMalloc+0x188>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d869      	bhi.n	800d388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d2b4:	4b43      	ldr	r3, [pc, #268]	; (800d3c4 <pvPortMalloc+0x18c>)
 800d2b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d2b8:	4b42      	ldr	r3, [pc, #264]	; (800d3c4 <pvPortMalloc+0x18c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2be:	e004      	b.n	800d2ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d903      	bls.n	800d2dc <pvPortMalloc+0xa4>
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f1      	bne.n	800d2c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d2dc:	4b36      	ldr	r3, [pc, #216]	; (800d3b8 <pvPortMalloc+0x180>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d050      	beq.n	800d388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2208      	movs	r2, #8
 800d2ec:	4413      	add	r3, r2
 800d2ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	2308      	movs	r3, #8
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	429a      	cmp	r2, r3
 800d306:	d91f      	bls.n	800d348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4413      	add	r3, r2
 800d30e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <pvPortMalloc+0xf8>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	613b      	str	r3, [r7, #16]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	1ad2      	subs	r2, r2, r3
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d342:	69b8      	ldr	r0, [r7, #24]
 800d344:	f000 f908 	bl	800d558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d348:	4b1d      	ldr	r3, [pc, #116]	; (800d3c0 <pvPortMalloc+0x188>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	4a1b      	ldr	r2, [pc, #108]	; (800d3c0 <pvPortMalloc+0x188>)
 800d354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d356:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <pvPortMalloc+0x188>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	4b1b      	ldr	r3, [pc, #108]	; (800d3c8 <pvPortMalloc+0x190>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d203      	bcs.n	800d36a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d362:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <pvPortMalloc+0x188>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a18      	ldr	r2, [pc, #96]	; (800d3c8 <pvPortMalloc+0x190>)
 800d368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	4b13      	ldr	r3, [pc, #76]	; (800d3bc <pvPortMalloc+0x184>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	431a      	orrs	r2, r3
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <pvPortMalloc+0x194>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	4a11      	ldr	r2, [pc, #68]	; (800d3cc <pvPortMalloc+0x194>)
 800d386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d388:	f7fe fd04 	bl	800bd94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f003 0307 	and.w	r3, r3, #7
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <pvPortMalloc+0x174>
	__asm volatile
 800d396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39a:	f383 8811 	msr	BASEPRI, r3
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	60fb      	str	r3, [r7, #12]
}
 800d3a8:	bf00      	nop
 800d3aa:	e7fe      	b.n	800d3aa <pvPortMalloc+0x172>
	return pvReturn;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3728      	adds	r7, #40	; 0x28
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	200057b4 	.word	0x200057b4
 800d3bc:	200057c8 	.word	0x200057c8
 800d3c0:	200057b8 	.word	0x200057b8
 800d3c4:	200057ac 	.word	0x200057ac
 800d3c8:	200057bc 	.word	0x200057bc
 800d3cc:	200057c0 	.word	0x200057c0

0800d3d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d04d      	beq.n	800d47e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3e2:	2308      	movs	r3, #8
 800d3e4:	425b      	negs	r3, r3
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	4b24      	ldr	r3, [pc, #144]	; (800d488 <vPortFree+0xb8>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <vPortFree+0x44>
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	60fb      	str	r3, [r7, #12]
}
 800d410:	bf00      	nop
 800d412:	e7fe      	b.n	800d412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00a      	beq.n	800d432 <vPortFree+0x62>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	60bb      	str	r3, [r7, #8]
}
 800d42e:	bf00      	nop
 800d430:	e7fe      	b.n	800d430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	4b14      	ldr	r3, [pc, #80]	; (800d488 <vPortFree+0xb8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4013      	ands	r3, r2
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d01e      	beq.n	800d47e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d11a      	bne.n	800d47e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	4b0e      	ldr	r3, [pc, #56]	; (800d488 <vPortFree+0xb8>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	43db      	mvns	r3, r3
 800d452:	401a      	ands	r2, r3
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d458:	f7fe fc8e 	bl	800bd78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	4b0a      	ldr	r3, [pc, #40]	; (800d48c <vPortFree+0xbc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4413      	add	r3, r2
 800d466:	4a09      	ldr	r2, [pc, #36]	; (800d48c <vPortFree+0xbc>)
 800d468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d46a:	6938      	ldr	r0, [r7, #16]
 800d46c:	f000 f874 	bl	800d558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <vPortFree+0xc0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3301      	adds	r3, #1
 800d476:	4a06      	ldr	r2, [pc, #24]	; (800d490 <vPortFree+0xc0>)
 800d478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d47a:	f7fe fc8b 	bl	800bd94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d47e:	bf00      	nop
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200057c8 	.word	0x200057c8
 800d48c:	200057b8 	.word	0x200057b8
 800d490:	200057c4 	.word	0x200057c4

0800d494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d49a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d49e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d4a0:	4b27      	ldr	r3, [pc, #156]	; (800d540 <prvHeapInit+0xac>)
 800d4a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f003 0307 	and.w	r3, r3, #7
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00c      	beq.n	800d4c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3307      	adds	r3, #7
 800d4b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 0307 	bic.w	r3, r3, #7
 800d4ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	4a1f      	ldr	r2, [pc, #124]	; (800d540 <prvHeapInit+0xac>)
 800d4c4:	4413      	add	r3, r2
 800d4c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d4cc:	4a1d      	ldr	r2, [pc, #116]	; (800d544 <prvHeapInit+0xb0>)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d4d2:	4b1c      	ldr	r3, [pc, #112]	; (800d544 <prvHeapInit+0xb0>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	4413      	add	r3, r2
 800d4de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4e0:	2208      	movs	r2, #8
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f023 0307 	bic.w	r3, r3, #7
 800d4ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4a15      	ldr	r2, [pc, #84]	; (800d548 <prvHeapInit+0xb4>)
 800d4f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4f6:	4b14      	ldr	r3, [pc, #80]	; (800d548 <prvHeapInit+0xb4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4fe:	4b12      	ldr	r3, [pc, #72]	; (800d548 <prvHeapInit+0xb4>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2200      	movs	r2, #0
 800d504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d514:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <prvHeapInit+0xb4>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <prvHeapInit+0xb8>)
 800d522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	4a09      	ldr	r2, [pc, #36]	; (800d550 <prvHeapInit+0xbc>)
 800d52a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d52c:	4b09      	ldr	r3, [pc, #36]	; (800d554 <prvHeapInit+0xc0>)
 800d52e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d532:	601a      	str	r2, [r3, #0]
}
 800d534:	bf00      	nop
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20001bac 	.word	0x20001bac
 800d544:	200057ac 	.word	0x200057ac
 800d548:	200057b4 	.word	0x200057b4
 800d54c:	200057bc 	.word	0x200057bc
 800d550:	200057b8 	.word	0x200057b8
 800d554:	200057c8 	.word	0x200057c8

0800d558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d560:	4b28      	ldr	r3, [pc, #160]	; (800d604 <prvInsertBlockIntoFreeList+0xac>)
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e002      	b.n	800d56c <prvInsertBlockIntoFreeList+0x14>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	429a      	cmp	r2, r3
 800d574:	d8f7      	bhi.n	800d566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	4413      	add	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	429a      	cmp	r2, r3
 800d586:	d108      	bne.n	800d59a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	441a      	add	r2, r3
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	441a      	add	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d118      	bne.n	800d5e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b15      	ldr	r3, [pc, #84]	; (800d608 <prvInsertBlockIntoFreeList+0xb0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d00d      	beq.n	800d5d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	441a      	add	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	e008      	b.n	800d5e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <prvInsertBlockIntoFreeList+0xb0>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e003      	b.n	800d5e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d002      	beq.n	800d5f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5f6:	bf00      	nop
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	200057ac 	.word	0x200057ac
 800d608:	200057b4 	.word	0x200057b4

0800d60c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d610:	2200      	movs	r2, #0
 800d612:	4912      	ldr	r1, [pc, #72]	; (800d65c <MX_USB_DEVICE_Init+0x50>)
 800d614:	4812      	ldr	r0, [pc, #72]	; (800d660 <MX_USB_DEVICE_Init+0x54>)
 800d616:	f7fb fd4b 	bl	80090b0 <USBD_Init>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d620:	f7f4 fc7c 	bl	8001f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d624:	490f      	ldr	r1, [pc, #60]	; (800d664 <MX_USB_DEVICE_Init+0x58>)
 800d626:	480e      	ldr	r0, [pc, #56]	; (800d660 <MX_USB_DEVICE_Init+0x54>)
 800d628:	f7fb fd72 	bl	8009110 <USBD_RegisterClass>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d632:	f7f4 fc73 	bl	8001f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d636:	490c      	ldr	r1, [pc, #48]	; (800d668 <MX_USB_DEVICE_Init+0x5c>)
 800d638:	4809      	ldr	r0, [pc, #36]	; (800d660 <MX_USB_DEVICE_Init+0x54>)
 800d63a:	f7fb fc63 	bl	8008f04 <USBD_CDC_RegisterInterface>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d644:	f7f4 fc6a 	bl	8001f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d648:	4805      	ldr	r0, [pc, #20]	; (800d660 <MX_USB_DEVICE_Init+0x54>)
 800d64a:	f7fb fd97 	bl	800917c <USBD_Start>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d654:	f7f4 fc62 	bl	8001f1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d658:	bf00      	nop
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000588 	.word	0x20000588
 800d660:	200057cc 	.word	0x200057cc
 800d664:	200004f0 	.word	0x200004f0
 800d668:	20000574 	.word	0x20000574

0800d66c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d670:	2200      	movs	r2, #0
 800d672:	4905      	ldr	r1, [pc, #20]	; (800d688 <CDC_Init_FS+0x1c>)
 800d674:	4805      	ldr	r0, [pc, #20]	; (800d68c <CDC_Init_FS+0x20>)
 800d676:	f7fb fc5f 	bl	8008f38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d67a:	4905      	ldr	r1, [pc, #20]	; (800d690 <CDC_Init_FS+0x24>)
 800d67c:	4803      	ldr	r0, [pc, #12]	; (800d68c <CDC_Init_FS+0x20>)
 800d67e:	f7fb fc7d 	bl	8008f7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d682:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d684:	4618      	mov	r0, r3
 800d686:	bd80      	pop	{r7, pc}
 800d688:	20005ea8 	.word	0x20005ea8
 800d68c:	200057cc 	.word	0x200057cc
 800d690:	20005aa8 	.word	0x20005aa8

0800d694 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d694:	b480      	push	{r7}
 800d696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d698:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	71fb      	strb	r3, [r7, #7]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b23      	cmp	r3, #35	; 0x23
 800d6b8:	d84a      	bhi.n	800d750 <CDC_Control_FS+0xac>
 800d6ba:	a201      	add	r2, pc, #4	; (adr r2, 800d6c0 <CDC_Control_FS+0x1c>)
 800d6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c0:	0800d751 	.word	0x0800d751
 800d6c4:	0800d751 	.word	0x0800d751
 800d6c8:	0800d751 	.word	0x0800d751
 800d6cc:	0800d751 	.word	0x0800d751
 800d6d0:	0800d751 	.word	0x0800d751
 800d6d4:	0800d751 	.word	0x0800d751
 800d6d8:	0800d751 	.word	0x0800d751
 800d6dc:	0800d751 	.word	0x0800d751
 800d6e0:	0800d751 	.word	0x0800d751
 800d6e4:	0800d751 	.word	0x0800d751
 800d6e8:	0800d751 	.word	0x0800d751
 800d6ec:	0800d751 	.word	0x0800d751
 800d6f0:	0800d751 	.word	0x0800d751
 800d6f4:	0800d751 	.word	0x0800d751
 800d6f8:	0800d751 	.word	0x0800d751
 800d6fc:	0800d751 	.word	0x0800d751
 800d700:	0800d751 	.word	0x0800d751
 800d704:	0800d751 	.word	0x0800d751
 800d708:	0800d751 	.word	0x0800d751
 800d70c:	0800d751 	.word	0x0800d751
 800d710:	0800d751 	.word	0x0800d751
 800d714:	0800d751 	.word	0x0800d751
 800d718:	0800d751 	.word	0x0800d751
 800d71c:	0800d751 	.word	0x0800d751
 800d720:	0800d751 	.word	0x0800d751
 800d724:	0800d751 	.word	0x0800d751
 800d728:	0800d751 	.word	0x0800d751
 800d72c:	0800d751 	.word	0x0800d751
 800d730:	0800d751 	.word	0x0800d751
 800d734:	0800d751 	.word	0x0800d751
 800d738:	0800d751 	.word	0x0800d751
 800d73c:	0800d751 	.word	0x0800d751
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d751 	.word	0x0800d751
 800d748:	0800d751 	.word	0x0800d751
 800d74c:	0800d751 	.word	0x0800d751
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d750:	bf00      	nop
  }

  return (USBD_OK);
 800d752:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d754:	4618      	mov	r0, r3
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	4805      	ldr	r0, [pc, #20]	; (800d784 <CDC_Receive_FS+0x24>)
 800d76e:	f7fb fc05 	bl	8008f7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d772:	4804      	ldr	r0, [pc, #16]	; (800d784 <CDC_Receive_FS+0x24>)
 800d774:	f7fb fc66 	bl	8009044 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d778:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200057cc 	.word	0x200057cc

0800d788 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d798:	4b0d      	ldr	r3, [pc, #52]	; (800d7d0 <CDC_Transmit_FS+0x48>)
 800d79a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d79e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e00b      	b.n	800d7c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d7ae:	887b      	ldrh	r3, [r7, #2]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	4806      	ldr	r0, [pc, #24]	; (800d7d0 <CDC_Transmit_FS+0x48>)
 800d7b6:	f7fb fbbf 	bl	8008f38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d7ba:	4805      	ldr	r0, [pc, #20]	; (800d7d0 <CDC_Transmit_FS+0x48>)
 800d7bc:	f7fb fbfc 	bl	8008fb8 <USBD_CDC_TransmitPacket>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	200057cc 	.word	0x200057cc

0800d7d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d7e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	6039      	str	r1, [r7, #0]
 800d802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2212      	movs	r2, #18
 800d808:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d80a:	4b03      	ldr	r3, [pc, #12]	; (800d818 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr
 800d818:	200005a4 	.word	0x200005a4

0800d81c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	6039      	str	r1, [r7, #0]
 800d826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2204      	movs	r2, #4
 800d82c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d82e:	4b03      	ldr	r3, [pc, #12]	; (800d83c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d830:	4618      	mov	r0, r3
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	200005b8 	.word	0x200005b8

0800d840 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	6039      	str	r1, [r7, #0]
 800d84a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d84c:	79fb      	ldrb	r3, [r7, #7]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d105      	bne.n	800d85e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	4907      	ldr	r1, [pc, #28]	; (800d874 <USBD_FS_ProductStrDescriptor+0x34>)
 800d856:	4808      	ldr	r0, [pc, #32]	; (800d878 <USBD_FS_ProductStrDescriptor+0x38>)
 800d858:	f7fc fe3c 	bl	800a4d4 <USBD_GetString>
 800d85c:	e004      	b.n	800d868 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	4904      	ldr	r1, [pc, #16]	; (800d874 <USBD_FS_ProductStrDescriptor+0x34>)
 800d862:	4805      	ldr	r0, [pc, #20]	; (800d878 <USBD_FS_ProductStrDescriptor+0x38>)
 800d864:	f7fc fe36 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d868:	4b02      	ldr	r3, [pc, #8]	; (800d874 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200062a8 	.word	0x200062a8
 800d878:	0800ed34 	.word	0x0800ed34

0800d87c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	4904      	ldr	r1, [pc, #16]	; (800d89c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d88c:	4804      	ldr	r0, [pc, #16]	; (800d8a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d88e:	f7fc fe21 	bl	800a4d4 <USBD_GetString>
  return USBD_StrDesc;
 800d892:	4b02      	ldr	r3, [pc, #8]	; (800d89c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	200062a8 	.word	0x200062a8
 800d8a0:	0800ed4c 	.word	0x0800ed4c

0800d8a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	6039      	str	r1, [r7, #0]
 800d8ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	221a      	movs	r2, #26
 800d8b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8b6:	f000 f843 	bl	800d940 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d8ba:	4b02      	ldr	r3, [pc, #8]	; (800d8c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	200005bc 	.word	0x200005bc

0800d8c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	6039      	str	r1, [r7, #0]
 800d8d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8d4:	79fb      	ldrb	r3, [r7, #7]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d105      	bne.n	800d8e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	4907      	ldr	r1, [pc, #28]	; (800d8fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8de:	4808      	ldr	r0, [pc, #32]	; (800d900 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8e0:	f7fc fdf8 	bl	800a4d4 <USBD_GetString>
 800d8e4:	e004      	b.n	800d8f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	4904      	ldr	r1, [pc, #16]	; (800d8fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d8ea:	4805      	ldr	r0, [pc, #20]	; (800d900 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d8ec:	f7fc fdf2 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8f0:	4b02      	ldr	r3, [pc, #8]	; (800d8fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	200062a8 	.word	0x200062a8
 800d900:	0800ed60 	.word	0x0800ed60

0800d904 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	6039      	str	r1, [r7, #0]
 800d90e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d910:	79fb      	ldrb	r3, [r7, #7]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d105      	bne.n	800d922 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	4907      	ldr	r1, [pc, #28]	; (800d938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d91a:	4808      	ldr	r0, [pc, #32]	; (800d93c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d91c:	f7fc fdda 	bl	800a4d4 <USBD_GetString>
 800d920:	e004      	b.n	800d92c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	4904      	ldr	r1, [pc, #16]	; (800d938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d926:	4805      	ldr	r0, [pc, #20]	; (800d93c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d928:	f7fc fdd4 	bl	800a4d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d92c:	4b02      	ldr	r3, [pc, #8]	; (800d938 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	200062a8 	.word	0x200062a8
 800d93c:	0800ed6c 	.word	0x0800ed6c

0800d940 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d946:	4b0f      	ldr	r3, [pc, #60]	; (800d984 <Get_SerialNum+0x44>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d94c:	4b0e      	ldr	r3, [pc, #56]	; (800d988 <Get_SerialNum+0x48>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d952:	4b0e      	ldr	r3, [pc, #56]	; (800d98c <Get_SerialNum+0x4c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4413      	add	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d009      	beq.n	800d97a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d966:	2208      	movs	r2, #8
 800d968:	4909      	ldr	r1, [pc, #36]	; (800d990 <Get_SerialNum+0x50>)
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 f814 	bl	800d998 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d970:	2204      	movs	r2, #4
 800d972:	4908      	ldr	r1, [pc, #32]	; (800d994 <Get_SerialNum+0x54>)
 800d974:	68b8      	ldr	r0, [r7, #8]
 800d976:	f000 f80f 	bl	800d998 <IntToUnicode>
  }
}
 800d97a:	bf00      	nop
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	1fff7a10 	.word	0x1fff7a10
 800d988:	1fff7a14 	.word	0x1fff7a14
 800d98c:	1fff7a18 	.word	0x1fff7a18
 800d990:	200005be 	.word	0x200005be
 800d994:	200005ce 	.word	0x200005ce

0800d998 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	75fb      	strb	r3, [r7, #23]
 800d9ae:	e027      	b.n	800da00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	0f1b      	lsrs	r3, r3, #28
 800d9b4:	2b09      	cmp	r3, #9
 800d9b6:	d80b      	bhi.n	800d9d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	0f1b      	lsrs	r3, r3, #28
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	7dfb      	ldrb	r3, [r7, #23]
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	440b      	add	r3, r1
 800d9c8:	3230      	adds	r2, #48	; 0x30
 800d9ca:	b2d2      	uxtb	r2, r2
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	e00a      	b.n	800d9e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	0f1b      	lsrs	r3, r3, #28
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	440b      	add	r3, r1
 800d9e0:	3237      	adds	r2, #55	; 0x37
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	011b      	lsls	r3, r3, #4
 800d9ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	75fb      	strb	r3, [r7, #23]
 800da00:	7dfa      	ldrb	r2, [r7, #23]
 800da02:	79fb      	ldrb	r3, [r7, #7]
 800da04:	429a      	cmp	r2, r3
 800da06:	d3d3      	bcc.n	800d9b0 <IntToUnicode+0x18>
  }
}
 800da08:	bf00      	nop
 800da0a:	bf00      	nop
 800da0c:	371c      	adds	r7, #28
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
	...

0800da18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	; 0x28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da20:	f107 0314 	add.w	r3, r7, #20
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	605a      	str	r2, [r3, #4]
 800da2a:	609a      	str	r2, [r3, #8]
 800da2c:	60da      	str	r2, [r3, #12]
 800da2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da38:	d13a      	bne.n	800dab0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da3a:	2300      	movs	r3, #0
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	4b1e      	ldr	r3, [pc, #120]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da42:	4a1d      	ldr	r2, [pc, #116]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da44:	f043 0301 	orr.w	r3, r3, #1
 800da48:	6313      	str	r3, [r2, #48]	; 0x30
 800da4a:	4b1b      	ldr	r3, [pc, #108]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	613b      	str	r3, [r7, #16]
 800da54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800da5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da5c:	2302      	movs	r3, #2
 800da5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da64:	2303      	movs	r3, #3
 800da66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da68:	230a      	movs	r3, #10
 800da6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da6c:	f107 0314 	add.w	r3, r7, #20
 800da70:	4619      	mov	r1, r3
 800da72:	4812      	ldr	r0, [pc, #72]	; (800dabc <HAL_PCD_MspInit+0xa4>)
 800da74:	f7f4 fe18 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da78:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7c:	4a0e      	ldr	r2, [pc, #56]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da82:	6353      	str	r3, [r2, #52]	; 0x34
 800da84:	2300      	movs	r3, #0
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	4b0b      	ldr	r3, [pc, #44]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da8c:	4a0a      	ldr	r2, [pc, #40]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da92:	6453      	str	r3, [r2, #68]	; 0x44
 800da94:	4b08      	ldr	r3, [pc, #32]	; (800dab8 <HAL_PCD_MspInit+0xa0>)
 800da96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800daa0:	2200      	movs	r2, #0
 800daa2:	2105      	movs	r1, #5
 800daa4:	2043      	movs	r0, #67	; 0x43
 800daa6:	f7f4 fdd5 	bl	8002654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800daaa:	2043      	movs	r0, #67	; 0x43
 800daac:	f7f4 fdee 	bl	800268c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dab0:	bf00      	nop
 800dab2:	3728      	adds	r7, #40	; 0x28
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	40023800 	.word	0x40023800
 800dabc:	40020000 	.word	0x40020000

0800dac0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f7fb fb9d 	bl	8009216 <USBD_LL_SetupStage>
}
 800dadc:	bf00      	nop
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800daf6:	78fa      	ldrb	r2, [r7, #3]
 800daf8:	6879      	ldr	r1, [r7, #4]
 800dafa:	4613      	mov	r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	440b      	add	r3, r1
 800db04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	4619      	mov	r1, r3
 800db0e:	f7fb fbd7 	bl	80092c0 <USBD_LL_DataOutStage>
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	460b      	mov	r3, r1
 800db24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800db2c:	78fa      	ldrb	r2, [r7, #3]
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	4613      	mov	r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	440b      	add	r3, r1
 800db3a:	334c      	adds	r3, #76	; 0x4c
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	78fb      	ldrb	r3, [r7, #3]
 800db40:	4619      	mov	r1, r3
 800db42:	f7fb fc70 	bl	8009426 <USBD_LL_DataInStage>
}
 800db46:	bf00      	nop
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fb fda4 	bl	80096aa <USBD_LL_SOF>
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db72:	2301      	movs	r3, #1
 800db74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d001      	beq.n	800db82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db7e:	f7f4 f9cd 	bl	8001f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db88:	7bfa      	ldrb	r2, [r7, #15]
 800db8a:	4611      	mov	r1, r2
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fb fd4e 	bl	800962e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fb fcf6 	bl	800958a <USBD_LL_Reset>
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fb fd49 	bl	800964e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	6812      	ldr	r2, [r2, #0]
 800dbca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dbce:	f043 0301 	orr.w	r3, r3, #1
 800dbd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6a1b      	ldr	r3, [r3, #32]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d005      	beq.n	800dbe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbdc:	4b04      	ldr	r3, [pc, #16]	; (800dbf0 <HAL_PCD_SuspendCallback+0x48>)
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	4a03      	ldr	r2, [pc, #12]	; (800dbf0 <HAL_PCD_SuspendCallback+0x48>)
 800dbe2:	f043 0306 	orr.w	r3, r3, #6
 800dbe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbe8:	bf00      	nop
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	e000ed00 	.word	0xe000ed00

0800dbf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fb fd39 	bl	800967a <USBD_LL_Resume>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc22:	78fa      	ldrb	r2, [r7, #3]
 800dc24:	4611      	mov	r1, r2
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fb fd91 	bl	800974e <USBD_LL_IsoOUTIncomplete>
}
 800dc2c:	bf00      	nop
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc46:	78fa      	ldrb	r2, [r7, #3]
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fb fd4d 	bl	80096ea <USBD_LL_IsoINIncomplete>
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fb fda3 	bl	80097b2 <USBD_LL_DevConnected>
}
 800dc6c:	bf00      	nop
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fb fda0 	bl	80097c8 <USBD_LL_DevDisconnected>
}
 800dc88:	bf00      	nop
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d13c      	bne.n	800dd1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dca0:	4a20      	ldr	r2, [pc, #128]	; (800dd24 <USBD_LL_Init+0x94>)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a1e      	ldr	r2, [pc, #120]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dcb0:	4b1c      	ldr	r3, [pc, #112]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dcb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dcb8:	4b1a      	ldr	r3, [pc, #104]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcba:	2204      	movs	r2, #4
 800dcbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dcbe:	4b19      	ldr	r3, [pc, #100]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dcc4:	4b17      	ldr	r3, [pc, #92]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dcca:	4b16      	ldr	r3, [pc, #88]	; (800dd24 <USBD_LL_Init+0x94>)
 800dccc:	2202      	movs	r2, #2
 800dcce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dcd0:	4b14      	ldr	r3, [pc, #80]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dcd6:	4b13      	ldr	r3, [pc, #76]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dcdc:	4b11      	ldr	r3, [pc, #68]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dce2:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <USBD_LL_Init+0x94>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dce8:	4b0e      	ldr	r3, [pc, #56]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dcee:	480d      	ldr	r0, [pc, #52]	; (800dd24 <USBD_LL_Init+0x94>)
 800dcf0:	f7f5 fe4f 	bl	8003992 <HAL_PCD_Init>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dcfa:	f7f4 f90f 	bl	8001f1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcfe:	2180      	movs	r1, #128	; 0x80
 800dd00:	4808      	ldr	r0, [pc, #32]	; (800dd24 <USBD_LL_Init+0x94>)
 800dd02:	f7f7 f8a6 	bl	8004e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dd06:	2240      	movs	r2, #64	; 0x40
 800dd08:	2100      	movs	r1, #0
 800dd0a:	4806      	ldr	r0, [pc, #24]	; (800dd24 <USBD_LL_Init+0x94>)
 800dd0c:	f7f7 f85a 	bl	8004dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd10:	2280      	movs	r2, #128	; 0x80
 800dd12:	2101      	movs	r1, #1
 800dd14:	4803      	ldr	r0, [pc, #12]	; (800dd24 <USBD_LL_Init+0x94>)
 800dd16:	f7f7 f855 	bl	8004dc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	200064a8 	.word	0x200064a8

0800dd28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7f5 ff44 	bl	8003bcc <HAL_PCD_Start>
 800dd44:	4603      	mov	r3, r0
 800dd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f942 	bl	800dfd4 <USBD_Get_USB_Status>
 800dd50:	4603      	mov	r3, r0
 800dd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b084      	sub	sp, #16
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	4608      	mov	r0, r1
 800dd68:	4611      	mov	r1, r2
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	70fb      	strb	r3, [r7, #3]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70bb      	strb	r3, [r7, #2]
 800dd74:	4613      	mov	r3, r2
 800dd76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd86:	78bb      	ldrb	r3, [r7, #2]
 800dd88:	883a      	ldrh	r2, [r7, #0]
 800dd8a:	78f9      	ldrb	r1, [r7, #3]
 800dd8c:	f7f6 fc15 	bl	80045ba <HAL_PCD_EP_Open>
 800dd90:	4603      	mov	r3, r0
 800dd92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f91c 	bl	800dfd4 <USBD_Get_USB_Status>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b084      	sub	sp, #16
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddc4:	78fa      	ldrb	r2, [r7, #3]
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7f6 fc5e 	bl	800468a <HAL_PCD_EP_Close>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f8fd 	bl	800dfd4 <USBD_Get_USB_Status>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de02:	78fa      	ldrb	r2, [r7, #3]
 800de04:	4611      	mov	r1, r2
 800de06:	4618      	mov	r0, r3
 800de08:	f7f6 fd36 	bl	8004878 <HAL_PCD_EP_SetStall>
 800de0c:	4603      	mov	r3, r0
 800de0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f8de 	bl	800dfd4 <USBD_Get_USB_Status>
 800de18:	4603      	mov	r3, r0
 800de1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de40:	78fa      	ldrb	r2, [r7, #3]
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7f6 fd7b 	bl	8004940 <HAL_PCD_EP_ClrStall>
 800de4a:	4603      	mov	r3, r0
 800de4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	4618      	mov	r0, r3
 800de52:	f000 f8bf 	bl	800dfd4 <USBD_Get_USB_Status>
 800de56:	4603      	mov	r3, r0
 800de58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da0b      	bge.n	800de98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de80:	78fb      	ldrb	r3, [r7, #3]
 800de82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de86:	68f9      	ldr	r1, [r7, #12]
 800de88:	4613      	mov	r3, r2
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	440b      	add	r3, r1
 800de92:	333e      	adds	r3, #62	; 0x3e
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	e00b      	b.n	800deb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de9e:	68f9      	ldr	r1, [r7, #12]
 800dea0:	4613      	mov	r3, r2
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	4413      	add	r3, r2
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	440b      	add	r3, r1
 800deaa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800deae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3714      	adds	r7, #20
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	460b      	mov	r3, r1
 800dec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ded6:	78fa      	ldrb	r2, [r7, #3]
 800ded8:	4611      	mov	r1, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f6 fb48 	bl	8004570 <HAL_PCD_SetAddress>
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f874 	bl	800dfd4 <USBD_Get_USB_Status>
 800deec:	4603      	mov	r3, r0
 800deee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def0:	7bbb      	ldrb	r3, [r7, #14]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b086      	sub	sp, #24
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
 800df06:	460b      	mov	r3, r1
 800df08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df18:	7af9      	ldrb	r1, [r7, #11]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	f7f6 fc61 	bl	80047e4 <HAL_PCD_EP_Transmit>
 800df22:	4603      	mov	r3, r0
 800df24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df26:	7dfb      	ldrb	r3, [r7, #23]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 f853 	bl	800dfd4 <USBD_Get_USB_Status>
 800df2e:	4603      	mov	r3, r0
 800df30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df32:	7dbb      	ldrb	r3, [r7, #22]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	607a      	str	r2, [r7, #4]
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	460b      	mov	r3, r1
 800df4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df5a:	7af9      	ldrb	r1, [r7, #11]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f7f6 fbdd 	bl	800471e <HAL_PCD_EP_Receive>
 800df64:	4603      	mov	r3, r0
 800df66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df68:	7dfb      	ldrb	r3, [r7, #23]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 f832 	bl	800dfd4 <USBD_Get_USB_Status>
 800df70:	4603      	mov	r3, r0
 800df72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df74:	7dbb      	ldrb	r3, [r7, #22]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b082      	sub	sp, #8
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	460b      	mov	r3, r1
 800df88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df90:	78fa      	ldrb	r2, [r7, #3]
 800df92:	4611      	mov	r1, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7f6 fc0d 	bl	80047b4 <HAL_PCD_EP_GetRxCount>
 800df9a:	4603      	mov	r3, r0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfac:	4b03      	ldr	r3, [pc, #12]	; (800dfbc <USBD_static_malloc+0x18>)
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	200069b4 	.word	0x200069b4

0800dfc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d817      	bhi.n	800e018 <USBD_Get_USB_Status+0x44>
 800dfe8:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <USBD_Get_USB_Status+0x1c>)
 800dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfee:	bf00      	nop
 800dff0:	0800e001 	.word	0x0800e001
 800dff4:	0800e007 	.word	0x0800e007
 800dff8:	0800e00d 	.word	0x0800e00d
 800dffc:	0800e013 	.word	0x0800e013
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]
    break;
 800e004:	e00b      	b.n	800e01e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e006:	2303      	movs	r3, #3
 800e008:	73fb      	strb	r3, [r7, #15]
    break;
 800e00a:	e008      	b.n	800e01e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e00c:	2301      	movs	r3, #1
 800e00e:	73fb      	strb	r3, [r7, #15]
    break;
 800e010:	e005      	b.n	800e01e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e012:	2303      	movs	r3, #3
 800e014:	73fb      	strb	r3, [r7, #15]
    break;
 800e016:	e002      	b.n	800e01e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e018:	2303      	movs	r3, #3
 800e01a:	73fb      	strb	r3, [r7, #15]
    break;
 800e01c:	bf00      	nop
  }
  return usb_status;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <__errno>:
 800e02c:	4b01      	ldr	r3, [pc, #4]	; (800e034 <__errno+0x8>)
 800e02e:	6818      	ldr	r0, [r3, #0]
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	200005d8 	.word	0x200005d8

0800e038 <__libc_init_array>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4d0d      	ldr	r5, [pc, #52]	; (800e070 <__libc_init_array+0x38>)
 800e03c:	4c0d      	ldr	r4, [pc, #52]	; (800e074 <__libc_init_array+0x3c>)
 800e03e:	1b64      	subs	r4, r4, r5
 800e040:	10a4      	asrs	r4, r4, #2
 800e042:	2600      	movs	r6, #0
 800e044:	42a6      	cmp	r6, r4
 800e046:	d109      	bne.n	800e05c <__libc_init_array+0x24>
 800e048:	4d0b      	ldr	r5, [pc, #44]	; (800e078 <__libc_init_array+0x40>)
 800e04a:	4c0c      	ldr	r4, [pc, #48]	; (800e07c <__libc_init_array+0x44>)
 800e04c:	f000 fcb2 	bl	800e9b4 <_init>
 800e050:	1b64      	subs	r4, r4, r5
 800e052:	10a4      	asrs	r4, r4, #2
 800e054:	2600      	movs	r6, #0
 800e056:	42a6      	cmp	r6, r4
 800e058:	d105      	bne.n	800e066 <__libc_init_array+0x2e>
 800e05a:	bd70      	pop	{r4, r5, r6, pc}
 800e05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e060:	4798      	blx	r3
 800e062:	3601      	adds	r6, #1
 800e064:	e7ee      	b.n	800e044 <__libc_init_array+0xc>
 800e066:	f855 3b04 	ldr.w	r3, [r5], #4
 800e06a:	4798      	blx	r3
 800e06c:	3601      	adds	r6, #1
 800e06e:	e7f2      	b.n	800e056 <__libc_init_array+0x1e>
 800e070:	0800f0b4 	.word	0x0800f0b4
 800e074:	0800f0b4 	.word	0x0800f0b4
 800e078:	0800f0b4 	.word	0x0800f0b4
 800e07c:	0800f0b8 	.word	0x0800f0b8

0800e080 <malloc>:
 800e080:	4b02      	ldr	r3, [pc, #8]	; (800e08c <malloc+0xc>)
 800e082:	4601      	mov	r1, r0
 800e084:	6818      	ldr	r0, [r3, #0]
 800e086:	f000 b885 	b.w	800e194 <_malloc_r>
 800e08a:	bf00      	nop
 800e08c:	200005d8 	.word	0x200005d8

0800e090 <memcpy>:
 800e090:	440a      	add	r2, r1
 800e092:	4291      	cmp	r1, r2
 800e094:	f100 33ff 	add.w	r3, r0, #4294967295
 800e098:	d100      	bne.n	800e09c <memcpy+0xc>
 800e09a:	4770      	bx	lr
 800e09c:	b510      	push	{r4, lr}
 800e09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0a6:	4291      	cmp	r1, r2
 800e0a8:	d1f9      	bne.n	800e09e <memcpy+0xe>
 800e0aa:	bd10      	pop	{r4, pc}

0800e0ac <memset>:
 800e0ac:	4402      	add	r2, r0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d100      	bne.n	800e0b6 <memset+0xa>
 800e0b4:	4770      	bx	lr
 800e0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ba:	e7f9      	b.n	800e0b0 <memset+0x4>

0800e0bc <_free_r>:
 800e0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0be:	2900      	cmp	r1, #0
 800e0c0:	d044      	beq.n	800e14c <_free_r+0x90>
 800e0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0c6:	9001      	str	r0, [sp, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e0ce:	bfb8      	it	lt
 800e0d0:	18e4      	addlt	r4, r4, r3
 800e0d2:	f000 f91f 	bl	800e314 <__malloc_lock>
 800e0d6:	4a1e      	ldr	r2, [pc, #120]	; (800e150 <_free_r+0x94>)
 800e0d8:	9801      	ldr	r0, [sp, #4]
 800e0da:	6813      	ldr	r3, [r2, #0]
 800e0dc:	b933      	cbnz	r3, 800e0ec <_free_r+0x30>
 800e0de:	6063      	str	r3, [r4, #4]
 800e0e0:	6014      	str	r4, [r2, #0]
 800e0e2:	b003      	add	sp, #12
 800e0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0e8:	f000 b91a 	b.w	800e320 <__malloc_unlock>
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	d908      	bls.n	800e102 <_free_r+0x46>
 800e0f0:	6825      	ldr	r5, [r4, #0]
 800e0f2:	1961      	adds	r1, r4, r5
 800e0f4:	428b      	cmp	r3, r1
 800e0f6:	bf01      	itttt	eq
 800e0f8:	6819      	ldreq	r1, [r3, #0]
 800e0fa:	685b      	ldreq	r3, [r3, #4]
 800e0fc:	1949      	addeq	r1, r1, r5
 800e0fe:	6021      	streq	r1, [r4, #0]
 800e100:	e7ed      	b.n	800e0de <_free_r+0x22>
 800e102:	461a      	mov	r2, r3
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	b10b      	cbz	r3, 800e10c <_free_r+0x50>
 800e108:	42a3      	cmp	r3, r4
 800e10a:	d9fa      	bls.n	800e102 <_free_r+0x46>
 800e10c:	6811      	ldr	r1, [r2, #0]
 800e10e:	1855      	adds	r5, r2, r1
 800e110:	42a5      	cmp	r5, r4
 800e112:	d10b      	bne.n	800e12c <_free_r+0x70>
 800e114:	6824      	ldr	r4, [r4, #0]
 800e116:	4421      	add	r1, r4
 800e118:	1854      	adds	r4, r2, r1
 800e11a:	42a3      	cmp	r3, r4
 800e11c:	6011      	str	r1, [r2, #0]
 800e11e:	d1e0      	bne.n	800e0e2 <_free_r+0x26>
 800e120:	681c      	ldr	r4, [r3, #0]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	6053      	str	r3, [r2, #4]
 800e126:	4421      	add	r1, r4
 800e128:	6011      	str	r1, [r2, #0]
 800e12a:	e7da      	b.n	800e0e2 <_free_r+0x26>
 800e12c:	d902      	bls.n	800e134 <_free_r+0x78>
 800e12e:	230c      	movs	r3, #12
 800e130:	6003      	str	r3, [r0, #0]
 800e132:	e7d6      	b.n	800e0e2 <_free_r+0x26>
 800e134:	6825      	ldr	r5, [r4, #0]
 800e136:	1961      	adds	r1, r4, r5
 800e138:	428b      	cmp	r3, r1
 800e13a:	bf04      	itt	eq
 800e13c:	6819      	ldreq	r1, [r3, #0]
 800e13e:	685b      	ldreq	r3, [r3, #4]
 800e140:	6063      	str	r3, [r4, #4]
 800e142:	bf04      	itt	eq
 800e144:	1949      	addeq	r1, r1, r5
 800e146:	6021      	streq	r1, [r4, #0]
 800e148:	6054      	str	r4, [r2, #4]
 800e14a:	e7ca      	b.n	800e0e2 <_free_r+0x26>
 800e14c:	b003      	add	sp, #12
 800e14e:	bd30      	pop	{r4, r5, pc}
 800e150:	20006bd4 	.word	0x20006bd4

0800e154 <sbrk_aligned>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	4e0e      	ldr	r6, [pc, #56]	; (800e190 <sbrk_aligned+0x3c>)
 800e158:	460c      	mov	r4, r1
 800e15a:	6831      	ldr	r1, [r6, #0]
 800e15c:	4605      	mov	r5, r0
 800e15e:	b911      	cbnz	r1, 800e166 <sbrk_aligned+0x12>
 800e160:	f000 f88c 	bl	800e27c <_sbrk_r>
 800e164:	6030      	str	r0, [r6, #0]
 800e166:	4621      	mov	r1, r4
 800e168:	4628      	mov	r0, r5
 800e16a:	f000 f887 	bl	800e27c <_sbrk_r>
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	d00a      	beq.n	800e188 <sbrk_aligned+0x34>
 800e172:	1cc4      	adds	r4, r0, #3
 800e174:	f024 0403 	bic.w	r4, r4, #3
 800e178:	42a0      	cmp	r0, r4
 800e17a:	d007      	beq.n	800e18c <sbrk_aligned+0x38>
 800e17c:	1a21      	subs	r1, r4, r0
 800e17e:	4628      	mov	r0, r5
 800e180:	f000 f87c 	bl	800e27c <_sbrk_r>
 800e184:	3001      	adds	r0, #1
 800e186:	d101      	bne.n	800e18c <sbrk_aligned+0x38>
 800e188:	f04f 34ff 	mov.w	r4, #4294967295
 800e18c:	4620      	mov	r0, r4
 800e18e:	bd70      	pop	{r4, r5, r6, pc}
 800e190:	20006bd8 	.word	0x20006bd8

0800e194 <_malloc_r>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	1ccd      	adds	r5, r1, #3
 800e19a:	f025 0503 	bic.w	r5, r5, #3
 800e19e:	3508      	adds	r5, #8
 800e1a0:	2d0c      	cmp	r5, #12
 800e1a2:	bf38      	it	cc
 800e1a4:	250c      	movcc	r5, #12
 800e1a6:	2d00      	cmp	r5, #0
 800e1a8:	4607      	mov	r7, r0
 800e1aa:	db01      	blt.n	800e1b0 <_malloc_r+0x1c>
 800e1ac:	42a9      	cmp	r1, r5
 800e1ae:	d905      	bls.n	800e1bc <_malloc_r+0x28>
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	603b      	str	r3, [r7, #0]
 800e1b4:	2600      	movs	r6, #0
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1bc:	4e2e      	ldr	r6, [pc, #184]	; (800e278 <_malloc_r+0xe4>)
 800e1be:	f000 f8a9 	bl	800e314 <__malloc_lock>
 800e1c2:	6833      	ldr	r3, [r6, #0]
 800e1c4:	461c      	mov	r4, r3
 800e1c6:	bb34      	cbnz	r4, 800e216 <_malloc_r+0x82>
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	f7ff ffc2 	bl	800e154 <sbrk_aligned>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	d14d      	bne.n	800e272 <_malloc_r+0xde>
 800e1d6:	6834      	ldr	r4, [r6, #0]
 800e1d8:	4626      	mov	r6, r4
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	d140      	bne.n	800e260 <_malloc_r+0xcc>
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	eb04 0803 	add.w	r8, r4, r3
 800e1e8:	f000 f848 	bl	800e27c <_sbrk_r>
 800e1ec:	4580      	cmp	r8, r0
 800e1ee:	d13a      	bne.n	800e266 <_malloc_r+0xd2>
 800e1f0:	6821      	ldr	r1, [r4, #0]
 800e1f2:	3503      	adds	r5, #3
 800e1f4:	1a6d      	subs	r5, r5, r1
 800e1f6:	f025 0503 	bic.w	r5, r5, #3
 800e1fa:	3508      	adds	r5, #8
 800e1fc:	2d0c      	cmp	r5, #12
 800e1fe:	bf38      	it	cc
 800e200:	250c      	movcc	r5, #12
 800e202:	4629      	mov	r1, r5
 800e204:	4638      	mov	r0, r7
 800e206:	f7ff ffa5 	bl	800e154 <sbrk_aligned>
 800e20a:	3001      	adds	r0, #1
 800e20c:	d02b      	beq.n	800e266 <_malloc_r+0xd2>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	442b      	add	r3, r5
 800e212:	6023      	str	r3, [r4, #0]
 800e214:	e00e      	b.n	800e234 <_malloc_r+0xa0>
 800e216:	6822      	ldr	r2, [r4, #0]
 800e218:	1b52      	subs	r2, r2, r5
 800e21a:	d41e      	bmi.n	800e25a <_malloc_r+0xc6>
 800e21c:	2a0b      	cmp	r2, #11
 800e21e:	d916      	bls.n	800e24e <_malloc_r+0xba>
 800e220:	1961      	adds	r1, r4, r5
 800e222:	42a3      	cmp	r3, r4
 800e224:	6025      	str	r5, [r4, #0]
 800e226:	bf18      	it	ne
 800e228:	6059      	strne	r1, [r3, #4]
 800e22a:	6863      	ldr	r3, [r4, #4]
 800e22c:	bf08      	it	eq
 800e22e:	6031      	streq	r1, [r6, #0]
 800e230:	5162      	str	r2, [r4, r5]
 800e232:	604b      	str	r3, [r1, #4]
 800e234:	4638      	mov	r0, r7
 800e236:	f104 060b 	add.w	r6, r4, #11
 800e23a:	f000 f871 	bl	800e320 <__malloc_unlock>
 800e23e:	f026 0607 	bic.w	r6, r6, #7
 800e242:	1d23      	adds	r3, r4, #4
 800e244:	1af2      	subs	r2, r6, r3
 800e246:	d0b6      	beq.n	800e1b6 <_malloc_r+0x22>
 800e248:	1b9b      	subs	r3, r3, r6
 800e24a:	50a3      	str	r3, [r4, r2]
 800e24c:	e7b3      	b.n	800e1b6 <_malloc_r+0x22>
 800e24e:	6862      	ldr	r2, [r4, #4]
 800e250:	42a3      	cmp	r3, r4
 800e252:	bf0c      	ite	eq
 800e254:	6032      	streq	r2, [r6, #0]
 800e256:	605a      	strne	r2, [r3, #4]
 800e258:	e7ec      	b.n	800e234 <_malloc_r+0xa0>
 800e25a:	4623      	mov	r3, r4
 800e25c:	6864      	ldr	r4, [r4, #4]
 800e25e:	e7b2      	b.n	800e1c6 <_malloc_r+0x32>
 800e260:	4634      	mov	r4, r6
 800e262:	6876      	ldr	r6, [r6, #4]
 800e264:	e7b9      	b.n	800e1da <_malloc_r+0x46>
 800e266:	230c      	movs	r3, #12
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	4638      	mov	r0, r7
 800e26c:	f000 f858 	bl	800e320 <__malloc_unlock>
 800e270:	e7a1      	b.n	800e1b6 <_malloc_r+0x22>
 800e272:	6025      	str	r5, [r4, #0]
 800e274:	e7de      	b.n	800e234 <_malloc_r+0xa0>
 800e276:	bf00      	nop
 800e278:	20006bd4 	.word	0x20006bd4

0800e27c <_sbrk_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d06      	ldr	r5, [pc, #24]	; (800e298 <_sbrk_r+0x1c>)
 800e280:	2300      	movs	r3, #0
 800e282:	4604      	mov	r4, r0
 800e284:	4608      	mov	r0, r1
 800e286:	602b      	str	r3, [r5, #0]
 800e288:	f7f4 f854 	bl	8002334 <_sbrk>
 800e28c:	1c43      	adds	r3, r0, #1
 800e28e:	d102      	bne.n	800e296 <_sbrk_r+0x1a>
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	b103      	cbz	r3, 800e296 <_sbrk_r+0x1a>
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	bd38      	pop	{r3, r4, r5, pc}
 800e298:	20006bdc 	.word	0x20006bdc

0800e29c <siprintf>:
 800e29c:	b40e      	push	{r1, r2, r3}
 800e29e:	b500      	push	{lr}
 800e2a0:	b09c      	sub	sp, #112	; 0x70
 800e2a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e2a4:	9002      	str	r0, [sp, #8]
 800e2a6:	9006      	str	r0, [sp, #24]
 800e2a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2ac:	4809      	ldr	r0, [pc, #36]	; (800e2d4 <siprintf+0x38>)
 800e2ae:	9107      	str	r1, [sp, #28]
 800e2b0:	9104      	str	r1, [sp, #16]
 800e2b2:	4909      	ldr	r1, [pc, #36]	; (800e2d8 <siprintf+0x3c>)
 800e2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2b8:	9105      	str	r1, [sp, #20]
 800e2ba:	6800      	ldr	r0, [r0, #0]
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	a902      	add	r1, sp, #8
 800e2c0:	f000 f890 	bl	800e3e4 <_svfiprintf_r>
 800e2c4:	9b02      	ldr	r3, [sp, #8]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	701a      	strb	r2, [r3, #0]
 800e2ca:	b01c      	add	sp, #112	; 0x70
 800e2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2d0:	b003      	add	sp, #12
 800e2d2:	4770      	bx	lr
 800e2d4:	200005d8 	.word	0x200005d8
 800e2d8:	ffff0208 	.word	0xffff0208

0800e2dc <strcpy>:
 800e2dc:	4603      	mov	r3, r0
 800e2de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2e2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2e6:	2a00      	cmp	r2, #0
 800e2e8:	d1f9      	bne.n	800e2de <strcpy+0x2>
 800e2ea:	4770      	bx	lr

0800e2ec <strncpy>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	3901      	subs	r1, #1
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	b132      	cbz	r2, 800e302 <strncpy+0x16>
 800e2f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2f8:	f803 4b01 	strb.w	r4, [r3], #1
 800e2fc:	3a01      	subs	r2, #1
 800e2fe:	2c00      	cmp	r4, #0
 800e300:	d1f7      	bne.n	800e2f2 <strncpy+0x6>
 800e302:	441a      	add	r2, r3
 800e304:	2100      	movs	r1, #0
 800e306:	4293      	cmp	r3, r2
 800e308:	d100      	bne.n	800e30c <strncpy+0x20>
 800e30a:	bd10      	pop	{r4, pc}
 800e30c:	f803 1b01 	strb.w	r1, [r3], #1
 800e310:	e7f9      	b.n	800e306 <strncpy+0x1a>
	...

0800e314 <__malloc_lock>:
 800e314:	4801      	ldr	r0, [pc, #4]	; (800e31c <__malloc_lock+0x8>)
 800e316:	f000 baf9 	b.w	800e90c <__retarget_lock_acquire_recursive>
 800e31a:	bf00      	nop
 800e31c:	20006be0 	.word	0x20006be0

0800e320 <__malloc_unlock>:
 800e320:	4801      	ldr	r0, [pc, #4]	; (800e328 <__malloc_unlock+0x8>)
 800e322:	f000 baf4 	b.w	800e90e <__retarget_lock_release_recursive>
 800e326:	bf00      	nop
 800e328:	20006be0 	.word	0x20006be0

0800e32c <__ssputs_r>:
 800e32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e330:	688e      	ldr	r6, [r1, #8]
 800e332:	429e      	cmp	r6, r3
 800e334:	4682      	mov	sl, r0
 800e336:	460c      	mov	r4, r1
 800e338:	4690      	mov	r8, r2
 800e33a:	461f      	mov	r7, r3
 800e33c:	d838      	bhi.n	800e3b0 <__ssputs_r+0x84>
 800e33e:	898a      	ldrh	r2, [r1, #12]
 800e340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e344:	d032      	beq.n	800e3ac <__ssputs_r+0x80>
 800e346:	6825      	ldr	r5, [r4, #0]
 800e348:	6909      	ldr	r1, [r1, #16]
 800e34a:	eba5 0901 	sub.w	r9, r5, r1
 800e34e:	6965      	ldr	r5, [r4, #20]
 800e350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e358:	3301      	adds	r3, #1
 800e35a:	444b      	add	r3, r9
 800e35c:	106d      	asrs	r5, r5, #1
 800e35e:	429d      	cmp	r5, r3
 800e360:	bf38      	it	cc
 800e362:	461d      	movcc	r5, r3
 800e364:	0553      	lsls	r3, r2, #21
 800e366:	d531      	bpl.n	800e3cc <__ssputs_r+0xa0>
 800e368:	4629      	mov	r1, r5
 800e36a:	f7ff ff13 	bl	800e194 <_malloc_r>
 800e36e:	4606      	mov	r6, r0
 800e370:	b950      	cbnz	r0, 800e388 <__ssputs_r+0x5c>
 800e372:	230c      	movs	r3, #12
 800e374:	f8ca 3000 	str.w	r3, [sl]
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e37e:	81a3      	strh	r3, [r4, #12]
 800e380:	f04f 30ff 	mov.w	r0, #4294967295
 800e384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e388:	6921      	ldr	r1, [r4, #16]
 800e38a:	464a      	mov	r2, r9
 800e38c:	f7ff fe80 	bl	800e090 <memcpy>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e39a:	81a3      	strh	r3, [r4, #12]
 800e39c:	6126      	str	r6, [r4, #16]
 800e39e:	6165      	str	r5, [r4, #20]
 800e3a0:	444e      	add	r6, r9
 800e3a2:	eba5 0509 	sub.w	r5, r5, r9
 800e3a6:	6026      	str	r6, [r4, #0]
 800e3a8:	60a5      	str	r5, [r4, #8]
 800e3aa:	463e      	mov	r6, r7
 800e3ac:	42be      	cmp	r6, r7
 800e3ae:	d900      	bls.n	800e3b2 <__ssputs_r+0x86>
 800e3b0:	463e      	mov	r6, r7
 800e3b2:	6820      	ldr	r0, [r4, #0]
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	4641      	mov	r1, r8
 800e3b8:	f000 faaa 	bl	800e910 <memmove>
 800e3bc:	68a3      	ldr	r3, [r4, #8]
 800e3be:	1b9b      	subs	r3, r3, r6
 800e3c0:	60a3      	str	r3, [r4, #8]
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	4433      	add	r3, r6
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e7db      	b.n	800e384 <__ssputs_r+0x58>
 800e3cc:	462a      	mov	r2, r5
 800e3ce:	f000 fab9 	bl	800e944 <_realloc_r>
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d1e1      	bne.n	800e39c <__ssputs_r+0x70>
 800e3d8:	6921      	ldr	r1, [r4, #16]
 800e3da:	4650      	mov	r0, sl
 800e3dc:	f7ff fe6e 	bl	800e0bc <_free_r>
 800e3e0:	e7c7      	b.n	800e372 <__ssputs_r+0x46>
	...

0800e3e4 <_svfiprintf_r>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	4698      	mov	r8, r3
 800e3ea:	898b      	ldrh	r3, [r1, #12]
 800e3ec:	061b      	lsls	r3, r3, #24
 800e3ee:	b09d      	sub	sp, #116	; 0x74
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	d50e      	bpl.n	800e416 <_svfiprintf_r+0x32>
 800e3f8:	690b      	ldr	r3, [r1, #16]
 800e3fa:	b963      	cbnz	r3, 800e416 <_svfiprintf_r+0x32>
 800e3fc:	2140      	movs	r1, #64	; 0x40
 800e3fe:	f7ff fec9 	bl	800e194 <_malloc_r>
 800e402:	6028      	str	r0, [r5, #0]
 800e404:	6128      	str	r0, [r5, #16]
 800e406:	b920      	cbnz	r0, 800e412 <_svfiprintf_r+0x2e>
 800e408:	230c      	movs	r3, #12
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	e0d1      	b.n	800e5b6 <_svfiprintf_r+0x1d2>
 800e412:	2340      	movs	r3, #64	; 0x40
 800e414:	616b      	str	r3, [r5, #20]
 800e416:	2300      	movs	r3, #0
 800e418:	9309      	str	r3, [sp, #36]	; 0x24
 800e41a:	2320      	movs	r3, #32
 800e41c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e420:	f8cd 800c 	str.w	r8, [sp, #12]
 800e424:	2330      	movs	r3, #48	; 0x30
 800e426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e5d0 <_svfiprintf_r+0x1ec>
 800e42a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e42e:	f04f 0901 	mov.w	r9, #1
 800e432:	4623      	mov	r3, r4
 800e434:	469a      	mov	sl, r3
 800e436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e43a:	b10a      	cbz	r2, 800e440 <_svfiprintf_r+0x5c>
 800e43c:	2a25      	cmp	r2, #37	; 0x25
 800e43e:	d1f9      	bne.n	800e434 <_svfiprintf_r+0x50>
 800e440:	ebba 0b04 	subs.w	fp, sl, r4
 800e444:	d00b      	beq.n	800e45e <_svfiprintf_r+0x7a>
 800e446:	465b      	mov	r3, fp
 800e448:	4622      	mov	r2, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	4638      	mov	r0, r7
 800e44e:	f7ff ff6d 	bl	800e32c <__ssputs_r>
 800e452:	3001      	adds	r0, #1
 800e454:	f000 80aa 	beq.w	800e5ac <_svfiprintf_r+0x1c8>
 800e458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e45a:	445a      	add	r2, fp
 800e45c:	9209      	str	r2, [sp, #36]	; 0x24
 800e45e:	f89a 3000 	ldrb.w	r3, [sl]
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 80a2 	beq.w	800e5ac <_svfiprintf_r+0x1c8>
 800e468:	2300      	movs	r3, #0
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e472:	f10a 0a01 	add.w	sl, sl, #1
 800e476:	9304      	str	r3, [sp, #16]
 800e478:	9307      	str	r3, [sp, #28]
 800e47a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e47e:	931a      	str	r3, [sp, #104]	; 0x68
 800e480:	4654      	mov	r4, sl
 800e482:	2205      	movs	r2, #5
 800e484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e488:	4851      	ldr	r0, [pc, #324]	; (800e5d0 <_svfiprintf_r+0x1ec>)
 800e48a:	f7f1 feb1 	bl	80001f0 <memchr>
 800e48e:	9a04      	ldr	r2, [sp, #16]
 800e490:	b9d8      	cbnz	r0, 800e4ca <_svfiprintf_r+0xe6>
 800e492:	06d0      	lsls	r0, r2, #27
 800e494:	bf44      	itt	mi
 800e496:	2320      	movmi	r3, #32
 800e498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e49c:	0711      	lsls	r1, r2, #28
 800e49e:	bf44      	itt	mi
 800e4a0:	232b      	movmi	r3, #43	; 0x2b
 800e4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ac:	d015      	beq.n	800e4da <_svfiprintf_r+0xf6>
 800e4ae:	9a07      	ldr	r2, [sp, #28]
 800e4b0:	4654      	mov	r4, sl
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	f04f 0c0a 	mov.w	ip, #10
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4be:	3b30      	subs	r3, #48	; 0x30
 800e4c0:	2b09      	cmp	r3, #9
 800e4c2:	d94e      	bls.n	800e562 <_svfiprintf_r+0x17e>
 800e4c4:	b1b0      	cbz	r0, 800e4f4 <_svfiprintf_r+0x110>
 800e4c6:	9207      	str	r2, [sp, #28]
 800e4c8:	e014      	b.n	800e4f4 <_svfiprintf_r+0x110>
 800e4ca:	eba0 0308 	sub.w	r3, r0, r8
 800e4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	46a2      	mov	sl, r4
 800e4d8:	e7d2      	b.n	800e480 <_svfiprintf_r+0x9c>
 800e4da:	9b03      	ldr	r3, [sp, #12]
 800e4dc:	1d19      	adds	r1, r3, #4
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	9103      	str	r1, [sp, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	bfbb      	ittet	lt
 800e4e6:	425b      	neglt	r3, r3
 800e4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ec:	9307      	strge	r3, [sp, #28]
 800e4ee:	9307      	strlt	r3, [sp, #28]
 800e4f0:	bfb8      	it	lt
 800e4f2:	9204      	strlt	r2, [sp, #16]
 800e4f4:	7823      	ldrb	r3, [r4, #0]
 800e4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4f8:	d10c      	bne.n	800e514 <_svfiprintf_r+0x130>
 800e4fa:	7863      	ldrb	r3, [r4, #1]
 800e4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4fe:	d135      	bne.n	800e56c <_svfiprintf_r+0x188>
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	1d1a      	adds	r2, r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	9203      	str	r2, [sp, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bfb8      	it	lt
 800e50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e510:	3402      	adds	r4, #2
 800e512:	9305      	str	r3, [sp, #20]
 800e514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5e0 <_svfiprintf_r+0x1fc>
 800e518:	7821      	ldrb	r1, [r4, #0]
 800e51a:	2203      	movs	r2, #3
 800e51c:	4650      	mov	r0, sl
 800e51e:	f7f1 fe67 	bl	80001f0 <memchr>
 800e522:	b140      	cbz	r0, 800e536 <_svfiprintf_r+0x152>
 800e524:	2340      	movs	r3, #64	; 0x40
 800e526:	eba0 000a 	sub.w	r0, r0, sl
 800e52a:	fa03 f000 	lsl.w	r0, r3, r0
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	4303      	orrs	r3, r0
 800e532:	3401      	adds	r4, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53a:	4826      	ldr	r0, [pc, #152]	; (800e5d4 <_svfiprintf_r+0x1f0>)
 800e53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e540:	2206      	movs	r2, #6
 800e542:	f7f1 fe55 	bl	80001f0 <memchr>
 800e546:	2800      	cmp	r0, #0
 800e548:	d038      	beq.n	800e5bc <_svfiprintf_r+0x1d8>
 800e54a:	4b23      	ldr	r3, [pc, #140]	; (800e5d8 <_svfiprintf_r+0x1f4>)
 800e54c:	bb1b      	cbnz	r3, 800e596 <_svfiprintf_r+0x1b2>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	3307      	adds	r3, #7
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	3308      	adds	r3, #8
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55c:	4433      	add	r3, r6
 800e55e:	9309      	str	r3, [sp, #36]	; 0x24
 800e560:	e767      	b.n	800e432 <_svfiprintf_r+0x4e>
 800e562:	fb0c 3202 	mla	r2, ip, r2, r3
 800e566:	460c      	mov	r4, r1
 800e568:	2001      	movs	r0, #1
 800e56a:	e7a5      	b.n	800e4b8 <_svfiprintf_r+0xd4>
 800e56c:	2300      	movs	r3, #0
 800e56e:	3401      	adds	r4, #1
 800e570:	9305      	str	r3, [sp, #20]
 800e572:	4619      	mov	r1, r3
 800e574:	f04f 0c0a 	mov.w	ip, #10
 800e578:	4620      	mov	r0, r4
 800e57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e57e:	3a30      	subs	r2, #48	; 0x30
 800e580:	2a09      	cmp	r2, #9
 800e582:	d903      	bls.n	800e58c <_svfiprintf_r+0x1a8>
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0c5      	beq.n	800e514 <_svfiprintf_r+0x130>
 800e588:	9105      	str	r1, [sp, #20]
 800e58a:	e7c3      	b.n	800e514 <_svfiprintf_r+0x130>
 800e58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e590:	4604      	mov	r4, r0
 800e592:	2301      	movs	r3, #1
 800e594:	e7f0      	b.n	800e578 <_svfiprintf_r+0x194>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	462a      	mov	r2, r5
 800e59c:	4b0f      	ldr	r3, [pc, #60]	; (800e5dc <_svfiprintf_r+0x1f8>)
 800e59e:	a904      	add	r1, sp, #16
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f3af 8000 	nop.w
 800e5a6:	1c42      	adds	r2, r0, #1
 800e5a8:	4606      	mov	r6, r0
 800e5aa:	d1d6      	bne.n	800e55a <_svfiprintf_r+0x176>
 800e5ac:	89ab      	ldrh	r3, [r5, #12]
 800e5ae:	065b      	lsls	r3, r3, #25
 800e5b0:	f53f af2c 	bmi.w	800e40c <_svfiprintf_r+0x28>
 800e5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5b6:	b01d      	add	sp, #116	; 0x74
 800e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5bc:	ab03      	add	r3, sp, #12
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	462a      	mov	r2, r5
 800e5c2:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <_svfiprintf_r+0x1f8>)
 800e5c4:	a904      	add	r1, sp, #16
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f000 f87a 	bl	800e6c0 <_printf_i>
 800e5cc:	e7eb      	b.n	800e5a6 <_svfiprintf_r+0x1c2>
 800e5ce:	bf00      	nop
 800e5d0:	0800f078 	.word	0x0800f078
 800e5d4:	0800f082 	.word	0x0800f082
 800e5d8:	00000000 	.word	0x00000000
 800e5dc:	0800e32d 	.word	0x0800e32d
 800e5e0:	0800f07e 	.word	0x0800f07e

0800e5e4 <_printf_common>:
 800e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e8:	4616      	mov	r6, r2
 800e5ea:	4699      	mov	r9, r3
 800e5ec:	688a      	ldr	r2, [r1, #8]
 800e5ee:	690b      	ldr	r3, [r1, #16]
 800e5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	bfb8      	it	lt
 800e5f8:	4613      	movlt	r3, r2
 800e5fa:	6033      	str	r3, [r6, #0]
 800e5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e600:	4607      	mov	r7, r0
 800e602:	460c      	mov	r4, r1
 800e604:	b10a      	cbz	r2, 800e60a <_printf_common+0x26>
 800e606:	3301      	adds	r3, #1
 800e608:	6033      	str	r3, [r6, #0]
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	0699      	lsls	r1, r3, #26
 800e60e:	bf42      	ittt	mi
 800e610:	6833      	ldrmi	r3, [r6, #0]
 800e612:	3302      	addmi	r3, #2
 800e614:	6033      	strmi	r3, [r6, #0]
 800e616:	6825      	ldr	r5, [r4, #0]
 800e618:	f015 0506 	ands.w	r5, r5, #6
 800e61c:	d106      	bne.n	800e62c <_printf_common+0x48>
 800e61e:	f104 0a19 	add.w	sl, r4, #25
 800e622:	68e3      	ldr	r3, [r4, #12]
 800e624:	6832      	ldr	r2, [r6, #0]
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	42ab      	cmp	r3, r5
 800e62a:	dc26      	bgt.n	800e67a <_printf_common+0x96>
 800e62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e630:	1e13      	subs	r3, r2, #0
 800e632:	6822      	ldr	r2, [r4, #0]
 800e634:	bf18      	it	ne
 800e636:	2301      	movne	r3, #1
 800e638:	0692      	lsls	r2, r2, #26
 800e63a:	d42b      	bmi.n	800e694 <_printf_common+0xb0>
 800e63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e640:	4649      	mov	r1, r9
 800e642:	4638      	mov	r0, r7
 800e644:	47c0      	blx	r8
 800e646:	3001      	adds	r0, #1
 800e648:	d01e      	beq.n	800e688 <_printf_common+0xa4>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	68e5      	ldr	r5, [r4, #12]
 800e64e:	6832      	ldr	r2, [r6, #0]
 800e650:	f003 0306 	and.w	r3, r3, #6
 800e654:	2b04      	cmp	r3, #4
 800e656:	bf08      	it	eq
 800e658:	1aad      	subeq	r5, r5, r2
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	6922      	ldr	r2, [r4, #16]
 800e65e:	bf0c      	ite	eq
 800e660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e664:	2500      	movne	r5, #0
 800e666:	4293      	cmp	r3, r2
 800e668:	bfc4      	itt	gt
 800e66a:	1a9b      	subgt	r3, r3, r2
 800e66c:	18ed      	addgt	r5, r5, r3
 800e66e:	2600      	movs	r6, #0
 800e670:	341a      	adds	r4, #26
 800e672:	42b5      	cmp	r5, r6
 800e674:	d11a      	bne.n	800e6ac <_printf_common+0xc8>
 800e676:	2000      	movs	r0, #0
 800e678:	e008      	b.n	800e68c <_printf_common+0xa8>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4652      	mov	r2, sl
 800e67e:	4649      	mov	r1, r9
 800e680:	4638      	mov	r0, r7
 800e682:	47c0      	blx	r8
 800e684:	3001      	adds	r0, #1
 800e686:	d103      	bne.n	800e690 <_printf_common+0xac>
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
 800e68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e690:	3501      	adds	r5, #1
 800e692:	e7c6      	b.n	800e622 <_printf_common+0x3e>
 800e694:	18e1      	adds	r1, r4, r3
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	2030      	movs	r0, #48	; 0x30
 800e69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e69e:	4422      	add	r2, r4
 800e6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6a8:	3302      	adds	r3, #2
 800e6aa:	e7c7      	b.n	800e63c <_printf_common+0x58>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	4622      	mov	r2, r4
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	47c0      	blx	r8
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	d0e6      	beq.n	800e688 <_printf_common+0xa4>
 800e6ba:	3601      	adds	r6, #1
 800e6bc:	e7d9      	b.n	800e672 <_printf_common+0x8e>
	...

0800e6c0 <_printf_i>:
 800e6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c4:	7e0f      	ldrb	r7, [r1, #24]
 800e6c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6c8:	2f78      	cmp	r7, #120	; 0x78
 800e6ca:	4691      	mov	r9, r2
 800e6cc:	4680      	mov	r8, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	469a      	mov	sl, r3
 800e6d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6d6:	d807      	bhi.n	800e6e8 <_printf_i+0x28>
 800e6d8:	2f62      	cmp	r7, #98	; 0x62
 800e6da:	d80a      	bhi.n	800e6f2 <_printf_i+0x32>
 800e6dc:	2f00      	cmp	r7, #0
 800e6de:	f000 80d8 	beq.w	800e892 <_printf_i+0x1d2>
 800e6e2:	2f58      	cmp	r7, #88	; 0x58
 800e6e4:	f000 80a3 	beq.w	800e82e <_printf_i+0x16e>
 800e6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6f0:	e03a      	b.n	800e768 <_printf_i+0xa8>
 800e6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6f6:	2b15      	cmp	r3, #21
 800e6f8:	d8f6      	bhi.n	800e6e8 <_printf_i+0x28>
 800e6fa:	a101      	add	r1, pc, #4	; (adr r1, 800e700 <_printf_i+0x40>)
 800e6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e700:	0800e759 	.word	0x0800e759
 800e704:	0800e76d 	.word	0x0800e76d
 800e708:	0800e6e9 	.word	0x0800e6e9
 800e70c:	0800e6e9 	.word	0x0800e6e9
 800e710:	0800e6e9 	.word	0x0800e6e9
 800e714:	0800e6e9 	.word	0x0800e6e9
 800e718:	0800e76d 	.word	0x0800e76d
 800e71c:	0800e6e9 	.word	0x0800e6e9
 800e720:	0800e6e9 	.word	0x0800e6e9
 800e724:	0800e6e9 	.word	0x0800e6e9
 800e728:	0800e6e9 	.word	0x0800e6e9
 800e72c:	0800e879 	.word	0x0800e879
 800e730:	0800e79d 	.word	0x0800e79d
 800e734:	0800e85b 	.word	0x0800e85b
 800e738:	0800e6e9 	.word	0x0800e6e9
 800e73c:	0800e6e9 	.word	0x0800e6e9
 800e740:	0800e89b 	.word	0x0800e89b
 800e744:	0800e6e9 	.word	0x0800e6e9
 800e748:	0800e79d 	.word	0x0800e79d
 800e74c:	0800e6e9 	.word	0x0800e6e9
 800e750:	0800e6e9 	.word	0x0800e6e9
 800e754:	0800e863 	.word	0x0800e863
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	1d1a      	adds	r2, r3, #4
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	602a      	str	r2, [r5, #0]
 800e760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e768:	2301      	movs	r3, #1
 800e76a:	e0a3      	b.n	800e8b4 <_printf_i+0x1f4>
 800e76c:	6820      	ldr	r0, [r4, #0]
 800e76e:	6829      	ldr	r1, [r5, #0]
 800e770:	0606      	lsls	r6, r0, #24
 800e772:	f101 0304 	add.w	r3, r1, #4
 800e776:	d50a      	bpl.n	800e78e <_printf_i+0xce>
 800e778:	680e      	ldr	r6, [r1, #0]
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	2e00      	cmp	r6, #0
 800e77e:	da03      	bge.n	800e788 <_printf_i+0xc8>
 800e780:	232d      	movs	r3, #45	; 0x2d
 800e782:	4276      	negs	r6, r6
 800e784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e788:	485e      	ldr	r0, [pc, #376]	; (800e904 <_printf_i+0x244>)
 800e78a:	230a      	movs	r3, #10
 800e78c:	e019      	b.n	800e7c2 <_printf_i+0x102>
 800e78e:	680e      	ldr	r6, [r1, #0]
 800e790:	602b      	str	r3, [r5, #0]
 800e792:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e796:	bf18      	it	ne
 800e798:	b236      	sxthne	r6, r6
 800e79a:	e7ef      	b.n	800e77c <_printf_i+0xbc>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	6820      	ldr	r0, [r4, #0]
 800e7a0:	1d19      	adds	r1, r3, #4
 800e7a2:	6029      	str	r1, [r5, #0]
 800e7a4:	0601      	lsls	r1, r0, #24
 800e7a6:	d501      	bpl.n	800e7ac <_printf_i+0xec>
 800e7a8:	681e      	ldr	r6, [r3, #0]
 800e7aa:	e002      	b.n	800e7b2 <_printf_i+0xf2>
 800e7ac:	0646      	lsls	r6, r0, #25
 800e7ae:	d5fb      	bpl.n	800e7a8 <_printf_i+0xe8>
 800e7b0:	881e      	ldrh	r6, [r3, #0]
 800e7b2:	4854      	ldr	r0, [pc, #336]	; (800e904 <_printf_i+0x244>)
 800e7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e7b6:	bf0c      	ite	eq
 800e7b8:	2308      	moveq	r3, #8
 800e7ba:	230a      	movne	r3, #10
 800e7bc:	2100      	movs	r1, #0
 800e7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7c2:	6865      	ldr	r5, [r4, #4]
 800e7c4:	60a5      	str	r5, [r4, #8]
 800e7c6:	2d00      	cmp	r5, #0
 800e7c8:	bfa2      	ittt	ge
 800e7ca:	6821      	ldrge	r1, [r4, #0]
 800e7cc:	f021 0104 	bicge.w	r1, r1, #4
 800e7d0:	6021      	strge	r1, [r4, #0]
 800e7d2:	b90e      	cbnz	r6, 800e7d8 <_printf_i+0x118>
 800e7d4:	2d00      	cmp	r5, #0
 800e7d6:	d04d      	beq.n	800e874 <_printf_i+0x1b4>
 800e7d8:	4615      	mov	r5, r2
 800e7da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7de:	fb03 6711 	mls	r7, r3, r1, r6
 800e7e2:	5dc7      	ldrb	r7, [r0, r7]
 800e7e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7e8:	4637      	mov	r7, r6
 800e7ea:	42bb      	cmp	r3, r7
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	d9f4      	bls.n	800e7da <_printf_i+0x11a>
 800e7f0:	2b08      	cmp	r3, #8
 800e7f2:	d10b      	bne.n	800e80c <_printf_i+0x14c>
 800e7f4:	6823      	ldr	r3, [r4, #0]
 800e7f6:	07de      	lsls	r6, r3, #31
 800e7f8:	d508      	bpl.n	800e80c <_printf_i+0x14c>
 800e7fa:	6923      	ldr	r3, [r4, #16]
 800e7fc:	6861      	ldr	r1, [r4, #4]
 800e7fe:	4299      	cmp	r1, r3
 800e800:	bfde      	ittt	le
 800e802:	2330      	movle	r3, #48	; 0x30
 800e804:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e80c:	1b52      	subs	r2, r2, r5
 800e80e:	6122      	str	r2, [r4, #16]
 800e810:	f8cd a000 	str.w	sl, [sp]
 800e814:	464b      	mov	r3, r9
 800e816:	aa03      	add	r2, sp, #12
 800e818:	4621      	mov	r1, r4
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7ff fee2 	bl	800e5e4 <_printf_common>
 800e820:	3001      	adds	r0, #1
 800e822:	d14c      	bne.n	800e8be <_printf_i+0x1fe>
 800e824:	f04f 30ff 	mov.w	r0, #4294967295
 800e828:	b004      	add	sp, #16
 800e82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e82e:	4835      	ldr	r0, [pc, #212]	; (800e904 <_printf_i+0x244>)
 800e830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e834:	6829      	ldr	r1, [r5, #0]
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	f851 6b04 	ldr.w	r6, [r1], #4
 800e83c:	6029      	str	r1, [r5, #0]
 800e83e:	061d      	lsls	r5, r3, #24
 800e840:	d514      	bpl.n	800e86c <_printf_i+0x1ac>
 800e842:	07df      	lsls	r7, r3, #31
 800e844:	bf44      	itt	mi
 800e846:	f043 0320 	orrmi.w	r3, r3, #32
 800e84a:	6023      	strmi	r3, [r4, #0]
 800e84c:	b91e      	cbnz	r6, 800e856 <_printf_i+0x196>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	f023 0320 	bic.w	r3, r3, #32
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	2310      	movs	r3, #16
 800e858:	e7b0      	b.n	800e7bc <_printf_i+0xfc>
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	f043 0320 	orr.w	r3, r3, #32
 800e860:	6023      	str	r3, [r4, #0]
 800e862:	2378      	movs	r3, #120	; 0x78
 800e864:	4828      	ldr	r0, [pc, #160]	; (800e908 <_printf_i+0x248>)
 800e866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e86a:	e7e3      	b.n	800e834 <_printf_i+0x174>
 800e86c:	0659      	lsls	r1, r3, #25
 800e86e:	bf48      	it	mi
 800e870:	b2b6      	uxthmi	r6, r6
 800e872:	e7e6      	b.n	800e842 <_printf_i+0x182>
 800e874:	4615      	mov	r5, r2
 800e876:	e7bb      	b.n	800e7f0 <_printf_i+0x130>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	6826      	ldr	r6, [r4, #0]
 800e87c:	6961      	ldr	r1, [r4, #20]
 800e87e:	1d18      	adds	r0, r3, #4
 800e880:	6028      	str	r0, [r5, #0]
 800e882:	0635      	lsls	r5, r6, #24
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	d501      	bpl.n	800e88c <_printf_i+0x1cc>
 800e888:	6019      	str	r1, [r3, #0]
 800e88a:	e002      	b.n	800e892 <_printf_i+0x1d2>
 800e88c:	0670      	lsls	r0, r6, #25
 800e88e:	d5fb      	bpl.n	800e888 <_printf_i+0x1c8>
 800e890:	8019      	strh	r1, [r3, #0]
 800e892:	2300      	movs	r3, #0
 800e894:	6123      	str	r3, [r4, #16]
 800e896:	4615      	mov	r5, r2
 800e898:	e7ba      	b.n	800e810 <_printf_i+0x150>
 800e89a:	682b      	ldr	r3, [r5, #0]
 800e89c:	1d1a      	adds	r2, r3, #4
 800e89e:	602a      	str	r2, [r5, #0]
 800e8a0:	681d      	ldr	r5, [r3, #0]
 800e8a2:	6862      	ldr	r2, [r4, #4]
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f7f1 fca2 	bl	80001f0 <memchr>
 800e8ac:	b108      	cbz	r0, 800e8b2 <_printf_i+0x1f2>
 800e8ae:	1b40      	subs	r0, r0, r5
 800e8b0:	6060      	str	r0, [r4, #4]
 800e8b2:	6863      	ldr	r3, [r4, #4]
 800e8b4:	6123      	str	r3, [r4, #16]
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8bc:	e7a8      	b.n	800e810 <_printf_i+0x150>
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	462a      	mov	r2, r5
 800e8c2:	4649      	mov	r1, r9
 800e8c4:	4640      	mov	r0, r8
 800e8c6:	47d0      	blx	sl
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	d0ab      	beq.n	800e824 <_printf_i+0x164>
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	079b      	lsls	r3, r3, #30
 800e8d0:	d413      	bmi.n	800e8fa <_printf_i+0x23a>
 800e8d2:	68e0      	ldr	r0, [r4, #12]
 800e8d4:	9b03      	ldr	r3, [sp, #12]
 800e8d6:	4298      	cmp	r0, r3
 800e8d8:	bfb8      	it	lt
 800e8da:	4618      	movlt	r0, r3
 800e8dc:	e7a4      	b.n	800e828 <_printf_i+0x168>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4649      	mov	r1, r9
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	47d0      	blx	sl
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	d09b      	beq.n	800e824 <_printf_i+0x164>
 800e8ec:	3501      	adds	r5, #1
 800e8ee:	68e3      	ldr	r3, [r4, #12]
 800e8f0:	9903      	ldr	r1, [sp, #12]
 800e8f2:	1a5b      	subs	r3, r3, r1
 800e8f4:	42ab      	cmp	r3, r5
 800e8f6:	dcf2      	bgt.n	800e8de <_printf_i+0x21e>
 800e8f8:	e7eb      	b.n	800e8d2 <_printf_i+0x212>
 800e8fa:	2500      	movs	r5, #0
 800e8fc:	f104 0619 	add.w	r6, r4, #25
 800e900:	e7f5      	b.n	800e8ee <_printf_i+0x22e>
 800e902:	bf00      	nop
 800e904:	0800f089 	.word	0x0800f089
 800e908:	0800f09a 	.word	0x0800f09a

0800e90c <__retarget_lock_acquire_recursive>:
 800e90c:	4770      	bx	lr

0800e90e <__retarget_lock_release_recursive>:
 800e90e:	4770      	bx	lr

0800e910 <memmove>:
 800e910:	4288      	cmp	r0, r1
 800e912:	b510      	push	{r4, lr}
 800e914:	eb01 0402 	add.w	r4, r1, r2
 800e918:	d902      	bls.n	800e920 <memmove+0x10>
 800e91a:	4284      	cmp	r4, r0
 800e91c:	4623      	mov	r3, r4
 800e91e:	d807      	bhi.n	800e930 <memmove+0x20>
 800e920:	1e43      	subs	r3, r0, #1
 800e922:	42a1      	cmp	r1, r4
 800e924:	d008      	beq.n	800e938 <memmove+0x28>
 800e926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e92e:	e7f8      	b.n	800e922 <memmove+0x12>
 800e930:	4402      	add	r2, r0
 800e932:	4601      	mov	r1, r0
 800e934:	428a      	cmp	r2, r1
 800e936:	d100      	bne.n	800e93a <memmove+0x2a>
 800e938:	bd10      	pop	{r4, pc}
 800e93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e942:	e7f7      	b.n	800e934 <memmove+0x24>

0800e944 <_realloc_r>:
 800e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e948:	4680      	mov	r8, r0
 800e94a:	4614      	mov	r4, r2
 800e94c:	460e      	mov	r6, r1
 800e94e:	b921      	cbnz	r1, 800e95a <_realloc_r+0x16>
 800e950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e954:	4611      	mov	r1, r2
 800e956:	f7ff bc1d 	b.w	800e194 <_malloc_r>
 800e95a:	b92a      	cbnz	r2, 800e968 <_realloc_r+0x24>
 800e95c:	f7ff fbae 	bl	800e0bc <_free_r>
 800e960:	4625      	mov	r5, r4
 800e962:	4628      	mov	r0, r5
 800e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e968:	f000 f81b 	bl	800e9a2 <_malloc_usable_size_r>
 800e96c:	4284      	cmp	r4, r0
 800e96e:	4607      	mov	r7, r0
 800e970:	d802      	bhi.n	800e978 <_realloc_r+0x34>
 800e972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e976:	d812      	bhi.n	800e99e <_realloc_r+0x5a>
 800e978:	4621      	mov	r1, r4
 800e97a:	4640      	mov	r0, r8
 800e97c:	f7ff fc0a 	bl	800e194 <_malloc_r>
 800e980:	4605      	mov	r5, r0
 800e982:	2800      	cmp	r0, #0
 800e984:	d0ed      	beq.n	800e962 <_realloc_r+0x1e>
 800e986:	42bc      	cmp	r4, r7
 800e988:	4622      	mov	r2, r4
 800e98a:	4631      	mov	r1, r6
 800e98c:	bf28      	it	cs
 800e98e:	463a      	movcs	r2, r7
 800e990:	f7ff fb7e 	bl	800e090 <memcpy>
 800e994:	4631      	mov	r1, r6
 800e996:	4640      	mov	r0, r8
 800e998:	f7ff fb90 	bl	800e0bc <_free_r>
 800e99c:	e7e1      	b.n	800e962 <_realloc_r+0x1e>
 800e99e:	4635      	mov	r5, r6
 800e9a0:	e7df      	b.n	800e962 <_realloc_r+0x1e>

0800e9a2 <_malloc_usable_size_r>:
 800e9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9a6:	1f18      	subs	r0, r3, #4
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	bfbc      	itt	lt
 800e9ac:	580b      	ldrlt	r3, [r1, r0]
 800e9ae:	18c0      	addlt	r0, r0, r3
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <_init>:
 800e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b6:	bf00      	nop
 800e9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ba:	bc08      	pop	{r3}
 800e9bc:	469e      	mov	lr, r3
 800e9be:	4770      	bx	lr

0800e9c0 <_fini>:
 800e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c2:	bf00      	nop
 800e9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9c6:	bc08      	pop	{r3}
 800e9c8:	469e      	mov	lr, r3
 800e9ca:	4770      	bx	lr
