
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0801257c  0801257c  0002257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c10  08012c10  00030664  2**0
                  CONTENTS
  4 .ARM          00000008  08012c10  08012c10  00022c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c18  08012c18  00030664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c18  08012c18  00022c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c1c  08012c1c  00022c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  08012c20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000764c  20000664  08013284  00030664  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007cb0  08013284  00037cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a443  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006053  00000000  00000000  0005aad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  00060b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  00062e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebcf  00000000  00000000  00064f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c476  00000000  00000000  00083b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0377  00000000  00000000  000aff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015030c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000984c  00000000  00000000  0015035c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000664 	.word	0x20000664
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012564 	.word	0x08012564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000668 	.word	0x20000668
 80001dc:	08012564 	.word	0x08012564

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fe2a 	bl	8003218 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 ff05 	bl	800340c <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fde7 	bl	8003218 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 f9df 	bl	8002a18 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 feb3 	bl	800340c <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 f9b1 	bl	8002a18 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 f941 	bl	8002a18 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fbbb 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fbb6 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 f911 	bl	8002a18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fbae 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 f909 	bl	8002a18 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f8b3 	bl	8002a18 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f011 f92e 	bl	8011c50 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f011 f8db 	bl	8011c50 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 ff8f 	bl	8002a18 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 ff84 	bl	8002a18 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 ff7d 	bl	8002a18 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 ff74 	bl	8002a18 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f011 f812 	bl	8011c50 <memcpy>
	CDC_Transmit_FS((uint8_t*)send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f010 fb7d 	bl	8011338 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 feea 	bl	8002a18 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fecc 	bl	8002a18 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0020 	add.w	r0, r7, #32
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f011 f8b8 	bl	8011e5c <siprintf>
						Print(mess);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fe6e 	bl	8002a18 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fe69 	bl	8002a18 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f011 f855 	bl	8011e5c <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000680 	.word	0x20000680
 8000dec:	0801257c 	.word	0x0801257c
 8000df0:	08012594 	.word	0x08012594
 8000df4:	080125a0 	.word	0x080125a0
 8000df8:	080125ac 	.word	0x080125ac
 8000dfc:	080125b8 	.word	0x080125b8

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f010 ff2b 	bl	8011c6c <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f002 f88e 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f002 f889 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f005 f814 	bl	8005e82 <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f002 f879 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fdd4 	bl	8002a18 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f002 f86f 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fdca 	bl	8002a18 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006d8 	.word	0x200006d8

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f002 f855 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f002 f850 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 ffdb 	bl	8005e82 <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f002 f840 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f002 f83b 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f002 f834 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f002 f82f 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006d8 	.word	0x200006d8

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <OLED_INIT+0xc8>)
 8000f88:	f001 ffe8 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2108      	movs	r1, #8
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <OLED_INIT+0xc8>)
 8000f92:	f001 ffe3 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <OLED_INIT+0xcc>)
 8000f9c:	f001 ffde 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fd39 	bl	8002a18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <OLED_INIT+0xc8>)
 8000fac:	f001 ffd6 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 fd31 	bl	8002a18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <OLED_INIT+0xc8>)
 8000fbc:	f001 ffce 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 fd29 	bl	8002a18 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <OLED_INIT+0xd0>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e00c      	b.n	8000ff8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff1e 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fd13 	bl	8002a18 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	ddef      	ble.n	8000fde <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ffe:	20a7      	movs	r0, #167	; 0xa7
 8001000:	f7ff ff12 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <OLED_INIT+0xd4>)
 8001006:	f7ff ff85 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 800100a:	20af      	movs	r0, #175	; 0xaf
 800100c:	f7ff ff0c 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fd00 	bl	8002a18 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001018:	20ae      	movs	r0, #174	; 0xae
 800101a:	f7ff ff05 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fcfa 	bl	8002a18 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8001024:	20a6      	movs	r0, #166	; 0xa6
 8001026:	f7ff feff 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fcf4 	bl	8002a18 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001030:	20af      	movs	r0, #175	; 0xaf
 8001032:	f7ff fef9 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 8001036:	f7ff fee3 	bl	8000e00 <OLED_Clear>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0

}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	080125cc 	.word	0x080125cc
 8001050:	20000000 	.word	0x20000000

08001054 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001060:	2005      	movs	r0, #5
 8001062:	f010 fde5 	bl	8011c30 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e013      	b.n	8001098 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4910      	ldr	r1, [pc, #64]	; (80010b8 <OLED_InvChar+0x64>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	18ca      	adds	r2, r1, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	440b      	add	r3, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dde8      	ble.n	8001070 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 800109e:	2205      	movs	r2, #5
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f010 fdd4 	bl	8011c50 <memcpy>
	free(temp);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f010 fdc9 	bl	8011c40 <free>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	080127e4 	.word	0x080127e4

080010bc <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b50      	subs	r3, #80	; 0x50
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea1 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9a 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe91 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 8001106:	2006      	movs	r0, #6
 8001108:	f010 fd92 	bl	8011c30 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	f1a3 0220 	sub.w	r2, r3, #32
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <OLED_drawChar+0xa0>)
 8001124:	4413      	add	r3, r2
 8001126:	2205      	movs	r2, #5
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f010 fd90 	bl	8011c50 <memcpy>
 8001130:	e004      	b.n	800113c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8c 	bl	8001054 <OLED_InvChar>
	}

	*(data+5)=0x00;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001144:	2106      	movs	r1, #6
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fea8 	bl	8000e9c <OLED_data>
	free(data);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f010 fd77 	bl	8011c40 <free>
	}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	080127e4 	.word	0x080127e4

08001160 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b2d9      	uxtb	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	f7ff ff8e 	bl	80010bc <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8e3      	bhi.n	800117c <OLED_Printlin+0x1c>


	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0fda      	lsrs	r2, r3, #31
 80011dc:	4413      	add	r3, r2
 80011de:	105b      	asrs	r3, r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	79f8      	ldrb	r0, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f7ff ffb1 	bl	8001160 <OLED_Printlin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001206:	b580      	push	{r7, lr}
 8001208:	b094      	sub	sp, #80	; 0x50
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800120e:	2320      	movs	r3, #32
 8001210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001218:	2300      	movs	r3, #0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e018      	b.n	800125c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10b      	bne.n	8001254 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 800123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	                i++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001252:	e000      	b.n	8001256 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001254:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	3301      	adds	r3, #1
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b15      	cmp	r3, #21
 8001260:	dde3      	ble.n	800122a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d102      	bne.n	8001274 <OLED_Print+0x6e>
	            last_ind++;
 800126e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001270:	3301      	adds	r3, #1
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	2b15      	cmp	r3, #21
 8001284:	d828      	bhi.n	80012d8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f010 fdfa 	bl	8011e9c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	18d0      	adds	r0, r2, r3
 80012b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	f1c3 0315 	rsb	r3, r3, #21
 80012ba:	461a      	mov	r2, r3
 80012bc:	f010 fcd6 	bl	8011c6c <memset>
	            thisline[21]=' ';
 80012c0:	2320      	movs	r3, #32
 80012c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2300      	movs	r3, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	f7ff ff45 	bl	8001160 <OLED_Printlin>




	    }
}
 80012d6:	e05e      	b.n	8001396 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	3314      	adds	r3, #20
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d03a      	beq.n	800135c <OLED_Print+0x156>
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	3315      	adds	r3, #21
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d033      	beq.n	800135c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	3b01      	subs	r3, #1
 80012fe:	3350      	adds	r3, #80	; 0x50
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f010 fdc5 	bl	8011e9c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	3b01      	subs	r3, #1
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	1898      	adds	r0, r3, r2
 8001326:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	3b01      	subs	r3, #1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001336:	f1c3 0315 	rsb	r3, r3, #21
 800133a:	461a      	mov	r2, r3
 800133c:	f010 fc96 	bl	8011c6c <memset>
	            thisline[21]=' ';
 8001340:	2320      	movs	r3, #32
 8001342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	3b01      	subs	r3, #1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	443b      	add	r3, r7
 800134e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001352:	461a      	mov	r2, r3
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
 800135a:	e00e      	b.n	800137a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2215      	movs	r2, #21
 8001368:	4618      	mov	r0, r3
 800136a:	f010 fd97 	bl	8011e9c <strncpy>
	            thisline[21]=' ';
 800136e:	2320      	movs	r3, #32
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	3315      	adds	r3, #21
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2300      	movs	r3, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f7ff fee9 	bl	8001160 <OLED_Printlin>
	        line++;
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	3301      	adds	r3, #1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001394:	e746      	b.n	8001224 <OLED_Print+0x1e>
}
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013a8:	f7ff fd2a 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff01 	bl	80011be <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01a      	b.n	80013f8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	7859      	ldrb	r1, [r3, #1]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f7ff feb7 	bl	8001160 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbde      	blt.n	80013c2 <OLED_SCREEN+0x26>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	460b      	mov	r3, r1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3302      	adds	r3, #2
 800143e:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	2300      	movs	r3, #0
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f7ff fe84 	bl	8001160 <OLED_Printlin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <OLED_SELECT+0x110>)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	8019      	strh	r1, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d116      	bne.n	80014b4 <OLED_SELECT+0x54>
			if(selopt==0){
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e009      	b.n	80014b8 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e001      	b.n	80014b8 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <OLED_SELECT+0x114>)
 80014b6:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d124      	bne.n	8001508 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	773b      	strb	r3, [r7, #28]
 8001506:	e021      	b.n	800154c <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001512:	3b01      	subs	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001526:	3b01      	subs	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 800154c:	7fb9      	ldrb	r1, [r7, #30]
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	2300      	movs	r3, #0
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f7ff fe04 	bl	8001160 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	7f39      	ldrb	r1, [r7, #28]
 800155e:	7f78      	ldrb	r0, [r7, #29]
 8001560:	2300      	movs	r3, #0
 8001562:	f7ff fdfd 	bl	8001160 <OLED_Printlin>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	080125ec 	.word	0x080125ec
 8001574:	080125e8 	.word	0x080125e8

08001578 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001582:	230f      	movs	r3, #15
 8001584:	733b      	strb	r3, [r7, #12]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <STAT_READ+0x54>)
 8001596:	f001 fce1 	bl	8002f5c <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800159a:	bf00      	nop
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <STAT_READ+0x58>)
 80015ac:	f004 fda5 	bl	80060fa <HAL_SPI_TransmitReceive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <STAT_READ+0x54>)
 80015be:	f001 fccd 	bl	8002f5c <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80015c2:	7abb      	ldrb	r3, [r7, #10]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000730 	.word	0x20000730

080015d4 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80015e4:	231f      	movs	r3, #31
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <STAT_WRITE+0x4c>)
 80015f8:	f001 fcb0 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	2203      	movs	r2, #3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <STAT_WRITE+0x50>)
 8001606:	f004 fc3c 	bl	8005e82 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <STAT_WRITE+0x4c>)
 8001612:	f001 fca3 	bl	8002f5c <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020000 	.word	0x40020000
 8001624:	20000730 	.word	0x20000730

08001628 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800162e:	2306      	movs	r3, #6
 8001630:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001632:	f000 f825 	bl	8001680 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001636:	e011      	b.n	800165c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <WRIT_EN+0x50>)
 8001640:	f001 fc8c 	bl	8002f5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001644:	1df9      	adds	r1, r7, #7
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <WRIT_EN+0x54>)
 800164c:	f004 fc19 	bl	8005e82 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <WRIT_EN+0x50>)
 8001658:	f001 fc80 	bl	8002f5c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800165c:	20c0      	movs	r0, #192	; 0xc0
 800165e:	f7ff ff8b 	bl	8001578 <STAT_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1e5      	bne.n	8001638 <WRIT_EN+0x10>
	}


}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	20000730 	.word	0x20000730

08001680 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001686:	2304      	movs	r3, #4
 8001688:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800168a:	e011      	b.n	80016b0 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <WRITE_DIS+0x4c>)
 8001694:	f001 fc62 	bl	8002f5c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001698:	1df9      	adds	r1, r7, #7
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <WRITE_DIS+0x50>)
 80016a0:	f004 fbef 	bl	8005e82 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <WRITE_DIS+0x4c>)
 80016ac:	f001 fc56 	bl	8002f5c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80016b0:	20c0      	movs	r0, #192	; 0xc0
 80016b2:	f7ff ff61 	bl	8001578 <STAT_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d0e5      	beq.n	800168c <WRITE_DIS+0xc>
		}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000730 	.word	0x20000730

080016d4 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param page_addr - Page address to begin erasing from
 * */
void block_erase(uint16_t page_addr) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 80016de:	23d8      	movs	r3, #216	; 0xd8
 80016e0:	733b      	strb	r3, [r7, #12]
 80016e2:	2300      	movs	r3, #0
 80016e4:	737b      	strb	r3, [r7, #13]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	73fb      	strb	r3, [r7, #15]
	WRIT_EN();
 80016f6:	f7ff ff97 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <block_erase+0x68>)
 8001702:	f001 fc2b 	bl	8002f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2204      	movs	r2, #4
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <block_erase+0x6c>)
 8001710:	f004 fbb7 	bl	8005e82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <block_erase+0x68>)
 800171c:	f001 fc1e 	bl	8002f5c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001720:	bf00      	nop
 8001722:	20c0      	movs	r0, #192	; 0xc0
 8001724:	f7ff ff28 	bl	8001578 <STAT_READ>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d0f7      	beq.n	8001722 <block_erase+0x4e>
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	20000730 	.word	0x20000730

08001744 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <MEM_INIT+0x34>)
 8001750:	f001 fc04 	bl	8002f5c <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001754:	2100      	movs	r1, #0
 8001756:	20a0      	movs	r0, #160	; 0xa0
 8001758:	f7ff ff3c 	bl	80015d4 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff ff0b 	bl	8001578 <STAT_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e002      	b.n	8001772 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800176c:	f7ff ff88 	bl	8001680 <WRITE_DIS>
	return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	460b      	mov	r3, r1
 800178c:	81bb      	strh	r3, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3303      	adds	r3, #3
 8001796:	4618      	mov	r0, r3
 8001798:	f010 fa4a 	bl	8011c30 <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 80017a0:	2310      	movs	r3, #16
 80017a2:	743b      	strb	r3, [r7, #16]
 80017a4:	2300      	movs	r3, #0
 80017a6:	747b      	strb	r3, [r7, #17]
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	74bb      	strb	r3, [r7, #18]
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 80017be:	89bb      	ldrh	r3, [r7, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3302      	adds	r3, #2
 80017d0:	89ba      	ldrh	r2, [r7, #12]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3303      	adds	r3, #3
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f010 fa36 	bl	8011c50 <memcpy>

	WRIT_EN();
 80017e4:	f7ff ff20 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	482a      	ldr	r0, [pc, #168]	; (8001898 <MEM_WRITE+0x11c>)
 80017f0:	f001 fbb4 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	3303      	adds	r3, #3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4827      	ldr	r0, [pc, #156]	; (800189c <MEM_WRITE+0x120>)
 8001800:	f004 fb3f 	bl	8005e82 <HAL_SPI_Transmit>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <MEM_WRITE+0x9e>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001810:	4821      	ldr	r0, [pc, #132]	; (8001898 <MEM_WRITE+0x11c>)
 8001812:	f001 fba3 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001816:	2301      	movs	r3, #1
 8001818:	e039      	b.n	800188e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <MEM_WRITE+0x11c>)
 8001822:	f001 fb9b 	bl	8002f5c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 8001826:	bf00      	nop
 8001828:	20c0      	movs	r0, #192	; 0xc0
 800182a:	f7ff fea5 	bl	8001578 <STAT_READ>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d0f7      	beq.n	8001828 <MEM_WRITE+0xac>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	4816      	ldr	r0, [pc, #88]	; (8001898 <MEM_WRITE+0x11c>)
 8001840:	f001 fb8c 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001844:	f107 0110 	add.w	r1, r7, #16
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	2204      	movs	r2, #4
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <MEM_WRITE+0x120>)
 800184e:	f004 fb18 	bl	8005e82 <HAL_SPI_Transmit>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <MEM_WRITE+0xec>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <MEM_WRITE+0x11c>)
 8001860:	f001 fb7c 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001864:	2301      	movs	r3, #1
 8001866:	e012      	b.n	800188e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <MEM_WRITE+0x11c>)
 8001870:	f001 fb74 	bl	8002f5c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001874:	bf00      	nop
 8001876:	20c0      	movs	r0, #192	; 0xc0
 8001878:	f7ff fe7e 	bl	8001578 <STAT_READ>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d0f7      	beq.n	8001876 <MEM_WRITE+0xfa>
	free(setup);
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f010 f9da 	bl	8011c40 <free>
	return(HAL_OK);
 800188c:	2300      	movs	r3, #0

}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020000 	.word	0x40020000
 800189c:	20000730 	.word	0x20000730

080018a0 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	460b      	mov	r3, r1
 80018b0:	81bb      	strh	r3, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 80018b6:	2313      	movs	r3, #19
 80018b8:	753b      	strb	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	757b      	strb	r3, [r7, #21]
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	75bb      	strb	r3, [r7, #22]
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80018ce:	2304      	movs	r3, #4
 80018d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018da:	4413      	add	r3, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f010 f9a7 	bl	8011c30 <malloc>
 80018e2:	4603      	mov	r3, r0
 80018e4:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018ec:	4413      	add	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f010 f99e 	bl	8011c30 <malloc>
 80018f4:	4603      	mov	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	69f8      	ldr	r0, [r7, #28]
 8001906:	f010 f9b1 	bl	8011c6c <memset>
	read_command[0]=READ_BUF;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	2203      	movs	r2, #3
 800190e:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29a      	uxth	r2, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3302      	adds	r3, #2
 8001922:	89ba      	ldrh	r2, [r7, #12]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3303      	adds	r3, #3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001936:	483b      	ldr	r0, [pc, #236]	; (8001a24 <MEM_READPAGE+0x184>)
 8001938:	f001 fb10 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 800193c:	f107 0114 	add.w	r1, r7, #20
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2204      	movs	r2, #4
 8001944:	4838      	ldr	r0, [pc, #224]	; (8001a28 <MEM_READPAGE+0x188>)
 8001946:	f004 fa9c 	bl	8005e82 <HAL_SPI_Transmit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <MEM_READPAGE+0xc0>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001956:	4833      	ldr	r0, [pc, #204]	; (8001a24 <MEM_READPAGE+0x184>)
 8001958:	f001 fb00 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800195c:	2301      	movs	r3, #1
 800195e:	e05d      	b.n	8001a1c <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	482f      	ldr	r0, [pc, #188]	; (8001a24 <MEM_READPAGE+0x184>)
 8001968:	f001 faf8 	bl	8002f5c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 800196c:	bf00      	nop
 800196e:	20c0      	movs	r0, #192	; 0xc0
 8001970:	f7ff fe02 	bl	8001578 <STAT_READ>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d0f7      	beq.n	800196e <MEM_READPAGE+0xce>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001984:	4827      	ldr	r0, [pc, #156]	; (8001a24 <MEM_READPAGE+0x184>)
 8001986:	f001 fae9 	bl	8002f5c <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 800198a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198e:	b29a      	uxth	r2, r3
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4413      	add	r3, r2
 8001994:	b29b      	uxth	r3, r3
 8001996:	2264      	movs	r2, #100	; 0x64
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	4822      	ldr	r0, [pc, #136]	; (8001a28 <MEM_READPAGE+0x188>)
 80019a0:	f004 fbab 	bl	80060fa <HAL_SPI_TransmitReceive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <MEM_READPAGE+0x11a>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	481c      	ldr	r0, [pc, #112]	; (8001a24 <MEM_READPAGE+0x184>)
 80019b2:	f001 fad3 	bl	8002f5c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80019b6:	2301      	movs	r3, #1
 80019b8:	e030      	b.n	8001a1c <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	4818      	ldr	r0, [pc, #96]	; (8001a24 <MEM_READPAGE+0x184>)
 80019c2:	f001 facb 	bl	8002f5c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80019c6:	bf00      	nop
 80019c8:	20c0      	movs	r0, #192	; 0xc0
 80019ca:	f7ff fdd5 	bl	8001578 <STAT_READ>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d0f7      	beq.n	80019c8 <MEM_READPAGE+0x128>

	if (bytes == 1) {
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <MEM_READPAGE+0x148>
		*data = rec_data[4];
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	791a      	ldrb	r2, [r3, #4]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e012      	b.n	8001a0e <MEM_READPAGE+0x16e>
	} else {
		for(int i = 0; i < bytes; i++){
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	e00b      	b.n	8001a06 <MEM_READPAGE+0x166>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3304      	adds	r3, #4
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	441a      	add	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	440b      	add	r3, r1
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbef      	blt.n	80019ee <MEM_READPAGE+0x14e>
		}
	}
	free(read_command);
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f010 f916 	bl	8011c40 <free>
	free(rec_data);
 8001a14:	69b8      	ldr	r0, [r7, #24]
 8001a16:	f010 f913 	bl	8011c40 <free>
	return(HAL_OK);
 8001a1a:	2300      	movs	r3, #0

}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020000 	.word	0x40020000
 8001a28:	20000730 	.word	0x20000730

08001a2c <mem_init>:
 * 									FATFS Section
 *
 * Following functions are added in order to make this driver compatible with the FATFS package
 * */

DSTATUS mem_init (BYTE pdrv) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
	if (MEM_INIT() != HAL_OK) {
 8001a36:	f7ff fe85 	bl	8001744 <MEM_INIT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <mem_init+0x18>
		return STA_NOINIT;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e005      	b.n	8001a50 <mem_init+0x24>
	}
	MEM_STATUS = MEM_OK;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <mem_init+0x2c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	return (MEM_STATUS); //Inidicates successful init
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <mem_init+0x2c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000400 	.word	0x20000400

08001a5c <mem_getstatus>:

DSTATUS mem_getstatus (BYTE prdv) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	return MEM_STATUS;
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <mem_getstatus+0x1c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000400 	.word	0x20000400

08001a7c <mem_read>:

DRESULT mem_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
	 if (!count) { //0 count, invalid parameter
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <mem_read+0x1a>
		 return RES_PARERR;
 8001a92:	2304      	movs	r3, #4
 8001a94:	e026      	b.n	8001ae4 <mem_read+0x68>
	 }

	 if (MEM_STATUS) { //Memory not initialised
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <mem_read+0x70>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <mem_read+0x28>
		 return RES_NOTRDY;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e01f      	b.n	8001ae4 <mem_read+0x68>
	 }

	 for (int i = 0; i < count; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e017      	b.n	8001ada <mem_read+0x5e>
		 if (MEM_READPAGE(sector+i, 0x0000, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	2100      	movs	r1, #0
 8001abe:	f7ff feef 	bl	80018a0 <MEM_READPAGE>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <mem_read+0x50>
			 return RES_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00b      	b.n	8001ae4 <mem_read+0x68>
		 }
		 buff += SECTOR_SIZE; //increment pointer
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	60bb      	str	r3, [r7, #8]
	 for (int i = 0; i < count; i++) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d8e3      	bhi.n	8001aaa <mem_read+0x2e>
	 }

	 return RES_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000400 	.word	0x20000400

08001af0 <mem_write>:

DRESULT mem_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
	if (!count) {
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <mem_write+0x1a>
		return RES_PARERR;
 8001b06:	2304      	movs	r3, #4
 8001b08:	e026      	b.n	8001b58 <mem_write+0x68>
	}

	if (MEM_STATUS) {
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <mem_write+0x70>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <mem_write+0x28>
		return RES_NOTRDY;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e01f      	b.n	8001b58 <mem_write+0x68>
	}

	for (int i = 0; i < count; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e017      	b.n	8001b4e <mem_write+0x5e>
		if (MEM_WRITE(sector+i, 0x0000, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b298      	uxth	r0, r3
 8001b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	2100      	movs	r1, #0
 8001b32:	f7ff fe23 	bl	800177c <MEM_WRITE>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <mem_write+0x50>
			return RES_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00b      	b.n	8001b58 <mem_write+0x68>
		}
		buff += SECTOR_SIZE; //increment pointer
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < count; i++) {
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d8e3      	bhi.n	8001b1e <mem_write+0x2e>
	}

	return RES_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000400 	.word	0x20000400

08001b64 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <BUZZ+0x20>)
 8001b6c:	f004 fec0 	bl	80068f0 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b74:	f000 ff50 	bl	8002a18 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <BUZZ+0x20>)
 8001b7c:	f004 ff68 	bl	8006a50 <HAL_TIM_PWM_Stop>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000788 	.word	0x20000788

08001b88 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b96:	2102      	movs	r1, #2
 8001b98:	4820      	ldr	r0, [pc, #128]	; (8001c1c <choose+0x94>)
 8001b9a:	f001 f9c7 	bl	8002f2c <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d136      	bne.n	8001c12 <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <choose+0x98>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bac:	e012      	b.n	8001bd4 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001bae:	481c      	ldr	r0, [pc, #112]	; (8001c20 <choose+0x98>)
 8001bb0:	f004 fd60 	bl	8006674 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <choose+0x98>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001bc2:	4817      	ldr	r0, [pc, #92]	; (8001c20 <choose+0x98>)
 8001bc4:	f004 fdb0 	bl	8006728 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e01e      	b.n	8001c12 <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <choose+0x94>)
 8001bd8:	f001 f9a8 	bl	8002f2c <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0e5      	beq.n	8001bae <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d102      	bne.n	8001bfc <choose+0x74>
	 	    	*count = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4619      	mov	r1, r3
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fc2a 	bl	8001460 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <choose+0x98>)
 8001c0e:	f004 fd8b 	bl	8006728 <HAL_TIM_Base_Stop>
	 	}
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	200007d0 	.word	0x200007d0

08001c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c28:	f000 feb4 	bl	8002994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2c:	f000 f866 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c30:	f000 fa2e 	bl	8002090 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c34:	f000 f8cc 	bl	8001dd0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c38:	f000 f8f8 	bl	8001e2c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c3c:	f000 f92e 	bl	8001e9c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c40:	f000 f962 	bl	8001f08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c44:	f000 f9d6 	bl	8001ff4 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001c48:	f007 f9bc 	bl	8008fc4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c4c:	f00b fe8a 	bl	800d964 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <main+0x94>)
 8001c52:	2104      	movs	r1, #4
 8001c54:	2001      	movs	r0, #1
 8001c56:	f00c f8c1 	bl	800dddc <osMessageQueueNew>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <main+0x98>)
 8001c5e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <main+0x9c>)
 8001c62:	2100      	movs	r1, #0
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <main+0xa0>)
 8001c66:	f00b fec7 	bl	800d9f8 <osThreadNew>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <main+0xa4>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <main+0xa8>)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <main+0xac>)
 8001c76:	f00b febf 	bl	800d9f8 <osThreadNew>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <main+0xb0>)
 8001c7e:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <main+0xb4>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4815      	ldr	r0, [pc, #84]	; (8001cdc <main+0xb8>)
 8001c86:	f00b feb7 	bl	800d9f8 <osThreadNew>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <main+0xbc>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <main+0xc0>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <main+0xc4>)
 8001c96:	f00b feaf 	bl	800d9f8 <osThreadNew>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <main+0xc8>)
 8001c9e:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <main+0xcc>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <main+0xd0>)
 8001ca6:	f00b fea7 	bl	800d9f8 <osThreadNew>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <main+0xd4>)
 8001cae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cb0:	f00b fe7c 	bl	800d9ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x90>
 8001cb6:	bf00      	nop
 8001cb8:	08012a78 	.word	0x08012a78
 8001cbc:	20001894 	.word	0x20001894
 8001cc0:	080129c4 	.word	0x080129c4
 8001cc4:	08002179 	.word	0x08002179
 8001cc8:	20001880 	.word	0x20001880
 8001ccc:	080129e8 	.word	0x080129e8
 8001cd0:	08002245 	.word	0x08002245
 8001cd4:	20001884 	.word	0x20001884
 8001cd8:	08012a0c 	.word	0x08012a0c
 8001cdc:	080022f9 	.word	0x080022f9
 8001ce0:	20001888 	.word	0x20001888
 8001ce4:	08012a30 	.word	0x08012a30
 8001ce8:	08002325 	.word	0x08002325
 8001cec:	2000188c 	.word	0x2000188c
 8001cf0:	08012a54 	.word	0x08012a54
 8001cf4:	080023b1 	.word	0x080023b1
 8001cf8:	20001890 	.word	0x20001890

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	; 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00f ffae 	bl	8011c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d66:	2302      	movs	r3, #2
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d70:	2308      	movs	r3, #8
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d74:	23a8      	movs	r3, #168	; 0xa8
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fb3f 	bl	8005408 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d90:	f000 fb82 	bl	8002498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fda1 	bl	80058f8 <HAL_RCC_ClockConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001dbc:	f000 fb6c 	bl	8002498 <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <MX_I2C1_Init+0x54>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_I2C1_Init+0x58>)
 8001dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e0e:	f001 f8bf 	bl	8002f90 <HAL_I2C_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e18:	f000 fb3e 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000684 	.word	0x20000684
 8001e24:	40005400 	.word	0x40005400
 8001e28:	000186a0 	.word	0x000186a0

08001e2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <MX_SPI1_Init+0x6c>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e62:	2218      	movs	r2, #24
 8001e64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e80:	f003 ff76 	bl	8005d70 <HAL_SPI_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001e8a:	f000 fb05 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200006d8 	.word	0x200006d8
 8001e98:	40013000 	.word	0x40013000

08001e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <MX_SPI2_Init+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ecc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ee8:	220a      	movs	r2, #10
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eee:	f003 ff3f 	bl	8005d70 <HAL_SPI_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ef8:	f000 face 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000730 	.word	0x20000730
 8001f04:	40003800 	.word	0x40003800

08001f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f42:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f50:	2231      	movs	r2, #49	; 0x31
 8001f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f60:	4823      	ldr	r0, [pc, #140]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f62:	f004 fb37 	bl	80065d4 <HAL_TIM_Base_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f6c:	f000 fa94 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f7e:	f004 ff95 	bl	8006eac <HAL_TIM_ConfigClockSource>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f88:	f000 fa86 	bl	8002498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f8e:	f004 fc55 	bl	800683c <HAL_TIM_PWM_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f98:	f000 fa7e 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fac:	f005 fb3a 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fb6:	f000 fa6f 	bl	8002498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fba:	2360      	movs	r3, #96	; 0x60
 8001fbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001fbe:	2318      	movs	r3, #24
 8001fc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2208      	movs	r2, #8
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fd2:	f004 fea9 	bl	8006d28 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fdc:	f000 fa5c 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fe2:	f000 fb87 	bl	80026f4 <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3738      	adds	r7, #56	; 0x38
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000788 	.word	0x20000788

08001ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <MX_TIM3_Init+0x94>)
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <MX_TIM3_Init+0x98>)
 8002014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_TIM3_Init+0x94>)
 8002018:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800201c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_TIM3_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_TIM3_Init+0x94>)
 8002026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_TIM3_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_TIM3_Init+0x94>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002038:	4813      	ldr	r0, [pc, #76]	; (8002088 <MX_TIM3_Init+0x94>)
 800203a:	f004 facb 	bl	80065d4 <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002044:	f000 fa28 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_TIM3_Init+0x94>)
 8002056:	f004 ff29 	bl	8006eac <HAL_TIM_ConfigClockSource>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002060:	f000 fa1a 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_TIM3_Init+0x94>)
 8002072:	f005 fad7 	bl	8007624 <HAL_TIMEx_MasterConfigSynchronization>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800207c:	f000 fa0c 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200007d0 	.word	0x200007d0
 800208c:	40000400 	.word	0x40000400

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <MX_GPIO_Init+0xdc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2f      	ldr	r2, [pc, #188]	; (800216c <MX_GPIO_Init+0xdc>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <MX_GPIO_Init+0xdc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_GPIO_Init+0xdc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <MX_GPIO_Init+0xdc>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_GPIO_Init+0xdc>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <MX_GPIO_Init+0xdc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <MX_GPIO_Init+0xdc>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <MX_GPIO_Init+0xdc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002100:	481b      	ldr	r0, [pc, #108]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002102:	f000 ff2b 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2122      	movs	r1, #34	; 0x22
 800210a:	481a      	ldr	r0, [pc, #104]	; (8002174 <MX_GPIO_Init+0xe4>)
 800210c:	f000 ff26 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002110:	2302      	movs	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002124:	f000 fd7e 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002128:	f44f 738c 	mov.w	r3, #280	; 0x118
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4619      	mov	r1, r3
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002142:	f000 fd6f 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002146:	2322      	movs	r3, #34	; 0x22
 8002148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_GPIO_Init+0xe4>)
 800215e:	f000 fd61 	bl	8002c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400

08002178 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002180:	f00f f81c 	bl	80111bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	BYTE* work = malloc(SECTOR_SIZE);
 8002184:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002188:	f00f fd52 	bl	8011c30 <malloc>
 800218c:	4603      	mov	r3, r0
 800218e:	617b      	str	r3, [r7, #20]
	uint8_t* read = malloc(SECTOR_SIZE*sizeof(uint8_t));
 8002190:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002194:	f00f fd4c 	bl	8011c30 <malloc>
 8002198:	4603      	mov	r3, r0
 800219a:	613b      	str	r3, [r7, #16]
	vTaskSuspend(ReadCardHandle);
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <Start_Init+0xa4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00d f95b 	bl	800f45c <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <Start_Init+0xa8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00d f956 	bl	800f45c <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <Start_Init+0xac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00d f951 	bl	800f45c <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <Start_Init+0xb0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00d f94c 	bl	800f45c <vTaskSuspend>

    MFRC_INIT();
 80021c4:	f7fe fb08 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 80021c8:	f7fe fabe 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 80021cc:	f7fe fed6 	bl	8000f7c <OLED_INIT>
    OLED_Print(TC);
 80021d0:	4816      	ldr	r0, [pc, #88]	; (800222c <Start_Init+0xb4>)
 80021d2:	f7ff f818 	bl	8001206 <OLED_Print>
    mem_init(0);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fc28 	bl	8001a2c <mem_init>
    block_erase(0x0000);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fa79 	bl	80016d4 <block_erase>
    while(1) {

    	FRESULT result1 = f_mkfs("", FM_ANY, 0, work, SECTOR_SIZE);
 80021e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2200      	movs	r2, #0
 80021ec:	2107      	movs	r1, #7
 80021ee:	4810      	ldr	r0, [pc, #64]	; (8002230 <Start_Init+0xb8>)
 80021f0:	f00a fe82 	bl	800cef8 <f_mkfs>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
    	FRESULT result2 = f_mount(&fs, "", 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <Start_Init+0xb8>)
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <Start_Init+0xbc>)
 80021fe:	f00a fc43 	bl	800ca88 <f_mount>
 8002202:	4603      	mov	r3, r0
 8002204:	73bb      	strb	r3, [r7, #14]

    	FRESULT result3 = f_open(&test, "test.txt", FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8002206:	2213      	movs	r2, #19
 8002208:	490b      	ldr	r1, [pc, #44]	; (8002238 <Start_Init+0xc0>)
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <Start_Init+0xc4>)
 800220c:	f00a fca0 	bl	800cb50 <f_open>
 8002210:	4603      	mov	r3, r0
 8002212:	737b      	strb	r3, [r7, #13]
    	Print("here");
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <Start_Init+0xc8>)
 8002216:	f7fe fcd2 	bl	8000bbe <Print>
    while(1) {
 800221a:	e7e2      	b.n	80021e2 <Start_Init+0x6a>
 800221c:	20001884 	.word	0x20001884
 8002220:	20001888 	.word	0x20001888
 8002224:	2000188c 	.word	0x2000188c
 8002228:	20001890 	.word	0x20001890
 800222c:	20000404 	.word	0x20000404
 8002230:	08012638 	.word	0x08012638
 8002234:	20000818 	.word	0x20000818
 8002238:	0801263c 	.word	0x0801263c
 800223c:	20001050 	.word	0x20001050
 8002240:	08012648 	.word	0x08012648

08002244 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002246:	b091      	sub	sp, #68	; 0x44
 8002248:	af06      	add	r7, sp, #24
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 800224c:	201a      	movs	r0, #26
 800224e:	f00f fcef 	bl	8011c30 <malloc>
 8002252:	4603      	mov	r3, r0
 8002254:	60bb      	str	r3, [r7, #8]
	int ranonce = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
	MFRC_ANTON();
 800225e:	f7fe fa39 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002268:	2100      	movs	r1, #0
 800226a:	481f      	ldr	r0, [pc, #124]	; (80022e8 <StartReadCard+0xa4>)
 800226c:	f7ff f896 	bl	800139c <OLED_SCREEN>
		ranonce++;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	3301      	adds	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(DumpINFO(cardinf)==PCD_OK){
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fce8 	bl	8000c50 <DumpINFO>
 8002280:	4603      	mov	r3, r0
 8002282:	2bcc      	cmp	r3, #204	; 0xcc
 8002284:	d121      	bne.n	80022ca <StartReadCard+0x86>
			BUZZ();
 8002286:	f7ff fc6d 	bl	8001b64 <BUZZ>
			MFRC_ANTOFF();
 800228a:	f7fe fa5d 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 800228e:	68b8      	ldr	r0, [r7, #8]
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	461e      	mov	r6, r3
 8002294:	7b7b      	ldrb	r3, [r7, #13]
 8002296:	469c      	mov	ip, r3
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	7c39      	ldrb	r1, [r7, #16]
 800229e:	7c7c      	ldrb	r4, [r7, #17]
 80022a0:	7cbd      	ldrb	r5, [r7, #18]
 80022a2:	9504      	str	r5, [sp, #16]
 80022a4:	9403      	str	r4, [sp, #12]
 80022a6:	9102      	str	r1, [sp, #8]
 80022a8:	9201      	str	r2, [sp, #4]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4663      	mov	r3, ip
 80022ae:	4632      	mov	r2, r6
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <StartReadCard+0xa8>)
 80022b2:	f00f fdd3 	bl	8011e5c <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0); //Send a pointer to our string to the Card Found task to use
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <StartReadCard+0xac>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f107 0108 	add.w	r1, r7, #8
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	f00c f88f 	bl	800e3e4 <xQueueGenericSend>
			suspend = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
		}
	if (suspend == 1) {
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d1c4      	bne.n	800225a <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <StartReadCard+0xb0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00d f969 	bl	800f5ac <vTaskResume>
		ranonce = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 80022de:	2000      	movs	r0, #0
 80022e0:	f00d f8bc 	bl	800f45c <vTaskSuspend>
  {
 80022e4:	e7b9      	b.n	800225a <StartReadCard+0x16>
 80022e6:	bf00      	nop
 80022e8:	08012ae8 	.word	0x08012ae8
 80022ec:	08012650 	.word	0x08012650
 80022f0:	20001894 	.word	0x20001894
 80022f4:	20001890 	.word	0x20001890

080022f8 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 800230a:	2100      	movs	r1, #0
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <StartWriteCard+0x28>)
 800230e:	f7ff f845 	bl	800139c <OLED_SCREEN>
	  	ranonce++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8002318:	2001      	movs	r0, #1
 800231a:	f00b fc00 	bl	800db1e <osDelay>
	  if (ranonce == 0){
 800231e:	e7f1      	b.n	8002304 <StartWriteCard+0xc>
 8002320:	08012b10 	.word	0x08012b10

08002324 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 800233e:	2100      	movs	r1, #0
 8002340:	4818      	ldr	r0, [pc, #96]	; (80023a4 <StartHome+0x80>)
 8002342:	f7ff f82b 	bl	800139c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2201      	movs	r2, #1
 800234c:	4619      	mov	r1, r3
 800234e:	4815      	ldr	r0, [pc, #84]	; (80023a4 <StartHome+0x80>)
 8002350:	f7ff f886 	bl	8001460 <OLED_SELECT>
		  ranonce++;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 800235a:	f107 0210 	add.w	r2, r7, #16
 800235e:	f107 010c 	add.w	r1, r7, #12
 8002362:	2301      	movs	r3, #1
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2306      	movs	r3, #6
 8002368:	480e      	ldr	r0, [pc, #56]	; (80023a4 <StartHome+0x80>)
 800236a:	f7ff fc0d 	bl	8001b88 <choose>
	  if (suspend == 1) {
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d1df      	bne.n	8002334 <StartHome+0x10>
		switch(count) {
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <StartHome+0x5c>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d006      	beq.n	800238c <StartHome+0x68>
 800237e:	e00b      	b.n	8002398 <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <StartHome+0x84>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f00d f911 	bl	800f5ac <vTaskResume>
				break;
 800238a:	e005      	b.n	8002398 <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <StartHome+0x88>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f00d f90b 	bl	800f5ac <vTaskResume>
				break;
 8002396:	bf00      	nop
		}
		ranonce = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 800239c:	2000      	movs	r0, #0
 800239e:	f00d f85d 	bl	800f45c <vTaskSuspend>
  {
 80023a2:	e7c7      	b.n	8002334 <StartHome+0x10>
 80023a4:	08012ad4 	.word	0x08012ad4
 80023a8:	20001884 	.word	0x20001884
 80023ac:	20001888 	.word	0x20001888

080023b0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80023b0:	b5b0      	push	{r4, r5, r7, lr}
 80023b2:	b08e      	sub	sp, #56	; 0x38
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
	 int ranonce = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <CardFoundStart+0xb4>)
 80023c2:	f107 0410 	add.w	r4, r7, #16
 80023c6:	461d      	mov	r5, r3
 80023c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d126      	bne.n	8002428 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 80023da:	bf00      	nop
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <CardFoundStart+0xb8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80023e4:	2200      	movs	r2, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00c fa22 	bl	800e830 <xQueueReceive>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d1f4      	bne.n	80023dc <CardFoundStart+0x2c>
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80023f2:	2100      	movs	r1, #0
 80023f4:	481d      	ldr	r0, [pc, #116]	; (800246c <CardFoundStart+0xbc>)
 80023f6:	f7fe ffd1 	bl	800139c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, 1, cardinf);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	481a      	ldr	r0, [pc, #104]	; (800246c <CardFoundStart+0xbc>)
 8002402:	f7ff f804 	bl	800140e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, 2, type);
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	461a      	mov	r2, r3
 800240c:	2102      	movs	r1, #2
 800240e:	4817      	ldr	r0, [pc, #92]	; (800246c <CardFoundStart+0xbc>)
 8002410:	f7fe fffd 	bl	800140e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	4813      	ldr	r0, [pc, #76]	; (800246c <CardFoundStart+0xbc>)
 800241e:	f7ff f81f 	bl	8001460 <OLED_SELECT>
		ranonce++;
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	3301      	adds	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 8002428:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242c:	f107 010c 	add.w	r1, r7, #12
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2302      	movs	r3, #2
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <CardFoundStart+0xbc>)
 8002438:	f7ff fba6 	bl	8001b88 <choose>
 	if((suspend == 1) && (count == 1)){
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1c6      	bne.n	80023d0 <CardFoundStart+0x20>
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	2b01      	cmp	r3, #1
 8002446:	d1c3      	bne.n	80023d0 <CardFoundStart+0x20>
 		vTaskResume(HomeHandle);
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <CardFoundStart+0xc0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f00d f8ad 	bl	800f5ac <vTaskResume>
 		ranonce = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
 		count = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
 		vTaskSuspend(NULL);
 800245a:	2000      	movs	r0, #0
 800245c:	f00c fffe 	bl	800f45c <vTaskSuspend>
  {
 8002460:	e7b6      	b.n	80023d0 <CardFoundStart+0x20>
 8002462:	bf00      	nop
 8002464:	08012660 	.word	0x08012660
 8002468:	20001894 	.word	0x20001894
 800246c:	08012afc 	.word	0x08012afc
 8002470:	2000188c 	.word	0x2000188c

08002474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002486:	f000 faa7 	bl	80029d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40000c00 	.word	0x40000c00

08002498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <Error_Handler+0x8>
	...

080024a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_MspInit+0x54>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <HAL_MspInit+0x54>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_MspInit+0x54>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_MspInit+0x54>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_MspInit+0x54>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_MspInit+0x54>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	210f      	movs	r1, #15
 80024e6:	f06f 0001 	mvn.w	r0, #1
 80024ea:	f000 fb71 	bl	8002bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_I2C_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002546:	2303      	movs	r3, #3
 8002548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800254a:	2304      	movs	r3, #4
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <HAL_I2C_MspInit+0x8c>)
 8002556:	f000 fb65 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_I2C_MspInit+0x88>)
 8002564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_I2C_MspInit+0x88>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40005400 	.word	0x40005400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a32      	ldr	r2, [pc, #200]	; (8002674 <HAL_SPI_MspInit+0xe8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12c      	bne.n	8002608 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_SPI_MspInit+0xec>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025e6:	23a0      	movs	r3, #160	; 0xa0
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f6:	2305      	movs	r3, #5
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	481e      	ldr	r0, [pc, #120]	; (800267c <HAL_SPI_MspInit+0xf0>)
 8002602:	f000 fb0f 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002606:	e031      	b.n	800266c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_SPI_MspInit+0xf4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d12c      	bne.n	800266c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_SPI_MspInit+0xec>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_SPI_MspInit+0xec>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_SPI_MspInit+0xec>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_SPI_MspInit+0xec>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_SPI_MspInit+0xec>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_SPI_MspInit+0xec>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800264a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265c:	2305      	movs	r3, #5
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <HAL_SPI_MspInit+0xf8>)
 8002668:	f000 fadc 	bl	8002c24 <HAL_GPIO_Init>
}
 800266c:	bf00      	nop
 800266e:	3730      	adds	r7, #48	; 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013000 	.word	0x40013000
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000
 8002680:	40003800 	.word	0x40003800
 8002684:	40020400 	.word	0x40020400

08002688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026b6:	e012      	b.n	80026de <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_TIM_Base_MspInit+0x68>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10d      	bne.n	80026de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_TIM_Base_MspInit+0x64>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40000400 	.word	0x40000400

080026f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d11d      	bne.n	8002752 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_TIM_MspPostInit+0x68>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_TIM_MspPostInit+0x68>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_MspPostInit+0x68>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002732:	2304      	movs	r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002742:	2301      	movs	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4619      	mov	r1, r3
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <HAL_TIM_MspPostInit+0x6c>)
 800274e:	f000 fa69 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_InitTick+0xe4>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_InitTick+0xe4>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_InitTick+0xe4>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fab6 	bl	8005d0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027aa:	f003 fa9b 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 80027ae:	6378      	str	r0, [r7, #52]	; 0x34
 80027b0:	e004      	b.n	80027bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027b2:	f003 fa97 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 80027b6:	4603      	mov	r3, r0
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_InitTick+0xe8>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9b      	lsrs	r3, r3, #18
 80027c6:	3b01      	subs	r3, #1
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_InitTick+0xec>)
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_InitTick+0xf0>)
 80027ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_InitTick+0xec>)
 80027d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_InitTick+0xec>)
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_InitTick+0xec>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_InitTick+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_InitTick+0xec>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80027f0:	4817      	ldr	r0, [pc, #92]	; (8002850 <HAL_InitTick+0xec>)
 80027f2:	f003 feef 	bl	80065d4 <HAL_TIM_Base_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80027fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11b      	bne.n	800283c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002804:	4812      	ldr	r0, [pc, #72]	; (8002850 <HAL_InitTick+0xec>)
 8002806:	f003 ffb7 	bl	8006778 <HAL_TIM_Base_Start_IT>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002818:	2032      	movs	r0, #50	; 0x32
 800281a:	f000 f9f5 	bl	8002c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d808      	bhi.n	8002836 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	2032      	movs	r0, #50	; 0x32
 800282a:	f000 f9d1 	bl	8002bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_InitTick+0xf4>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e002      	b.n	800283c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800283c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002840:	4618      	mov	r0, r3
 8002842:	3738      	adds	r7, #56	; 0x38
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800
 800284c:	431bde83 	.word	0x431bde83
 8002850:	20001898 	.word	0x20001898
 8002854:	40000c00 	.word	0x40000c00
 8002858:	200004f0 	.word	0x200004f0

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <NMI_Handler+0x4>

08002862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002866:	e7fe      	b.n	8002866 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	e7fe      	b.n	800286c <MemManage_Handler+0x4>

0800286e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <UsageFault_Handler+0x4>

0800287a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <TIM5_IRQHandler+0x10>)
 800288e:	f004 f943 	bl	8006b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20001898 	.word	0x20001898

0800289c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <OTG_FS_IRQHandler+0x10>)
 80028a2:	f001 fc84 	bl	80041ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20007574 	.word	0x20007574

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f00f f97c 	bl	8011bdc <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20010000 	.word	0x20010000
 8002910:	00000400 	.word	0x00000400
 8002914:	200018e0 	.word	0x200018e0
 8002918:	20007cb0 	.word	0x20007cb0

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <SystemInit+0x20>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <SystemInit+0x20>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002946:	490e      	ldr	r1, [pc, #56]	; (8002980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800295c:	4c0b      	ldr	r4, [pc, #44]	; (800298c <LoopFillZerobss+0x26>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800296a:	f7ff ffd7 	bl	800291c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296e:	f00f f93b 	bl	8011be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7ff f957 	bl	8001c24 <main>
  bx  lr    
 8002976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8002984:	08012c20 	.word	0x08012c20
  ldr r2, =_sbss
 8002988:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 800298c:	20007cb0 	.word	0x20007cb0

08002990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC_IRQHandler>
	...

08002994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <HAL_Init+0x40>)
 800299e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <HAL_Init+0x40>)
 80029aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_Init+0x40>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029bc:	2003      	movs	r0, #3
 80029be:	f000 f8fc 	bl	8002bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c2:	200f      	movs	r0, #15
 80029c4:	f7ff fece 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c8:	f7ff fd6c 	bl	80024a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200004f4 	.word	0x200004f4
 80029fc:	200018e4 	.word	0x200018e4

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200018e4 	.word	0x200018e4

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_Delay+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200004f4 	.word	0x200004f4

08002a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60d3      	str	r3, [r2, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0307 	and.w	r3, r3, #7
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db0b      	blt.n	8002aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <__NVIC_EnableIRQ+0x38>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f1c3 0307 	rsb	r3, r3, #7
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf28      	it	cs
 8002b72:	2304      	movcs	r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d902      	bls.n	8002b84 <NVIC_EncodePriority+0x30>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b03      	subs	r3, #3
 8002b82:	e000      	b.n	8002b86 <NVIC_EncodePriority+0x32>
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4313      	orrs	r3, r2
         );
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ff4c 	bl	8002a60 <__NVIC_SetPriorityGrouping>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be2:	f7ff ff61 	bl	8002aa8 <__NVIC_GetPriorityGrouping>
 8002be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f7ff ffb1 	bl	8002b54 <NVIC_EncodePriority>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff80 	bl	8002b00 <__NVIC_SetPriority>
}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff54 	bl	8002ac4 <__NVIC_EnableIRQ>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e159      	b.n	8002ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8148 	bne.w	8002eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a2 	beq.w	8002eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a56      	ldr	r2, [pc, #344]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a52      	ldr	r2, [pc, #328]	; (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x202>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <HAL_GPIO_Init+0x2f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x1fe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a47      	ldr	r2, [pc, #284]	; (8002f1c <HAL_GPIO_Init+0x2f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a46      	ldr	r2, [pc, #280]	; (8002f20 <HAL_GPIO_Init+0x2fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x1f6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_GPIO_Init+0x300>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x1f2>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e26:	2300      	movs	r3, #0
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a24      	ldr	r2, [pc, #144]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_GPIO_Init+0x304>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	f67f aea2 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff faa0 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	; 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f002 fe76 	bl	8005ce4 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	; (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	; (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	; (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	; (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	; (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	460b      	mov	r3, r1
 800322c:	813b      	strh	r3, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003232:	f7ff fbe5 	bl	8002a00 <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b20      	cmp	r3, #32
 8003242:	f040 80d9 	bne.w	80033f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2319      	movs	r3, #25
 800324c:	2201      	movs	r2, #1
 800324e:	496d      	ldr	r1, [pc, #436]	; (8003404 <HAL_I2C_Mem_Write+0x1ec>)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fc7f 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
 800325e:	e0cc      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2C_Mem_Write+0x56>
 800326a:	2302      	movs	r3, #2
 800326c:	e0c5      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d007      	beq.n	8003294 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2221      	movs	r2, #33	; 0x21
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2240      	movs	r2, #64	; 0x40
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <HAL_I2C_Mem_Write+0x1f0>)
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d6:	88f8      	ldrh	r0, [r7, #6]
 80032d8:	893a      	ldrh	r2, [r7, #8]
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4603      	mov	r3, r0
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fab6 	bl	8003858 <I2C_RequestMemoryWrite>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d052      	beq.n	8003398 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e081      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fd00 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b04      	cmp	r3, #4
 800330c:	d107      	bne.n	800331e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_I2C_Mem_Write+0x180>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1aa      	bne.n	80032f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fcec 	bl	8003d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e016      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000

0800340c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08c      	sub	sp, #48	; 0x30
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	460b      	mov	r3, r1
 8003420:	813b      	strh	r3, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003426:	f7ff faeb 	bl	8002a00 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	f040 8208 	bne.w	800384a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2319      	movs	r3, #25
 8003440:	2201      	movs	r2, #1
 8003442:	497b      	ldr	r1, [pc, #492]	; (8003630 <HAL_I2C_Mem_Read+0x224>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb85 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	e1fb      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Mem_Read+0x56>
 800345e:	2302      	movs	r3, #2
 8003460:	e1f4      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d007      	beq.n	8003488 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2222      	movs	r2, #34	; 0x22
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2240      	movs	r2, #64	; 0x40
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a5b      	ldr	r2, [pc, #364]	; (8003634 <HAL_I2C_Mem_Read+0x228>)
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ca:	88f8      	ldrh	r0, [r7, #6]
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	8979      	ldrh	r1, [r7, #10]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4603      	mov	r3, r0
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa52 	bl	8003984 <I2C_RequestMemoryRead>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1b0      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e184      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b01      	cmp	r3, #1
 8003520:	d11b      	bne.n	800355a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e164      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	2b02      	cmp	r3, #2
 8003560:	d11b      	bne.n	800359a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	e144      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035b0:	e138      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	f200 80f1 	bhi.w	800379e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d123      	bne.n	800360c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc1b 	bl	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e139      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	; 0x2a
 800360a:	e10b      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	2b02      	cmp	r3, #2
 8003612:	d14e      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	2200      	movs	r2, #0
 800361c:	4906      	ldr	r1, [pc, #24]	; (8003638 <HAL_I2C_Mem_Read+0x22c>)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa98 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e10e      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
 800362e:	bf00      	nop
 8003630:	00100002 	.word	0x00100002
 8003634:	ffff0000 	.word	0xffff0000
 8003638:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b0:	e0b8      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	2200      	movs	r2, #0
 80036ba:	4966      	ldr	r1, [pc, #408]	; (8003854 <HAL_I2C_Mem_Read+0x448>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa49 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0bf      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	2200      	movs	r2, #0
 8003716:	494f      	ldr	r1, [pc, #316]	; (8003854 <HAL_I2C_Mem_Read+0x448>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fa1b 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e091      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800379c:	e042      	b.n	8003824 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fb2e 	bl	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04c      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d118      	bne.n	8003824 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	f47f aec2 	bne.w	80035b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	00010004 	.word	0x00010004

08003858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	461a      	mov	r2, r3
 8003866:	4603      	mov	r3, r0
 8003868:	817b      	strh	r3, [r7, #10]
 800386a:	460b      	mov	r3, r1
 800386c:	813b      	strh	r3, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2200      	movs	r2, #0
 800388a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f960 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	d103      	bne.n	80038b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e05f      	b.n	8003976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	492d      	ldr	r1, [pc, #180]	; (8003980 <I2C_RequestMemoryWrite+0x128>)
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f998 	bl	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e04c      	b.n	8003976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	6a39      	ldr	r1, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa02 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b04      	cmp	r3, #4
 8003908:	d107      	bne.n	800391a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e02b      	b.n	8003976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003924:	893b      	ldrh	r3, [r7, #8]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	e021      	b.n	8003974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003930:	893b      	ldrh	r3, [r7, #8]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b29b      	uxth	r3, r3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	6a39      	ldr	r1, [r7, #32]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f9dc 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e005      	b.n	8003976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800396a:	893b      	ldrh	r3, [r7, #8]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8c2 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e4:	d103      	bne.n	80039ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0aa      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	4952      	ldr	r1, [pc, #328]	; (8003b50 <I2C_RequestMemoryRead+0x1cc>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f8fa 	bl	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e097      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f964 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d107      	bne.n	8003a56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e076      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e021      	b.n	8003ab0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f93e 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d107      	bne.n	8003aa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e050      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa6:	893b      	ldrh	r3, [r7, #8]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f923 	bl	8003d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d107      	bne.n	8003ad8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e035      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f82b 	bl	8003b54 <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b12:	d103      	bne.n	8003b1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e013      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	4906      	ldr	r1, [pc, #24]	; (8003b50 <I2C_RequestMemoryRead+0x1cc>)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f863 	bl	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	00010002 	.word	0x00010002

08003b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b64:	e025      	b.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d021      	beq.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe ff47 	bl	8002a00 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e023      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10d      	bne.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	e00c      	b.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d0b6      	beq.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c10:	e051      	b.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d123      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e046      	b.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d021      	beq.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe fec5 	bl	8002a00 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e020      	b.n	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e00b      	b.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d18d      	bne.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0c:	e02d      	b.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f8ce 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02d      	b.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d021      	beq.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fe6b 	bl	8002a00 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d116      	bne.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d1ca      	bne.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8e:	e02d      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f88d 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e02d      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d021      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fe fe2a 	bl	8002a00 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d1ca      	bne.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e10:	e042      	b.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d119      	bne.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e029      	b.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fe fdd4 	bl	8002a00 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e007      	b.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d1b5      	bne.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d11b      	bne.n	8003f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f10:	b08f      	sub	sp, #60	; 0x3c
 8003f12:	af0a      	add	r7, sp, #40	; 0x28
 8003f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e10f      	b.n	8004140 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f00d fb44 	bl	80115c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f003 fcf7 	bl	8007952 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	687e      	ldr	r6, [r7, #4]
 8003f6c:	466d      	mov	r5, sp
 8003f6e:	f106 0410 	add.w	r4, r6, #16
 8003f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f82:	1d33      	adds	r3, r6, #4
 8003f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f003 fbce 	bl	8007728 <USB_CoreInit>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0d0      	b.n	8004140 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 fce5 	bl	8007974 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e04a      	b.n	8004046 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	333d      	adds	r3, #61	; 0x3d
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333c      	adds	r3, #60	; 0x3c
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	b298      	uxth	r0, r3
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3344      	adds	r3, #68	; 0x44
 8003fec:	4602      	mov	r2, r0
 8003fee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3340      	adds	r3, #64	; 0x40
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3348      	adds	r3, #72	; 0x48
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	334c      	adds	r3, #76	; 0x4c
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3354      	adds	r3, #84	; 0x54
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	3301      	adds	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d3af      	bcc.n	8003fb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e044      	b.n	80040e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	3301      	adds	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3b5      	bcc.n	8004056 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	687e      	ldr	r6, [r7, #4]
 80040f2:	466d      	mov	r5, sp
 80040f4:	f106 0410 	add.w	r4, r6, #16
 80040f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004104:	e885 0003 	stmia.w	r5, {r0, r1}
 8004108:	1d33      	adds	r3, r6, #4
 800410a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f003 fc7d 	bl	8007a0c <USB_DevInit>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e00d      	b.n	8004140 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fdcc 	bl	8008cd6 <USB_DevDisconnect>

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004148 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_PCD_Start+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e020      	b.n	80041a6 <HAL_PCD_Start+0x5e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	2b01      	cmp	r3, #1
 8004172:	d109      	bne.n	8004188 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004178:	2b01      	cmp	r3, #1
 800417a:	d005      	beq.n	8004188 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f003 fbcf 	bl	8007930 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f004 fd7c 	bl	8008c94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b08d      	sub	sp, #52	; 0x34
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f004 fe3a 	bl	8008e3e <USB_GetMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 848a 	bne.w	8004ae6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 fd9e 	bl	8008d18 <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8480 	beq.w	8004ae4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 fd8b 	bl	8008d18 <USB_ReadInterrupts>
 8004202:	4603      	mov	r3, r0
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d107      	bne.n	800421c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f002 0202 	and.w	r2, r2, #2
 800421a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fd79 	bl	8008d18 <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d161      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0210 	bic.w	r2, r2, #16
 800423e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b02      	cmp	r3, #2
 800426a:	d124      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d035      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6a38      	ldr	r0, [r7, #32]
 800428c:	f004 fbb0 	bl	80089f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429c:	441a      	add	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ae:	441a      	add	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	621a      	str	r2, [r3, #32]
 80042b4:	e016      	b.n	80042e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	0c5b      	lsrs	r3, r3, #17
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d110      	bne.n	80042e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042c8:	2208      	movs	r2, #8
 80042ca:	4619      	mov	r1, r3
 80042cc:	6a38      	ldr	r0, [r7, #32]
 80042ce:	f004 fb8f 	bl	80089f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042de:	441a      	add	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0210 	orr.w	r2, r2, #16
 80042f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 fd0d 	bl	8008d18 <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004308:	f040 80a7 	bne.w	800445a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f004 fd12 	bl	8008d3e <USB_ReadDevAllOutEpInterrupt>
 800431a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800431c:	e099      	b.n	8004452 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808e 	beq.w	8004446 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fd36 	bl	8008da6 <USB_ReadDevOutEPInterrupt>
 800433a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	2301      	movs	r3, #1
 8004356:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fec2 	bl	80050e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2308      	movs	r3, #8
 800437a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800437c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ff98 	bl	80052b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	461a      	mov	r2, r3
 800439c:	2310      	movs	r3, #16
 800439e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d030      	beq.n	800440c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d109      	bne.n	80043ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	78db      	ldrb	r3, [r3, #3]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f00d f9e3 	bl	80117c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004406:	461a      	mov	r2, r3
 8004408:	2302      	movs	r3, #2
 800440a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2320      	movs	r3, #32
 8004426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004444:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f af62 	bne.w	800431e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fc5a 	bl	8008d18 <USB_ReadInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800446e:	f040 80db 	bne.w	8004628 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f004 fc7b 	bl	8008d72 <USB_ReadDevAllInEpInterrupt>
 800447c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004482:	e0cd      	b.n	8004620 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80c2 	beq.w	8004614 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fca1 	bl	8008de2 <USB_ReadDevInEPInterrupt>
 80044a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d057      	beq.n	800455c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	2201      	movs	r2, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044cc:	4013      	ands	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d132      	bne.n	8004550 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	334c      	adds	r3, #76	; 0x4c
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4403      	add	r3, r0
 800450a:	3348      	adds	r3, #72	; 0x48
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4419      	add	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4403      	add	r3, r0
 800451e:	334c      	adds	r3, #76	; 0x4c
 8004520:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <HAL_PCD_IRQHandler+0x3a2>
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	3354      	adds	r3, #84	; 0x54
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004548:	461a      	mov	r2, r3
 800454a:	2101      	movs	r1, #1
 800454c:	f004 fca8 	bl	8008ea0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f00d f8b7 	bl	80116ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	461a      	mov	r2, r3
 8004574:	2308      	movs	r3, #8
 8004576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	461a      	mov	r2, r3
 8004590:	2310      	movs	r3, #16
 8004592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	2340      	movs	r3, #64	; 0x40
 80045ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d023      	beq.n	8004602 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80045ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045bc:	6a38      	ldr	r0, [r7, #32]
 80045be:	f003 fb89 	bl	8007cd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3338      	adds	r3, #56	; 0x38
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	3304      	adds	r3, #4
 80045d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d108      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f00d f8fa 	bl	80117e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	2302      	movs	r3, #2
 8004600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800460c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fcdb 	bl	8004fca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	f47f af2e 	bne.w	8004484 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f004 fb73 	bl	8008d18 <USB_ReadInterrupts>
 8004632:	4603      	mov	r3, r0
 8004634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800463c:	d122      	bne.n	8004684 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004658:	2b01      	cmp	r3, #1
 800465a:	d108      	bne.n	800466e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004664:	2100      	movs	r1, #0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fec2 	bl	80053f0 <HAL_PCDEx_LPM_Callback>
 800466c:	e002      	b.n	8004674 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f00d f898 	bl	80117a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fb45 	bl	8008d18 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004698:	d112      	bne.n	80046c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f00d f854 	bl	8011758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f004 fb27 	bl	8008d18 <USB_ReadInterrupts>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	f040 80b7 	bne.w	8004846 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2110      	movs	r1, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f003 faee 	bl	8007cd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fc:	e046      	b.n	800478c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	461a      	mov	r2, r3
 800470c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004710:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004744:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004784:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	3301      	adds	r3, #1
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004792:	429a      	cmp	r2, r3
 8004794:	d3b3      	bcc.n	80046fe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f043 030b 	orr.w	r3, r3, #11
 80047c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d8:	f043 030b 	orr.w	r3, r3, #11
 80047dc:	6453      	str	r3, [r2, #68]	; 0x44
 80047de:	e015      	b.n	800480c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004806:	f043 030b 	orr.w	r3, r3, #11
 800480a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800481e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004830:	461a      	mov	r2, r3
 8004832:	f004 fb35 	bl	8008ea0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f004 fa64 	bl	8008d18 <USB_ReadInterrupts>
 8004850:	4603      	mov	r3, r0
 8004852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485a:	d124      	bne.n	80048a6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f004 fafa 	bl	8008e5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f003 faaf 	bl	8007dce <USB_GetDevSpeed>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681c      	ldr	r4, [r3, #0]
 800487c:	f001 fa26 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8004880:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	4620      	mov	r0, r4
 800488c:	f002 ffae 	bl	80077ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f00c ff42 	bl	801171a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f004 fa34 	bl	8008d18 <USB_ReadInterrupts>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d10a      	bne.n	80048d0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f00c ff1f 	bl	80116fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f002 0208 	and.w	r2, r2, #8
 80048ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fa1f 	bl	8008d18 <USB_ReadInterrupts>
 80048da:	4603      	mov	r3, r0
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d122      	bne.n	800492a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	e014      	b.n	8004920 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fb27 	bl	8004f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	3301      	adds	r3, #1
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004926:	429a      	cmp	r2, r3
 8004928:	d3e5      	bcc.n	80048f6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f9f2 	bl	8008d18 <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493e:	d13b      	bne.n	80049b8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004940:	2301      	movs	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	e02b      	b.n	800499e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	3340      	adds	r3, #64	; 0x40
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d115      	bne.n	8004998 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800496c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800496e:	2b00      	cmp	r3, #0
 8004970:	da12      	bge.n	8004998 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	333f      	adds	r3, #63	; 0x3f
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fae8 	bl	8004f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	3301      	adds	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d3ce      	bcc.n	8004946 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 f9ab 	bl	8008d18 <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049cc:	d155      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ce:	2301      	movs	r3, #1
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	e045      	b.n	8004a60 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d12e      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da2b      	bge.n	8004a5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d121      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a56:	6053      	str	r3, [r2, #4]
            break;
 8004a58:	e007      	b.n	8004a6a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3b4      	bcc.n	80049d4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f004 f94a 	bl	8008d18 <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d10a      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f00c feb9 	bl	8011808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f004 f934 	bl	8008d18 <USB_ReadInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d115      	bne.n	8004ae6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f00c fea9 	bl	8011824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e000      	b.n	8004ae6 <HAL_PCD_IRQHandler+0x938>
      return;
 8004ae4:	bf00      	nop
    }
  }
}
 8004ae6:	3734      	adds	r7, #52	; 0x34
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_PCD_SetAddress+0x1a>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e013      	b.n	8004b2e <HAL_PCD_SetAddress+0x42>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f004 f892 	bl	8008c48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4611      	mov	r1, r2
 8004b42:	461a      	mov	r2, r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	803b      	strh	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da0f      	bge.n	8004b7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	3338      	adds	r3, #56	; 0x38
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	3304      	adds	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	705a      	strb	r2, [r3, #1]
 8004b7a:	e00f      	b.n	8004b9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	3304      	adds	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ba8:	883a      	ldrh	r2, [r7, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	78ba      	ldrb	r2, [r7, #2]
 8004bb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bc6:	78bb      	ldrb	r3, [r7, #2]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d102      	bne.n	8004bd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_PCD_EP_Open+0xaa>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e00e      	b.n	8004bfe <HAL_PCD_EP_Open+0xc8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68f9      	ldr	r1, [r7, #12]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f003 f912 	bl	8007e18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da0f      	bge.n	8004c3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3338      	adds	r3, #56	; 0x38
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3304      	adds	r3, #4
 8004c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	705a      	strb	r2, [r3, #1]
 8004c38:	e00f      	b.n	8004c5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3304      	adds	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_PCD_EP_Close+0x6e>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e00e      	b.n	8004c92 <HAL_PCD_EP_Close+0x8c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f950 	bl	8007f28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004caa:	7afb      	ldrb	r3, [r7, #11]
 8004cac:	f003 020f 	and.w	r2, r3, #15
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d102      	bne.n	8004cf6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	f003 fc2f 	bl	8008570 <USB_EP0StartXfer>
 8004d12:	e008      	b.n	8004d26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	f003 f9dd 	bl	80080e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	3338      	adds	r3, #56	; 0x38
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	3304      	adds	r3, #4
 8004d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004da0:	7afb      	ldrb	r3, [r7, #11]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d102      	bne.n	8004dba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6979      	ldr	r1, [r7, #20]
 8004dd2:	f003 fbcd 	bl	8008570 <USB_EP0StartXfer>
 8004dd6:	e008      	b.n	8004dea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	f003 f97b 	bl	80080e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 020f 	and.w	r2, r3, #15
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d901      	bls.n	8004e12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e050      	b.n	8004eb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da0f      	bge.n	8004e3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 020f 	and.w	r2, r3, #15
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	3338      	adds	r3, #56	; 0x38
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3304      	adds	r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	705a      	strb	r2, [r3, #1]
 8004e38:	e00d      	b.n	8004e56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_PCD_EP_SetStall+0x82>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e01e      	b.n	8004eb4 <HAL_PCD_EP_SetStall+0xc0>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f003 fe0b 	bl	8008aa0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	b2d9      	uxtb	r1, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f003 fffb 	bl	8008ea0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	f003 020f 	and.w	r2, r3, #15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d901      	bls.n	8004eda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e042      	b.n	8004f60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da0f      	bge.n	8004f02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3338      	adds	r3, #56	; 0x38
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	705a      	strb	r2, [r3, #1]
 8004f00:	e00f      	b.n	8004f22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	3304      	adds	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_PCD_EP_ClrStall+0x86>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e00e      	b.n	8004f60 <HAL_PCD_EP_ClrStall+0xa4>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f003 fe13 	bl	8008b7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da0c      	bge.n	8004f96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	3338      	adds	r3, #56	; 0x38
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3304      	adds	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e00c      	b.n	8004fb0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4413      	add	r3, r2
 8004fac:	3304      	adds	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 fc32 	bl	8008820 <USB_EPStopXfer>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08a      	sub	sp, #40	; 0x28
 8004fce:	af02      	add	r7, sp, #8
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	3338      	adds	r3, #56	; 0x38
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d901      	bls.n	8005002 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06c      	b.n	80050dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3303      	adds	r3, #3
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005026:	e02b      	b.n	8005080 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	3303      	adds	r3, #3
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800505c:	b2db      	uxtb	r3, r3
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4603      	mov	r3, r0
 8005062:	6978      	ldr	r0, [r7, #20]
 8005064:	f003 fc86 	bl	8008974 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	441a      	add	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	b29b      	uxth	r3, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	429a      	cmp	r2, r3
 8005094:	d809      	bhi.n	80050aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800509e:	429a      	cmp	r2, r3
 80050a0:	d203      	bcs.n	80050aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1be      	bne.n	8005028 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d811      	bhi.n	80050da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2201      	movs	r2, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	43db      	mvns	r3, r3
 80050d0:	6939      	ldr	r1, [r7, #16]
 80050d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d6:	4013      	ands	r3, r2
 80050d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	333c      	adds	r3, #60	; 0x3c
 80050fc:	3304      	adds	r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d17b      	bne.n	8005212 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d015      	beq.n	8005150 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4a61      	ldr	r2, [pc, #388]	; (80052ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	f240 80b9 	bls.w	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80b3 	beq.w	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514c:	6093      	str	r3, [r2, #8]
 800514e:	e0a7      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	2320      	movs	r3, #32
 800516a:	6093      	str	r3, [r2, #8]
 800516c:	e098      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 8093 	bne.w	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4a4b      	ldr	r2, [pc, #300]	; (80052ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d90f      	bls.n	80051a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519e:	6093      	str	r3, [r2, #8]
 80051a0:	e07e      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	0159      	lsls	r1, r3, #5
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	440b      	add	r3, r1
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d114      	bne.n	8005204 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051ec:	461a      	mov	r2, r3
 80051ee:	2101      	movs	r1, #1
 80051f0:	f003 fe56 	bl	8008ea0 <USB_EP0_OutStart>
 80051f4:	e006      	b.n	8005204 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	441a      	add	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f00c fa42 	bl	8011694 <HAL_PCD_DataOutStageCallback>
 8005210:	e046      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d124      	bne.n	8005264 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	6093      	str	r3, [r2, #8]
 8005238:	e032      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	461a      	mov	r2, r3
 8005252:	2320      	movs	r3, #32
 8005254:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f00c fa19 	bl	8011694 <HAL_PCD_DataOutStageCallback>
 8005262:	e01d      	b.n	80052a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d114      	bne.n	8005294 <PCD_EP_OutXfrComplete_int+0x1b0>
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d108      	bne.n	8005294 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800528c:	461a      	mov	r2, r3
 800528e:	2100      	movs	r1, #0
 8005290:	f003 fe06 	bl	8008ea0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f00c f9fa 	bl	8011694 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	4f54300a 	.word	0x4f54300a
 80052b0:	4f54310a 	.word	0x4f54310a

080052b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	333c      	adds	r3, #60	; 0x3c
 80052cc:	3304      	adds	r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <PCD_EP_OutSetupPacket_int+0x88>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d90e      	bls.n	8005308 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f00c f9b1 	bl	8011670 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <PCD_EP_OutSetupPacket_int+0x88>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d90c      	bls.n	8005330 <PCD_EP_OutSetupPacket_int+0x7c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d108      	bne.n	8005330 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005328:	461a      	mov	r2, r3
 800532a:	2101      	movs	r1, #1
 800532c:	f003 fdb8 	bl	8008ea0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	4f54300a 	.word	0x4f54300a

08005340 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
 800534c:	4613      	mov	r3, r2
 800534e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800535e:	883b      	ldrh	r3, [r7, #0]
 8005360:	0419      	lsls	r1, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	430a      	orrs	r2, r1
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
 800536c:	e028      	b.n	80053c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4413      	add	r3, r2
 800537a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	e00d      	b.n	800539e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	3340      	adds	r3, #64	; 0x40
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4413      	add	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	3301      	adds	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3ec      	bcc.n	8005382 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053a8:	883b      	ldrh	r3, [r7, #0]
 80053aa:	0418      	lsls	r0, r3, #16
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	4302      	orrs	r2, r0
 80053b8:	3340      	adds	r3, #64	; 0x40
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e267      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d075      	beq.n	8005512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005426:	4b88      	ldr	r3, [pc, #544]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00c      	beq.n	800544c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005432:	4b85      	ldr	r3, [pc, #532]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800543a:	2b08      	cmp	r3, #8
 800543c:	d112      	bne.n	8005464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543e:	4b82      	ldr	r3, [pc, #520]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544a:	d10b      	bne.n	8005464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	4b7e      	ldr	r3, [pc, #504]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05b      	beq.n	8005510 <HAL_RCC_OscConfig+0x108>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d157      	bne.n	8005510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e242      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d106      	bne.n	800547c <HAL_RCC_OscConfig+0x74>
 800546e:	4b76      	ldr	r3, [pc, #472]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a75      	ldr	r2, [pc, #468]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e01d      	b.n	80054b8 <HAL_RCC_OscConfig+0xb0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x98>
 8005486:	4b70      	ldr	r3, [pc, #448]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6f      	ldr	r2, [pc, #444]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800548c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6c      	ldr	r2, [pc, #432]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e00b      	b.n	80054b8 <HAL_RCC_OscConfig+0xb0>
 80054a0:	4b69      	ldr	r3, [pc, #420]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a68      	ldr	r2, [pc, #416]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4b66      	ldr	r3, [pc, #408]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fd fa9e 	bl	8002a00 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fd fa9a 	bl	8002a00 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e207      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0xc0>
 80054e6:	e014      	b.n	8005512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fd fa8a 	bl	8002a00 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f0:	f7fd fa86 	bl	8002a00 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1f3      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	4b51      	ldr	r3, [pc, #324]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0xe8>
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d063      	beq.n	80055e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551e:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552a:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005532:	2b08      	cmp	r3, #8
 8005534:	d11c      	bne.n	8005570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005536:	4b44      	ldr	r3, [pc, #272]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d116      	bne.n	8005570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_RCC_OscConfig+0x152>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e1c7      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4937      	ldr	r1, [pc, #220]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556e:	e03a      	b.n	80055e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005578:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_RCC_OscConfig+0x244>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fd fa3f 	bl	8002a00 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005586:	f7fd fa3b 	bl	8002a00 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1a8      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4925      	ldr	r1, [pc, #148]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_OscConfig+0x244>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fd fa1e 	bl	8002a00 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c8:	f7fd fa1a 	bl	8002a00 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e187      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d036      	beq.n	8005660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_RCC_OscConfig+0x248>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fd f9fe 	bl	8002a00 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005608:	f7fd f9fa 	bl	8002a00 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e167      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_RCC_OscConfig+0x240>)
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x200>
 8005626:	e01b      	b.n	8005660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_OscConfig+0x248>)
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fd f9e7 	bl	8002a00 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005634:	e00e      	b.n	8005654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005636:	f7fd f9e3 	bl	8002a00 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d907      	bls.n	8005654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e150      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
 8005648:	40023800 	.word	0x40023800
 800564c:	42470000 	.word	0x42470000
 8005650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005654:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ea      	bne.n	8005636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8097 	beq.w	800579c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005672:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	4a7c      	ldr	r2, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568c:	6413      	str	r3, [r2, #64]	; 0x40
 800568e:	4b7a      	ldr	r3, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	4b77      	ldr	r3, [pc, #476]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d118      	bne.n	80056dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056aa:	4b74      	ldr	r3, [pc, #464]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a73      	ldr	r2, [pc, #460]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b6:	f7fd f9a3 	bl	8002a00 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fd f99f 	bl	8002a00 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e10c      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCC_OscConfig+0x474>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <HAL_RCC_OscConfig+0x2ea>
 80056e4:	4b64      	ldr	r3, [pc, #400]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a63      	ldr	r2, [pc, #396]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
 80056f0:	e01c      	b.n	800572c <HAL_RCC_OscConfig+0x324>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x30c>
 80056fa:	4b5f      	ldr	r3, [pc, #380]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a5e      	ldr	r2, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005700:	f043 0304 	orr.w	r3, r3, #4
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	4b5c      	ldr	r3, [pc, #368]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a5b      	ldr	r2, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0x324>
 8005714:	4b58      	ldr	r3, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4a57      	ldr	r2, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6713      	str	r3, [r2, #112]	; 0x70
 8005720:	4b55      	ldr	r3, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a54      	ldr	r2, [pc, #336]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fd f964 	bl	8002a00 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	e00a      	b.n	8005752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fd f960 	bl	8002a00 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0cb      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	4b49      	ldr	r3, [pc, #292]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0ee      	beq.n	800573c <HAL_RCC_OscConfig+0x334>
 800575e:	e014      	b.n	800578a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005760:	f7fd f94e 	bl	8002a00 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	e00a      	b.n	800577e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	f7fd f94a 	bl	8002a00 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e0b5      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577e:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1ee      	bne.n	8005768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	4a38      	ldr	r2, [pc, #224]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a1 	beq.w	80058e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057a6:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d05c      	beq.n	800586c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d141      	bne.n	800583e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fd f91e 	bl	8002a00 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c8:	f7fd f91a 	bl	8002a00 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e087      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	019b      	lsls	r3, r3, #6
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	3b01      	subs	r3, #1
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	491b      	ldr	r1, [pc, #108]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fd f8f3 	bl	8002a00 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581e:	f7fd f8ef 	bl	8002a00 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e05c      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005830:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x416>
 800583c:	e054      	b.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd f8dc 	bl	8002a00 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd f8d8 	bl	8002a00 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e045      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x444>
 800586a:	e03d      	b.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e038      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000
 8005880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x4ec>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d028      	beq.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d121      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11a      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058bc:	4293      	cmp	r3, r2
 80058be:	d111      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	3b01      	subs	r3, #1
 80058ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d107      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800

080058f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0cc      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800590c:	4b68      	ldr	r3, [pc, #416]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d90c      	bls.n	8005934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b65      	ldr	r3, [pc, #404]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0b8      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800594c:	4b59      	ldr	r3, [pc, #356]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a58      	ldr	r2, [pc, #352]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005964:	4b53      	ldr	r3, [pc, #332]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a52      	ldr	r2, [pc, #328]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800596e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	494d      	ldr	r1, [pc, #308]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d044      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d119      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d107      	bne.n	80059c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b6:	4b3f      	ldr	r3, [pc, #252]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e06f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c6:	4b3b      	ldr	r3, [pc, #236]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e067      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d6:	4b37      	ldr	r3, [pc, #220]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4934      	ldr	r1, [pc, #208]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e8:	f7fd f80a 	bl	8002a00 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f0:	f7fd f806 	bl	8002a00 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e04f      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 020c 	and.w	r2, r3, #12
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d1eb      	bne.n	80059f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d20c      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e032      	b.n	8005aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	490e      	ldr	r1, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a7e:	f000 f821 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8005a90:	5ccb      	ldrb	r3, [r1, r3]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fc fe60 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40023c00 	.word	0x40023c00
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	08012b24 	.word	0x08012b24
 8005abc:	200004ec 	.word	0x200004ec
 8005ac0:	200004f0 	.word	0x200004f0

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b094      	sub	sp, #80	; 0x50
 8005aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005adc:	4b79      	ldr	r3, [pc, #484]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d00d      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	f200 80e1 	bhi.w	8005cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x34>
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d003      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x3a>
 8005af6:	e0db      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af8:	4b73      	ldr	r3, [pc, #460]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005afc:	e0db      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005afe:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b02:	e0d8      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b04:	4b6f      	ldr	r3, [pc, #444]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d063      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1a:	4b6a      	ldr	r3, [pc, #424]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	2200      	movs	r2, #0
 8005b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2e:	2300      	movs	r3, #0
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
 8005b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	f04f 0000 	mov.w	r0, #0
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	0159      	lsls	r1, r3, #5
 8005b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b48:	0150      	lsls	r0, r2, #5
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4621      	mov	r1, r4
 8005b50:	1a51      	subs	r1, r2, r1
 8005b52:	6139      	str	r1, [r7, #16]
 8005b54:	4629      	mov	r1, r5
 8005b56:	eb63 0301 	sbc.w	r3, r3, r1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b68:	4659      	mov	r1, fp
 8005b6a:	018b      	lsls	r3, r1, #6
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b72:	4651      	mov	r1, sl
 8005b74:	018a      	lsls	r2, r1, #6
 8005b76:	4651      	mov	r1, sl
 8005b78:	ebb2 0801 	subs.w	r8, r2, r1
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b96:	4690      	mov	r8, r2
 8005b98:	4699      	mov	r9, r3
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	eb18 0303 	adds.w	r3, r8, r3
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	462b      	mov	r3, r5
 8005ba4:	eb49 0303 	adc.w	r3, r9, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	028b      	lsls	r3, r1, #10
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	028a      	lsls	r2, r1, #10
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	2200      	movs	r2, #0
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bd4:	f7fa fb5c 	bl	8000290 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be0:	e058      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	2200      	movs	r2, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	4611      	mov	r1, r2
 8005bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	f04f 0000 	mov.w	r0, #0
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	0159      	lsls	r1, r3, #5
 8005c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c0e:	0150      	lsls	r0, r2, #5
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4641      	mov	r1, r8
 8005c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c34:	ebb2 040a 	subs.w	r4, r2, sl
 8005c38:	eb63 050b 	sbc.w	r5, r3, fp
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	00eb      	lsls	r3, r5, #3
 8005c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c4a:	00e2      	lsls	r2, r4, #3
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	461d      	mov	r5, r3
 8005c50:	4643      	mov	r3, r8
 8005c52:	18e3      	adds	r3, r4, r3
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	464b      	mov	r3, r9
 8005c58:	eb45 0303 	adc.w	r3, r5, r3
 8005c5c:	607b      	str	r3, [r7, #4]
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	028b      	lsls	r3, r1, #10
 8005c6e:	4621      	mov	r1, r4
 8005c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c74:	4621      	mov	r1, r4
 8005c76:	028a      	lsls	r2, r1, #10
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7e:	2200      	movs	r2, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	61fa      	str	r2, [r7, #28]
 8005c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c88:	f7fa fb02 	bl	8000290 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4613      	mov	r3, r2
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cae:	e002      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3750      	adds	r7, #80	; 0x50
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	00f42400 	.word	0x00f42400

08005ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd0:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	200004ec 	.word	0x200004ec

08005ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ce8:	f7ff fff0 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	0a9b      	lsrs	r3, r3, #10
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfa:	5ccb      	ldrb	r3, [r1, r3]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40023800 	.word	0x40023800
 8005d08:	08012b34 	.word	0x08012b34

08005d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	220f      	movs	r2, #15
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 0203 	and.w	r2, r3, #3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <HAL_RCC_GetClockConfig+0x5c>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCC_GetClockConfig+0x5c>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <HAL_RCC_GetClockConfig+0x60>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0207 	and.w	r2, r3, #7
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	601a      	str	r2, [r3, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	40023c00 	.word	0x40023c00

08005d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e07b      	b.n	8005e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d92:	d009      	beq.n	8005da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	61da      	str	r2, [r3, #28]
 8005d9a:	e005      	b.n	8005da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fbe2 	bl	800258c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	ea42 0103 	orr.w	r1, r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	f003 0104 	and.w	r1, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0210 	and.w	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_SPI_Transmit+0x22>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e126      	b.n	80060f2 <HAL_SPI_Transmit+0x270>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eac:	f7fc fda8 	bl	8002a00 <HAL_GetTick>
 8005eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec6:	e10b      	b.n	80060e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Transmit+0x52>
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ed8:	e102      	b.n	80060e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f20:	d10f      	bne.n	8005f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d007      	beq.n	8005f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f68:	d14b      	bne.n	8006002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_SPI_Transmit+0xf6>
 8005f72:	8afb      	ldrh	r3, [r7, #22]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d13e      	bne.n	8005ff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	881a      	ldrh	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	1c9a      	adds	r2, r3, #2
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f9c:	e02b      	b.n	8005ff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d112      	bne.n	8005fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fd0:	e011      	b.n	8005ff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd2:	f7fc fd15 	bl	8002a00 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d803      	bhi.n	8005fea <HAL_SPI_Transmit+0x168>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit+0x16e>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ff4:	e074      	b.n	80060e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1ce      	bne.n	8005f9e <HAL_SPI_Transmit+0x11c>
 8006000:	e04c      	b.n	800609c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_Transmit+0x18e>
 800600a:	8afb      	ldrh	r3, [r7, #22]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d140      	bne.n	8006092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006036:	e02c      	b.n	8006092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d113      	bne.n	800606e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	86da      	strh	r2, [r3, #54]	; 0x36
 800606c:	e011      	b.n	8006092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606e:	f7fc fcc7 	bl	8002a00 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d803      	bhi.n	8006086 <HAL_SPI_Transmit+0x204>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d102      	bne.n	800608c <HAL_SPI_Transmit+0x20a>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006090:	e026      	b.n	80060e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1cd      	bne.n	8006038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fa55 	bl	8006550 <SPI_EndRxTxTransaction>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e000      	b.n	80060e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80060de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08c      	sub	sp, #48	; 0x30
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006108:	2301      	movs	r3, #1
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x26>
 800611c:	2302      	movs	r3, #2
 800611e:	e18a      	b.n	8006436 <HAL_SPI_TransmitReceive+0x33c>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006128:	f7fc fc6a 	bl	8002a00 <HAL_GetTick>
 800612c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800613e:	887b      	ldrh	r3, [r7, #2]
 8006140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006146:	2b01      	cmp	r3, #1
 8006148:	d00f      	beq.n	800616a <HAL_SPI_TransmitReceive+0x70>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006150:	d107      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x68>
 800615a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800615e:	2b04      	cmp	r3, #4
 8006160:	d003      	beq.n	800616a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006162:	2302      	movs	r3, #2
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006168:	e15b      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_SPI_TransmitReceive+0x82>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_SPI_TransmitReceive+0x82>
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006182:	e14e      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b04      	cmp	r3, #4
 800618e:	d003      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2205      	movs	r2, #5
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	887a      	ldrh	r2, [r7, #2]
 80061a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	887a      	ldrh	r2, [r7, #2]
 80061ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d007      	beq.n	80061ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f4:	d178      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x10a>
 80061fe:	8b7b      	ldrh	r3, [r7, #26]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d166      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006228:	e053      	b.n	80062d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b02      	cmp	r3, #2
 8006236:	d11b      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x176>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <HAL_SPI_TransmitReceive+0x176>
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d113      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b01      	cmp	r3, #1
 800627c:	d119      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x1b8>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d014      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	b292      	uxth	r2, r2
 8006294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	1c9a      	adds	r2, r3, #2
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062ae:	2301      	movs	r3, #1
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062b2:	f7fc fba5 	bl	8002a00 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062be:	429a      	cmp	r2, r3
 80062c0:	d807      	bhi.n	80062d2 <HAL_SPI_TransmitReceive+0x1d8>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d003      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062d0:	e0a7      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1a6      	bne.n	800622a <HAL_SPI_TransmitReceive+0x130>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1a1      	bne.n	800622a <HAL_SPI_TransmitReceive+0x130>
 80062e6:	e07c      	b.n	80063e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_SPI_TransmitReceive+0x1fc>
 80062f0:	8b7b      	ldrh	r3, [r7, #26]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d16b      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800631c:	e057      	b.n	80063ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d11c      	bne.n	8006366 <HAL_SPI_TransmitReceive+0x26c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d017      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x26c>
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d114      	bne.n	8006366 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d119      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x2ae>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d014      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a4:	2301      	movs	r3, #1
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063a8:	f7fc fb2a 	bl	8002a00 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d803      	bhi.n	80063c0 <HAL_SPI_TransmitReceive+0x2c6>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d102      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x2cc>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063cc:	e029      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1a2      	bne.n	800631e <HAL_SPI_TransmitReceive+0x224>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d19d      	bne.n	800631e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f8b2 	bl	8006550 <SPI_EndRxTxTransaction>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d006      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063fe:	e010      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e000      	b.n	8006422 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006450:	f7fc fad6 	bl	8002a00 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4413      	add	r3, r2
 800645e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006460:	f7fc face 	bl	8002a00 <HAL_GetTick>
 8006464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006466:	4b39      	ldr	r3, [pc, #228]	; (800654c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	015b      	lsls	r3, r3, #5
 800646c:	0d1b      	lsrs	r3, r3, #20
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006476:	e054      	b.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d050      	beq.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006480:	f7fc fabe 	bl	8002a00 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	429a      	cmp	r2, r3
 800648e:	d902      	bls.n	8006496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d13d      	bne.n	8006512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ae:	d111      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b8:	d004      	beq.n	80064c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c2:	d107      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064dc:	d10f      	bne.n	80064fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e017      	b.n	8006542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	3b01      	subs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	429a      	cmp	r2, r3
 800653e:	d19b      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200004ec 	.word	0x200004ec

08006550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800655c:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <SPI_EndRxTxTransaction+0x7c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <SPI_EndRxTxTransaction+0x80>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0d5b      	lsrs	r3, r3, #21
 8006568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657a:	d112      	bne.n	80065a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ff5a 	bl	8006440 <SPI_WaitFlagStateUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e00f      	b.n	80065c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d0f2      	beq.n	80065a2 <SPI_EndRxTxTransaction+0x52>
 80065bc:	e000      	b.n	80065c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80065be:	bf00      	nop
  }

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200004ec 	.word	0x200004ec
 80065d0:	165e9f81 	.word	0x165e9f81

080065d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e041      	b.n	800666a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fc f844 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f000 fd3a 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d001      	beq.n	800668c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e03c      	b.n	8006706 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1e      	ldr	r2, [pc, #120]	; (8006714 <HAL_TIM_Base_Start+0xa0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d018      	beq.n	80066d0 <HAL_TIM_Base_Start+0x5c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d013      	beq.n	80066d0 <HAL_TIM_Base_Start+0x5c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <HAL_TIM_Base_Start+0xa4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_TIM_Base_Start+0x5c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a19      	ldr	r2, [pc, #100]	; (800671c <HAL_TIM_Base_Start+0xa8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_TIM_Base_Start+0x5c>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a17      	ldr	r2, [pc, #92]	; (8006720 <HAL_TIM_Base_Start+0xac>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_TIM_Base_Start+0x5c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a16      	ldr	r2, [pc, #88]	; (8006724 <HAL_TIM_Base_Start+0xb0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d111      	bne.n	80066f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d010      	beq.n	8006704 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	e007      	b.n	8006704 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40010000 	.word	0x40010000
 8006718:	40000400 	.word	0x40000400
 800671c:	40000800 	.word	0x40000800
 8006720:	40000c00 	.word	0x40000c00
 8006724:	40014000 	.word	0x40014000

08006728 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	f241 1311 	movw	r3, #4369	; 0x1111
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10f      	bne.n	8006760 <HAL_TIM_Base_Stop+0x38>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	f240 4344 	movw	r3, #1092	; 0x444
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <HAL_TIM_Base_Stop+0x38>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e044      	b.n	800681a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_TIM_Base_Start_IT+0xb0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x6c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d013      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x6c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <HAL_TIM_Base_Start_IT+0xb4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x6c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a19      	ldr	r2, [pc, #100]	; (8006830 <HAL_TIM_Base_Start_IT+0xb8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x6c>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a17      	ldr	r2, [pc, #92]	; (8006834 <HAL_TIM_Base_Start_IT+0xbc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x6c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_Base_Start_IT+0xc0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d111      	bne.n	8006808 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d010      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006806:	e007      	b.n	8006818 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40014000 	.word	0x40014000

0800683c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e041      	b.n	80068d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f839 	bl	80068da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 fc06 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <HAL_TIM_PWM_Start+0x24>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	e022      	b.n	800695a <HAL_TIM_PWM_Start+0x6a>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b04      	cmp	r3, #4
 8006918:	d109      	bne.n	800692e <HAL_TIM_PWM_Start+0x3e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b01      	cmp	r3, #1
 8006924:	bf14      	ite	ne
 8006926:	2301      	movne	r3, #1
 8006928:	2300      	moveq	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	e015      	b.n	800695a <HAL_TIM_PWM_Start+0x6a>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d109      	bne.n	8006948 <HAL_TIM_PWM_Start+0x58>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	bf14      	ite	ne
 8006940:	2301      	movne	r3, #1
 8006942:	2300      	moveq	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e008      	b.n	800695a <HAL_TIM_PWM_Start+0x6a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e068      	b.n	8006a34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <HAL_TIM_PWM_Start+0x82>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006970:	e013      	b.n	800699a <HAL_TIM_PWM_Start+0xaa>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d104      	bne.n	8006982 <HAL_TIM_PWM_Start+0x92>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	e00b      	b.n	800699a <HAL_TIM_PWM_Start+0xaa>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xa2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006990:	e003      	b.n	800699a <HAL_TIM_PWM_Start+0xaa>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2201      	movs	r2, #1
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fe18 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	; (8006a3c <HAL_TIM_PWM_Start+0x14c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_TIM_PWM_Start+0x14c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIM_PWM_Start+0x10e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d013      	beq.n	80069fe <HAL_TIM_PWM_Start+0x10e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_TIM_PWM_Start+0x150>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIM_PWM_Start+0x10e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a17      	ldr	r2, [pc, #92]	; (8006a44 <HAL_TIM_PWM_Start+0x154>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_PWM_Start+0x10e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <HAL_TIM_PWM_Start+0x158>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_PWM_Start+0x10e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <HAL_TIM_PWM_Start+0x15c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d010      	beq.n	8006a32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	e007      	b.n	8006a32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40014000 	.word	0x40014000

08006a50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fdb8 	bl	80075d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <HAL_TIM_PWM_Stop+0xc4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d117      	bne.n	8006aa2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10f      	bne.n	8006aa2 <HAL_TIM_PWM_Stop+0x52>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	f240 4344 	movw	r3, #1092	; 0x444
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_PWM_Stop+0x52>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_TIM_PWM_Stop+0x82>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	f240 4344 	movw	r3, #1092	; 0x444
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_PWM_Stop+0x82>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_PWM_Stop+0x92>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	e013      	b.n	8006b0a <HAL_TIM_PWM_Stop+0xba>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Stop+0xa2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af0:	e00b      	b.n	8006b0a <HAL_TIM_PWM_Stop+0xba>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Stop+0xb2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	e003      	b.n	8006b0a <HAL_TIM_PWM_Stop+0xba>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40010000 	.word	0x40010000

08006b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d122      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d11b      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0202 	mvn.w	r2, #2
 8006b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa77 	bl	800704e <HAL_TIM_IC_CaptureCallback>
 8006b60:	e005      	b.n	8006b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa69 	bl	800703a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fa7a 	bl	8007062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d122      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d11b      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0204 	mvn.w	r2, #4
 8006b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa4d 	bl	800704e <HAL_TIM_IC_CaptureCallback>
 8006bb4:	e005      	b.n	8006bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa3f 	bl	800703a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa50 	bl	8007062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d122      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d11b      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0208 	mvn.w	r2, #8
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa23 	bl	800704e <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa15 	bl	800703a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa26 	bl	8007062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0310 	and.w	r3, r3, #16
 8006c26:	2b10      	cmp	r3, #16
 8006c28:	d122      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d11b      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0210 	mvn.w	r2, #16
 8006c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2208      	movs	r2, #8
 8006c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9f9 	bl	800704e <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e005      	b.n	8006c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9eb 	bl	800703a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9fc 	bl	8007062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d10e      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d107      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0201 	mvn.w	r2, #1
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fb fbec 	bl	8002474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	d10e      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb4:	2b80      	cmp	r3, #128	; 0x80
 8006cb6:	d107      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd26 	bl	8007714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d107      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f9c1 	bl	8007076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d10e      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d107      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0220 	mvn.w	r2, #32
 8006d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcf0 	bl	8007700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e0ae      	b.n	8006ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	f200 809f 	bhi.w	8006e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006e95 	.word	0x08006e95
 8006d64:	08006e95 	.word	0x08006e95
 8006d68:	08006e95 	.word	0x08006e95
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	08006e95 	.word	0x08006e95
 8006d74:	08006e95 	.word	0x08006e95
 8006d78:	08006e95 	.word	0x08006e95
 8006d7c:	08006e13 	.word	0x08006e13
 8006d80:	08006e95 	.word	0x08006e95
 8006d84:	08006e95 	.word	0x08006e95
 8006d88:	08006e95 	.word	0x08006e95
 8006d8c:	08006e53 	.word	0x08006e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 f9f8 	bl	800718c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0208 	orr.w	r2, r2, #8
 8006daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6999      	ldr	r1, [r3, #24]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	619a      	str	r2, [r3, #24]
      break;
 8006dce:	e064      	b.n	8006e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fa3e 	bl	8007258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6999      	ldr	r1, [r3, #24]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	021a      	lsls	r2, r3, #8
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	619a      	str	r2, [r3, #24]
      break;
 8006e10:	e043      	b.n	8006e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fa89 	bl	8007330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0208 	orr.w	r2, r2, #8
 8006e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0204 	bic.w	r2, r2, #4
 8006e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	61da      	str	r2, [r3, #28]
      break;
 8006e50:	e023      	b.n	8006e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fad3 	bl	8007404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69d9      	ldr	r1, [r3, #28]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	021a      	lsls	r2, r3, #8
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	61da      	str	r2, [r3, #28]
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	75fb      	strb	r3, [r7, #23]
      break;
 8006e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e0b4      	b.n	8007032 <HAL_TIM_ConfigClockSource+0x186>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f00:	d03e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xd4>
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f06:	f200 8087 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	f000 8086 	beq.w	800701e <HAL_TIM_ConfigClockSource+0x172>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	d87f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b70      	cmp	r3, #112	; 0x70
 8006f1a:	d01a      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0xa6>
 8006f1c:	2b70      	cmp	r3, #112	; 0x70
 8006f1e:	d87b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d050      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d877      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b50      	cmp	r3, #80	; 0x50
 8006f2a:	d03c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8006f2c:	2b50      	cmp	r3, #80	; 0x50
 8006f2e:	d873      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d058      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d86f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d064      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f3c:	2b30      	cmp	r3, #48	; 0x30
 8006f3e:	d86b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d060      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d867      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d05c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d05a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f50:	e062      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6899      	ldr	r1, [r3, #8]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f000 fb19 	bl	8007598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e04f      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f000 fb02 	bl	8007598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fa2:	609a      	str	r2, [r3, #8]
      break;
 8006fa4:	e03c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fa76 	bl	80074a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2150      	movs	r1, #80	; 0x50
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 facf 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e02c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fa95 	bl	8007502 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2160      	movs	r1, #96	; 0x60
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fabf 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e01c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fa56 	bl	80074a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 faaf 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8007004:	e00c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 faa6 	bl	8007562 <TIM_ITRx_SetConfig>
      break;
 8007016:	e003      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e000      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800701e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a34      	ldr	r2, [pc, #208]	; (8007170 <TIM_Base_SetConfig+0xe4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a31      	ldr	r2, [pc, #196]	; (8007174 <TIM_Base_SetConfig+0xe8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a30      	ldr	r2, [pc, #192]	; (8007178 <TIM_Base_SetConfig+0xec>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0x38>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a2f      	ldr	r2, [pc, #188]	; (800717c <TIM_Base_SetConfig+0xf0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d108      	bne.n	80070d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a25      	ldr	r2, [pc, #148]	; (8007170 <TIM_Base_SetConfig+0xe4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01b      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d017      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a22      	ldr	r2, [pc, #136]	; (8007174 <TIM_Base_SetConfig+0xe8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a21      	ldr	r2, [pc, #132]	; (8007178 <TIM_Base_SetConfig+0xec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00f      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a20      	ldr	r2, [pc, #128]	; (800717c <TIM_Base_SetConfig+0xf0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00b      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <TIM_Base_SetConfig+0xf4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <TIM_Base_SetConfig+0xf8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d003      	beq.n	8007116 <TIM_Base_SetConfig+0x8a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_Base_SetConfig+0xfc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d108      	bne.n	8007128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a08      	ldr	r2, [pc, #32]	; (8007170 <TIM_Base_SetConfig+0xe4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d103      	bne.n	800715c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	615a      	str	r2, [r3, #20]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800
 800717c:	40000c00 	.word	0x40000c00
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 0302 	bic.w	r3, r3, #2
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <TIM_OC1_SetConfig+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d10c      	bne.n	8007202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0308 	bic.w	r3, r3, #8
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f023 0304 	bic.w	r3, r3, #4
 8007200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a13      	ldr	r2, [pc, #76]	; (8007254 <TIM_OC1_SetConfig+0xc8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d111      	bne.n	800722e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40010000 	.word	0x40010000

08007258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0210 	bic.w	r2, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0320 	bic.w	r3, r3, #32
 80072a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1e      	ldr	r2, [pc, #120]	; (800732c <TIM_OC2_SetConfig+0xd4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10d      	bne.n	80072d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <TIM_OC2_SetConfig+0xd4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d113      	bne.n	8007304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000

08007330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <TIM_OC3_SetConfig+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10d      	bne.n	80073aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a14      	ldr	r2, [pc, #80]	; (8007400 <TIM_OC3_SetConfig+0xd0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d113      	bne.n	80073da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	621a      	str	r2, [r3, #32]
}
 80073f4:	bf00      	nop
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40010000 	.word	0x40010000

08007404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <TIM_OC4_SetConfig+0x9c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d109      	bne.n	8007478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800746a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	019b      	lsls	r3, r3, #6
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40010000 	.word	0x40010000

080074a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f023 030a 	bic.w	r3, r3, #10
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0210 	bic.w	r2, r3, #16
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800752c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	f043 0307 	orr.w	r3, r3, #7
 8007584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007638:	2302      	movs	r3, #2
 800763a:	e050      	b.n	80076de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d013      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a18      	ldr	r2, [pc, #96]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a13      	ldr	r2, [pc, #76]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10c      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40014000 	.word	0x40014000

08007700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007728:	b084      	sub	sp, #16
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	f107 001c 	add.w	r0, r7, #28
 8007736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2b01      	cmp	r3, #1
 800773e:	d122      	bne.n	8007786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d105      	bne.n	800777a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fbee 	bl	8008f5c <USB_CoreReset>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
 8007784:	e01a      	b.n	80077bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fbe2 	bl	8008f5c <USB_CoreReset>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800779c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
 80077ae:	e005      	b.n	80077bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d10b      	bne.n	80077da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f043 0206 	orr.w	r2, r3, #6
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f043 0220 	orr.w	r2, r3, #32
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e6:	b004      	add	sp, #16
 80077e8:	4770      	bx	lr
	...

080077ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d165      	bne.n	80078cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a41      	ldr	r2, [pc, #260]	; (8007908 <USB_SetTurnaroundTime+0x11c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d906      	bls.n	8007816 <USB_SetTurnaroundTime+0x2a>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4a40      	ldr	r2, [pc, #256]	; (800790c <USB_SetTurnaroundTime+0x120>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d202      	bcs.n	8007816 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007810:	230f      	movs	r3, #15
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e062      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a3c      	ldr	r2, [pc, #240]	; (800790c <USB_SetTurnaroundTime+0x120>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d306      	bcc.n	800782c <USB_SetTurnaroundTime+0x40>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <USB_SetTurnaroundTime+0x124>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d202      	bcs.n	800782c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007826:	230e      	movs	r3, #14
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e057      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4a38      	ldr	r2, [pc, #224]	; (8007910 <USB_SetTurnaroundTime+0x124>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d306      	bcc.n	8007842 <USB_SetTurnaroundTime+0x56>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a37      	ldr	r2, [pc, #220]	; (8007914 <USB_SetTurnaroundTime+0x128>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d202      	bcs.n	8007842 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800783c:	230d      	movs	r3, #13
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e04c      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a33      	ldr	r2, [pc, #204]	; (8007914 <USB_SetTurnaroundTime+0x128>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d306      	bcc.n	8007858 <USB_SetTurnaroundTime+0x6c>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4a32      	ldr	r2, [pc, #200]	; (8007918 <USB_SetTurnaroundTime+0x12c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d802      	bhi.n	8007858 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007852:	230c      	movs	r3, #12
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e041      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <USB_SetTurnaroundTime+0x12c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d906      	bls.n	800786e <USB_SetTurnaroundTime+0x82>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a2e      	ldr	r2, [pc, #184]	; (800791c <USB_SetTurnaroundTime+0x130>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d802      	bhi.n	800786e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007868:	230b      	movs	r3, #11
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e036      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a2a      	ldr	r2, [pc, #168]	; (800791c <USB_SetTurnaroundTime+0x130>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d906      	bls.n	8007884 <USB_SetTurnaroundTime+0x98>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4a29      	ldr	r2, [pc, #164]	; (8007920 <USB_SetTurnaroundTime+0x134>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d802      	bhi.n	8007884 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800787e:	230a      	movs	r3, #10
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	e02b      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a26      	ldr	r2, [pc, #152]	; (8007920 <USB_SetTurnaroundTime+0x134>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d906      	bls.n	800789a <USB_SetTurnaroundTime+0xae>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a25      	ldr	r2, [pc, #148]	; (8007924 <USB_SetTurnaroundTime+0x138>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d202      	bcs.n	800789a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007894:	2309      	movs	r3, #9
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e020      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4a21      	ldr	r2, [pc, #132]	; (8007924 <USB_SetTurnaroundTime+0x138>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d306      	bcc.n	80078b0 <USB_SetTurnaroundTime+0xc4>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a20      	ldr	r2, [pc, #128]	; (8007928 <USB_SetTurnaroundTime+0x13c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d802      	bhi.n	80078b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078aa:	2308      	movs	r3, #8
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e015      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <USB_SetTurnaroundTime+0x13c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d906      	bls.n	80078c6 <USB_SetTurnaroundTime+0xda>
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a1c      	ldr	r2, [pc, #112]	; (800792c <USB_SetTurnaroundTime+0x140>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d202      	bcs.n	80078c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078c0:	2307      	movs	r3, #7
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e00a      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078c6:	2306      	movs	r3, #6
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	e007      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078d2:	2309      	movs	r3, #9
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e001      	b.n	80078dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078d8:	2309      	movs	r3, #9
 80078da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	029b      	lsls	r3, r3, #10
 80078f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	00d8acbf 	.word	0x00d8acbf
 800790c:	00e4e1c0 	.word	0x00e4e1c0
 8007910:	00f42400 	.word	0x00f42400
 8007914:	01067380 	.word	0x01067380
 8007918:	011a499f 	.word	0x011a499f
 800791c:	01312cff 	.word	0x01312cff
 8007920:	014ca43f 	.word	0x014ca43f
 8007924:	016e3600 	.word	0x016e3600
 8007928:	01a6ab1f 	.word	0x01a6ab1f
 800792c:	01e84800 	.word	0x01e84800

08007930 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f043 0201 	orr.w	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f023 0201 	bic.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d115      	bne.n	80079c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079a2:	2001      	movs	r0, #1
 80079a4:	f7fb f838 	bl	8002a18 <HAL_Delay>
      ms++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fa45 	bl	8008e3e <USB_GetMode>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d01e      	beq.n	80079f8 <USB_SetCurrentMode+0x84>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b31      	cmp	r3, #49	; 0x31
 80079be:	d9f0      	bls.n	80079a2 <USB_SetCurrentMode+0x2e>
 80079c0:	e01a      	b.n	80079f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d115      	bne.n	80079f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079d4:	2001      	movs	r0, #1
 80079d6:	f7fb f81f 	bl	8002a18 <HAL_Delay>
      ms++;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fa2c 	bl	8008e3e <USB_GetMode>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <USB_SetCurrentMode+0x84>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b31      	cmp	r3, #49	; 0x31
 80079f0:	d9f0      	bls.n	80079d4 <USB_SetCurrentMode+0x60>
 80079f2:	e001      	b.n	80079f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e005      	b.n	8007a04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b32      	cmp	r3, #50	; 0x32
 80079fc:	d101      	bne.n	8007a02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	e009      	b.n	8007a40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3340      	adds	r3, #64	; 0x40
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	2200      	movs	r2, #0
 8007a38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2b0e      	cmp	r3, #14
 8007a44:	d9f2      	bls.n	8007a2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d11c      	bne.n	8007a86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5a:	f043 0302 	orr.w	r3, r3, #2
 8007a5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
 8007a84:	e00b      	b.n	8007a9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab8:	461a      	mov	r2, r3
 8007aba:	680b      	ldr	r3, [r1, #0]
 8007abc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d10c      	bne.n	8007ade <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f965 	bl	8007d9c <USB_SetDevSpeed>
 8007ad2:	e008      	b.n	8007ae6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f960 	bl	8007d9c <USB_SetDevSpeed>
 8007adc:	e003      	b.n	8007ae6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ade:	2103      	movs	r1, #3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f95b 	bl	8007d9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ae6:	2110      	movs	r1, #16
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8f3 	bl	8007cd4 <USB_FlushTxFifo>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f91f 	bl	8007d3c <USB_FlushRxFifo>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]
 8007b30:	e043      	b.n	8007bba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b48:	d118      	bne.n	8007b7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e013      	b.n	8007b8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b72:	461a      	mov	r2, r3
 8007b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e008      	b.n	8007b8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	461a      	mov	r2, r3
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	461a      	mov	r2, r3
 8007bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3b7      	bcc.n	8007b32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e043      	b.n	8007c50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bde:	d118      	bne.n	8007c12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e013      	b.n	8007c24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	e008      	b.n	8007c24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c30:	461a      	mov	r2, r3
 8007c32:	2300      	movs	r3, #0
 8007c34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	461a      	mov	r2, r3
 8007c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d3b7      	bcc.n	8007bc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f043 0210 	orr.w	r2, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <USB_DevInit+0x2c4>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f043 0208 	orr.w	r2, r3, #8
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cb8:	f043 0304 	orr.w	r3, r3, #4
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	803c3800 	.word	0x803c3800

08007cd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a13      	ldr	r2, [pc, #76]	; (8007d38 <USB_FlushTxFifo+0x64>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e01b      	b.n	8007d2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	daf2      	bge.n	8007ce2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	019b      	lsls	r3, r3, #6
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <USB_FlushTxFifo+0x64>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e006      	b.n	8007d2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d0f0      	beq.n	8007d0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	00030d40 	.word	0x00030d40

08007d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <USB_FlushRxFifo+0x5c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d901      	bls.n	8007d5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e018      	b.n	8007d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	daf2      	bge.n	8007d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2210      	movs	r2, #16
 8007d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a08      	ldr	r2, [pc, #32]	; (8007d98 <USB_FlushRxFifo+0x5c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d901      	bls.n	8007d7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e006      	b.n	8007d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0310 	and.w	r3, r3, #16
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d0f0      	beq.n	8007d6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	00030d40 	.word	0x00030d40

08007d9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b087      	sub	sp, #28
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0306 	and.w	r3, r3, #6
 8007de6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75fb      	strb	r3, [r7, #23]
 8007df2:	e00a      	b.n	8007e0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d002      	beq.n	8007e00 <USB_GetDevSpeed+0x32>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d102      	bne.n	8007e06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e00:	2302      	movs	r3, #2
 8007e02:	75fb      	strb	r3, [r7, #23]
 8007e04:	e001      	b.n	8007e0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e06:	230f      	movs	r3, #15
 8007e08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d13a      	bne.n	8007eaa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2101      	movs	r1, #1
 8007e46:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	68f9      	ldr	r1, [r7, #12]
 8007e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d155      	bne.n	8007f18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	791b      	ldrb	r3, [r3, #4]
 8007e86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	059b      	lsls	r3, r3, #22
 8007e8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e90:	4313      	orrs	r3, r2
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	e036      	b.n	8007f18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	2101      	movs	r1, #1
 8007ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11a      	bne.n	8007f18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007efe:	430b      	orrs	r3, r1
 8007f00:	4313      	orrs	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d161      	bne.n	8008008 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5a:	d11f      	bne.n	8007f9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	0151      	lsls	r1, r2, #5
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	440a      	add	r2, r1
 8007f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	0151      	lsls	r1, r2, #5
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	440a      	add	r2, r1
 8007f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	2101      	movs	r1, #1
 8007fae:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	0159      	lsls	r1, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	440b      	add	r3, r1
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	4619      	mov	r1, r3
 8008000:	4b35      	ldr	r3, [pc, #212]	; (80080d8 <USB_DeactivateEndpoint+0x1b0>)
 8008002:	4013      	ands	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
 8008006:	e060      	b.n	80080ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801e:	d11f      	bne.n	8008060 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800803e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800805a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800805e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	2101      	movs	r1, #1
 8008072:	fa01 f303 	lsl.w	r3, r1, r3
 8008076:	041b      	lsls	r3, r3, #16
 8008078:	43db      	mvns	r3, r3
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008080:	4013      	ands	r3, r2
 8008082:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	69da      	ldr	r2, [r3, #28]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	2101      	movs	r1, #1
 8008096:	fa01 f303 	lsl.w	r3, r1, r3
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	43db      	mvns	r3, r3
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080a4:	4013      	ands	r3, r2
 80080a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	0159      	lsls	r1, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	440b      	add	r3, r1
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	4619      	mov	r1, r3
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <USB_DeactivateEndpoint+0x1b4>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	ec337800 	.word	0xec337800
 80080dc:	eff37800 	.word	0xeff37800

080080e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	f040 815c 	bne.w	80083ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d132      	bne.n	8008170 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800812c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800814c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008168:	0cdb      	lsrs	r3, r3, #19
 800816a:	04db      	lsls	r3, r3, #19
 800816c:	6113      	str	r3, [r2, #16]
 800816e:	e074      	b.n	800825a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818a:	0cdb      	lsrs	r3, r3, #19
 800818c:	04db      	lsls	r3, r3, #19
 800818e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6999      	ldr	r1, [r3, #24]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	440b      	add	r3, r1
 80081cc:	1e59      	subs	r1, r3, #1
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80081d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081d8:	4b9d      	ldr	r3, [pc, #628]	; (8008450 <USB_EPStartXfer+0x370>)
 80081da:	400b      	ands	r3, r1
 80081dc:	69b9      	ldr	r1, [r7, #24]
 80081de:	0148      	lsls	r0, r1, #5
 80081e0:	69f9      	ldr	r1, [r7, #28]
 80081e2:	4401      	add	r1, r0
 80081e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081e8:	4313      	orrs	r3, r2
 80081ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	0148      	lsls	r0, r1, #5
 8008206:	69f9      	ldr	r1, [r7, #28]
 8008208:	4401      	add	r1, r0
 800820a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800820e:	4313      	orrs	r3, r2
 8008210:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d11f      	bne.n	800825a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	0151      	lsls	r1, r2, #5
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	440a      	add	r2, r1
 8008230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008234:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008238:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	440a      	add	r2, r1
 8008250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008258:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d14b      	bne.n	80082f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	461a      	mov	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	791b      	ldrb	r3, [r3, #4]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d128      	bne.n	80082d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d110      	bne.n	80082b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	e00f      	b.n	80082d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	e133      	b.n	8008560 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008316:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d015      	beq.n	800834c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 811b 	beq.w	8008560 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	2101      	movs	r1, #1
 800833c:	fa01 f303 	lsl.w	r3, r1, r3
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008346:	4313      	orrs	r3, r2
 8008348:	634b      	str	r3, [r1, #52]	; 0x34
 800834a:	e109      	b.n	8008560 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d110      	bne.n	800837e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	e00f      	b.n	800839e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6919      	ldr	r1, [r3, #16]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	781a      	ldrb	r2, [r3, #0]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	b298      	uxth	r0, r3
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4603      	mov	r3, r0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 fade 	bl	8008974 <USB_WritePacket>
 80083b8:	e0d2      	b.n	8008560 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d4:	0cdb      	lsrs	r3, r3, #19
 80083d6:	04db      	lsls	r3, r3, #19
 80083d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d126      	bne.n	8008454 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841c:	69b9      	ldr	r1, [r7, #24]
 800841e:	0148      	lsls	r0, r1, #5
 8008420:	69f9      	ldr	r1, [r7, #28]
 8008422:	4401      	add	r1, r0
 8008424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008428:	4313      	orrs	r3, r2
 800842a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800844a:	6113      	str	r3, [r2, #16]
 800844c:	e03a      	b.n	80084c4 <USB_EPStartXfer+0x3e4>
 800844e:	bf00      	nop
 8008450:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	4413      	add	r3, r2
 800845e:	1e5a      	subs	r2, r3, #1
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	8afa      	ldrh	r2, [r7, #22]
 8008470:	fb03 f202 	mul.w	r2, r3, r2
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	8afb      	ldrh	r3, [r7, #22]
 8008488:	04d9      	lsls	r1, r3, #19
 800848a:	4b38      	ldr	r3, [pc, #224]	; (800856c <USB_EPStartXfer+0x48c>)
 800848c:	400b      	ands	r3, r1
 800848e:	69b9      	ldr	r1, [r7, #24]
 8008490:	0148      	lsls	r0, r1, #5
 8008492:	69f9      	ldr	r1, [r7, #28]
 8008494:	4401      	add	r1, r0
 8008496:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800849a:	4313      	orrs	r3, r2
 800849c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b4:	69b9      	ldr	r1, [r7, #24]
 80084b6:	0148      	lsls	r0, r1, #5
 80084b8:	69f9      	ldr	r1, [r7, #28]
 80084ba:	4401      	add	r1, r0
 80084bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084c0:	4313      	orrs	r3, r2
 80084c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d10d      	bne.n	80084e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6919      	ldr	r1, [r3, #16]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	460a      	mov	r2, r1
 80084e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	791b      	ldrb	r3, [r3, #4]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d128      	bne.n	8008540 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d110      	bne.n	8008520 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	e00f      	b.n	8008540 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	440a      	add	r2, r1
 8008556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800855e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3720      	adds	r7, #32
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	1ff80000 	.word	0x1ff80000

08008570 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b01      	cmp	r3, #1
 800858e:	f040 80ce 	bne.w	800872e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d132      	bne.n	8008600 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f8:	0cdb      	lsrs	r3, r3, #19
 80085fa:	04db      	lsls	r3, r3, #19
 80085fc:	6113      	str	r3, [r2, #16]
 80085fe:	e04e      	b.n	800869e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	440a      	add	r2, r1
 8008616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800861a:	0cdb      	lsrs	r3, r3, #19
 800861c:	04db      	lsls	r3, r3, #19
 800861e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	440a      	add	r2, r1
 8008636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800863e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008642:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	429a      	cmp	r2, r3
 800864e:	d903      	bls.n	8008658 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	440a      	add	r2, r1
 800866e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	691a      	ldr	r2, [r3, #16]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800868e:	6939      	ldr	r1, [r7, #16]
 8008690:	0148      	lsls	r0, r1, #5
 8008692:	6979      	ldr	r1, [r7, #20]
 8008694:	4401      	add	r1, r0
 8008696:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800869a:	4313      	orrs	r3, r2
 800869c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d11e      	bne.n	80086e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	461a      	mov	r2, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e097      	b.n	8008812 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008700:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8083 	beq.w	8008812 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	2101      	movs	r1, #1
 800871e:	fa01 f303 	lsl.w	r3, r1, r3
 8008722:	6979      	ldr	r1, [r7, #20]
 8008724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008728:	4313      	orrs	r3, r2
 800872a:	634b      	str	r3, [r1, #52]	; 0x34
 800872c:	e071      	b.n	8008812 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008748:	0cdb      	lsrs	r3, r3, #19
 800874a:	04db      	lsls	r3, r3, #19
 800874c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800876c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008770:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087c0:	6939      	ldr	r1, [r7, #16]
 80087c2:	0148      	lsls	r0, r1, #5
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	4401      	add	r1, r0
 80087c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087cc:	4313      	orrs	r3, r2
 80087ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10d      	bne.n	80087f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d009      	beq.n	80087f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6919      	ldr	r1, [r3, #16]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ee:	460a      	mov	r2, r1
 80087f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	0151      	lsls	r1, r2, #5
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	440a      	add	r2, r1
 8008808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d14a      	bne.n	80088d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008856:	f040 8086 	bne.w	8008966 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	7812      	ldrb	r2, [r2, #0]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800887c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d902      	bls.n	80088b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
          break;
 80088b6:	e056      	b.n	8008966 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d0:	d0e7      	beq.n	80088a2 <USB_EPStopXfer+0x82>
 80088d2:	e048      	b.n	8008966 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ec:	d13b      	bne.n	8008966 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	7812      	ldrb	r2, [r2, #0]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008910:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	440a      	add	r2, r1
 800892c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3301      	adds	r3, #1
 800893a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008942:	4293      	cmp	r3, r2
 8008944:	d902      	bls.n	800894c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
          break;
 800894a:	e00c      	b.n	8008966 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008964:	d0e7      	beq.n	8008936 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008974:	b480      	push	{r7}
 8008976:	b089      	sub	sp, #36	; 0x24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4611      	mov	r1, r2
 8008980:	461a      	mov	r2, r3
 8008982:	460b      	mov	r3, r1
 8008984:	71fb      	strb	r3, [r7, #7]
 8008986:	4613      	mov	r3, r2
 8008988:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d123      	bne.n	80089e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800899a:	88bb      	ldrh	r3, [r7, #4]
 800899c:	3303      	adds	r3, #3
 800899e:	089b      	lsrs	r3, r3, #2
 80089a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e018      	b.n	80089da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	031a      	lsls	r2, r3, #12
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b4:	461a      	mov	r2, r3
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3301      	adds	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	3301      	adds	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	3301      	adds	r3, #1
 80089cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	3301      	adds	r3, #1
 80089d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	3301      	adds	r3, #1
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d3e2      	bcc.n	80089a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3724      	adds	r7, #36	; 0x24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b08b      	sub	sp, #44	; 0x2c
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	089b      	lsrs	r3, r3, #2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	623b      	str	r3, [r7, #32]
 8008a1a:	e014      	b.n	8008a46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	3301      	adds	r3, #1
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	3301      	adds	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	3301      	adds	r3, #1
 8008a44:	623b      	str	r3, [r7, #32]
 8008a46:	6a3a      	ldr	r2, [r7, #32]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3e6      	bcc.n	8008a1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a4e:	8bfb      	ldrh	r3, [r7, #30]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01e      	beq.n	8008a92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f107 0310 	add.w	r3, r7, #16
 8008a64:	6812      	ldr	r2, [r2, #0]
 8008a66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	701a      	strb	r2, [r3, #0]
      i++;
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	3301      	adds	r3, #1
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a86:	8bfb      	ldrh	r3, [r7, #30]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a8c:	8bfb      	ldrh	r3, [r7, #30]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1ea      	bne.n	8008a68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	372c      	adds	r7, #44	; 0x2c
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d12c      	bne.n	8008b16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	db12      	blt.n	8008af4 <USB_EPSetStall+0x54>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00f      	beq.n	8008af4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008af2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	e02b      	b.n	8008b6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	db12      	blt.n	8008b4e <USB_EPSetStall+0xae>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00f      	beq.n	8008b4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d128      	bne.n	8008bea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	791b      	ldrb	r3, [r3, #4]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d003      	beq.n	8008bc8 <USB_EPClearStall+0x4c>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d138      	bne.n	8008c3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	e027      	b.n	8008c3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	791b      	ldrb	r3, [r3, #4]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d003      	beq.n	8008c1a <USB_EPClearStall+0x9e>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	791b      	ldrb	r3, [r3, #4]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d10f      	bne.n	8008c3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	0151      	lsls	r1, r2, #5
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	440a      	add	r2, r1
 8008c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c7c:	68f9      	ldr	r1, [r7, #12]
 8008c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c82:	4313      	orrs	r3, r2
 8008c84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cc2:	f023 0302 	bic.w	r3, r3, #2
 8008cc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d04:	f043 0302 	orr.w	r3, r3, #2
 8008d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d30:	68fb      	ldr	r3, [r7, #12]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	0c1b      	lsrs	r3, r3, #16
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	4013      	ands	r3, r2
 8008d94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	b29b      	uxth	r3, r3
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b087      	sub	sp, #28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	01db      	lsls	r3, r3, #7
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e30:	68bb      	ldr	r3, [r7, #8]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e78:	f023 0307 	bic.w	r3, r3, #7
 8008e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	333c      	adds	r3, #60	; 0x3c
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <USB_EP0_OutStart+0xb8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d90a      	bls.n	8008eda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed4:	d101      	bne.n	8008eda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e037      	b.n	8008f4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f08:	f043 0318 	orr.w	r3, r3, #24
 8008f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d10f      	bne.n	8008f48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	4f54300a 	.word	0x4f54300a

08008f5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <USB_CoreReset+0x64>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d901      	bls.n	8008f7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e01b      	b.n	8008fb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	daf2      	bge.n	8008f68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f043 0201 	orr.w	r2, r3, #1
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <USB_CoreReset+0x64>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d901      	bls.n	8008fa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e006      	b.n	8008fb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d0f0      	beq.n	8008f92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	00030d40 	.word	0x00030d40

08008fc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fc8:	4904      	ldr	r1, [pc, #16]	; (8008fdc <MX_FATFS_Init+0x18>)
 8008fca:	4805      	ldr	r0, [pc, #20]	; (8008fe0 <MX_FATFS_Init+0x1c>)
 8008fcc:	f004 fc30 	bl	800d830 <FATFS_LinkDriver>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <MX_FATFS_Init+0x20>)
 8008fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fd8:	bf00      	nop
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	200018ec 	.word	0x200018ec
 8008fe0:	200004f8 	.word	0x200004f8
 8008fe4:	200018e8 	.word	0x200018e8

08008fe8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (mem_init(pdrv));
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	4618      	mov	r0, r3
 8009006:	f7f8 fd11 	bl	8001a2c <mem_init>
 800900a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return (mem_getstatus(pdrv));
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	4618      	mov	r0, r3
 8009022:	f7f8 fd1b 	bl	8001a5c <mem_getstatus>
 8009026:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (mem_read(pdrv, buff, sector, count));
 8009040:	7bf8      	ldrb	r0, [r7, #15]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	f7f8 fd18 	bl	8001a7c <mem_read>
 800904c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return mem_write(pdrv, buff, sector, count);
 8009066:	7bf8      	ldrb	r0, [r7, #15]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	f7f8 fd3f 	bl	8001af0 <mem_write>
 8009072:	4603      	mov	r3, r0
 8009074:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	4603      	mov	r3, r0
 8009086:	603a      	str	r2, [r7, #0]
 8009088:	71fb      	strb	r3, [r7, #7]
 800908a:	460b      	mov	r3, r1
 800908c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    switch (cmd) {
 800908e:	79bb      	ldrb	r3, [r7, #6]
 8009090:	2b03      	cmp	r3, #3
 8009092:	d010      	beq.n	80090b6 <USER_ioctl+0x38>
 8009094:	2b03      	cmp	r3, #3
 8009096:	dc12      	bgt.n	80090be <USER_ioctl+0x40>
 8009098:	2b01      	cmp	r3, #1
 800909a:	d002      	beq.n	80090a2 <USER_ioctl+0x24>
 800909c:	2b02      	cmp	r3, #2
 800909e:	d005      	beq.n	80090ac <USER_ioctl+0x2e>
 80090a0:	e00d      	b.n	80090be <USER_ioctl+0x40>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = 65536;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80090a8:	601a      	str	r2, [r3, #0]
			break;
 80090aa:	e008      	b.n	80090be <USER_ioctl+0x40>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = SECTOR_SIZE;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090b2:	601a      	str	r2, [r3, #0]
			break;
 80090b4:	e003      	b.n	80090be <USER_ioctl+0x40>
		case GET_BLOCK_SIZE:
			*(DWORD*) buff = 64;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2240      	movs	r2, #64	; 0x40
 80090ba:	601a      	str	r2, [r3, #0]
			break;
 80090bc:	bf00      	nop
    }
    return RES_OK;
 80090be:	2300      	movs	r3, #0
  /* USER CODE END IOCTL */
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090dc:	f008 fd3a 	bl	8011b54 <USBD_static_malloc>
 80090e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	32b0      	adds	r2, #176	; 0xb0
 80090f2:	2100      	movs	r1, #0
 80090f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090f8:	2302      	movs	r3, #2
 80090fa:	e0d4      	b.n	80092a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009100:	2100      	movs	r1, #0
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f008 fdb2 	bl	8011c6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	32b0      	adds	r2, #176	; 0xb0
 8009112:	68f9      	ldr	r1, [r7, #12]
 8009114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	; 0xb0
 8009122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d138      	bne.n	80091a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009134:	4b5e      	ldr	r3, [pc, #376]	; (80092b0 <USBD_CDC_Init+0x1e4>)
 8009136:	7819      	ldrb	r1, [r3, #0]
 8009138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800913c:	2202      	movs	r2, #2
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f008 fbe5 	bl	801190e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009144:	4b5a      	ldr	r3, [pc, #360]	; (80092b0 <USBD_CDC_Init+0x1e4>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	f003 020f 	and.w	r2, r3, #15
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	440b      	add	r3, r1
 8009158:	3324      	adds	r3, #36	; 0x24
 800915a:	2201      	movs	r2, #1
 800915c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800915e:	4b55      	ldr	r3, [pc, #340]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 8009160:	7819      	ldrb	r1, [r3, #0]
 8009162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009166:	2202      	movs	r2, #2
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f008 fbd0 	bl	801190e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800916e:	4b51      	ldr	r3, [pc, #324]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	f003 020f 	and.w	r2, r3, #15
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009186:	2201      	movs	r2, #1
 8009188:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800918a:	4b4b      	ldr	r3, [pc, #300]	; (80092b8 <USBD_CDC_Init+0x1ec>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 020f 	and.w	r2, r3, #15
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	3326      	adds	r3, #38	; 0x26
 80091a0:	2210      	movs	r2, #16
 80091a2:	801a      	strh	r2, [r3, #0]
 80091a4:	e035      	b.n	8009212 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091a6:	4b42      	ldr	r3, [pc, #264]	; (80092b0 <USBD_CDC_Init+0x1e4>)
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	2340      	movs	r3, #64	; 0x40
 80091ac:	2202      	movs	r2, #2
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f008 fbad 	bl	801190e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091b4:	4b3e      	ldr	r3, [pc, #248]	; (80092b0 <USBD_CDC_Init+0x1e4>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 020f 	and.w	r2, r3, #15
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	3324      	adds	r3, #36	; 0x24
 80091ca:	2201      	movs	r2, #1
 80091cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091ce:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 80091d0:	7819      	ldrb	r1, [r3, #0]
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	2202      	movs	r2, #2
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f008 fb99 	bl	801190e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091dc:	4b35      	ldr	r3, [pc, #212]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091f4:	2201      	movs	r2, #1
 80091f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091f8:	4b2f      	ldr	r3, [pc, #188]	; (80092b8 <USBD_CDC_Init+0x1ec>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	3326      	adds	r3, #38	; 0x26
 800920e:	2210      	movs	r2, #16
 8009210:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009212:	4b29      	ldr	r3, [pc, #164]	; (80092b8 <USBD_CDC_Init+0x1ec>)
 8009214:	7819      	ldrb	r1, [r3, #0]
 8009216:	2308      	movs	r3, #8
 8009218:	2203      	movs	r2, #3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f008 fb77 	bl	801190e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <USBD_CDC_Init+0x1ec>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	3324      	adds	r3, #36	; 0x24
 8009236:	2201      	movs	r2, #1
 8009238:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	33b0      	adds	r3, #176	; 0xb0
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009270:	2302      	movs	r3, #2
 8009272:	e018      	b.n	80092a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7c1b      	ldrb	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 800927e:	7819      	ldrb	r1, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f008 fc2e 	bl	8011aec <USBD_LL_PrepareReceive>
 8009290:	e008      	b.n	80092a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <USBD_CDC_Init+0x1e8>)
 8009294:	7819      	ldrb	r1, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f008 fc24 	bl	8011aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000593 	.word	0x20000593
 80092b4:	20000594 	.word	0x20000594
 80092b8:	20000595 	.word	0x20000595

080092bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092c8:	4b3a      	ldr	r3, [pc, #232]	; (80093b4 <USBD_CDC_DeInit+0xf8>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f008 fb43 	bl	801195a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092d4:	4b37      	ldr	r3, [pc, #220]	; (80093b4 <USBD_CDC_DeInit+0xf8>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 020f 	and.w	r2, r3, #15
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	3324      	adds	r3, #36	; 0x24
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092ee:	4b32      	ldr	r3, [pc, #200]	; (80093b8 <USBD_CDC_DeInit+0xfc>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f008 fb30 	bl	801195a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092fa:	4b2f      	ldr	r3, [pc, #188]	; (80093b8 <USBD_CDC_DeInit+0xfc>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009312:	2200      	movs	r2, #0
 8009314:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009316:	4b29      	ldr	r3, [pc, #164]	; (80093bc <USBD_CDC_DeInit+0x100>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f008 fb1c 	bl	801195a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <USBD_CDC_DeInit+0x100>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 020f 	and.w	r2, r3, #15
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3324      	adds	r3, #36	; 0x24
 8009338:	2200      	movs	r2, #0
 800933a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800933c:	4b1f      	ldr	r3, [pc, #124]	; (80093bc <USBD_CDC_DeInit+0x100>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 020f 	and.w	r2, r3, #15
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	3326      	adds	r3, #38	; 0x26
 8009352:	2200      	movs	r2, #0
 8009354:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	32b0      	adds	r2, #176	; 0xb0
 8009360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01f      	beq.n	80093a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	33b0      	adds	r3, #176	; 0xb0
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	32b0      	adds	r2, #176	; 0xb0
 8009386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938a:	4618      	mov	r0, r3
 800938c:	f008 fbf0 	bl	8011b70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	32b0      	adds	r2, #176	; 0xb0
 800939a:	2100      	movs	r1, #0
 800939c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000593 	.word	0x20000593
 80093b8:	20000594 	.word	0x20000594
 80093bc:	20000595 	.word	0x20000595

080093c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	32b0      	adds	r2, #176	; 0xb0
 80093d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e0bf      	b.n	8009570 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d050      	beq.n	800949e <USBD_CDC_Setup+0xde>
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	f040 80af 	bne.w	8009560 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d03a      	beq.n	8009480 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b25b      	sxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	da1b      	bge.n	800944c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	33b0      	adds	r3, #176	; 0xb0
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800942a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	88d2      	ldrh	r2, [r2, #6]
 8009430:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	88db      	ldrh	r3, [r3, #6]
 8009436:	2b07      	cmp	r3, #7
 8009438:	bf28      	it	cs
 800943a:	2307      	movcs	r3, #7
 800943c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	89fa      	ldrh	r2, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 fd89 	bl	800af5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800944a:	e090      	b.n	800956e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	785a      	ldrb	r2, [r3, #1]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	88db      	ldrh	r3, [r3, #6]
 800945a:	2b3f      	cmp	r3, #63	; 0x3f
 800945c:	d803      	bhi.n	8009466 <USBD_CDC_Setup+0xa6>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	88db      	ldrh	r3, [r3, #6]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	e000      	b.n	8009468 <USBD_CDC_Setup+0xa8>
 8009466:	2240      	movs	r2, #64	; 0x40
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800946e:	6939      	ldr	r1, [r7, #16]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009476:	461a      	mov	r2, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fd9b 	bl	800afb4 <USBD_CtlPrepareRx>
      break;
 800947e:	e076      	b.n	800956e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	33b0      	adds	r3, #176	; 0xb0
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	7850      	ldrb	r0, [r2, #1]
 8009496:	2200      	movs	r2, #0
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	4798      	blx	r3
      break;
 800949c:	e067      	b.n	800956e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	2b0b      	cmp	r3, #11
 80094a4:	d851      	bhi.n	800954a <USBD_CDC_Setup+0x18a>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBD_CDC_Setup+0xec>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094dd 	.word	0x080094dd
 80094b0:	08009559 	.word	0x08009559
 80094b4:	0800954b 	.word	0x0800954b
 80094b8:	0800954b 	.word	0x0800954b
 80094bc:	0800954b 	.word	0x0800954b
 80094c0:	0800954b 	.word	0x0800954b
 80094c4:	0800954b 	.word	0x0800954b
 80094c8:	0800954b 	.word	0x0800954b
 80094cc:	0800954b 	.word	0x0800954b
 80094d0:	0800954b 	.word	0x0800954b
 80094d4:	08009507 	.word	0x08009507
 80094d8:	08009531 	.word	0x08009531
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d107      	bne.n	80094f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094e8:	f107 030a 	add.w	r3, r7, #10
 80094ec:	2202      	movs	r2, #2
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 fd33 	bl	800af5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094f6:	e032      	b.n	800955e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fcbd 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	75fb      	strb	r3, [r7, #23]
          break;
 8009504:	e02b      	b.n	800955e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d107      	bne.n	8009522 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009512:	f107 030d 	add.w	r3, r7, #13
 8009516:	2201      	movs	r2, #1
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 fd1e 	bl	800af5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009520:	e01d      	b.n	800955e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fca8 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e016      	b.n	800955e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b03      	cmp	r3, #3
 800953a:	d00f      	beq.n	800955c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fc9b 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009548:	e008      	b.n	800955c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 fc94 	bl	800ae7a <USBD_CtlError>
          ret = USBD_FAIL;
 8009552:	2303      	movs	r3, #3
 8009554:	75fb      	strb	r3, [r7, #23]
          break;
 8009556:	e002      	b.n	800955e <USBD_CDC_Setup+0x19e>
          break;
 8009558:	bf00      	nop
 800955a:	e008      	b.n	800956e <USBD_CDC_Setup+0x1ae>
          break;
 800955c:	bf00      	nop
      }
      break;
 800955e:	e006      	b.n	800956e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 fc89 	bl	800ae7a <USBD_CtlError>
      ret = USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	75fb      	strb	r3, [r7, #23]
      break;
 800956c:	bf00      	nop
  }

  return (uint8_t)ret;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800958a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	32b0      	adds	r2, #176	; 0xb0
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800959e:	2303      	movs	r3, #3
 80095a0:	e065      	b.n	800966e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	32b0      	adds	r2, #176	; 0xb0
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	f003 020f 	and.w	r2, r3, #15
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	3318      	adds	r3, #24
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02f      	beq.n	800962c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 020f 	and.w	r2, r3, #15
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3318      	adds	r3, #24
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	f003 010f 	and.w	r1, r3, #15
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	460b      	mov	r3, r1
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	440b      	add	r3, r1
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4403      	add	r3, r0
 80095f4:	3348      	adds	r3, #72	; 0x48
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80095fc:	fb01 f303 	mul.w	r3, r1, r3
 8009600:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009602:	2b00      	cmp	r3, #0
 8009604:	d112      	bne.n	800962c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	f003 020f 	and.w	r2, r3, #15
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	3318      	adds	r3, #24
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800961e:	78f9      	ldrb	r1, [r7, #3]
 8009620:	2300      	movs	r3, #0
 8009622:	2200      	movs	r2, #0
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f008 fa40 	bl	8011aaa <USBD_LL_Transmit>
 800962a:	e01f      	b.n	800966c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	33b0      	adds	r3, #176	; 0xb0
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d010      	beq.n	800966c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	33b0      	adds	r3, #176	; 0xb0
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	32b0      	adds	r2, #176	; 0xb0
 800968c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009690:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32b0      	adds	r2, #176	; 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e01a      	b.n	80096de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f008 fa3e 	bl	8011b2e <USBD_LL_GetRxDataSize>
 80096b2:	4602      	mov	r2, r0
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	33b0      	adds	r3, #176	; 0xb0
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096d8:	4611      	mov	r1, r2
 80096da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	32b0      	adds	r2, #176	; 0xb0
 80096f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009704:	2303      	movs	r3, #3
 8009706:	e025      	b.n	8009754 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	33b0      	adds	r3, #176	; 0xb0
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01a      	beq.n	8009752 <USBD_CDC_EP0_RxReady+0x6c>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009722:	2bff      	cmp	r3, #255	; 0xff
 8009724:	d015      	beq.n	8009752 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	33b0      	adds	r3, #176	; 0xb0
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800973e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009746:	b292      	uxth	r2, r2
 8009748:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	22ff      	movs	r2, #255	; 0xff
 800974e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009764:	2182      	movs	r1, #130	; 0x82
 8009766:	4818      	ldr	r0, [pc, #96]	; (80097c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009768:	f000 fd4f 	bl	800a20a <USBD_GetEpDesc>
 800976c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800976e:	2101      	movs	r1, #1
 8009770:	4815      	ldr	r0, [pc, #84]	; (80097c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009772:	f000 fd4a 	bl	800a20a <USBD_GetEpDesc>
 8009776:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009778:	2181      	movs	r1, #129	; 0x81
 800977a:	4813      	ldr	r0, [pc, #76]	; (80097c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800977c:	f000 fd45 	bl	800a20a <USBD_GetEpDesc>
 8009780:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2210      	movs	r2, #16
 800978c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2200      	movs	r2, #0
 8009798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800979c:	711a      	strb	r2, [r3, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b0:	711a      	strb	r2, [r3, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2243      	movs	r2, #67	; 0x43
 80097ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097bc:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000550 	.word	0x20000550

080097cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097d4:	2182      	movs	r1, #130	; 0x82
 80097d6:	4818      	ldr	r0, [pc, #96]	; (8009838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097d8:	f000 fd17 	bl	800a20a <USBD_GetEpDesc>
 80097dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097de:	2101      	movs	r1, #1
 80097e0:	4815      	ldr	r0, [pc, #84]	; (8009838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097e2:	f000 fd12 	bl	800a20a <USBD_GetEpDesc>
 80097e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097e8:	2181      	movs	r1, #129	; 0x81
 80097ea:	4813      	ldr	r0, [pc, #76]	; (8009838 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097ec:	f000 fd0d 	bl	800a20a <USBD_GetEpDesc>
 80097f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2210      	movs	r2, #16
 80097fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2200      	movs	r2, #0
 8009808:	711a      	strb	r2, [r3, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f042 0202 	orr.w	r2, r2, #2
 8009810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	711a      	strb	r2, [r3, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f042 0202 	orr.w	r2, r2, #2
 8009824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2243      	movs	r2, #67	; 0x43
 800982a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800982c:	4b02      	ldr	r3, [pc, #8]	; (8009838 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20000550 	.word	0x20000550

0800983c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009844:	2182      	movs	r1, #130	; 0x82
 8009846:	4818      	ldr	r0, [pc, #96]	; (80098a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009848:	f000 fcdf 	bl	800a20a <USBD_GetEpDesc>
 800984c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800984e:	2101      	movs	r1, #1
 8009850:	4815      	ldr	r0, [pc, #84]	; (80098a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009852:	f000 fcda 	bl	800a20a <USBD_GetEpDesc>
 8009856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009858:	2181      	movs	r1, #129	; 0x81
 800985a:	4813      	ldr	r0, [pc, #76]	; (80098a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800985c:	f000 fcd5 	bl	800a20a <USBD_GetEpDesc>
 8009860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2210      	movs	r2, #16
 800986c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2200      	movs	r2, #0
 8009878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800987c:	711a      	strb	r2, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d006      	beq.n	8009896 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009890:	711a      	strb	r2, [r3, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2243      	movs	r2, #67	; 0x43
 800989a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000550 	.word	0x20000550

080098ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	220a      	movs	r2, #10
 80098b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098ba:	4b03      	ldr	r3, [pc, #12]	; (80098c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	2000050c 	.word	0x2000050c

080098cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	e009      	b.n	80098f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	33b0      	adds	r3, #176	; 0xb0
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	32b0      	adds	r2, #176	; 0xb0
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009922:	2303      	movs	r3, #3
 8009924:	e008      	b.n	8009938 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	32b0      	adds	r2, #176	; 0xb0
 8009958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	e004      	b.n	8009972 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	32b0      	adds	r2, #176	; 0xb0
 8009992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009996:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009998:	2301      	movs	r3, #1
 800999a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	32b0      	adds	r2, #176	; 0xb0
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e025      	b.n	80099fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d11f      	bne.n	80099fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2201      	movs	r2, #1
 80099c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80099c4:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <USBD_CDC_TransmitPacket+0x88>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4403      	add	r3, r0
 80099de:	3318      	adds	r3, #24
 80099e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <USBD_CDC_TransmitPacket+0x88>)
 80099e4:	7819      	ldrb	r1, [r3, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f008 f859 	bl	8011aaa <USBD_LL_Transmit>

    ret = USBD_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000593 	.word	0x20000593

08009a0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	32b0      	adds	r2, #176	; 0xb0
 8009a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	32b0      	adds	r2, #176	; 0xb0
 8009a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e018      	b.n	8009a6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7c1b      	ldrb	r3, [r3, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a42:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <USBD_CDC_ReceivePacket+0x68>)
 8009a44:	7819      	ldrb	r1, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f008 f84b 	bl	8011aec <USBD_LL_PrepareReceive>
 8009a56:	e008      	b.n	8009a6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a58:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <USBD_CDC_ReceivePacket+0x68>)
 8009a5a:	7819      	ldrb	r1, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a62:	2340      	movs	r3, #64	; 0x40
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f008 f841 	bl	8011aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20000594 	.word	0x20000594

08009a78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e01f      	b.n	8009ad0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	79fa      	ldrb	r2, [r7, #7]
 8009ac2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f007 febb 	bl	8011840 <USBD_LL_Init>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e025      	b.n	8009b3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	32ae      	adds	r2, #174	; 0xae
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00f      	beq.n	8009b2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32ae      	adds	r2, #174	; 0xae
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	f107 020e 	add.w	r2, r7, #14
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
 8009b24:	4602      	mov	r2, r0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f007 fec3 	bl	80118d8 <USBD_LL_Start>
 8009b52:	4603      	mov	r3, r0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	4611      	mov	r1, r2
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 f908 	bl	800ae06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c04:	461a      	mov	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c12:	f003 031f 	and.w	r3, r3, #31
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d01a      	beq.n	8009c50 <USBD_LL_SetupStage+0x72>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d822      	bhi.n	8009c64 <USBD_LL_SetupStage+0x86>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <USBD_LL_SetupStage+0x4a>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d00a      	beq.n	8009c3c <USBD_LL_SetupStage+0x5e>
 8009c26:	e01d      	b.n	8009c64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fb5f 	bl	800a2f4 <USBD_StdDevReq>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3a:	e020      	b.n	8009c7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fbc7 	bl	800a3d8 <USBD_StdItfReq>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4e:	e016      	b.n	8009c7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc29 	bl	800a4b0 <USBD_StdEPReq>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
      break;
 8009c62:	e00c      	b.n	8009c7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f007 fe90 	bl	8011998 <USBD_LL_StallEP>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c7c:	bf00      	nop
  }

  return ret;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	460b      	mov	r3, r1
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d16e      	bne.n	8009d7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ca6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	f040 8098 	bne.w	8009de4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d913      	bls.n	8009ce8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	1ad2      	subs	r2, r2, r3
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	bf28      	it	cs
 8009cda:	4613      	movcs	r3, r2
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f001 f984 	bl	800afee <USBD_CtlContinueRx>
 8009ce6:	e07d      	b.n	8009de4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cee:	f003 031f 	and.w	r3, r3, #31
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d014      	beq.n	8009d20 <USBD_LL_DataOutStage+0x98>
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d81d      	bhi.n	8009d36 <USBD_LL_DataOutStage+0xae>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <USBD_LL_DataOutStage+0x7c>
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d003      	beq.n	8009d0a <USBD_LL_DataOutStage+0x82>
 8009d02:	e018      	b.n	8009d36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	75bb      	strb	r3, [r7, #22]
            break;
 8009d08:	e018      	b.n	8009d3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	4619      	mov	r1, r3
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 fa5e 	bl	800a1d6 <USBD_CoreFindIF>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75bb      	strb	r3, [r7, #22]
            break;
 8009d1e:	e00d      	b.n	8009d3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	4619      	mov	r1, r3
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fa60 	bl	800a1f0 <USBD_CoreFindEP>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75bb      	strb	r3, [r7, #22]
            break;
 8009d34:	e002      	b.n	8009d3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75bb      	strb	r3, [r7, #22]
            break;
 8009d3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d3c:	7dbb      	ldrb	r3, [r7, #22]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d119      	bne.n	8009d76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d113      	bne.n	8009d76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d4e:	7dba      	ldrb	r2, [r7, #22]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	32ae      	adds	r2, #174	; 0xae
 8009d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d5e:	7dba      	ldrb	r2, [r7, #22]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d66:	7dba      	ldrb	r2, [r7, #22]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	32ae      	adds	r2, #174	; 0xae
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f001 f94a 	bl	800b010 <USBD_CtlSendStatus>
 8009d7c:	e032      	b.n	8009de4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d7e:	7afb      	ldrb	r3, [r7, #11]
 8009d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	4619      	mov	r1, r3
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 fa31 	bl	800a1f0 <USBD_CoreFindEP>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d92:	7dbb      	ldrb	r3, [r7, #22]
 8009d94:	2bff      	cmp	r3, #255	; 0xff
 8009d96:	d025      	beq.n	8009de4 <USBD_LL_DataOutStage+0x15c>
 8009d98:	7dbb      	ldrb	r3, [r7, #22]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d122      	bne.n	8009de4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d117      	bne.n	8009dda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009daa:	7dba      	ldrb	r2, [r7, #22]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	32ae      	adds	r2, #174	; 0xae
 8009db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00f      	beq.n	8009dda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009dba:	7dba      	ldrb	r2, [r7, #22]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009dc2:	7dba      	ldrb	r2, [r7, #22]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	32ae      	adds	r2, #174	; 0xae
 8009dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	7afa      	ldrb	r2, [r7, #11]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	4798      	blx	r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	e000      	b.n	8009de6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	460b      	mov	r3, r1
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d16f      	bne.n	8009ee2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3314      	adds	r3, #20
 8009e06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d15a      	bne.n	8009ec8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d914      	bls.n	8009e48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	1ad2      	subs	r2, r2, r3
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f001 f8ac 	bl	800af92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f007 fe53 	bl	8011aec <USBD_LL_PrepareReceive>
 8009e46:	e03f      	b.n	8009ec8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d11c      	bne.n	8009e8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d316      	bcc.n	8009e8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d20f      	bcs.n	8009e8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2100      	movs	r1, #0
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f001 f88d 	bl	800af92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e80:	2300      	movs	r3, #0
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f007 fe30 	bl	8011aec <USBD_LL_PrepareReceive>
 8009e8c:	e01c      	b.n	8009ec8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d10f      	bne.n	8009eba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d009      	beq.n	8009eba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eba:	2180      	movs	r1, #128	; 0x80
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f007 fd6b 	bl	8011998 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f001 f8b7 	bl	800b036 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d03a      	beq.n	8009f48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff fe42 	bl	8009b5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ee0:	e032      	b.n	8009f48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
 8009ee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f97f 	bl	800a1f0 <USBD_CoreFindEP>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2bff      	cmp	r3, #255	; 0xff
 8009efa:	d025      	beq.n	8009f48 <USBD_LL_DataInStage+0x15a>
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d122      	bne.n	8009f48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d11c      	bne.n	8009f48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f0e:	7dfa      	ldrb	r2, [r7, #23]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	32ae      	adds	r2, #174	; 0xae
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d014      	beq.n	8009f48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009f1e:	7dfa      	ldrb	r2, [r7, #23]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f26:	7dfa      	ldrb	r2, [r7, #23]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	32ae      	adds	r2, #174	; 0xae
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	7afa      	ldrb	r2, [r7, #11]
 8009f34:	4611      	mov	r1, r2
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	4798      	blx	r3
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f3e:	7dbb      	ldrb	r3, [r7, #22]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f44:	7dbb      	ldrb	r3, [r7, #22]
 8009f46:	e000      	b.n	8009f4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d014      	beq.n	8009fb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00e      	beq.n	8009fb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6852      	ldr	r2, [r2, #4]
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	4611      	mov	r1, r2
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f007 fca5 	bl	801190e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2240      	movs	r2, #64	; 0x40
 8009fd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fd4:	2340      	movs	r3, #64	; 0x40
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2180      	movs	r1, #128	; 0x80
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f007 fc97 	bl	801190e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2240      	movs	r2, #64	; 0x40
 8009fea:	621a      	str	r2, [r3, #32]

  return ret;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a024:	b2da      	uxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2204      	movs	r2, #4
 800a030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b04      	cmp	r3, #4
 800a054:	d106      	bne.n	800a064 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b03      	cmp	r3, #3
 800a084:	d110      	bne.n	800a0a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32ae      	adds	r2, #174	; 0xae
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e01c      	b.n	800a10e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d115      	bne.n	800a10c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	32ae      	adds	r2, #174	; 0xae
 800a0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32ae      	adds	r2, #174	; 0xae
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	4611      	mov	r1, r2
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	32ae      	adds	r2, #174	; 0xae
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a134:	2303      	movs	r3, #3
 800a136:	e01c      	b.n	800a172 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b03      	cmp	r3, #3
 800a142:	d115      	bne.n	800a170 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	32ae      	adds	r2, #174	; 0xae
 800a14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	32ae      	adds	r2, #174	; 0xae
 800a162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	78fa      	ldrb	r2, [r7, #3]
 800a16a:	4611      	mov	r1, r2
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00e      	beq.n	800a1cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6852      	ldr	r2, [r2, #4]
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	4611      	mov	r1, r2
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	4798      	blx	r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	885b      	ldrh	r3, [r3, #2]
 800a226:	b29a      	uxth	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	429a      	cmp	r2, r3
 800a230:	d920      	bls.n	800a274 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b29b      	uxth	r3, r3
 800a238:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a23a:	e013      	b.n	800a264 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a23c:	f107 030a 	add.w	r3, r7, #10
 800a240:	4619      	mov	r1, r3
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f000 f81b 	bl	800a27e <USBD_GetNextDesc>
 800a248:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	785b      	ldrb	r3, [r3, #1]
 800a24e:	2b05      	cmp	r3, #5
 800a250:	d108      	bne.n	800a264 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	789b      	ldrb	r3, [r3, #2]
 800a25a:	78fa      	ldrb	r2, [r7, #3]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d008      	beq.n	800a272 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	885b      	ldrh	r3, [r3, #2]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	897b      	ldrh	r3, [r7, #10]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d8e5      	bhi.n	800a23c <USBD_GetEpDesc+0x32>
 800a270:	e000      	b.n	800a274 <USBD_GetEpDesc+0x6a>
          break;
 800a272:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a274:	693b      	ldr	r3, [r7, #16]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	881a      	ldrh	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	4413      	add	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2d6:	8a3b      	ldrh	r3, [r7, #16]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	b21a      	sxth	r2, r3
 800a2dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b21b      	sxth	r3, r3
 800a2e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2e6:	89fb      	ldrh	r3, [r7, #14]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d005      	beq.n	800a31a <USBD_StdDevReq+0x26>
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d857      	bhi.n	800a3c2 <USBD_StdDevReq+0xce>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00f      	beq.n	800a336 <USBD_StdDevReq+0x42>
 800a316:	2b20      	cmp	r3, #32
 800a318:	d153      	bne.n	800a3c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	32ae      	adds	r2, #174	; 0xae
 800a324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	4798      	blx	r3
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
      break;
 800a334:	e04a      	b.n	800a3cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	2b09      	cmp	r3, #9
 800a33c:	d83b      	bhi.n	800a3b6 <USBD_StdDevReq+0xc2>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <USBD_StdDevReq+0x50>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a399 	.word	0x0800a399
 800a348:	0800a3ad 	.word	0x0800a3ad
 800a34c:	0800a3b7 	.word	0x0800a3b7
 800a350:	0800a3a3 	.word	0x0800a3a3
 800a354:	0800a3b7 	.word	0x0800a3b7
 800a358:	0800a377 	.word	0x0800a377
 800a35c:	0800a36d 	.word	0x0800a36d
 800a360:	0800a3b7 	.word	0x0800a3b7
 800a364:	0800a38f 	.word	0x0800a38f
 800a368:	0800a381 	.word	0x0800a381
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa3c 	bl	800a7ec <USBD_GetDescriptor>
          break;
 800a374:	e024      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fba1 	bl	800aac0 <USBD_SetAddress>
          break;
 800a37e:	e01f      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fbe0 	bl	800ab48 <USBD_SetConfig>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]
          break;
 800a38c:	e018      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fc83 	bl	800ac9c <USBD_GetConfig>
          break;
 800a396:	e013      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fcb4 	bl	800ad08 <USBD_GetStatus>
          break;
 800a3a0:	e00e      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fce3 	bl	800ad70 <USBD_SetFeature>
          break;
 800a3aa:	e009      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fd07 	bl	800adc2 <USBD_ClrFeature>
          break;
 800a3b4:	e004      	b.n	800a3c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fd5e 	bl	800ae7a <USBD_CtlError>
          break;
 800a3be:	bf00      	nop
      }
      break;
 800a3c0:	e004      	b.n	800a3cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fd58 	bl	800ae7a <USBD_CtlError>
      break;
 800a3ca:	bf00      	nop
  }

  return ret;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop

0800a3d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3ee:	2b40      	cmp	r3, #64	; 0x40
 800a3f0:	d005      	beq.n	800a3fe <USBD_StdItfReq+0x26>
 800a3f2:	2b40      	cmp	r3, #64	; 0x40
 800a3f4:	d852      	bhi.n	800a49c <USBD_StdItfReq+0xc4>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <USBD_StdItfReq+0x26>
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	d14e      	bne.n	800a49c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a404:	b2db      	uxtb	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d840      	bhi.n	800a48e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	889b      	ldrh	r3, [r3, #4]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b01      	cmp	r3, #1
 800a414:	d836      	bhi.n	800a484 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	889b      	ldrh	r3, [r3, #4]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff fed9 	bl	800a1d6 <USBD_CoreFindIF>
 800a424:	4603      	mov	r3, r0
 800a426:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2bff      	cmp	r3, #255	; 0xff
 800a42c:	d01d      	beq.n	800a46a <USBD_StdItfReq+0x92>
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11a      	bne.n	800a46a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a434:	7bba      	ldrb	r2, [r7, #14]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	; 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00f      	beq.n	800a464 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a444:	7bba      	ldrb	r2, [r7, #14]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a44c:	7bba      	ldrb	r2, [r7, #14]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32ae      	adds	r2, #174	; 0xae
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a462:	e004      	b.n	800a46e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a468:	e001      	b.n	800a46e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	88db      	ldrh	r3, [r3, #6]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d110      	bne.n	800a498 <USBD_StdItfReq+0xc0>
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10d      	bne.n	800a498 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fdc7 	bl	800b010 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a482:	e009      	b.n	800a498 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fcf7 	bl	800ae7a <USBD_CtlError>
          break;
 800a48c:	e004      	b.n	800a498 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fcf2 	bl	800ae7a <USBD_CtlError>
          break;
 800a496:	e000      	b.n	800a49a <USBD_StdItfReq+0xc2>
          break;
 800a498:	bf00      	nop
      }
      break;
 800a49a:	e004      	b.n	800a4a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fceb 	bl	800ae7a <USBD_CtlError>
      break;
 800a4a4:	bf00      	nop
  }

  return ret;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	889b      	ldrh	r3, [r3, #4]
 800a4c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4cc:	2b40      	cmp	r3, #64	; 0x40
 800a4ce:	d007      	beq.n	800a4e0 <USBD_StdEPReq+0x30>
 800a4d0:	2b40      	cmp	r3, #64	; 0x40
 800a4d2:	f200 817f 	bhi.w	800a7d4 <USBD_StdEPReq+0x324>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d02a      	beq.n	800a530 <USBD_StdEPReq+0x80>
 800a4da:	2b20      	cmp	r3, #32
 800a4dc:	f040 817a 	bne.w	800a7d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff fe83 	bl	800a1f0 <USBD_CoreFindEP>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ee:	7b7b      	ldrb	r3, [r7, #13]
 800a4f0:	2bff      	cmp	r3, #255	; 0xff
 800a4f2:	f000 8174 	beq.w	800a7de <USBD_StdEPReq+0x32e>
 800a4f6:	7b7b      	ldrb	r3, [r7, #13]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f040 8170 	bne.w	800a7de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4fe:	7b7a      	ldrb	r2, [r7, #13]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a506:	7b7a      	ldrb	r2, [r7, #13]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	32ae      	adds	r2, #174	; 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8163 	beq.w	800a7de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a518:	7b7a      	ldrb	r2, [r7, #13]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	32ae      	adds	r2, #174	; 0xae
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a52e:	e156      	b.n	800a7de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	785b      	ldrb	r3, [r3, #1]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d008      	beq.n	800a54a <USBD_StdEPReq+0x9a>
 800a538:	2b03      	cmp	r3, #3
 800a53a:	f300 8145 	bgt.w	800a7c8 <USBD_StdEPReq+0x318>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 809b 	beq.w	800a67a <USBD_StdEPReq+0x1ca>
 800a544:	2b01      	cmp	r3, #1
 800a546:	d03c      	beq.n	800a5c2 <USBD_StdEPReq+0x112>
 800a548:	e13e      	b.n	800a7c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d002      	beq.n	800a55c <USBD_StdEPReq+0xac>
 800a556:	2b03      	cmp	r3, #3
 800a558:	d016      	beq.n	800a588 <USBD_StdEPReq+0xd8>
 800a55a:	e02c      	b.n	800a5b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00d      	beq.n	800a57e <USBD_StdEPReq+0xce>
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d00a      	beq.n	800a57e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a568:	7bbb      	ldrb	r3, [r7, #14]
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f007 fa13 	bl	8011998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a572:	2180      	movs	r1, #128	; 0x80
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f007 fa0f 	bl	8011998 <USBD_LL_StallEP>
 800a57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a57c:	e020      	b.n	800a5c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fc7a 	bl	800ae7a <USBD_CtlError>
              break;
 800a586:	e01b      	b.n	800a5c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	885b      	ldrh	r3, [r3, #2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10e      	bne.n	800a5ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <USBD_StdEPReq+0xfe>
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b80      	cmp	r3, #128	; 0x80
 800a59a:	d008      	beq.n	800a5ae <USBD_StdEPReq+0xfe>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	88db      	ldrh	r3, [r3, #6]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f007 f9f5 	bl	8011998 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fd2e 	bl	800b010 <USBD_CtlSendStatus>

              break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fc5e 	bl	800ae7a <USBD_CtlError>
              break;
 800a5be:	bf00      	nop
          }
          break;
 800a5c0:	e107      	b.n	800a7d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d002      	beq.n	800a5d4 <USBD_StdEPReq+0x124>
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d016      	beq.n	800a600 <USBD_StdEPReq+0x150>
 800a5d2:	e04b      	b.n	800a66c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00d      	beq.n	800a5f6 <USBD_StdEPReq+0x146>
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b80      	cmp	r3, #128	; 0x80
 800a5de:	d00a      	beq.n	800a5f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f007 f9d7 	bl	8011998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5ea:	2180      	movs	r1, #128	; 0x80
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f007 f9d3 	bl	8011998 <USBD_LL_StallEP>
 800a5f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5f4:	e040      	b.n	800a678 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fc3e 	bl	800ae7a <USBD_CtlError>
              break;
 800a5fe:	e03b      	b.n	800a678 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	885b      	ldrh	r3, [r3, #2]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d136      	bne.n	800a676 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f007 f9dd 	bl	80119d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fcf7 	bl	800b010 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fde2 	bl	800a1f0 <USBD_CoreFindEP>
 800a62c:	4603      	mov	r3, r0
 800a62e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a630:	7b7b      	ldrb	r3, [r7, #13]
 800a632:	2bff      	cmp	r3, #255	; 0xff
 800a634:	d01f      	beq.n	800a676 <USBD_StdEPReq+0x1c6>
 800a636:	7b7b      	ldrb	r3, [r7, #13]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d11c      	bne.n	800a676 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a63c:	7b7a      	ldrb	r2, [r7, #13]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a644:	7b7a      	ldrb	r2, [r7, #13]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	32ae      	adds	r2, #174	; 0xae
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d010      	beq.n	800a676 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a654:	7b7a      	ldrb	r2, [r7, #13]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	32ae      	adds	r2, #174	; 0xae
 800a65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a66a:	e004      	b.n	800a676 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fc03 	bl	800ae7a <USBD_CtlError>
              break;
 800a674:	e000      	b.n	800a678 <USBD_StdEPReq+0x1c8>
              break;
 800a676:	bf00      	nop
          }
          break;
 800a678:	e0ab      	b.n	800a7d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b02      	cmp	r3, #2
 800a684:	d002      	beq.n	800a68c <USBD_StdEPReq+0x1dc>
 800a686:	2b03      	cmp	r3, #3
 800a688:	d032      	beq.n	800a6f0 <USBD_StdEPReq+0x240>
 800a68a:	e097      	b.n	800a7bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d007      	beq.n	800a6a2 <USBD_StdEPReq+0x1f2>
 800a692:	7bbb      	ldrb	r3, [r7, #14]
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d004      	beq.n	800a6a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fbed 	bl	800ae7a <USBD_CtlError>
                break;
 800a6a0:	e091      	b.n	800a7c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da0b      	bge.n	800a6c2 <USBD_StdEPReq+0x212>
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	3310      	adds	r3, #16
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	4413      	add	r3, r2
 800a6be:	3304      	adds	r3, #4
 800a6c0:	e00b      	b.n	800a6da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3304      	adds	r3, #4
 800a6da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc37 	bl	800af5c <USBD_CtlSendData>
              break;
 800a6ee:	e06a      	b.n	800a7c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	da11      	bge.n	800a71c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	f003 020f 	and.w	r2, r3, #15
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	440b      	add	r3, r1
 800a70a:	3324      	adds	r3, #36	; 0x24
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d117      	bne.n	800a742 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fbb0 	bl	800ae7a <USBD_CtlError>
                  break;
 800a71a:	e054      	b.n	800a7c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	f003 020f 	and.w	r2, r3, #15
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fb9d 	bl	800ae7a <USBD_CtlError>
                  break;
 800a740:	e041      	b.n	800a7c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a746:	2b00      	cmp	r3, #0
 800a748:	da0b      	bge.n	800a762 <USBD_StdEPReq+0x2b2>
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	3310      	adds	r3, #16
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	3304      	adds	r3, #4
 800a760:	e00b      	b.n	800a77a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	4413      	add	r3, r2
 800a778:	3304      	adds	r3, #4
 800a77a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <USBD_StdEPReq+0x2d8>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b80      	cmp	r3, #128	; 0x80
 800a786:	d103      	bne.n	800a790 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e00e      	b.n	800a7ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f007 f93d 	bl	8011a14 <USBD_LL_IsStallEP>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	e002      	b.n	800a7ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fbd1 	bl	800af5c <USBD_CtlSendData>
              break;
 800a7ba:	e004      	b.n	800a7c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fb5b 	bl	800ae7a <USBD_CtlError>
              break;
 800a7c4:	bf00      	nop
          }
          break;
 800a7c6:	e004      	b.n	800a7d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fb55 	bl	800ae7a <USBD_CtlError>
          break;
 800a7d0:	bf00      	nop
      }
      break;
 800a7d2:	e005      	b.n	800a7e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fb4f 	bl	800ae7a <USBD_CtlError>
      break;
 800a7dc:	e000      	b.n	800a7e0 <USBD_StdEPReq+0x330>
      break;
 800a7de:	bf00      	nop
  }

  return ret;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7fe:	2300      	movs	r3, #0
 800a800:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	885b      	ldrh	r3, [r3, #2]
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	2b06      	cmp	r3, #6
 800a80e:	f200 8128 	bhi.w	800aa62 <USBD_GetDescriptor+0x276>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <USBD_GetDescriptor+0x2c>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a835 	.word	0x0800a835
 800a81c:	0800a84d 	.word	0x0800a84d
 800a820:	0800a88d 	.word	0x0800a88d
 800a824:	0800aa63 	.word	0x0800aa63
 800a828:	0800aa63 	.word	0x0800aa63
 800a82c:	0800aa03 	.word	0x0800aa03
 800a830:	0800aa2f 	.word	0x0800aa2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	7c12      	ldrb	r2, [r2, #16]
 800a840:	f107 0108 	add.w	r1, r7, #8
 800a844:	4610      	mov	r0, r2
 800a846:	4798      	blx	r3
 800a848:	60f8      	str	r0, [r7, #12]
      break;
 800a84a:	e112      	b.n	800aa72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	7c1b      	ldrb	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10d      	bne.n	800a870 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85c:	f107 0208 	add.w	r2, r7, #8
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	2202      	movs	r2, #2
 800a86c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a86e:	e100      	b.n	800aa72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	f107 0208 	add.w	r2, r7, #8
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
 800a880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	2202      	movs	r2, #2
 800a888:	701a      	strb	r2, [r3, #0]
      break;
 800a88a:	e0f2      	b.n	800aa72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	885b      	ldrh	r3, [r3, #2]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b05      	cmp	r3, #5
 800a894:	f200 80ac 	bhi.w	800a9f0 <USBD_GetDescriptor+0x204>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <USBD_GetDescriptor+0xb4>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8b9 	.word	0x0800a8b9
 800a8a4:	0800a8ed 	.word	0x0800a8ed
 800a8a8:	0800a921 	.word	0x0800a921
 800a8ac:	0800a955 	.word	0x0800a955
 800a8b0:	0800a989 	.word	0x0800a989
 800a8b4:	0800a9bd 	.word	0x0800a9bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7c12      	ldrb	r2, [r2, #16]
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8da:	e091      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 facb 	bl	800ae7a <USBD_CtlError>
            err++;
 800a8e4:	7afb      	ldrb	r3, [r7, #11]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ea:	e089      	b.n	800aa00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	7c12      	ldrb	r2, [r2, #16]
 800a904:	f107 0108 	add.w	r1, r7, #8
 800a908:	4610      	mov	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a90e:	e077      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fab1 	bl	800ae7a <USBD_CtlError>
            err++;
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	3301      	adds	r3, #1
 800a91c:	72fb      	strb	r3, [r7, #11]
          break;
 800a91e:	e06f      	b.n	800aa00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a942:	e05d      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa97 	bl	800ae7a <USBD_CtlError>
            err++;
 800a94c:	7afb      	ldrb	r3, [r7, #11]
 800a94e:	3301      	adds	r3, #1
 800a950:	72fb      	strb	r3, [r7, #11]
          break;
 800a952:	e055      	b.n	800aa00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00b      	beq.n	800a978 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	7c12      	ldrb	r2, [r2, #16]
 800a96c:	f107 0108 	add.w	r1, r7, #8
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
 800a974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a976:	e043      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa7d 	bl	800ae7a <USBD_CtlError>
            err++;
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	3301      	adds	r3, #1
 800a984:	72fb      	strb	r3, [r7, #11]
          break;
 800a986:	e03b      	b.n	800aa00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00b      	beq.n	800a9ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	7c12      	ldrb	r2, [r2, #16]
 800a9a0:	f107 0108 	add.w	r1, r7, #8
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9aa:	e029      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fa63 	bl	800ae7a <USBD_CtlError>
            err++;
 800a9b4:	7afb      	ldrb	r3, [r7, #11]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ba:	e021      	b.n	800aa00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	7c12      	ldrb	r2, [r2, #16]
 800a9d4:	f107 0108 	add.w	r1, r7, #8
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4798      	blx	r3
 800a9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9de:	e00f      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa49 	bl	800ae7a <USBD_CtlError>
            err++;
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ee:	e007      	b.n	800aa00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa41 	bl	800ae7a <USBD_CtlError>
          err++;
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9fe:	bf00      	nop
      }
      break;
 800aa00:	e037      	b.n	800aa72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7c1b      	ldrb	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa12:	f107 0208 	add.w	r2, r7, #8
 800aa16:	4610      	mov	r0, r2
 800aa18:	4798      	blx	r3
 800aa1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa1c:	e029      	b.n	800aa72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fa2a 	bl	800ae7a <USBD_CtlError>
        err++;
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa2c:	e021      	b.n	800aa72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7c1b      	ldrb	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10d      	bne.n	800aa52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	f107 0208 	add.w	r2, r7, #8
 800aa42:	4610      	mov	r0, r2
 800aa44:	4798      	blx	r3
 800aa46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	2207      	movs	r2, #7
 800aa4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa50:	e00f      	b.n	800aa72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fa10 	bl	800ae7a <USBD_CtlError>
        err++;
 800aa5a:	7afb      	ldrb	r3, [r7, #11]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa60:	e007      	b.n	800aa72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa08 	bl	800ae7a <USBD_CtlError>
      err++;
 800aa6a:	7afb      	ldrb	r3, [r7, #11]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa70:	bf00      	nop
  }

  if (err != 0U)
 800aa72:	7afb      	ldrb	r3, [r7, #11]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11e      	bne.n	800aab6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	88db      	ldrh	r3, [r3, #6]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d016      	beq.n	800aaae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa80:	893b      	ldrh	r3, [r7, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00e      	beq.n	800aaa4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	88da      	ldrh	r2, [r3, #6]
 800aa8a:	893b      	ldrh	r3, [r7, #8]
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	bf28      	it	cs
 800aa90:	4613      	movcs	r3, r2
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa96:	893b      	ldrh	r3, [r7, #8]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fa5d 	bl	800af5c <USBD_CtlSendData>
 800aaa2:	e009      	b.n	800aab8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f9e7 	bl	800ae7a <USBD_CtlError>
 800aaac:	e004      	b.n	800aab8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 faae 	bl	800b010 <USBD_CtlSendStatus>
 800aab4:	e000      	b.n	800aab8 <USBD_GetDescriptor+0x2cc>
    return;
 800aab6:	bf00      	nop
  }
}
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop

0800aac0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	889b      	ldrh	r3, [r3, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d131      	bne.n	800ab36 <USBD_SetAddress+0x76>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	88db      	ldrh	r3, [r3, #6]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d12d      	bne.n	800ab36 <USBD_SetAddress+0x76>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	885b      	ldrh	r3, [r3, #2]
 800aade:	2b7f      	cmp	r3, #127	; 0x7f
 800aae0:	d829      	bhi.n	800ab36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	885b      	ldrh	r3, [r3, #2]
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d104      	bne.n	800ab04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f9bc 	bl	800ae7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab02:	e01d      	b.n	800ab40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7bfa      	ldrb	r2, [r7, #15]
 800ab08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f006 ffab 	bl	8011a6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa7a 	bl	800b010 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2202      	movs	r2, #2
 800ab26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2a:	e009      	b.n	800ab40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab34:	e004      	b.n	800ab40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f99e 	bl	800ae7a <USBD_CtlError>
  }
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	4b4e      	ldr	r3, [pc, #312]	; (800ac98 <USBD_SetConfig+0x150>)
 800ab5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab60:	4b4d      	ldr	r3, [pc, #308]	; (800ac98 <USBD_SetConfig+0x150>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d905      	bls.n	800ab74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f985 	bl	800ae7a <USBD_CtlError>
    return USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e08c      	b.n	800ac8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d002      	beq.n	800ab86 <USBD_SetConfig+0x3e>
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d029      	beq.n	800abd8 <USBD_SetConfig+0x90>
 800ab84:	e075      	b.n	800ac72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab86:	4b44      	ldr	r3, [pc, #272]	; (800ac98 <USBD_SetConfig+0x150>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d020      	beq.n	800abd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab8e:	4b42      	ldr	r3, [pc, #264]	; (800ac98 <USBD_SetConfig+0x150>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab98:	4b3f      	ldr	r3, [pc, #252]	; (800ac98 <USBD_SetConfig+0x150>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7fe ffe7 	bl	8009b72 <USBD_SetClassConfig>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d008      	beq.n	800abc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f962 	bl	800ae7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abbe:	e065      	b.n	800ac8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fa25 	bl	800b010 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2203      	movs	r2, #3
 800abca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abce:	e05d      	b.n	800ac8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa1d 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800abd6:	e059      	b.n	800ac8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abd8:	4b2f      	ldr	r3, [pc, #188]	; (800ac98 <USBD_SetConfig+0x150>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d112      	bne.n	800ac06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800abe8:	4b2b      	ldr	r3, [pc, #172]	; (800ac98 <USBD_SetConfig+0x150>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abf2:	4b29      	ldr	r3, [pc, #164]	; (800ac98 <USBD_SetConfig+0x150>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7fe ffd6 	bl	8009baa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa06 	bl	800b010 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac04:	e042      	b.n	800ac8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <USBD_SetConfig+0x150>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d02a      	beq.n	800ac6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7fe ffc4 	bl	8009baa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac22:	4b1d      	ldr	r3, [pc, #116]	; (800ac98 <USBD_SetConfig+0x150>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac2c:	4b1a      	ldr	r3, [pc, #104]	; (800ac98 <USBD_SetConfig+0x150>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	4619      	mov	r1, r3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7fe ff9d 	bl	8009b72 <USBD_SetClassConfig>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00f      	beq.n	800ac62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f918 	bl	800ae7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7fe ffa9 	bl	8009baa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac60:	e014      	b.n	800ac8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f9d4 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800ac68:	e010      	b.n	800ac8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f9d0 	bl	800b010 <USBD_CtlSendStatus>
      break;
 800ac70:	e00c      	b.n	800ac8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f900 	bl	800ae7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac7a:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <USBD_SetConfig+0x150>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7fe ff92 	bl	8009baa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac86:	2303      	movs	r3, #3
 800ac88:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8a:	bf00      	nop
  }

  return ret;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200018f0 	.word	0x200018f0

0800ac9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	88db      	ldrh	r3, [r3, #6]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d004      	beq.n	800acb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f8e2 	bl	800ae7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acb6:	e023      	b.n	800ad00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	dc02      	bgt.n	800acca <USBD_GetConfig+0x2e>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dc03      	bgt.n	800acd0 <USBD_GetConfig+0x34>
 800acc8:	e015      	b.n	800acf6 <USBD_GetConfig+0x5a>
 800acca:	2b03      	cmp	r3, #3
 800accc:	d00b      	beq.n	800ace6 <USBD_GetConfig+0x4a>
 800acce:	e012      	b.n	800acf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3308      	adds	r3, #8
 800acda:	2201      	movs	r2, #1
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f93c 	bl	800af5c <USBD_CtlSendData>
        break;
 800ace4:	e00c      	b.n	800ad00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	2201      	movs	r2, #1
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f934 	bl	800af5c <USBD_CtlSendData>
        break;
 800acf4:	e004      	b.n	800ad00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f8be 	bl	800ae7a <USBD_CtlError>
        break;
 800acfe:	bf00      	nop
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d81e      	bhi.n	800ad5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	88db      	ldrh	r3, [r3, #6]
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d004      	beq.n	800ad32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8a5 	bl	800ae7a <USBD_CtlError>
        break;
 800ad30:	e01a      	b.n	800ad68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f043 0202 	orr.w	r2, r3, #2
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	330c      	adds	r3, #12
 800ad52:	2202      	movs	r2, #2
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f900 	bl	800af5c <USBD_CtlSendData>
      break;
 800ad5c:	e004      	b.n	800ad68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f88a 	bl	800ae7a <USBD_CtlError>
      break;
 800ad66:	bf00      	nop
  }
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d107      	bne.n	800ad92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f940 	bl	800b010 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad90:	e013      	b.n	800adba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d10b      	bne.n	800adb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	889b      	ldrh	r3, [r3, #4]
 800ad9e:	0a1b      	lsrs	r3, r3, #8
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f930 	bl	800b010 <USBD_CtlSendStatus>
}
 800adb0:	e003      	b.n	800adba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f860 	bl	800ae7a <USBD_CtlError>
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add2:	b2db      	uxtb	r3, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	2b02      	cmp	r3, #2
 800add8:	d80b      	bhi.n	800adf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	885b      	ldrh	r3, [r3, #2]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d10c      	bne.n	800adfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f910 	bl	800b010 <USBD_CtlSendStatus>
      }
      break;
 800adf0:	e004      	b.n	800adfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f840 	bl	800ae7a <USBD_CtlError>
      break;
 800adfa:	e000      	b.n	800adfe <USBD_ClrFeature+0x3c>
      break;
 800adfc:	bf00      	nop
  }
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	781a      	ldrb	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fa41 	bl	800a2b8 <SWAPBYTE>
 800ae36:	4603      	mov	r3, r0
 800ae38:	461a      	mov	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3301      	adds	r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7ff fa34 	bl	800a2b8 <SWAPBYTE>
 800ae50:	4603      	mov	r3, r0
 800ae52:	461a      	mov	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3301      	adds	r3, #1
 800ae62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff fa27 	bl	800a2b8 <SWAPBYTE>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	80da      	strh	r2, [r3, #6]
}
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae84:	2180      	movs	r1, #128	; 0x80
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f006 fd86 	bl	8011998 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f006 fd82 	bl	8011998 <USBD_LL_StallEP>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d036      	beq.n	800af20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aeb6:	6938      	ldr	r0, [r7, #16]
 800aeb8:	f000 f836 	bl	800af28 <USBD_GetLen>
 800aebc:	4603      	mov	r3, r0
 800aebe:	3301      	adds	r3, #1
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4413      	add	r3, r2
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	3301      	adds	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4413      	add	r3, r2
 800aee2:	2203      	movs	r2, #3
 800aee4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	3301      	adds	r3, #1
 800aeea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aeec:	e013      	b.n	800af16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	4413      	add	r3, r2
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	7812      	ldrb	r2, [r2, #0]
 800aef8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3301      	adds	r3, #1
 800aefe:	613b      	str	r3, [r7, #16]
    idx++;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	3301      	adds	r3, #1
 800af04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	4413      	add	r3, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	3301      	adds	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e7      	bne.n	800aeee <USBD_GetString+0x52>
 800af1e:	e000      	b.n	800af22 <USBD_GetString+0x86>
    return;
 800af20:	bf00      	nop
  }
}
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af38:	e005      	b.n	800af46 <USBD_GetLen+0x1e>
  {
    len++;
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	3301      	adds	r3, #1
 800af3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3301      	adds	r3, #1
 800af44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f5      	bne.n	800af3a <USBD_GetLen+0x12>
  }

  return len;
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2202      	movs	r2, #2
 800af6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	2100      	movs	r1, #0
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f006 fd91 	bl	8011aaa <USBD_LL_Transmit>

  return USBD_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	2100      	movs	r1, #0
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f006 fd80 	bl	8011aaa <USBD_LL_Transmit>

  return USBD_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2203      	movs	r2, #3
 800afc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	2100      	movs	r1, #0
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f006 fd84 	bl	8011aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f006 fd73 	bl	8011aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2204      	movs	r2, #4
 800b01c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b020:	2300      	movs	r3, #0
 800b022:	2200      	movs	r2, #0
 800b024:	2100      	movs	r1, #0
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f006 fd3f 	bl	8011aaa <USBD_LL_Transmit>

  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2205      	movs	r2, #5
 800b042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b046:	2300      	movs	r3, #0
 800b048:	2200      	movs	r2, #0
 800b04a:	2100      	movs	r1, #0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f006 fd4d 	bl	8011aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	4603      	mov	r3, r0
 800b064:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	4a08      	ldr	r2, [pc, #32]	; (800b08c <disk_status+0x30>)
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	79fa      	ldrb	r2, [r7, #7]
 800b074:	4905      	ldr	r1, [pc, #20]	; (800b08c <disk_status+0x30>)
 800b076:	440a      	add	r2, r1
 800b078:	7a12      	ldrb	r2, [r2, #8]
 800b07a:	4610      	mov	r0, r2
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2000191c 	.word	0x2000191c

0800b090 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	4a0d      	ldr	r2, [pc, #52]	; (800b0d8 <disk_initialize+0x48>)
 800b0a2:	5cd3      	ldrb	r3, [r2, r3]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d111      	bne.n	800b0cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	4a0b      	ldr	r2, [pc, #44]	; (800b0d8 <disk_initialize+0x48>)
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	4a09      	ldr	r2, [pc, #36]	; (800b0d8 <disk_initialize+0x48>)
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	79fa      	ldrb	r2, [r7, #7]
 800b0be:	4906      	ldr	r1, [pc, #24]	; (800b0d8 <disk_initialize+0x48>)
 800b0c0:	440a      	add	r2, r1
 800b0c2:	7a12      	ldrb	r2, [r2, #8]
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	2000191c 	.word	0x2000191c

0800b0dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	4a0a      	ldr	r2, [pc, #40]	; (800b118 <disk_read+0x3c>)
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	689c      	ldr	r4, [r3, #8]
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	4a07      	ldr	r2, [pc, #28]	; (800b118 <disk_read+0x3c>)
 800b0fc:	4413      	add	r3, r2
 800b0fe:	7a18      	ldrb	r0, [r3, #8]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	47a0      	blx	r4
 800b108:	4603      	mov	r3, r0
 800b10a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	bf00      	nop
 800b118:	2000191c 	.word	0x2000191c

0800b11c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b11c:	b590      	push	{r4, r7, lr}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <disk_write+0x3c>)
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	68dc      	ldr	r4, [r3, #12]
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	4a07      	ldr	r2, [pc, #28]	; (800b158 <disk_write+0x3c>)
 800b13c:	4413      	add	r3, r2
 800b13e:	7a18      	ldrb	r0, [r3, #8]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	47a0      	blx	r4
 800b148:	4603      	mov	r3, r0
 800b14a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	371c      	adds	r7, #28
 800b152:	46bd      	mov	sp, r7
 800b154:	bd90      	pop	{r4, r7, pc}
 800b156:	bf00      	nop
 800b158:	2000191c 	.word	0x2000191c

0800b15c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	603a      	str	r2, [r7, #0]
 800b166:	71fb      	strb	r3, [r7, #7]
 800b168:	460b      	mov	r3, r1
 800b16a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <disk_ioctl+0x38>)
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	79fa      	ldrb	r2, [r7, #7]
 800b17a:	4906      	ldr	r1, [pc, #24]	; (800b194 <disk_ioctl+0x38>)
 800b17c:	440a      	add	r2, r1
 800b17e:	7a10      	ldrb	r0, [r2, #8]
 800b180:	79b9      	ldrb	r1, [r7, #6]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4798      	blx	r3
 800b186:	4603      	mov	r3, r0
 800b188:	73fb      	strb	r3, [r7, #15]
  return res;
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	2000191c 	.word	0x2000191c

0800b198 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b1a8:	89fb      	ldrh	r3, [r7, #14]
 800b1aa:	021b      	lsls	r3, r3, #8
 800b1ac:	b21a      	sxth	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	b21b      	sxth	r3, r3
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b21b      	sxth	r3, r3
 800b1b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b1ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3303      	adds	r3, #3
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	3202      	adds	r2, #2
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	3201      	adds	r2, #1
 800b1ee:	7812      	ldrb	r2, [r2, #0]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7812      	ldrb	r2, [r2, #0]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800b200:	68fb      	ldr	r3, [r7, #12]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	887a      	ldrh	r2, [r7, #2]
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]
 800b226:	887b      	ldrh	r3, [r7, #2]
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	887a      	ldrh	r2, [r7, #2]
 800b234:	b2d2      	uxtb	r2, r2
 800b236:	701a      	strb	r2, [r3, #0]
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	0a1b      	lsrs	r3, r3, #8
 800b25e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	0a1b      	lsrs	r3, r3, #8
 800b282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00d      	beq.n	800b2d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	1c53      	adds	r3, r2, #1
 800b2ba:	613b      	str	r3, [r7, #16]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	1c59      	adds	r1, r3, #1
 800b2c0:	6179      	str	r1, [r7, #20]
 800b2c2:	7812      	ldrb	r2, [r2, #0]
 800b2c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	607b      	str	r3, [r7, #4]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1f1      	bne.n	800b2b6 <mem_cpy+0x1a>
	}
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	617a      	str	r2, [r7, #20]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	607b      	str	r3, [r7, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1f3      	bne.n	800b2ee <mem_set+0x10>
}
 800b306:	bf00      	nop
 800b308:	bf00      	nop
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b314:	b480      	push	{r7}
 800b316:	b089      	sub	sp, #36	; 0x24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	61fa      	str	r2, [r7, #28]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	61ba      	str	r2, [r7, #24]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	1acb      	subs	r3, r1, r3
 800b340:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	607b      	str	r3, [r7, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <mem_cmp+0x40>
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d0eb      	beq.n	800b32c <mem_cmp+0x18>

	return r;
 800b354:	697b      	ldr	r3, [r7, #20]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3724      	adds	r7, #36	; 0x24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b36c:	e002      	b.n	800b374 <chk_chr+0x12>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3301      	adds	r3, #1
 800b372:	607b      	str	r3, [r7, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <chk_chr+0x26>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	4293      	cmp	r3, r2
 800b386:	d1f2      	bne.n	800b36e <chk_chr+0xc>
	return *str;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	781b      	ldrb	r3, [r3, #0]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d009      	beq.n	800b3ba <lock_fs+0x22>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f002 fa76 	bl	800d89c <ff_req_grant>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <lock_fs+0x22>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <lock_fs+0x24>
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00d      	beq.n	800b3f2 <unlock_fs+0x2e>
 800b3d6:	78fb      	ldrb	r3, [r7, #3]
 800b3d8:	2b0c      	cmp	r3, #12
 800b3da:	d00a      	beq.n	800b3f2 <unlock_fs+0x2e>
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	2b0b      	cmp	r3, #11
 800b3e0:	d007      	beq.n	800b3f2 <unlock_fs+0x2e>
 800b3e2:	78fb      	ldrb	r3, [r7, #3]
 800b3e4:	2b0f      	cmp	r3, #15
 800b3e6:	d004      	beq.n	800b3f2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f002 fa6a 	bl	800d8c6 <ff_rel_grant>
	}
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b406:	2300      	movs	r3, #0
 800b408:	60bb      	str	r3, [r7, #8]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	e029      	b.n	800b464 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b410:	4a27      	ldr	r2, [pc, #156]	; (800b4b0 <chk_lock+0xb4>)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	011b      	lsls	r3, r3, #4
 800b416:	4413      	add	r3, r2
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d01d      	beq.n	800b45a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b41e:	4a24      	ldr	r2, [pc, #144]	; (800b4b0 <chk_lock+0xb4>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	4413      	add	r3, r2
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d116      	bne.n	800b45e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b430:	4a1f      	ldr	r2, [pc, #124]	; (800b4b0 <chk_lock+0xb4>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	4413      	add	r3, r2
 800b438:	3304      	adds	r3, #4
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b440:	429a      	cmp	r2, r3
 800b442:	d10c      	bne.n	800b45e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b444:	4a1a      	ldr	r2, [pc, #104]	; (800b4b0 <chk_lock+0xb4>)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	4413      	add	r3, r2
 800b44c:	3308      	adds	r3, #8
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b454:	429a      	cmp	r2, r3
 800b456:	d102      	bne.n	800b45e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b458:	e007      	b.n	800b46a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b45a:	2301      	movs	r3, #1
 800b45c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d9d2      	bls.n	800b410 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d109      	bne.n	800b484 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <chk_lock+0x80>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d101      	bne.n	800b480 <chk_lock+0x84>
 800b47c:	2300      	movs	r3, #0
 800b47e:	e010      	b.n	800b4a2 <chk_lock+0xa6>
 800b480:	2312      	movs	r3, #18
 800b482:	e00e      	b.n	800b4a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d108      	bne.n	800b49c <chk_lock+0xa0>
 800b48a:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <chk_lock+0xb4>)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	4413      	add	r3, r2
 800b492:	330c      	adds	r3, #12
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49a:	d101      	bne.n	800b4a0 <chk_lock+0xa4>
 800b49c:	2310      	movs	r3, #16
 800b49e:	e000      	b.n	800b4a2 <chk_lock+0xa6>
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	200018fc 	.word	0x200018fc

0800b4b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	e002      	b.n	800b4c6 <enq_lock+0x12>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	607b      	str	r3, [r7, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d806      	bhi.n	800b4da <enq_lock+0x26>
 800b4cc:	4a09      	ldr	r2, [pc, #36]	; (800b4f4 <enq_lock+0x40>)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	4413      	add	r3, r2
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1f2      	bne.n	800b4c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	bf14      	ite	ne
 800b4e0:	2301      	movne	r3, #1
 800b4e2:	2300      	moveq	r3, #0
 800b4e4:	b2db      	uxtb	r3, r3
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	200018fc 	.word	0x200018fc

0800b4f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	e01f      	b.n	800b548 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b508:	4a41      	ldr	r2, [pc, #260]	; (800b610 <inc_lock+0x118>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	4413      	add	r3, r2
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d113      	bne.n	800b542 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b51a:	4a3d      	ldr	r2, [pc, #244]	; (800b610 <inc_lock+0x118>)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	4413      	add	r3, r2
 800b522:	3304      	adds	r3, #4
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d109      	bne.n	800b542 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b52e:	4a38      	ldr	r2, [pc, #224]	; (800b610 <inc_lock+0x118>)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	4413      	add	r3, r2
 800b536:	3308      	adds	r3, #8
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b53e:	429a      	cmp	r2, r3
 800b540:	d006      	beq.n	800b550 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d9dc      	bls.n	800b508 <inc_lock+0x10>
 800b54e:	e000      	b.n	800b552 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b550:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d132      	bne.n	800b5be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	e002      	b.n	800b564 <inc_lock+0x6c>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d806      	bhi.n	800b578 <inc_lock+0x80>
 800b56a:	4a29      	ldr	r2, [pc, #164]	; (800b610 <inc_lock+0x118>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	4413      	add	r3, r2
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1f2      	bne.n	800b55e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d101      	bne.n	800b582 <inc_lock+0x8a>
 800b57e:	2300      	movs	r3, #0
 800b580:	e040      	b.n	800b604 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	4922      	ldr	r1, [pc, #136]	; (800b610 <inc_lock+0x118>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	440b      	add	r3, r1
 800b58e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	689a      	ldr	r2, [r3, #8]
 800b594:	491e      	ldr	r1, [pc, #120]	; (800b610 <inc_lock+0x118>)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	440b      	add	r3, r1
 800b59c:	3304      	adds	r3, #4
 800b59e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695a      	ldr	r2, [r3, #20]
 800b5a4:	491a      	ldr	r1, [pc, #104]	; (800b610 <inc_lock+0x118>)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	440b      	add	r3, r1
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b5b0:	4a17      	ldr	r2, [pc, #92]	; (800b610 <inc_lock+0x118>)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	4413      	add	r3, r2
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <inc_lock+0xe0>
 800b5c4:	4a12      	ldr	r2, [pc, #72]	; (800b610 <inc_lock+0x118>)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	011b      	lsls	r3, r3, #4
 800b5ca:	4413      	add	r3, r2
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <inc_lock+0xe0>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e015      	b.n	800b604 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d108      	bne.n	800b5f0 <inc_lock+0xf8>
 800b5de:	4a0c      	ldr	r2, [pc, #48]	; (800b610 <inc_lock+0x118>)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	011b      	lsls	r3, r3, #4
 800b5e4:	4413      	add	r3, r2
 800b5e6:	330c      	adds	r3, #12
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	e001      	b.n	800b5f4 <inc_lock+0xfc>
 800b5f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5f4:	4906      	ldr	r1, [pc, #24]	; (800b610 <inc_lock+0x118>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	011b      	lsls	r3, r3, #4
 800b5fa:	440b      	add	r3, r1
 800b5fc:	330c      	adds	r3, #12
 800b5fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3301      	adds	r3, #1
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	200018fc 	.word	0x200018fc

0800b614 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	e010      	b.n	800b644 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b622:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <clear_lock+0x44>)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	011b      	lsls	r3, r3, #4
 800b628:	4413      	add	r3, r2
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d105      	bne.n	800b63e <clear_lock+0x2a>
 800b632:	4a09      	ldr	r2, [pc, #36]	; (800b658 <clear_lock+0x44>)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	4413      	add	r3, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d9eb      	bls.n	800b622 <clear_lock+0xe>
	}
}
 800b64a:	bf00      	nop
 800b64c:	bf00      	nop
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	200018fc 	.word	0x200018fc

0800b65c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	78db      	ldrb	r3, [r3, #3]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d034      	beq.n	800b6da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b674:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7858      	ldrb	r0, [r3, #1]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b680:	2301      	movs	r3, #1
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	f7ff fd4a 	bl	800b11c <disk_write>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b68e:	2301      	movs	r3, #1
 800b690:	73fb      	strb	r3, [r7, #15]
 800b692:	e022      	b.n	800b6da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	1ad2      	subs	r2, r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d217      	bcs.n	800b6da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	789b      	ldrb	r3, [r3, #2]
 800b6ae:	613b      	str	r3, [r7, #16]
 800b6b0:	e010      	b.n	800b6d4 <sync_window+0x78>
					wsect += fs->fsize;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7858      	ldrb	r0, [r3, #1]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	f7ff fd27 	bl	800b11c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d8eb      	bhi.n	800b6b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d01b      	beq.n	800b734 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ffad 	bl	800b65c <sync_window>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d113      	bne.n	800b734 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7858      	ldrb	r0, [r3, #1]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b716:	2301      	movs	r3, #1
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	f7ff fcdf 	bl	800b0dc <disk_read>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b724:	f04f 33ff 	mov.w	r3, #4294967295
 800b728:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b73e:	b480      	push	{r7}
 800b740:	b083      	sub	sp, #12
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	3b02      	subs	r3, #2
 800b74c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	3b02      	subs	r3, #2
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d301      	bcc.n	800b75e <clust2sect+0x20>
 800b75a:	2300      	movs	r3, #0
 800b75c:	e008      	b.n	800b770 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	461a      	mov	r2, r3
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	fb03 f202 	mul.w	r2, r3, r2
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76e:	4413      	add	r3, r2
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d904      	bls.n	800b79c <get_fat+0x20>
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b79c:	2301      	movs	r3, #1
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e0bb      	b.n	800b91a <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	f000 8083 	beq.w	800b8b8 <get_fat+0x13c>
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	f300 80a7 	bgt.w	800b906 <get_fat+0x18a>
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d002      	beq.n	800b7c2 <get_fat+0x46>
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d056      	beq.n	800b86e <get_fat+0xf2>
 800b7c0:	e0a1      	b.n	800b906 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	085b      	lsrs	r3, r3, #1
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	899b      	ldrh	r3, [r3, #12]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7e0:	4413      	add	r3, r2
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6938      	ldr	r0, [r7, #16]
 800b7e6:	f7ff ff7d 	bl	800b6e4 <move_window>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 808d 	bne.w	800b90c <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	60fa      	str	r2, [r7, #12]
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	8992      	ldrh	r2, [r2, #12]
 800b7fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b800:	fb01 f202 	mul.w	r2, r1, r2
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4413      	add	r3, r2
 800b80a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b80e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	899b      	ldrh	r3, [r3, #12]
 800b818:	4619      	mov	r1, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b820:	4413      	add	r3, r2
 800b822:	4619      	mov	r1, r3
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f7ff ff5d 	bl	800b6e4 <move_window>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d16f      	bne.n	800b910 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	899b      	ldrh	r3, [r3, #12]
 800b834:	461a      	mov	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	fbb3 f1f2 	udiv	r1, r3, r2
 800b83c:	fb01 f202 	mul.w	r2, r1, r2
 800b840:	1a9b      	subs	r3, r3, r2
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	4413      	add	r3, r2
 800b846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	461a      	mov	r2, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	4313      	orrs	r3, r2
 800b852:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <get_fat+0xe8>
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	091b      	lsrs	r3, r3, #4
 800b862:	e002      	b.n	800b86a <get_fat+0xee>
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b86a:	617b      	str	r3, [r7, #20]
			break;
 800b86c:	e055      	b.n	800b91a <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	899b      	ldrh	r3, [r3, #12]
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	b29b      	uxth	r3, r3
 800b87a:	4619      	mov	r1, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b882:	4413      	add	r3, r2
 800b884:	4619      	mov	r1, r3
 800b886:	6938      	ldr	r0, [r7, #16]
 800b888:	f7ff ff2c 	bl	800b6e4 <move_window>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d140      	bne.n	800b914 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	8992      	ldrh	r2, [r2, #12]
 800b8a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8a4:	fb00 f202 	mul.w	r2, r0, r2
 800b8a8:	1a9b      	subs	r3, r3, r2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fc73 	bl	800b198 <ld_word>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	617b      	str	r3, [r7, #20]
			break;
 800b8b6:	e030      	b.n	800b91a <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	899b      	ldrh	r3, [r3, #12]
 800b8c0:	089b      	lsrs	r3, r3, #2
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8cc:	4413      	add	r3, r2
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6938      	ldr	r0, [r7, #16]
 800b8d2:	f7ff ff07 	bl	800b6e4 <move_window>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d11d      	bne.n	800b918 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	8992      	ldrh	r2, [r2, #12]
 800b8ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8ee:	fb00 f202 	mul.w	r2, r0, r2
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff fc66 	bl	800b1c8 <ld_dword>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b902:	617b      	str	r3, [r7, #20]
			break;
 800b904:	e009      	b.n	800b91a <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b906:	2301      	movs	r3, #1
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	e006      	b.n	800b91a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b90c:	bf00      	nop
 800b90e:	e004      	b.n	800b91a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b910:	bf00      	nop
 800b912:	e002      	b.n	800b91a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b914:	bf00      	nop
 800b916:	e000      	b.n	800b91a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b918:	bf00      	nop
		}
	}

	return val;
 800b91a:	697b      	ldr	r3, [r7, #20]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b089      	sub	sp, #36	; 0x24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b930:	2302      	movs	r3, #2
 800b932:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b01      	cmp	r3, #1
 800b938:	f240 8102 	bls.w	800bb40 <put_fat+0x21c>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	429a      	cmp	r2, r3
 800b944:	f080 80fc 	bcs.w	800bb40 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	f000 80b6 	beq.w	800babe <put_fat+0x19a>
 800b952:	2b03      	cmp	r3, #3
 800b954:	f300 80fd 	bgt.w	800bb52 <put_fat+0x22e>
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d003      	beq.n	800b964 <put_fat+0x40>
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	f000 8083 	beq.w	800ba68 <put_fat+0x144>
 800b962:	e0f6      	b.n	800bb52 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	61bb      	str	r3, [r7, #24]
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	085b      	lsrs	r3, r3, #1
 800b96c:	69ba      	ldr	r2, [r7, #24]
 800b96e:	4413      	add	r3, r2
 800b970:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	899b      	ldrh	r3, [r3, #12]
 800b97a:	4619      	mov	r1, r3
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b982:	4413      	add	r3, r2
 800b984:	4619      	mov	r1, r3
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff feac 	bl	800b6e4 <move_window>
 800b98c:	4603      	mov	r3, r0
 800b98e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b990:	7ffb      	ldrb	r3, [r7, #31]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f040 80d6 	bne.w	800bb44 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	61ba      	str	r2, [r7, #24]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	8992      	ldrh	r2, [r2, #12]
 800b9a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9ac:	fb00 f202 	mul.w	r2, r0, r2
 800b9b0:	1a9b      	subs	r3, r3, r2
 800b9b2:	440b      	add	r3, r1
 800b9b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00d      	beq.n	800b9dc <put_fat+0xb8>
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	b25a      	sxtb	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	b25b      	sxtb	r3, r3
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	b25b      	sxtb	r3, r3
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	e001      	b.n	800b9e0 <put_fat+0xbc>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	899b      	ldrh	r3, [r3, #12]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9fa:	4413      	add	r3, r2
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff fe70 	bl	800b6e4 <move_window>
 800ba04:	4603      	mov	r3, r0
 800ba06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba08:	7ffb      	ldrb	r3, [r7, #31]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f040 809c 	bne.w	800bb48 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	899b      	ldrh	r3, [r3, #12]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba22:	fb00 f202 	mul.w	r2, r0, r2
 800ba26:	1a9b      	subs	r3, r3, r2
 800ba28:	440b      	add	r3, r1
 800ba2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <put_fat+0x11a>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	091b      	lsrs	r3, r3, #4
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	e00e      	b.n	800ba5c <put_fat+0x138>
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b25b      	sxtb	r3, r3
 800ba44:	f023 030f 	bic.w	r3, r3, #15
 800ba48:	b25a      	sxtb	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	0a1b      	lsrs	r3, r3, #8
 800ba4e:	b25b      	sxtb	r3, r3
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	b25b      	sxtb	r3, r3
 800ba56:	4313      	orrs	r3, r2
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	70da      	strb	r2, [r3, #3]
			break;
 800ba66:	e074      	b.n	800bb52 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	085b      	lsrs	r3, r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4619      	mov	r1, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba7c:	4413      	add	r3, r2
 800ba7e:	4619      	mov	r1, r3
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fe2f 	bl	800b6e4 <move_window>
 800ba86:	4603      	mov	r3, r0
 800ba88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba8a:	7ffb      	ldrb	r3, [r7, #31]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d15d      	bne.n	800bb4c <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	8992      	ldrh	r2, [r2, #12]
 800ba9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800baa2:	fb00 f202 	mul.w	r2, r0, r2
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	440b      	add	r3, r1
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	b292      	uxth	r2, r2
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff fbac 	bl	800b20e <st_word>
			fs->wflag = 1;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2201      	movs	r2, #1
 800baba:	70da      	strb	r2, [r3, #3]
			break;
 800babc:	e049      	b.n	800bb52 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	899b      	ldrh	r3, [r3, #12]
 800bac6:	089b      	lsrs	r3, r3, #2
 800bac8:	b29b      	uxth	r3, r3
 800baca:	4619      	mov	r1, r3
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	fbb3 f3f1 	udiv	r3, r3, r1
 800bad2:	4413      	add	r3, r2
 800bad4:	4619      	mov	r1, r3
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7ff fe04 	bl	800b6e4 <move_window>
 800badc:	4603      	mov	r3, r0
 800bade:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bae0:	7ffb      	ldrb	r3, [r7, #31]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d134      	bne.n	800bb50 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	8992      	ldrh	r2, [r2, #12]
 800bafa:	fbb3 f0f2 	udiv	r0, r3, r2
 800bafe:	fb00 f202 	mul.w	r2, r0, r2
 800bb02:	1a9b      	subs	r3, r3, r2
 800bb04:	440b      	add	r3, r1
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff fb5e 	bl	800b1c8 <ld_dword>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bb12:	4323      	orrs	r3, r4
 800bb14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	8992      	ldrh	r2, [r2, #12]
 800bb24:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb28:	fb00 f202 	mul.w	r2, r0, r2
 800bb2c:	1a9b      	subs	r3, r3, r2
 800bb2e:	440b      	add	r3, r1
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff fb86 	bl	800b244 <st_dword>
			fs->wflag = 1;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	70da      	strb	r2, [r3, #3]
			break;
 800bb3e:	e008      	b.n	800bb52 <put_fat+0x22e>
		}
	}
 800bb40:	bf00      	nop
 800bb42:	e006      	b.n	800bb52 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb44:	bf00      	nop
 800bb46:	e004      	b.n	800bb52 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb48:	bf00      	nop
 800bb4a:	e002      	b.n	800bb52 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb4c:	bf00      	nop
 800bb4e:	e000      	b.n	800bb52 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb50:	bf00      	nop
	return res;
 800bb52:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3724      	adds	r7, #36	; 0x24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd90      	pop	{r4, r7, pc}

0800bb5c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d904      	bls.n	800bb82 <remove_chain+0x26>
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d301      	bcc.n	800bb86 <remove_chain+0x2a>
 800bb82:	2302      	movs	r3, #2
 800bb84:	e04b      	b.n	800bc1e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00c      	beq.n	800bba6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f7ff fec6 	bl	800b924 <put_fat>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb9c:	7ffb      	ldrb	r3, [r7, #31]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <remove_chain+0x4a>
 800bba2:	7ffb      	ldrb	r3, [r7, #31]
 800bba4:	e03b      	b.n	800bc1e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff fde7 	bl	800b77c <get_fat>
 800bbae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d031      	beq.n	800bc1a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d101      	bne.n	800bbc0 <remove_chain+0x64>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e02e      	b.n	800bc1e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc6:	d101      	bne.n	800bbcc <remove_chain+0x70>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e028      	b.n	800bc1e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bbcc:	2200      	movs	r2, #0
 800bbce:	68b9      	ldr	r1, [r7, #8]
 800bbd0:	69b8      	ldr	r0, [r7, #24]
 800bbd2:	f7ff fea7 	bl	800b924 <put_fat>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbda:	7ffb      	ldrb	r3, [r7, #31]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <remove_chain+0x88>
 800bbe0:	7ffb      	ldrb	r3, [r7, #31]
 800bbe2:	e01c      	b.n	800bc1e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	699a      	ldr	r2, [r3, #24]
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	3b02      	subs	r3, #2
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d20b      	bcs.n	800bc0a <remove_chain+0xae>
			fs->free_clst++;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	791b      	ldrb	r3, [r3, #4]
 800bc00:	f043 0301 	orr.w	r3, r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d3c6      	bcc.n	800bba6 <remove_chain+0x4a>
 800bc18:	e000      	b.n	800bc1c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc1a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b088      	sub	sp, #32
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <create_chain+0x2c>
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d31b      	bcc.n	800bc8a <create_chain+0x64>
 800bc52:	2301      	movs	r3, #1
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	e018      	b.n	800bc8a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fd8e 	bl	800b77c <get_fat>
 800bc60:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d801      	bhi.n	800bc6c <create_chain+0x46>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e070      	b.n	800bd4e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc72:	d101      	bne.n	800bc78 <create_chain+0x52>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	e06a      	b.n	800bd4e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d201      	bcs.n	800bc86 <create_chain+0x60>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	e063      	b.n	800bd4e <create_chain+0x128>
		scl = clst;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	3301      	adds	r3, #1
 800bc92:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d307      	bcc.n	800bcae <create_chain+0x88>
				ncl = 2;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bca2:	69fa      	ldr	r2, [r7, #28]
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d901      	bls.n	800bcae <create_chain+0x88>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e04f      	b.n	800bd4e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bcae:	69f9      	ldr	r1, [r7, #28]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fd63 	bl	800b77c <get_fat>
 800bcb6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00e      	beq.n	800bcdc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d003      	beq.n	800bccc <create_chain+0xa6>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcca:	d101      	bne.n	800bcd0 <create_chain+0xaa>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	e03e      	b.n	800bd4e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcd0:	69fa      	ldr	r2, [r7, #28]
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d1da      	bne.n	800bc8e <create_chain+0x68>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e038      	b.n	800bd4e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bcdc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	69f9      	ldr	r1, [r7, #28]
 800bce4:	6938      	ldr	r0, [r7, #16]
 800bce6:	f7ff fe1d 	bl	800b924 <put_fat>
 800bcea:	4603      	mov	r3, r0
 800bcec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d109      	bne.n	800bd08 <create_chain+0xe2>
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d006      	beq.n	800bd08 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcfa:	69fa      	ldr	r2, [r7, #28]
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6938      	ldr	r0, [r7, #16]
 800bd00:	f7ff fe10 	bl	800b924 <put_fat>
 800bd04:	4603      	mov	r3, r0
 800bd06:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d116      	bne.n	800bd3c <create_chain+0x116>
		fs->last_clst = ncl;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	69fa      	ldr	r2, [r7, #28]
 800bd12:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	699a      	ldr	r2, [r3, #24]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	3b02      	subs	r3, #2
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d804      	bhi.n	800bd2c <create_chain+0x106>
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	1e5a      	subs	r2, r3, #1
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	791b      	ldrb	r3, [r3, #4]
 800bd30:	f043 0301 	orr.w	r3, r3, #1
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	711a      	strb	r2, [r3, #4]
 800bd3a:	e007      	b.n	800bd4c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d102      	bne.n	800bd48 <create_chain+0x122>
 800bd42:	f04f 33ff 	mov.w	r3, #4294967295
 800bd46:	e000      	b.n	800bd4a <create_chain+0x124>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd4c:	69fb      	ldr	r3, [r7, #28]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3720      	adds	r7, #32
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b086      	sub	sp, #24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd6c:	d204      	bcs.n	800bd78 <dir_sdi+0x22>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	f003 031f 	and.w	r3, r3, #31
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <dir_sdi+0x26>
		return FR_INT_ERR;
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e071      	b.n	800be60 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <dir_sdi+0x46>
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d902      	bls.n	800bd9c <dir_sdi+0x46>
		clst = fs->dirbase;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	095b      	lsrs	r3, r3, #5
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	8912      	ldrh	r2, [r2, #8]
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d301      	bcc.n	800bdb2 <dir_sdi+0x5c>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e056      	b.n	800be60 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	61da      	str	r2, [r3, #28]
 800bdba:	e02d      	b.n	800be18 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	895b      	ldrh	r3, [r3, #10]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	899b      	ldrh	r3, [r3, #12]
 800bdc6:	fb02 f303 	mul.w	r3, r2, r3
 800bdca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdcc:	e019      	b.n	800be02 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6979      	ldr	r1, [r7, #20]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fcd2 	bl	800b77c <get_fat>
 800bdd8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d101      	bne.n	800bde6 <dir_sdi+0x90>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e03c      	b.n	800be60 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d904      	bls.n	800bdf6 <dir_sdi+0xa0>
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d301      	bcc.n	800bdfa <dir_sdi+0xa4>
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	e032      	b.n	800be60 <dir_sdi+0x10a>
			ofs -= csz;
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	429a      	cmp	r2, r3
 800be08:	d2e1      	bcs.n	800bdce <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800be0a:	6979      	ldr	r1, [r7, #20]
 800be0c:	6938      	ldr	r0, [r7, #16]
 800be0e:	f7ff fc96 	bl	800b73e <clust2sect>
 800be12:	4602      	mov	r2, r0
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <dir_sdi+0xd4>
 800be26:	2302      	movs	r3, #2
 800be28:	e01a      	b.n	800be60 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69da      	ldr	r2, [r3, #28]
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	899b      	ldrh	r3, [r3, #12]
 800be32:	4619      	mov	r1, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	fbb3 f3f1 	udiv	r3, r3, r1
 800be3a:	441a      	add	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	899b      	ldrh	r3, [r3, #12]
 800be4a:	461a      	mov	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800be52:	fb00 f202 	mul.w	r2, r0, r2
 800be56:	1a9b      	subs	r3, r3, r2
 800be58:	18ca      	adds	r2, r1, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	3320      	adds	r3, #32
 800be7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d003      	beq.n	800be90 <dir_next+0x28>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be8e:	d301      	bcc.n	800be94 <dir_next+0x2c>
 800be90:	2304      	movs	r3, #4
 800be92:	e0bb      	b.n	800c00c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	899b      	ldrh	r3, [r3, #12]
 800be98:	461a      	mov	r2, r3
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bea0:	fb01 f202 	mul.w	r2, r1, r2
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f040 809d 	bne.w	800bfe6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	69db      	ldr	r3, [r3, #28]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10b      	bne.n	800bed6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	095b      	lsrs	r3, r3, #5
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	8912      	ldrh	r2, [r2, #8]
 800bec6:	4293      	cmp	r3, r2
 800bec8:	f0c0 808d 	bcc.w	800bfe6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	61da      	str	r2, [r3, #28]
 800bed2:	2304      	movs	r3, #4
 800bed4:	e09a      	b.n	800c00c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	899b      	ldrh	r3, [r3, #12]
 800beda:	461a      	mov	r2, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	fbb3 f3f2 	udiv	r3, r3, r2
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	8952      	ldrh	r2, [r2, #10]
 800bee6:	3a01      	subs	r2, #1
 800bee8:	4013      	ands	r3, r2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d17b      	bne.n	800bfe6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	4619      	mov	r1, r3
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7ff fc40 	bl	800b77c <get_fat>
 800befc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d801      	bhi.n	800bf08 <dir_next+0xa0>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e081      	b.n	800c00c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d101      	bne.n	800bf14 <dir_next+0xac>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e07b      	b.n	800c00c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d359      	bcc.n	800bfd2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d104      	bne.n	800bf2e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	61da      	str	r2, [r3, #28]
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	e06e      	b.n	800c00c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	4619      	mov	r1, r3
 800bf36:	4610      	mov	r0, r2
 800bf38:	f7ff fe75 	bl	800bc26 <create_chain>
 800bf3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <dir_next+0xe0>
 800bf44:	2307      	movs	r3, #7
 800bf46:	e061      	b.n	800c00c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <dir_next+0xea>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e05c      	b.n	800c00c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf58:	d101      	bne.n	800bf5e <dir_next+0xf6>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e056      	b.n	800c00c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7ff fb7c 	bl	800b65c <sync_window>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <dir_next+0x106>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e04e      	b.n	800c00c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	899b      	ldrh	r3, [r3, #12]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	f7ff f9af 	bl	800b2de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf80:	2300      	movs	r3, #0
 800bf82:	613b      	str	r3, [r7, #16]
 800bf84:	6979      	ldr	r1, [r7, #20]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff fbd9 	bl	800b73e <clust2sect>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	635a      	str	r2, [r3, #52]	; 0x34
 800bf92:	e012      	b.n	800bfba <dir_next+0x152>
						fs->wflag = 1;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7ff fb5e 	bl	800b65c <sync_window>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <dir_next+0x142>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e030      	b.n	800c00c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3301      	adds	r3, #1
 800bfae:	613b      	str	r3, [r7, #16]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	635a      	str	r2, [r3, #52]	; 0x34
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	895b      	ldrh	r3, [r3, #10]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d3e6      	bcc.n	800bf94 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad2      	subs	r2, r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bfd8:	6979      	ldr	r1, [r7, #20]
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7ff fbaf 	bl	800b73e <clust2sect>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	899b      	ldrh	r3, [r3, #12]
 800bff6:	461a      	mov	r2, r3
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	fbb3 f0f2 	udiv	r0, r3, r2
 800bffe:	fb00 f202 	mul.w	r2, r0, r2
 800c002:	1a9b      	subs	r3, r3, r2
 800c004:	18ca      	adds	r2, r1, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c024:	2100      	movs	r1, #0
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff fe95 	bl	800bd56 <dir_sdi>
 800c02c:	4603      	mov	r3, r0
 800c02e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d12b      	bne.n	800c08e <dir_alloc+0x7a>
		n = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	69db      	ldr	r3, [r3, #28]
 800c03e:	4619      	mov	r1, r3
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff fb4f 	bl	800b6e4 <move_window>
 800c046:	4603      	mov	r3, r0
 800c048:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d11d      	bne.n	800c08c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2be5      	cmp	r3, #229	; 0xe5
 800c058:	d004      	beq.n	800c064 <dir_alloc+0x50>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d107      	bne.n	800c074 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	3301      	adds	r3, #1
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d102      	bne.n	800c078 <dir_alloc+0x64>
 800c072:	e00c      	b.n	800c08e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c074:	2300      	movs	r3, #0
 800c076:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c078:	2101      	movs	r1, #1
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fef4 	bl	800be68 <dir_next>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0d7      	beq.n	800c03a <dir_alloc+0x26>
 800c08a:	e000      	b.n	800c08e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c08c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b04      	cmp	r3, #4
 800c092:	d101      	bne.n	800c098 <dir_alloc+0x84>
 800c094:	2307      	movs	r3, #7
 800c096:	75fb      	strb	r3, [r7, #23]
	return res;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	331a      	adds	r3, #26
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff f871 	bl	800b198 <ld_word>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d109      	bne.n	800c0d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	3314      	adds	r3, #20
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff f866 	bl	800b198 <ld_word>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	331a      	adds	r3, #26
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7ff f889 	bl	800b20e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b03      	cmp	r3, #3
 800c102:	d109      	bne.n	800c118 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f103 0214 	add.w	r2, r3, #20
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	0c1b      	lsrs	r3, r3, #16
 800c10e:	b29b      	uxth	r3, r3
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f7ff f87b 	bl	800b20e <st_word>
	}
}
 800c118:	bf00      	nop
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c12e:	2100      	movs	r1, #0
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff fe10 	bl	800bd56 <dir_sdi>
 800c136:	4603      	mov	r3, r0
 800c138:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <dir_find+0x24>
 800c140:	7dfb      	ldrb	r3, [r7, #23]
 800c142:	e03e      	b.n	800c1c2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	4619      	mov	r1, r3
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f7ff faca 	bl	800b6e4 <move_window>
 800c150:	4603      	mov	r3, r0
 800c152:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d12f      	bne.n	800c1ba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c162:	7bfb      	ldrb	r3, [r7, #15]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d102      	bne.n	800c16e <dir_find+0x4e>
 800c168:	2304      	movs	r3, #4
 800c16a:	75fb      	strb	r3, [r7, #23]
 800c16c:	e028      	b.n	800c1c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	330b      	adds	r3, #11
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a1b      	ldr	r3, [r3, #32]
 800c184:	330b      	adds	r3, #11
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 0308 	and.w	r3, r3, #8
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <dir_find+0x86>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a18      	ldr	r0, [r3, #32]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3324      	adds	r3, #36	; 0x24
 800c198:	220b      	movs	r2, #11
 800c19a:	4619      	mov	r1, r3
 800c19c:	f7ff f8ba 	bl	800b314 <mem_cmp>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00b      	beq.n	800c1be <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff fe5d 	bl	800be68 <dir_next>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0c5      	beq.n	800c144 <dir_find+0x24>
 800c1b8:	e002      	b.n	800c1c0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c1ba:	bf00      	nop
 800c1bc:	e000      	b.n	800c1c0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1be:	bf00      	nop

	return res;
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c1d8:	2101      	movs	r1, #1
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff ff1a 	bl	800c014 <dir_alloc>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d11c      	bne.n	800c224 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68b8      	ldr	r0, [r7, #8]
 800c1f2:	f7ff fa77 	bl	800b6e4 <move_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d111      	bne.n	800c224 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a1b      	ldr	r3, [r3, #32]
 800c204:	2220      	movs	r2, #32
 800c206:	2100      	movs	r1, #0
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff f868 	bl	800b2de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a18      	ldr	r0, [r3, #32]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3324      	adds	r3, #36	; 0x24
 800c216:	220b      	movs	r2, #11
 800c218:	4619      	mov	r1, r3
 800c21a:	f7ff f83f 	bl	800b29c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2201      	movs	r2, #1
 800c222:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3324      	adds	r3, #36	; 0x24
 800c244:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c246:	220b      	movs	r2, #11
 800c248:	2120      	movs	r1, #32
 800c24a:	68b8      	ldr	r0, [r7, #8]
 800c24c:	f7ff f847 	bl	800b2de <mem_set>
	si = i = 0; ni = 8;
 800c250:	2300      	movs	r3, #0
 800c252:	613b      	str	r3, [r7, #16]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	2308      	movs	r3, #8
 800c25a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	61fa      	str	r2, [r7, #28]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	4413      	add	r3, r2
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c26a:	7efb      	ldrb	r3, [r7, #27]
 800c26c:	2b20      	cmp	r3, #32
 800c26e:	d94e      	bls.n	800c30e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c270:	7efb      	ldrb	r3, [r7, #27]
 800c272:	2b2f      	cmp	r3, #47	; 0x2f
 800c274:	d006      	beq.n	800c284 <create_name+0x54>
 800c276:	7efb      	ldrb	r3, [r7, #27]
 800c278:	2b5c      	cmp	r3, #92	; 0x5c
 800c27a:	d110      	bne.n	800c29e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c27c:	e002      	b.n	800c284 <create_name+0x54>
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	3301      	adds	r3, #1
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	4413      	add	r3, r2
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b2f      	cmp	r3, #47	; 0x2f
 800c28e:	d0f6      	beq.n	800c27e <create_name+0x4e>
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	4413      	add	r3, r2
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b5c      	cmp	r3, #92	; 0x5c
 800c29a:	d0f0      	beq.n	800c27e <create_name+0x4e>
			break;
 800c29c:	e038      	b.n	800c310 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c29e:	7efb      	ldrb	r3, [r7, #27]
 800c2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a2:	d003      	beq.n	800c2ac <create_name+0x7c>
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d30c      	bcc.n	800c2c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2b0b      	cmp	r3, #11
 800c2b0:	d002      	beq.n	800c2b8 <create_name+0x88>
 800c2b2:	7efb      	ldrb	r3, [r7, #27]
 800c2b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c2b6:	d001      	beq.n	800c2bc <create_name+0x8c>
 800c2b8:	2306      	movs	r3, #6
 800c2ba:	e044      	b.n	800c346 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c2bc:	2308      	movs	r3, #8
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	230b      	movs	r3, #11
 800c2c2:	617b      	str	r3, [r7, #20]
			continue;
 800c2c4:	e022      	b.n	800c30c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c2c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	da04      	bge.n	800c2d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2ce:	7efb      	ldrb	r3, [r7, #27]
 800c2d0:	3b80      	subs	r3, #128	; 0x80
 800c2d2:	4a1f      	ldr	r2, [pc, #124]	; (800c350 <create_name+0x120>)
 800c2d4:	5cd3      	ldrb	r3, [r2, r3]
 800c2d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c2d8:	7efb      	ldrb	r3, [r7, #27]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	481d      	ldr	r0, [pc, #116]	; (800c354 <create_name+0x124>)
 800c2de:	f7ff f840 	bl	800b362 <chk_chr>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <create_name+0xbc>
 800c2e8:	2306      	movs	r3, #6
 800c2ea:	e02c      	b.n	800c346 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c2ec:	7efb      	ldrb	r3, [r7, #27]
 800c2ee:	2b60      	cmp	r3, #96	; 0x60
 800c2f0:	d905      	bls.n	800c2fe <create_name+0xce>
 800c2f2:	7efb      	ldrb	r3, [r7, #27]
 800c2f4:	2b7a      	cmp	r3, #122	; 0x7a
 800c2f6:	d802      	bhi.n	800c2fe <create_name+0xce>
 800c2f8:	7efb      	ldrb	r3, [r7, #27]
 800c2fa:	3b20      	subs	r3, #32
 800c2fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	613a      	str	r2, [r7, #16]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	4413      	add	r3, r2
 800c308:	7efa      	ldrb	r2, [r7, #27]
 800c30a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c30c:	e7a6      	b.n	800c25c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c30e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	441a      	add	r2, r3
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <create_name+0xf4>
 800c320:	2306      	movs	r3, #6
 800c322:	e010      	b.n	800c346 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2be5      	cmp	r3, #229	; 0xe5
 800c32a:	d102      	bne.n	800c332 <create_name+0x102>
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2205      	movs	r2, #5
 800c330:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c332:	7efb      	ldrb	r3, [r7, #27]
 800c334:	2b20      	cmp	r3, #32
 800c336:	d801      	bhi.n	800c33c <create_name+0x10c>
 800c338:	2204      	movs	r2, #4
 800c33a:	e000      	b.n	800c33e <create_name+0x10e>
 800c33c:	2200      	movs	r2, #0
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	330b      	adds	r3, #11
 800c342:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c344:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c346:	4618      	mov	r0, r3
 800c348:	3720      	adds	r7, #32
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	08012b3c 	.word	0x08012b3c
 800c354:	08012740 	.word	0x08012740

0800c358 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c36c:	e002      	b.n	800c374 <follow_path+0x1c>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	3301      	adds	r3, #1
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b2f      	cmp	r3, #47	; 0x2f
 800c37a:	d0f8      	beq.n	800c36e <follow_path+0x16>
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	2b5c      	cmp	r3, #92	; 0x5c
 800c382:	d0f4      	beq.n	800c36e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	2200      	movs	r2, #0
 800c388:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b1f      	cmp	r3, #31
 800c390:	d80a      	bhi.n	800c3a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2280      	movs	r2, #128	; 0x80
 800c396:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c39a:	2100      	movs	r1, #0
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff fcda 	bl	800bd56 <dir_sdi>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75fb      	strb	r3, [r7, #23]
 800c3a6:	e048      	b.n	800c43a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3a8:	463b      	mov	r3, r7
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ff3f 	bl	800c230 <create_name>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d139      	bne.n	800c430 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7ff feaf 	bl	800c120 <dir_find>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	d12c      	bne.n	800c434 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3da:	7afb      	ldrb	r3, [r7, #11]
 800c3dc:	f003 0304 	and.w	r3, r3, #4
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d127      	bne.n	800c434 <follow_path+0xdc>
 800c3e4:	2305      	movs	r3, #5
 800c3e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c3e8:	e024      	b.n	800c434 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d121      	bne.n	800c438 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	799b      	ldrb	r3, [r3, #6]
 800c3f8:	f003 0310 	and.w	r3, r3, #16
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c400:	2305      	movs	r3, #5
 800c402:	75fb      	strb	r3, [r7, #23]
 800c404:	e019      	b.n	800c43a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	8992      	ldrh	r2, [r2, #12]
 800c414:	fbb3 f0f2 	udiv	r0, r3, r2
 800c418:	fb00 f202 	mul.w	r2, r0, r2
 800c41c:	1a9b      	subs	r3, r3, r2
 800c41e:	440b      	add	r3, r1
 800c420:	4619      	mov	r1, r3
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff fe3d 	bl	800c0a2 <ld_clust>
 800c428:	4602      	mov	r2, r0
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c42e:	e7bb      	b.n	800c3a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c430:	bf00      	nop
 800c432:	e002      	b.n	800c43a <follow_path+0xe2>
				break;
 800c434:	bf00      	nop
 800c436:	e000      	b.n	800c43a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c438:	bf00      	nop
			}
		}
	}

	return res;
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c44c:	f04f 33ff 	mov.w	r3, #4294967295
 800c450:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d031      	beq.n	800c4be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	e002      	b.n	800c468 <get_ldnumber+0x24>
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	3301      	adds	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d903      	bls.n	800c478 <get_ldnumber+0x34>
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b3a      	cmp	r3, #58	; 0x3a
 800c476:	d1f4      	bne.n	800c462 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b3a      	cmp	r3, #58	; 0x3a
 800c47e:	d11c      	bne.n	800c4ba <get_ldnumber+0x76>
			tp = *path;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	60fa      	str	r2, [r7, #12]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	3b30      	subs	r3, #48	; 0x30
 800c490:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b09      	cmp	r3, #9
 800c496:	d80e      	bhi.n	800c4b6 <get_ldnumber+0x72>
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d10a      	bne.n	800c4b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d107      	bne.n	800c4b6 <get_ldnumber+0x72>
					vol = (int)i;
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	e002      	b.n	800c4c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4be:	693b      	ldr	r3, [r7, #16]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	371c      	adds	r7, #28
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	70da      	strb	r2, [r3, #3]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff f8fc 	bl	800b6e4 <move_window>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <check_fs+0x2a>
 800c4f2:	2304      	movs	r3, #4
 800c4f4:	e038      	b.n	800c568 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3338      	adds	r3, #56	; 0x38
 800c4fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fe4a 	bl	800b198 <ld_word>
 800c504:	4603      	mov	r3, r0
 800c506:	461a      	mov	r2, r3
 800c508:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d001      	beq.n	800c514 <check_fs+0x48>
 800c510:	2303      	movs	r3, #3
 800c512:	e029      	b.n	800c568 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c51a:	2be9      	cmp	r3, #233	; 0xe9
 800c51c:	d009      	beq.n	800c532 <check_fs+0x66>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c524:	2beb      	cmp	r3, #235	; 0xeb
 800c526:	d11e      	bne.n	800c566 <check_fs+0x9a>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c52e:	2b90      	cmp	r3, #144	; 0x90
 800c530:	d119      	bne.n	800c566 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3338      	adds	r3, #56	; 0x38
 800c536:	3336      	adds	r3, #54	; 0x36
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fe45 	bl	800b1c8 <ld_dword>
 800c53e:	4603      	mov	r3, r0
 800c540:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c544:	4a0a      	ldr	r2, [pc, #40]	; (800c570 <check_fs+0xa4>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d101      	bne.n	800c54e <check_fs+0x82>
 800c54a:	2300      	movs	r3, #0
 800c54c:	e00c      	b.n	800c568 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3338      	adds	r3, #56	; 0x38
 800c552:	3352      	adds	r3, #82	; 0x52
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fe37 	bl	800b1c8 <ld_dword>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4a05      	ldr	r2, [pc, #20]	; (800c574 <check_fs+0xa8>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d101      	bne.n	800c566 <check_fs+0x9a>
 800c562:	2300      	movs	r3, #0
 800c564:	e000      	b.n	800c568 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c566:	2302      	movs	r3, #2
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	00544146 	.word	0x00544146
 800c574:	33544146 	.word	0x33544146

0800c578 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b096      	sub	sp, #88	; 0x58
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7ff ff59 	bl	800c444 <get_ldnumber>
 800c592:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c596:	2b00      	cmp	r3, #0
 800c598:	da01      	bge.n	800c59e <find_volume+0x26>
 800c59a:	230b      	movs	r3, #11
 800c59c:	e26a      	b.n	800ca74 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c59e:	4aa3      	ldr	r2, [pc, #652]	; (800c82c <find_volume+0x2b4>)
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <find_volume+0x3a>
 800c5ae:	230c      	movs	r3, #12
 800c5b0:	e260      	b.n	800ca74 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800c5b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5b4:	f7fe fef0 	bl	800b398 <lock_fs>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <find_volume+0x4a>
 800c5be:	230f      	movs	r3, #15
 800c5c0:	e258      	b.n	800ca74 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	f023 0301 	bic.w	r3, r3, #1
 800c5ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01a      	beq.n	800c60e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fd3d 	bl	800b05c <disk_status>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10c      	bne.n	800c60e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <find_volume+0x92>
 800c5fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5fe:	f003 0304 	and.w	r3, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c606:	230a      	movs	r3, #10
 800c608:	e234      	b.n	800ca74 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800c60a:	2300      	movs	r3, #0
 800c60c:	e232      	b.n	800ca74 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c616:	b2da      	uxtb	r2, r3
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fd35 	bl	800b090 <disk_initialize>
 800c626:	4603      	mov	r3, r0
 800c628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c62c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c638:	2303      	movs	r3, #3
 800c63a:	e21b      	b.n	800ca74 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c63c:	79fb      	ldrb	r3, [r7, #7]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <find_volume+0xda>
 800c642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c64e:	230a      	movs	r3, #10
 800c650:	e210      	b.n	800ca74 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	7858      	ldrb	r0, [r3, #1]
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	330c      	adds	r3, #12
 800c65a:	461a      	mov	r2, r3
 800c65c:	2102      	movs	r1, #2
 800c65e:	f7fe fd7d 	bl	800b15c <disk_ioctl>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <find_volume+0xf4>
 800c668:	2301      	movs	r3, #1
 800c66a:	e203      	b.n	800ca74 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	899b      	ldrh	r3, [r3, #12]
 800c670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c674:	d80d      	bhi.n	800c692 <find_volume+0x11a>
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	899b      	ldrh	r3, [r3, #12]
 800c67a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c67e:	d308      	bcc.n	800c692 <find_volume+0x11a>
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	899b      	ldrh	r3, [r3, #12]
 800c684:	461a      	mov	r2, r3
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	899b      	ldrh	r3, [r3, #12]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	4013      	ands	r3, r2
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <find_volume+0x11e>
 800c692:	2301      	movs	r3, #1
 800c694:	e1ee      	b.n	800ca74 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c69a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c69e:	f7ff ff15 	bl	800c4cc <check_fs>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d149      	bne.n	800c744 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	643b      	str	r3, [r7, #64]	; 0x40
 800c6b4:	e01e      	b.n	800c6f4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6be:	011b      	lsls	r3, r3, #4
 800c6c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c6c4:	4413      	add	r3, r2
 800c6c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d006      	beq.n	800c6e0 <find_volume+0x168>
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe fd76 	bl	800b1c8 <ld_dword>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	e000      	b.n	800c6e2 <find_volume+0x16a>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	3358      	adds	r3, #88	; 0x58
 800c6e8:	443b      	add	r3, r7
 800c6ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	643b      	str	r3, [r7, #64]	; 0x40
 800c6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d9dd      	bls.n	800c6b6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <find_volume+0x192>
 800c704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c706:	3b01      	subs	r3, #1
 800c708:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	3358      	adds	r3, #88	; 0x58
 800c710:	443b      	add	r3, r7
 800c712:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c716:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d005      	beq.n	800c72a <find_volume+0x1b2>
 800c71e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c722:	f7ff fed3 	bl	800c4cc <check_fs>
 800c726:	4603      	mov	r3, r0
 800c728:	e000      	b.n	800c72c <find_volume+0x1b4>
 800c72a:	2303      	movs	r3, #3
 800c72c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c734:	2b01      	cmp	r3, #1
 800c736:	d905      	bls.n	800c744 <find_volume+0x1cc>
 800c738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73a:	3301      	adds	r3, #1
 800c73c:	643b      	str	r3, [r7, #64]	; 0x40
 800c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c740:	2b03      	cmp	r3, #3
 800c742:	d9e2      	bls.n	800c70a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d101      	bne.n	800c750 <find_volume+0x1d8>
 800c74c:	2301      	movs	r3, #1
 800c74e:	e191      	b.n	800ca74 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c754:	2b01      	cmp	r3, #1
 800c756:	d901      	bls.n	800c75c <find_volume+0x1e4>
 800c758:	230d      	movs	r3, #13
 800c75a:	e18b      	b.n	800ca74 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75e:	3338      	adds	r3, #56	; 0x38
 800c760:	330b      	adds	r3, #11
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fd18 	bl	800b198 <ld_word>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	899b      	ldrh	r3, [r3, #12]
 800c770:	429a      	cmp	r2, r3
 800c772:	d001      	beq.n	800c778 <find_volume+0x200>
 800c774:	230d      	movs	r3, #13
 800c776:	e17d      	b.n	800ca74 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	3338      	adds	r3, #56	; 0x38
 800c77c:	3316      	adds	r3, #22
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fe fd0a 	bl	800b198 <ld_word>
 800c784:	4603      	mov	r3, r0
 800c786:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d106      	bne.n	800c79c <find_volume+0x224>
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	3338      	adds	r3, #56	; 0x38
 800c792:	3324      	adds	r3, #36	; 0x24
 800c794:	4618      	mov	r0, r3
 800c796:	f7fe fd17 	bl	800b1c8 <ld_dword>
 800c79a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	789b      	ldrb	r3, [r3, #2]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d005      	beq.n	800c7c0 <find_volume+0x248>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	789b      	ldrb	r3, [r3, #2]
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d001      	beq.n	800c7c0 <find_volume+0x248>
 800c7bc:	230d      	movs	r3, #13
 800c7be:	e159      	b.n	800ca74 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	789b      	ldrb	r3, [r3, #2]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c8:	fb02 f303 	mul.w	r3, r2, r3
 800c7cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	895b      	ldrh	r3, [r3, #10]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d008      	beq.n	800c7f4 <find_volume+0x27c>
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	895b      	ldrh	r3, [r3, #10]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	895b      	ldrh	r3, [r3, #10]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <find_volume+0x280>
 800c7f4:	230d      	movs	r3, #13
 800c7f6:	e13d      	b.n	800ca74 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	3338      	adds	r3, #56	; 0x38
 800c7fc:	3311      	adds	r3, #17
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe fcca 	bl	800b198 <ld_word>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	891b      	ldrh	r3, [r3, #8]
 800c810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c812:	8992      	ldrh	r2, [r2, #12]
 800c814:	0952      	lsrs	r2, r2, #5
 800c816:	b292      	uxth	r2, r2
 800c818:	fbb3 f1f2 	udiv	r1, r3, r2
 800c81c:	fb01 f202 	mul.w	r2, r1, r2
 800c820:	1a9b      	subs	r3, r3, r2
 800c822:	b29b      	uxth	r3, r3
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <find_volume+0x2b8>
 800c828:	230d      	movs	r3, #13
 800c82a:	e123      	b.n	800ca74 <find_volume+0x4fc>
 800c82c:	200018f4 	.word	0x200018f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	3338      	adds	r3, #56	; 0x38
 800c834:	3313      	adds	r3, #19
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fcae 	bl	800b198 <ld_word>
 800c83c:	4603      	mov	r3, r0
 800c83e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c842:	2b00      	cmp	r3, #0
 800c844:	d106      	bne.n	800c854 <find_volume+0x2dc>
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	3338      	adds	r3, #56	; 0x38
 800c84a:	3320      	adds	r3, #32
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fcbb 	bl	800b1c8 <ld_dword>
 800c852:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	3338      	adds	r3, #56	; 0x38
 800c858:	330e      	adds	r3, #14
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fc9c 	bl	800b198 <ld_word>
 800c860:	4603      	mov	r3, r0
 800c862:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c864:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <find_volume+0x2f6>
 800c86a:	230d      	movs	r3, #13
 800c86c:	e102      	b.n	800ca74 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c86e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c872:	4413      	add	r3, r2
 800c874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c876:	8911      	ldrh	r1, [r2, #8]
 800c878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c87a:	8992      	ldrh	r2, [r2, #12]
 800c87c:	0952      	lsrs	r2, r2, #5
 800c87e:	b292      	uxth	r2, r2
 800c880:	fbb1 f2f2 	udiv	r2, r1, r2
 800c884:	b292      	uxth	r2, r2
 800c886:	4413      	add	r3, r2
 800c888:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c88a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	429a      	cmp	r2, r3
 800c890:	d201      	bcs.n	800c896 <find_volume+0x31e>
 800c892:	230d      	movs	r3, #13
 800c894:	e0ee      	b.n	800ca74 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c89e:	8952      	ldrh	r2, [r2, #10]
 800c8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <find_volume+0x338>
 800c8ac:	230d      	movs	r3, #13
 800c8ae:	e0e1      	b.n	800ca74 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d802      	bhi.n	800c8c6 <find_volume+0x34e>
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d802      	bhi.n	800c8d6 <find_volume+0x35e>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	1c9a      	adds	r2, r3, #2
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8e2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c8e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e8:	441a      	add	r2, r3
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c8ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	441a      	add	r2, r3
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c8f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d11e      	bne.n	800c93e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	3338      	adds	r3, #56	; 0x38
 800c904:	332a      	adds	r3, #42	; 0x2a
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe fc46 	bl	800b198 <ld_word>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <find_volume+0x39e>
 800c912:	230d      	movs	r3, #13
 800c914:	e0ae      	b.n	800ca74 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	891b      	ldrh	r3, [r3, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <find_volume+0x3aa>
 800c91e:	230d      	movs	r3, #13
 800c920:	e0a8      	b.n	800ca74 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c924:	3338      	adds	r3, #56	; 0x38
 800c926:	332c      	adds	r3, #44	; 0x2c
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fc4d 	bl	800b1c8 <ld_dword>
 800c92e:	4602      	mov	r2, r0
 800c930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c932:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	647b      	str	r3, [r7, #68]	; 0x44
 800c93c:	e01f      	b.n	800c97e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	891b      	ldrh	r3, [r3, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <find_volume+0x3d2>
 800c946:	230d      	movs	r3, #13
 800c948:	e094      	b.n	800ca74 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c950:	441a      	add	r2, r3
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d103      	bne.n	800c966 <find_volume+0x3ee>
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	e00a      	b.n	800c97c <find_volume+0x404>
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	69da      	ldr	r2, [r3, #28]
 800c96a:	4613      	mov	r3, r2
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	4413      	add	r3, r2
 800c970:	085a      	lsrs	r2, r3, #1
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	69db      	ldr	r3, [r3, #28]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c97c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c980:	6a1a      	ldr	r2, [r3, #32]
 800c982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c984:	899b      	ldrh	r3, [r3, #12]
 800c986:	4619      	mov	r1, r3
 800c988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98a:	440b      	add	r3, r1
 800c98c:	3b01      	subs	r3, #1
 800c98e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c990:	8989      	ldrh	r1, [r1, #12]
 800c992:	fbb3 f3f1 	udiv	r3, r3, r1
 800c996:	429a      	cmp	r2, r3
 800c998:	d201      	bcs.n	800c99e <find_volume+0x426>
 800c99a:	230d      	movs	r3, #13
 800c99c:	e06a      	b.n	800ca74 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	619a      	str	r2, [r3, #24]
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	2280      	movs	r2, #128	; 0x80
 800c9b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c9b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9b8:	2b03      	cmp	r3, #3
 800c9ba:	d149      	bne.n	800ca50 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	3338      	adds	r3, #56	; 0x38
 800c9c0:	3330      	adds	r3, #48	; 0x30
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fbe8 	bl	800b198 <ld_word>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d140      	bne.n	800ca50 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9d6:	f7fe fe85 	bl	800b6e4 <move_window>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d137      	bne.n	800ca50 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	3338      	adds	r3, #56	; 0x38
 800c9ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fbd2 	bl	800b198 <ld_word>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d127      	bne.n	800ca50 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	3338      	adds	r3, #56	; 0x38
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe fbdf 	bl	800b1c8 <ld_dword>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	4a1b      	ldr	r2, [pc, #108]	; (800ca7c <find_volume+0x504>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d11e      	bne.n	800ca50 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	3338      	adds	r3, #56	; 0x38
 800ca16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fbd4 	bl	800b1c8 <ld_dword>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4a17      	ldr	r2, [pc, #92]	; (800ca80 <find_volume+0x508>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d113      	bne.n	800ca50 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	3338      	adds	r3, #56	; 0x38
 800ca2c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe fbc9 	bl	800b1c8 <ld_dword>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	3338      	adds	r3, #56	; 0x38
 800ca40:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fbbf 	bl	800b1c8 <ld_dword>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ca56:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca58:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <find_volume+0x50c>)
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <find_volume+0x50c>)
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <find_volume+0x50c>)
 800ca66:	881a      	ldrh	r2, [r3, #0]
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca6e:	f7fe fdd1 	bl	800b614 <clear_lock>
#endif
	return FR_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3758      	adds	r7, #88	; 0x58
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	41615252 	.word	0x41615252
 800ca80:	61417272 	.word	0x61417272
 800ca84:	200018f8 	.word	0x200018f8

0800ca88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4613      	mov	r3, r2
 800ca94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ca9a:	f107 0310 	add.w	r3, r7, #16
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff fcd0 	bl	800c444 <get_ldnumber>
 800caa4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da01      	bge.n	800cab0 <f_mount+0x28>
 800caac:	230b      	movs	r3, #11
 800caae:	e048      	b.n	800cb42 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cab0:	4a26      	ldr	r2, [pc, #152]	; (800cb4c <f_mount+0xc4>)
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00f      	beq.n	800cae0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cac0:	69b8      	ldr	r0, [r7, #24]
 800cac2:	f7fe fda7 	bl	800b614 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 feda 	bl	800d884 <ff_del_syncobj>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <f_mount+0x52>
 800cad6:	2302      	movs	r3, #2
 800cad8:	e033      	b.n	800cb42 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00f      	beq.n	800cb06 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	3310      	adds	r3, #16
 800caf4:	4619      	mov	r1, r3
 800caf6:	4610      	mov	r0, r2
 800caf8:	f000 fea9 	bl	800d84e <ff_cre_syncobj>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <f_mount+0x7e>
 800cb02:	2302      	movs	r3, #2
 800cb04:	e01d      	b.n	800cb42 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	4910      	ldr	r1, [pc, #64]	; (800cb4c <f_mount+0xc4>)
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <f_mount+0x94>
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d001      	beq.n	800cb20 <f_mount+0x98>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	e010      	b.n	800cb42 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb20:	f107 010c 	add.w	r1, r7, #12
 800cb24:	f107 0308 	add.w	r3, r7, #8
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fd24 	bl	800c578 <find_volume>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	7dfa      	ldrb	r2, [r7, #23]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fe fc42 	bl	800b3c4 <unlock_fs>
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200018f4 	.word	0x200018f4

0800cb50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b098      	sub	sp, #96	; 0x60
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <f_open+0x18>
 800cb64:	2309      	movs	r3, #9
 800cb66:	e1c2      	b.n	800ceee <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cb70:	79fa      	ldrb	r2, [r7, #7]
 800cb72:	f107 0110 	add.w	r1, r7, #16
 800cb76:	f107 0308 	add.w	r3, r7, #8
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff fcfc 	bl	800c578 <find_volume>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f040 819f 	bne.w	800cece <f_open+0x37e>
		dj.obj.fs = fs;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	f107 0314 	add.w	r3, r7, #20
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff fbdb 	bl	800c358 <follow_path>
 800cba2:	4603      	mov	r3, r0
 800cba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11a      	bne.n	800cbe6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cbb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	da03      	bge.n	800cbc2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cbba:	2306      	movs	r3, #6
 800cbbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cbc0:	e011      	b.n	800cbe6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	f023 0301 	bic.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	bf14      	ite	ne
 800cbcc:	2301      	movne	r3, #1
 800cbce:	2300      	moveq	r3, #0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f107 0314 	add.w	r3, r7, #20
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe fc0e 	bl	800b3fc <chk_lock>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	f003 031c 	and.w	r3, r3, #28
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d07f      	beq.n	800ccf0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d017      	beq.n	800cc28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d10e      	bne.n	800cc1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc00:	f7fe fc58 	bl	800b4b4 <enq_lock>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d006      	beq.n	800cc18 <f_open+0xc8>
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff fadb 	bl	800c1ca <dir_register>
 800cc14:	4603      	mov	r3, r0
 800cc16:	e000      	b.n	800cc1a <f_open+0xca>
 800cc18:	2312      	movs	r3, #18
 800cc1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	f043 0308 	orr.w	r3, r3, #8
 800cc24:	71fb      	strb	r3, [r7, #7]
 800cc26:	e010      	b.n	800cc4a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cc28:	7ebb      	ldrb	r3, [r7, #26]
 800cc2a:	f003 0311 	and.w	r3, r3, #17
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <f_open+0xea>
					res = FR_DENIED;
 800cc32:	2307      	movs	r3, #7
 800cc34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cc38:	e007      	b.n	800cc4a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <f_open+0xfa>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d168      	bne.n	800cd24 <f_open+0x1d4>
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	f003 0308 	and.w	r3, r3, #8
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d063      	beq.n	800cd24 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cc5c:	f7fc f9c4 	bl	8008fe8 <get_fattime>
 800cc60:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	330e      	adds	r3, #14
 800cc66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe faeb 	bl	800b244 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	3316      	adds	r3, #22
 800cc72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fae5 	bl	800b244 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7c:	330b      	adds	r3, #11
 800cc7e:	2220      	movs	r2, #32
 800cc80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff fa0a 	bl	800c0a2 <ld_clust>
 800cc8e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc94:	2200      	movs	r2, #0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff fa22 	bl	800c0e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9e:	331c      	adds	r3, #28
 800cca0:	2100      	movs	r1, #0
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe face 	bl	800b244 <st_dword>
					fs->wflag = 1;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ccae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d037      	beq.n	800cd24 <f_open+0x1d4>
						dw = fs->winsect;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ccba:	f107 0314 	add.w	r3, r7, #20
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fe ff4a 	bl	800bb5c <remove_chain>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ccce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d126      	bne.n	800cd24 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fd02 	bl	800b6e4 <move_window>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccea:	3a01      	subs	r2, #1
 800ccec:	615a      	str	r2, [r3, #20]
 800ccee:	e019      	b.n	800cd24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ccf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d115      	bne.n	800cd24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ccf8:	7ebb      	ldrb	r3, [r7, #26]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <f_open+0x1ba>
					res = FR_NO_FILE;
 800cd02:	2304      	movs	r3, #4
 800cd04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd08:	e00c      	b.n	800cd24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	f003 0302 	and.w	r3, r3, #2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <f_open+0x1d4>
 800cd14:	7ebb      	ldrb	r3, [r7, #26]
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <f_open+0x1d4>
						res = FR_DENIED;
 800cd1e:	2307      	movs	r3, #7
 800cd20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cd24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d128      	bne.n	800cd7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cd2c:	79fb      	ldrb	r3, [r7, #7]
 800cd2e:	f003 0308 	and.w	r3, r3, #8
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cd46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	f023 0301 	bic.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	bf14      	ite	ne
 800cd56:	2301      	movne	r3, #1
 800cd58:	2300      	moveq	r3, #0
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	f107 0314 	add.w	r3, r7, #20
 800cd62:	4611      	mov	r1, r2
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe fbc7 	bl	800b4f8 <inc_lock>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d102      	bne.n	800cd7e <f_open+0x22e>
 800cd78:	2302      	movs	r3, #2
 800cd7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cd7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f040 80a3 	bne.w	800cece <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff f987 	bl	800c0a2 <ld_clust>
 800cd94:	4602      	mov	r2, r0
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	331c      	adds	r3, #28
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fa12 	bl	800b1c8 <ld_dword>
 800cda4:	4602      	mov	r2, r0
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	88da      	ldrh	r2, [r3, #6]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	79fa      	ldrb	r2, [r7, #7]
 800cdc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3330      	adds	r3, #48	; 0x30
 800cdda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdde:	2100      	movs	r1, #0
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fa7c 	bl	800b2de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d06e      	beq.n	800cece <f_open+0x37e>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d06a      	beq.n	800cece <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	895b      	ldrh	r3, [r3, #10]
 800ce04:	461a      	mov	r2, r3
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	899b      	ldrh	r3, [r3, #12]
 800ce0a:	fb02 f303 	mul.w	r3, r2, r3
 800ce0e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	657b      	str	r3, [r7, #84]	; 0x54
 800ce1c:	e016      	b.n	800ce4c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe fcaa 	bl	800b77c <get_fat>
 800ce28:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ce2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d802      	bhi.n	800ce36 <f_open+0x2e6>
 800ce30:	2302      	movs	r3, #2
 800ce32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ce36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3c:	d102      	bne.n	800ce44 <f_open+0x2f4>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ce4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d103      	bne.n	800ce5c <f_open+0x30c>
 800ce54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d8e0      	bhi.n	800ce1e <f_open+0x2ce>
				}
				fp->clust = clst;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ce62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d131      	bne.n	800cece <f_open+0x37e>
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	899b      	ldrh	r3, [r3, #12]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce72:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce76:	fb01 f202 	mul.w	r2, r1, r2
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d026      	beq.n	800cece <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fc5a 	bl	800b73e <clust2sect>
 800ce8a:	6478      	str	r0, [r7, #68]	; 0x44
 800ce8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d103      	bne.n	800ce9a <f_open+0x34a>
						res = FR_INT_ERR;
 800ce92:	2302      	movs	r3, #2
 800ce94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce98:	e019      	b.n	800cece <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	899b      	ldrh	r3, [r3, #12]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cea2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cea8:	441a      	add	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	7858      	ldrb	r0, [r3, #1]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6a1a      	ldr	r2, [r3, #32]
 800cebc:	2301      	movs	r3, #1
 800cebe:	f7fe f90d 	bl	800b0dc <disk_read>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <f_open+0x37e>
 800cec8:	2301      	movs	r3, #1
 800ceca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <f_open+0x38c>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fa6d 	bl	800b3c4 <unlock_fs>
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3760      	adds	r7, #96	; 0x60
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b09d      	sub	sp, #116	; 0x74
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	607a      	str	r2, [r7, #4]
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	460b      	mov	r3, r1
 800cf06:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cf08:	2301      	movs	r3, #1
 800cf0a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800cf0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf10:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cf12:	f107 030c 	add.w	r3, r7, #12
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff fa94 	bl	800c444 <get_ldnumber>
 800cf1c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	da02      	bge.n	800cf2a <f_mkfs+0x32>
 800cf24:	230b      	movs	r3, #11
 800cf26:	f000 bc31 	b.w	800d78c <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800cf2a:	4aa5      	ldr	r2, [pc, #660]	; (800d1c0 <f_mkfs+0x2c8>)
 800cf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d005      	beq.n	800cf42 <f_mkfs+0x4a>
 800cf36:	4aa2      	ldr	r2, [pc, #648]	; (800d1c0 <f_mkfs+0x2c8>)
 800cf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cf4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fe f89c 	bl	800b090 <disk_initialize>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cf5e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <f_mkfs+0x78>
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	f000 bc0e 	b.w	800d78c <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cf70:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cf74:	f003 0304 	and.w	r3, r3, #4
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <f_mkfs+0x8a>
 800cf7c:	230a      	movs	r3, #10
 800cf7e:	f000 bc05 	b.w	800d78c <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800cf82:	f107 0214 	add.w	r2, r7, #20
 800cf86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf8a:	2103      	movs	r1, #3
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe f8e5 	bl	800b15c <disk_ioctl>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10c      	bne.n	800cfb2 <f_mkfs+0xba>
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d009      	beq.n	800cfb2 <f_mkfs+0xba>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfa4:	d805      	bhi.n	800cfb2 <f_mkfs+0xba>
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	1e5a      	subs	r2, r3, #1
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	4013      	ands	r3, r2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <f_mkfs+0xbe>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800cfb6:	f107 021a 	add.w	r2, r7, #26
 800cfba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cfbe:	2102      	movs	r1, #2
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe f8cb 	bl	800b15c <disk_ioctl>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <f_mkfs+0xd8>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e3dd      	b.n	800d78c <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800cfd0:	8b7b      	ldrh	r3, [r7, #26]
 800cfd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfd6:	d80a      	bhi.n	800cfee <f_mkfs+0xf6>
 800cfd8:	8b7b      	ldrh	r3, [r7, #26]
 800cfda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfde:	d306      	bcc.n	800cfee <f_mkfs+0xf6>
 800cfe0:	8b7b      	ldrh	r3, [r7, #26]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	8b7b      	ldrh	r3, [r7, #26]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	4013      	ands	r3, r2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <f_mkfs+0xfa>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e3cc      	b.n	800d78c <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <f_mkfs+0x10a>
 800cff8:	8b7b      	ldrh	r3, [r7, #26]
 800cffa:	461a      	mov	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4293      	cmp	r3, r2
 800d000:	d309      	bcc.n	800d016 <f_mkfs+0x11e>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d008:	d805      	bhi.n	800d016 <f_mkfs+0x11e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	1e5a      	subs	r2, r3, #1
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4013      	ands	r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <f_mkfs+0x122>
 800d016:	2313      	movs	r3, #19
 800d018:	e3b8      	b.n	800d78c <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800d01a:	8b7b      	ldrh	r3, [r7, #26]
 800d01c:	461a      	mov	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	fbb3 f3f2 	udiv	r3, r3, r2
 800d024:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d02a:	8b7b      	ldrh	r3, [r7, #26]
 800d02c:	461a      	mov	r2, r3
 800d02e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d032:	fbb3 f3f2 	udiv	r3, r3, r2
 800d036:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d038:	8b7b      	ldrh	r3, [r7, #26]
 800d03a:	461a      	mov	r2, r3
 800d03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03e:	fb02 f303 	mul.w	r3, r2, r3
 800d042:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <f_mkfs+0x156>
 800d04a:	230e      	movs	r3, #14
 800d04c:	e39e      	b.n	800d78c <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d04e:	f107 0210 	add.w	r2, r7, #16
 800d052:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d056:	2101      	movs	r1, #1
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe f87f 	bl	800b15c <disk_ioctl>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <f_mkfs+0x170>
 800d064:	2301      	movs	r3, #1
 800d066:	e391      	b.n	800d78c <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d068:	7afb      	ldrb	r3, [r7, #11]
 800d06a:	f003 0308 	and.w	r3, r3, #8
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <f_mkfs+0x17e>
 800d072:	2300      	movs	r3, #0
 800d074:	e000      	b.n	800d078 <f_mkfs+0x180>
 800d076:	233f      	movs	r3, #63	; 0x3f
 800d078:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07e:	429a      	cmp	r2, r3
 800d080:	d901      	bls.n	800d086 <f_mkfs+0x18e>
 800d082:	230e      	movs	r3, #14
 800d084:	e382      	b.n	800d78c <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	2b7f      	cmp	r3, #127	; 0x7f
 800d092:	d801      	bhi.n	800d098 <f_mkfs+0x1a0>
 800d094:	230e      	movs	r3, #14
 800d096:	e379      	b.n	800d78c <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b80      	cmp	r3, #128	; 0x80
 800d09c:	d901      	bls.n	800d0a2 <f_mkfs+0x1aa>
 800d09e:	2313      	movs	r3, #19
 800d0a0:	e374      	b.n	800d78c <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d0a2:	7afb      	ldrb	r3, [r7, #11]
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00d      	beq.n	800d0c8 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d0ac:	7afb      	ldrb	r3, [r7, #11]
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d004      	beq.n	800d0c0 <f_mkfs+0x1c8>
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d0c6:	e009      	b.n	800d0dc <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	f003 0301 	and.w	r3, r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <f_mkfs+0x1de>
 800d0d2:	2313      	movs	r3, #19
 800d0d4:	e35a      	b.n	800d78c <f_mkfs+0x894>
		fmt = FS_FAT16;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d0e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d13c      	bne.n	800d162 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800d0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d11b      	bne.n	800d126 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	0c5b      	lsrs	r3, r3, #17
 800d0f2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	653b      	str	r3, [r7, #80]	; 0x50
 800d0fc:	e005      	b.n	800d10a <f_mkfs+0x212>
 800d0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d100:	3301      	adds	r3, #1
 800d102:	64bb      	str	r3, [r7, #72]	; 0x48
 800d104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d106:	005b      	lsls	r3, r3, #1
 800d108:	653b      	str	r3, [r7, #80]	; 0x50
 800d10a:	4a2e      	ldr	r2, [pc, #184]	; (800d1c4 <f_mkfs+0x2cc>)
 800d10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d007      	beq.n	800d126 <f_mkfs+0x22e>
 800d116:	4a2b      	ldr	r2, [pc, #172]	; (800d1c4 <f_mkfs+0x2cc>)
 800d118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d11e:	461a      	mov	r2, r3
 800d120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d122:	4293      	cmp	r3, r2
 800d124:	d2eb      	bcs.n	800d0fe <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12e:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	3302      	adds	r3, #2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	8b7a      	ldrh	r2, [r7, #26]
 800d138:	4413      	add	r3, r2
 800d13a:	3b01      	subs	r3, #1
 800d13c:	8b7a      	ldrh	r2, [r7, #26]
 800d13e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d142:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d144:	2320      	movs	r3, #32
 800d146:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d148:	2300      	movs	r3, #0
 800d14a:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d152:	4293      	cmp	r3, r2
 800d154:	d903      	bls.n	800d15e <f_mkfs+0x266>
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	4a1b      	ldr	r2, [pc, #108]	; (800d1c8 <f_mkfs+0x2d0>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d954      	bls.n	800d208 <f_mkfs+0x310>
 800d15e:	230e      	movs	r3, #14
 800d160:	e314      	b.n	800d78c <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d164:	2b00      	cmp	r3, #0
 800d166:	d11b      	bne.n	800d1a0 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	0b1b      	lsrs	r3, r3, #12
 800d16c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d16e:	2300      	movs	r3, #0
 800d170:	64bb      	str	r3, [r7, #72]	; 0x48
 800d172:	2301      	movs	r3, #1
 800d174:	653b      	str	r3, [r7, #80]	; 0x50
 800d176:	e005      	b.n	800d184 <f_mkfs+0x28c>
 800d178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d17a:	3301      	adds	r3, #1
 800d17c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	653b      	str	r3, [r7, #80]	; 0x50
 800d184:	4a11      	ldr	r2, [pc, #68]	; (800d1cc <f_mkfs+0x2d4>)
 800d186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <f_mkfs+0x2a8>
 800d190:	4a0e      	ldr	r2, [pc, #56]	; (800d1cc <f_mkfs+0x2d4>)
 800d192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d198:	461a      	mov	r2, r3
 800d19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d2eb      	bcs.n	800d178 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800d1a0:	693a      	ldr	r2, [r7, #16]
 800d1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d90d      	bls.n	800d1d0 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	3302      	adds	r3, #2
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1bc:	e013      	b.n	800d1e6 <f_mkfs+0x2ee>
 800d1be:	bf00      	nop
 800d1c0:	200018f4 	.word	0x200018f4
 800d1c4:	08012bbc 	.word	0x08012bbc
 800d1c8:	0ffffff5 	.word	0x0ffffff5
 800d1cc:	08012bcc 	.word	0x08012bcc
				} else {
					fmt = FS_FAT12;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1d8:	4613      	mov	r3, r2
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	4413      	add	r3, r2
 800d1de:	3301      	adds	r3, #1
 800d1e0:	085b      	lsrs	r3, r3, #1
 800d1e2:	3303      	adds	r3, #3
 800d1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d1e6:	8b7b      	ldrh	r3, [r7, #26]
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ec:	4413      	add	r3, r2
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	8b7a      	ldrh	r2, [r7, #26]
 800d1f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1f6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fe:	015b      	lsls	r3, r3, #5
 800d200:	8b7a      	ldrh	r2, [r7, #26]
 800d202:	fbb3 f3f2 	udiv	r3, r3, r2
 800d206:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20c:	4413      	add	r3, r2
 800d20e:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d214:	fb03 f202 	mul.w	r2, r3, r2
 800d218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d21a:	4413      	add	r3, r2
 800d21c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d21e:	4413      	add	r3, r2
 800d220:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	4413      	add	r3, r2
 800d228:	1e5a      	subs	r2, r3, #1
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	425b      	negs	r3, r3
 800d22e:	401a      	ands	r2, r3
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d236:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d23a:	2b03      	cmp	r3, #3
 800d23c:	d108      	bne.n	800d250 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800d23e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d242:	4413      	add	r3, r2
 800d244:	657b      	str	r3, [r7, #84]	; 0x54
 800d246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d24a:	4413      	add	r3, r2
 800d24c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d24e:	e006      	b.n	800d25e <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d254:	fbb2 f3f3 	udiv	r3, r2, r3
 800d258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d25a:	4413      	add	r3, r2
 800d25c:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d260:	011a      	lsls	r2, r3, #4
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	441a      	add	r2, r3
 800d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d268:	1ad2      	subs	r2, r2, r3
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d901      	bls.n	800d274 <f_mkfs+0x37c>
 800d270:	230e      	movs	r3, #14
 800d272:	e28b      	b.n	800d78c <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d278:	1ad2      	subs	r2, r2, r3
 800d27a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d27c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d27e:	fb01 f303 	mul.w	r3, r1, r3
 800d282:	1ad2      	subs	r2, r2, r3
 800d284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28e:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800d290:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d294:	2b03      	cmp	r3, #3
 800d296:	d10f      	bne.n	800d2b8 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d80a      	bhi.n	800d2b8 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d105      	bne.n	800d2b4 <f_mkfs+0x3bc>
 800d2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2aa:	085b      	lsrs	r3, r3, #1
 800d2ac:	607b      	str	r3, [r7, #4]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d144      	bne.n	800d33e <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800d2b4:	230e      	movs	r3, #14
 800d2b6:	e269      	b.n	800d78c <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800d2b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d133      	bne.n	800d328 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d91e      	bls.n	800d308 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d107      	bne.n	800d2e0 <f_mkfs+0x3e8>
 800d2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	2b40      	cmp	r3, #64	; 0x40
 800d2d6:	d803      	bhi.n	800d2e0 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	e033      	b.n	800d348 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800d2e0:	7afb      	ldrb	r3, [r7, #11]
 800d2e2:	f003 0302 	and.w	r3, r3, #2
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d2ea:	2303      	movs	r3, #3
 800d2ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d2f0:	e02a      	b.n	800d348 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d105      	bne.n	800d304 <f_mkfs+0x40c>
 800d2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b80      	cmp	r3, #128	; 0x80
 800d302:	d91e      	bls.n	800d342 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800d304:	230e      	movs	r3, #14
 800d306:	e241      	b.n	800d78c <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d30e:	4293      	cmp	r3, r2
 800d310:	d80a      	bhi.n	800d328 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <f_mkfs+0x42c>
 800d318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	607b      	str	r3, [r7, #4]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b80      	cmp	r3, #128	; 0x80
 800d322:	d910      	bls.n	800d346 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800d324:	230e      	movs	r3, #14
 800d326:	e231      	b.n	800d78c <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d10c      	bne.n	800d34a <f_mkfs+0x452>
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d336:	4293      	cmp	r3, r2
 800d338:	d907      	bls.n	800d34a <f_mkfs+0x452>
 800d33a:	230e      	movs	r3, #14
 800d33c:	e226      	b.n	800d78c <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d33e:	bf00      	nop
 800d340:	e6cc      	b.n	800d0dc <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d342:	bf00      	nop
 800d344:	e6ca      	b.n	800d0dc <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d346:	bf00      	nop
			pau = au;
 800d348:	e6c8      	b.n	800d0dc <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800d34a:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d34c:	8b7b      	ldrh	r3, [r7, #26]
 800d34e:	461a      	mov	r2, r3
 800d350:	2100      	movs	r1, #0
 800d352:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d354:	f7fd ffc3 	bl	800b2de <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d358:	220b      	movs	r2, #11
 800d35a:	49b3      	ldr	r1, [pc, #716]	; (800d628 <f_mkfs+0x730>)
 800d35c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d35e:	f7fd ff9d 	bl	800b29c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d364:	330b      	adds	r3, #11
 800d366:	8b7a      	ldrh	r2, [r7, #26]
 800d368:	4611      	mov	r1, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fd ff4f 	bl	800b20e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	330d      	adds	r3, #13
 800d374:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d376:	b2d2      	uxtb	r2, r2
 800d378:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37c:	330e      	adds	r3, #14
 800d37e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d380:	b292      	uxth	r2, r2
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f7fd ff42 	bl	800b20e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38c:	3310      	adds	r3, #16
 800d38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d390:	b2d2      	uxtb	r2, r2
 800d392:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	f103 0211 	add.w	r2, r3, #17
 800d39a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d002      	beq.n	800d3a8 <f_mkfs+0x4b0>
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	e000      	b.n	800d3aa <f_mkfs+0x4b2>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	f7fd ff2e 	bl	800b20e <st_word>
		if (sz_vol < 0x10000) {
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3b8:	d208      	bcs.n	800d3cc <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3bc:	3313      	adds	r3, #19
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	b292      	uxth	r2, r2
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fd ff22 	bl	800b20e <st_word>
 800d3ca:	e006      	b.n	800d3da <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ce:	3320      	adds	r3, #32
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd ff35 	bl	800b244 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	3315      	adds	r3, #21
 800d3de:	22f8      	movs	r2, #248	; 0xf8
 800d3e0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e4:	3318      	adds	r3, #24
 800d3e6:	213f      	movs	r1, #63	; 0x3f
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fd ff10 	bl	800b20e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	331a      	adds	r3, #26
 800d3f2:	21ff      	movs	r1, #255	; 0xff
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fd ff0a 	bl	800b20e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3fc:	331c      	adds	r3, #28
 800d3fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d400:	4618      	mov	r0, r3
 800d402:	f7fd ff1f 	bl	800b244 <st_dword>
		if (fmt == FS_FAT32) {
 800d406:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d131      	bne.n	800d472 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d410:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d414:	f7fb fde8 	bl	8008fe8 <get_fattime>
 800d418:	4603      	mov	r3, r0
 800d41a:	4619      	mov	r1, r3
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7fd ff11 	bl	800b244 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d424:	3324      	adds	r3, #36	; 0x24
 800d426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fd ff0b 	bl	800b244 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	332c      	adds	r3, #44	; 0x2c
 800d432:	2102      	movs	r1, #2
 800d434:	4618      	mov	r0, r3
 800d436:	f7fd ff05 	bl	800b244 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	3330      	adds	r3, #48	; 0x30
 800d43e:	2101      	movs	r1, #1
 800d440:	4618      	mov	r0, r3
 800d442:	f7fd fee4 	bl	800b20e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d448:	3332      	adds	r3, #50	; 0x32
 800d44a:	2106      	movs	r1, #6
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fd fede 	bl	800b20e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d454:	3340      	adds	r3, #64	; 0x40
 800d456:	2280      	movs	r2, #128	; 0x80
 800d458:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45c:	3342      	adds	r3, #66	; 0x42
 800d45e:	2229      	movs	r2, #41	; 0x29
 800d460:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	3347      	adds	r3, #71	; 0x47
 800d466:	2213      	movs	r2, #19
 800d468:	4970      	ldr	r1, [pc, #448]	; (800d62c <f_mkfs+0x734>)
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fd ff16 	bl	800b29c <mem_cpy>
 800d470:	e020      	b.n	800d4b4 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d474:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d478:	f7fb fdb6 	bl	8008fe8 <get_fattime>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4619      	mov	r1, r3
 800d480:	4620      	mov	r0, r4
 800d482:	f7fd fedf 	bl	800b244 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	3316      	adds	r3, #22
 800d48a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d48c:	b292      	uxth	r2, r2
 800d48e:	4611      	mov	r1, r2
 800d490:	4618      	mov	r0, r3
 800d492:	f7fd febc 	bl	800b20e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d498:	3324      	adds	r3, #36	; 0x24
 800d49a:	2280      	movs	r2, #128	; 0x80
 800d49c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a0:	3326      	adds	r3, #38	; 0x26
 800d4a2:	2229      	movs	r2, #41	; 0x29
 800d4a4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	332b      	adds	r3, #43	; 0x2b
 800d4aa:	2213      	movs	r2, #19
 800d4ac:	4960      	ldr	r1, [pc, #384]	; (800d630 <f_mkfs+0x738>)
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fd fef4 	bl	800b29c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fd fea5 	bl	800b20e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d4c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4ce:	f7fd fe25 	bl	800b11c <disk_write>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <f_mkfs+0x5e4>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e157      	b.n	800d78c <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d4dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d140      	bne.n	800d566 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	1d9a      	adds	r2, r3, #6
 800d4e8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d4f0:	f7fd fe14 	bl	800b11c <disk_write>
			mem_set(buf, 0, ss);
 800d4f4:	8b7b      	ldrh	r3, [r7, #26]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4fc:	f7fd feef 	bl	800b2de <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d500:	494c      	ldr	r1, [pc, #304]	; (800d634 <f_mkfs+0x73c>)
 800d502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d504:	f7fd fe9e 	bl	800b244 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d50e:	494a      	ldr	r1, [pc, #296]	; (800d638 <f_mkfs+0x740>)
 800d510:	4618      	mov	r0, r3
 800d512:	f7fd fe97 	bl	800b244 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	3b01      	subs	r3, #1
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f7fd fe8e 	bl	800b244 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d52e:	2102      	movs	r1, #2
 800d530:	4618      	mov	r0, r3
 800d532:	f7fd fe87 	bl	800b244 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d538:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d53c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d540:	4618      	mov	r0, r3
 800d542:	f7fd fe64 	bl	800b20e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	1dda      	adds	r2, r3, #7
 800d54a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d54e:	2301      	movs	r3, #1
 800d550:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d552:	f7fd fde3 	bl	800b11c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d55e:	2301      	movs	r3, #1
 800d560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d562:	f7fd fddb 	bl	800b11c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d568:	2100      	movs	r1, #0
 800d56a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d56c:	f7fd feb7 	bl	800b2de <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d572:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d574:	2300      	movs	r3, #0
 800d576:	64bb      	str	r3, [r7, #72]	; 0x48
 800d578:	e04b      	b.n	800d612 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800d57a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d113      	bne.n	800d5aa <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d582:	f06f 0107 	mvn.w	r1, #7
 800d586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d588:	f7fd fe5c 	bl	800b244 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	3304      	adds	r3, #4
 800d590:	f04f 31ff 	mov.w	r1, #4294967295
 800d594:	4618      	mov	r0, r3
 800d596:	f7fd fe55 	bl	800b244 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59c:	3308      	adds	r3, #8
 800d59e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fd fe4e 	bl	800b244 <st_dword>
 800d5a8:	e00b      	b.n	800d5c2 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d5aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d101      	bne.n	800d5b6 <f_mkfs+0x6be>
 800d5b2:	4b22      	ldr	r3, [pc, #136]	; (800d63c <f_mkfs+0x744>)
 800d5b4:	e001      	b.n	800d5ba <f_mkfs+0x6c2>
 800d5b6:	f06f 0307 	mvn.w	r3, #7
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5be:	f7fd fe41 	bl	800b244 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d5c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5c4:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d5c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	bf28      	it	cs
 800d5ce:	4613      	movcs	r3, r2
 800d5d0:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d5d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5dc:	f7fd fd9e 	bl	800b11c <disk_write>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <f_mkfs+0x6f2>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e0d0      	b.n	800d78c <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800d5ea:	8b7b      	ldrh	r3, [r7, #26]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5f2:	f7fd fe74 	bl	800b2de <mem_set>
				sect += n; nsect -= n;
 800d5f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5fa:	4413      	add	r3, r2
 800d5fc:	667b      	str	r3, [r7, #100]	; 0x64
 800d5fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1dc      	bne.n	800d5c6 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d60e:	3301      	adds	r3, #1
 800d610:	64bb      	str	r3, [r7, #72]	; 0x48
 800d612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d616:	429a      	cmp	r2, r3
 800d618:	d3af      	bcc.n	800d57a <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d61a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d61e:	2b03      	cmp	r3, #3
 800d620:	d10e      	bne.n	800d640 <f_mkfs+0x748>
 800d622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d624:	e00d      	b.n	800d642 <f_mkfs+0x74a>
 800d626:	bf00      	nop
 800d628:	08012750 	.word	0x08012750
 800d62c:	0801275c 	.word	0x0801275c
 800d630:	08012770 	.word	0x08012770
 800d634:	41615252 	.word	0x41615252
 800d638:	61417272 	.word	0x61417272
 800d63c:	00fffff8 	.word	0x00fffff8
 800d640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d642:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	4293      	cmp	r3, r2
 800d64a:	bf28      	it	cs
 800d64c:	4613      	movcs	r3, r2
 800d64e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d650:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d65a:	f7fd fd5f 	bl	800b11c <disk_write>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <f_mkfs+0x770>
 800d664:	2301      	movs	r3, #1
 800d666:	e091      	b.n	800d78c <f_mkfs+0x894>
			sect += n; nsect -= n;
 800d668:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d66a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d66c:	4413      	add	r3, r2
 800d66e:	667b      	str	r3, [r7, #100]	; 0x64
 800d670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1e2      	bne.n	800d644 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d67e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d682:	2b03      	cmp	r3, #3
 800d684:	d103      	bne.n	800d68e <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800d686:	230c      	movs	r3, #12
 800d688:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d68c:	e010      	b.n	800d6b0 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d694:	d303      	bcc.n	800d69e <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d696:	2306      	movs	r3, #6
 800d698:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d69c:	e008      	b.n	800d6b0 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d69e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d101      	bne.n	800d6aa <f_mkfs+0x7b2>
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	e000      	b.n	800d6ac <f_mkfs+0x7b4>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d6b0:	7afb      	ldrb	r3, [r7, #11]
 800d6b2:	f003 0308 	and.w	r3, r3, #8
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d15b      	bne.n	800d772 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800d6ba:	8b7b      	ldrh	r3, [r7, #26]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	2100      	movs	r1, #0
 800d6c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6c2:	f7fd fe0c 	bl	800b2de <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fd fd9c 	bl	800b20e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d6dc:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	3302      	adds	r3, #2
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	3303      	adds	r3, #3
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	3304      	adds	r3, #4
 800d700:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d704:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d706:	693a      	ldr	r2, [r7, #16]
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	441a      	add	r2, r3
 800d70c:	4b21      	ldr	r3, [pc, #132]	; (800d794 <f_mkfs+0x89c>)
 800d70e:	fba3 1302 	umull	r1, r3, r3, r2
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	0852      	lsrs	r2, r2, #1
 800d716:	4413      	add	r3, r2
 800d718:	0b5b      	lsrs	r3, r3, #13
 800d71a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	3305      	adds	r3, #5
 800d720:	22fe      	movs	r2, #254	; 0xfe
 800d722:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d726:	089b      	lsrs	r3, r3, #2
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	3306      	adds	r3, #6
 800d72e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d732:	b2d2      	uxtb	r2, r2
 800d734:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	3307      	adds	r3, #7
 800d73a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d73c:	b2d2      	uxtb	r2, r2
 800d73e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	3308      	adds	r3, #8
 800d744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d746:	4618      	mov	r0, r3
 800d748:	f7fd fd7c 	bl	800b244 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	330c      	adds	r3, #12
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f7fd fd75 	bl	800b244 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d75a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d75e:	2301      	movs	r3, #1
 800d760:	2200      	movs	r2, #0
 800d762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d764:	f7fd fcda 	bl	800b11c <disk_write>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <f_mkfs+0x87a>
 800d76e:	2301      	movs	r3, #1
 800d770:	e00c      	b.n	800d78c <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d772:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d776:	2200      	movs	r2, #0
 800d778:	2100      	movs	r1, #0
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fd fcee 	bl	800b15c <disk_ioctl>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <f_mkfs+0x892>
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <f_mkfs+0x894>

	return FR_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3774      	adds	r7, #116	; 0x74
 800d790:	46bd      	mov	sp, r7
 800d792:	bd90      	pop	{r4, r7, pc}
 800d794:	0515565b 	.word	0x0515565b

0800d798 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7ae:	4b1f      	ldr	r3, [pc, #124]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7b0:	7a5b      	ldrb	r3, [r3, #9]
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d131      	bne.n	800d81c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7b8:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7ba:	7a5b      	ldrb	r3, [r3, #9]
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	461a      	mov	r2, r3
 800d7c0:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7c6:	4b19      	ldr	r3, [pc, #100]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7c8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	4a17      	ldr	r2, [pc, #92]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7d6:	4b15      	ldr	r3, [pc, #84]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7d8:	7a5b      	ldrb	r3, [r3, #9]
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	79fa      	ldrb	r2, [r7, #7]
 800d7e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7e6:	4b11      	ldr	r3, [pc, #68]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7e8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	b2d1      	uxtb	r1, r2
 800d7f0:	4a0e      	ldr	r2, [pc, #56]	; (800d82c <FATFS_LinkDriverEx+0x94>)
 800d7f2:	7251      	strb	r1, [r2, #9]
 800d7f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7f6:	7dbb      	ldrb	r3, [r7, #22]
 800d7f8:	3330      	adds	r3, #48	; 0x30
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	3301      	adds	r3, #1
 800d804:	223a      	movs	r2, #58	; 0x3a
 800d806:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	3302      	adds	r3, #2
 800d80c:	222f      	movs	r2, #47	; 0x2f
 800d80e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	3303      	adds	r3, #3
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	371c      	adds	r7, #28
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	2000191c 	.word	0x2000191c

0800d830 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d83a:	2200      	movs	r2, #0
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff ffaa 	bl	800d798 <FATFS_LinkDriverEx>
 800d844:	4603      	mov	r3, r0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	4603      	mov	r3, r0
 800d856:	6039      	str	r1, [r7, #0]
 800d858:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800d85a:	2200      	movs	r2, #0
 800d85c:	2101      	movs	r1, #1
 800d85e:	2001      	movs	r0, #1
 800d860:	f000 f978 	bl	800db54 <osSemaphoreNew>
 800d864:	4602      	mov	r2, r0
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	bf14      	ite	ne
 800d872:	2301      	movne	r3, #1
 800d874:	2300      	moveq	r3, #0
 800d876:	b2db      	uxtb	r3, r3
 800d878:	60fb      	str	r3, [r7, #12]

    return ret;
 800d87a:	68fb      	ldr	r3, [r7, #12]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fa81 	bl	800dd94 <osSemaphoreDelete>
#endif
    return 1;
 800d892:	2301      	movs	r3, #1
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d8a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f9db 	bl	800dc68 <osSemaphoreAcquire>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 fa1c 	bl	800dd0c <osSemaphoreRelease>
#endif
}
 800d8d4:	bf00      	nop
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <__NVIC_SetPriority>:
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	6039      	str	r1, [r7, #0]
 800d8e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d8e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	db0a      	blt.n	800d906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	490c      	ldr	r1, [pc, #48]	; (800d928 <__NVIC_SetPriority+0x4c>)
 800d8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8fa:	0112      	lsls	r2, r2, #4
 800d8fc:	b2d2      	uxtb	r2, r2
 800d8fe:	440b      	add	r3, r1
 800d900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d904:	e00a      	b.n	800d91c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	4908      	ldr	r1, [pc, #32]	; (800d92c <__NVIC_SetPriority+0x50>)
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	f003 030f 	and.w	r3, r3, #15
 800d912:	3b04      	subs	r3, #4
 800d914:	0112      	lsls	r2, r2, #4
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	440b      	add	r3, r1
 800d91a:	761a      	strb	r2, [r3, #24]
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	e000e100 	.word	0xe000e100
 800d92c:	e000ed00 	.word	0xe000ed00

0800d930 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <SysTick_Handler+0x1c>)
 800d936:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d938:	f002 fade 	bl	800fef8 <xTaskGetSchedulerState>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d001      	beq.n	800d946 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d942:	f003 f9c1 	bl	8010cc8 <xPortSysTickHandler>
  }
}
 800d946:	bf00      	nop
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	e000e010 	.word	0xe000e010

0800d950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d954:	2100      	movs	r1, #0
 800d956:	f06f 0004 	mvn.w	r0, #4
 800d95a:	f7ff ffbf 	bl	800d8dc <__NVIC_SetPriority>
#endif
}
 800d95e:	bf00      	nop
 800d960:	bd80      	pop	{r7, pc}
	...

0800d964 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d96a:	f3ef 8305 	mrs	r3, IPSR
 800d96e:	603b      	str	r3, [r7, #0]
  return(result);
 800d970:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d976:	f06f 0305 	mvn.w	r3, #5
 800d97a:	607b      	str	r3, [r7, #4]
 800d97c:	e00c      	b.n	800d998 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d97e:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <osKernelInitialize+0x44>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <osKernelInitialize+0x44>)
 800d988:	2201      	movs	r2, #1
 800d98a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	607b      	str	r3, [r7, #4]
 800d990:	e002      	b.n	800d998 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d998:	687b      	ldr	r3, [r7, #4]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	20001928 	.word	0x20001928

0800d9ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9b2:	f3ef 8305 	mrs	r3, IPSR
 800d9b6:	603b      	str	r3, [r7, #0]
  return(result);
 800d9b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d9be:	f06f 0305 	mvn.w	r3, #5
 800d9c2:	607b      	str	r3, [r7, #4]
 800d9c4:	e010      	b.n	800d9e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d9c6:	4b0b      	ldr	r3, [pc, #44]	; (800d9f4 <osKernelStart+0x48>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d109      	bne.n	800d9e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d9ce:	f7ff ffbf 	bl	800d950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d9d2:	4b08      	ldr	r3, [pc, #32]	; (800d9f4 <osKernelStart+0x48>)
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d9d8:	f001 fe46 	bl	800f668 <vTaskStartScheduler>
      stat = osOK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	607b      	str	r3, [r7, #4]
 800d9e0:	e002      	b.n	800d9e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d9e8:	687b      	ldr	r3, [r7, #4]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20001928 	.word	0x20001928

0800d9f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08e      	sub	sp, #56	; 0x38
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da08:	f3ef 8305 	mrs	r3, IPSR
 800da0c:	617b      	str	r3, [r7, #20]
  return(result);
 800da0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800da10:	2b00      	cmp	r3, #0
 800da12:	d17f      	bne.n	800db14 <osThreadNew+0x11c>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d07c      	beq.n	800db14 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800da1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800da20:	2318      	movs	r3, #24
 800da22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800da24:	2300      	movs	r3, #0
 800da26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800da28:	f04f 33ff 	mov.w	r3, #4294967295
 800da2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d045      	beq.n	800dac0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <osThreadNew+0x4a>
        name = attr->name;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d008      	beq.n	800da68 <osThreadNew+0x70>
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2b38      	cmp	r3, #56	; 0x38
 800da5a:	d805      	bhi.n	800da68 <osThreadNew+0x70>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d001      	beq.n	800da6c <osThreadNew+0x74>
        return (NULL);
 800da68:	2300      	movs	r3, #0
 800da6a:	e054      	b.n	800db16 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d003      	beq.n	800da7c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	089b      	lsrs	r3, r3, #2
 800da7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00e      	beq.n	800daa2 <osThreadNew+0xaa>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	2b6b      	cmp	r3, #107	; 0x6b
 800da8a:	d90a      	bls.n	800daa2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da90:	2b00      	cmp	r3, #0
 800da92:	d006      	beq.n	800daa2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	695b      	ldr	r3, [r3, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <osThreadNew+0xaa>
        mem = 1;
 800da9c:	2301      	movs	r3, #1
 800da9e:	61bb      	str	r3, [r7, #24]
 800daa0:	e010      	b.n	800dac4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10c      	bne.n	800dac4 <osThreadNew+0xcc>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d108      	bne.n	800dac4 <osThreadNew+0xcc>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d104      	bne.n	800dac4 <osThreadNew+0xcc>
          mem = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]
 800dabe:	e001      	b.n	800dac4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d110      	bne.n	800daec <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dad2:	9202      	str	r2, [sp, #8]
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	6a3a      	ldr	r2, [r7, #32]
 800dade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f001 fae5 	bl	800f0b0 <xTaskCreateStatic>
 800dae6:	4603      	mov	r3, r0
 800dae8:	613b      	str	r3, [r7, #16]
 800daea:	e013      	b.n	800db14 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d110      	bne.n	800db14 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800daf2:	6a3b      	ldr	r3, [r7, #32]
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	f107 0310 	add.w	r3, r7, #16
 800dafa:	9301      	str	r3, [sp, #4]
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f001 fb30 	bl	800f16a <xTaskCreate>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d001      	beq.n	800db14 <osThreadNew+0x11c>
            hTask = NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800db14:	693b      	ldr	r3, [r7, #16]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3728      	adds	r7, #40	; 0x28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db26:	f3ef 8305 	mrs	r3, IPSR
 800db2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800db2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <osDelay+0x1c>
    stat = osErrorISR;
 800db32:	f06f 0305 	mvn.w	r3, #5
 800db36:	60fb      	str	r3, [r7, #12]
 800db38:	e007      	b.n	800db4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <osDelay+0x2c>
      vTaskDelay(ticks);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f001 fc55 	bl	800f3f4 <vTaskDelay>
    }
  }

  return (stat);
 800db4a:	68fb      	ldr	r3, [r7, #12]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b08a      	sub	sp, #40	; 0x28
 800db58:	af02      	add	r7, sp, #8
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db64:	f3ef 8305 	mrs	r3, IPSR
 800db68:	613b      	str	r3, [r7, #16]
  return(result);
 800db6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d175      	bne.n	800dc5c <osSemaphoreNew+0x108>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d072      	beq.n	800dc5c <osSemaphoreNew+0x108>
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d86e      	bhi.n	800dc5c <osSemaphoreNew+0x108>
    mem = -1;
 800db7e:	f04f 33ff 	mov.w	r3, #4294967295
 800db82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d015      	beq.n	800dbb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d006      	beq.n	800dba0 <osSemaphoreNew+0x4c>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	2b4f      	cmp	r3, #79	; 0x4f
 800db98:	d902      	bls.n	800dba0 <osSemaphoreNew+0x4c>
        mem = 1;
 800db9a:	2301      	movs	r3, #1
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	e00c      	b.n	800dbba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d108      	bne.n	800dbba <osSemaphoreNew+0x66>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d104      	bne.n	800dbba <osSemaphoreNew+0x66>
          mem = 0;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61bb      	str	r3, [r7, #24]
 800dbb4:	e001      	b.n	800dbba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc0:	d04c      	beq.n	800dc5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d128      	bne.n	800dc1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d10a      	bne.n	800dbe4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	2203      	movs	r2, #3
 800dbd4:	9200      	str	r2, [sp, #0]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2100      	movs	r1, #0
 800dbda:	2001      	movs	r0, #1
 800dbdc:	f000 fac2 	bl	800e164 <xQueueGenericCreateStatic>
 800dbe0:	61f8      	str	r0, [r7, #28]
 800dbe2:	e005      	b.n	800dbf0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dbe4:	2203      	movs	r2, #3
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	2001      	movs	r0, #1
 800dbea:	f000 fb33 	bl	800e254 <xQueueGenericCreate>
 800dbee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d022      	beq.n	800dc3c <osSemaphoreNew+0xe8>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01f      	beq.n	800dc3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2100      	movs	r1, #0
 800dc02:	69f8      	ldr	r0, [r7, #28]
 800dc04:	f000 fbee 	bl	800e3e4 <xQueueGenericSend>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d016      	beq.n	800dc3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dc0e:	69f8      	ldr	r0, [r7, #28]
 800dc10:	f001 f87a 	bl	800ed08 <vQueueDelete>
            hSemaphore = NULL;
 800dc14:	2300      	movs	r3, #0
 800dc16:	61fb      	str	r3, [r7, #28]
 800dc18:	e010      	b.n	800dc3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d108      	bne.n	800dc32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	461a      	mov	r2, r3
 800dc26:	68b9      	ldr	r1, [r7, #8]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 fb70 	bl	800e30e <xQueueCreateCountingSemaphoreStatic>
 800dc2e:	61f8      	str	r0, [r7, #28]
 800dc30:	e004      	b.n	800dc3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dc32:	68b9      	ldr	r1, [r7, #8]
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 fba1 	bl	800e37c <xQueueCreateCountingSemaphore>
 800dc3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00c      	beq.n	800dc5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d003      	beq.n	800dc50 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	e001      	b.n	800dc54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dc50:	2300      	movs	r3, #0
 800dc52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dc54:	6979      	ldr	r1, [r7, #20]
 800dc56:	69f8      	ldr	r0, [r7, #28]
 800dc58:	f001 f9a2 	bl	800efa0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dc5c:	69fb      	ldr	r3, [r7, #28]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
	...

0800dc68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d103      	bne.n	800dc88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dc80:	f06f 0303 	mvn.w	r3, #3
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	e039      	b.n	800dcfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc88:	f3ef 8305 	mrs	r3, IPSR
 800dc8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d022      	beq.n	800dcda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d003      	beq.n	800dca2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dc9a:	f06f 0303 	mvn.w	r3, #3
 800dc9e:	617b      	str	r3, [r7, #20]
 800dca0:	e02c      	b.n	800dcfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dca6:	f107 0308 	add.w	r3, r7, #8
 800dcaa:	461a      	mov	r2, r3
 800dcac:	2100      	movs	r1, #0
 800dcae:	6938      	ldr	r0, [r7, #16]
 800dcb0:	f000 ffaa 	bl	800ec08 <xQueueReceiveFromISR>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d003      	beq.n	800dcc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dcba:	f06f 0302 	mvn.w	r3, #2
 800dcbe:	617b      	str	r3, [r7, #20]
 800dcc0:	e01c      	b.n	800dcfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d019      	beq.n	800dcfc <osSemaphoreAcquire+0x94>
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <osSemaphoreAcquire+0xa0>)
 800dcca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	e010      	b.n	800dcfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6938      	ldr	r0, [r7, #16]
 800dcde:	f000 fe87 	bl	800e9f0 <xQueueSemaphoreTake>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d009      	beq.n	800dcfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dcee:	f06f 0301 	mvn.w	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e002      	b.n	800dcfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dcf6:	f06f 0302 	mvn.w	r3, #2
 800dcfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dcfc:	697b      	ldr	r3, [r7, #20]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	e000ed04 	.word	0xe000ed04

0800dd0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d103      	bne.n	800dd2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dd22:	f06f 0303 	mvn.w	r3, #3
 800dd26:	617b      	str	r3, [r7, #20]
 800dd28:	e02c      	b.n	800dd84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd2a:	f3ef 8305 	mrs	r3, IPSR
 800dd2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d01a      	beq.n	800dd6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dd3a:	f107 0308 	add.w	r3, r7, #8
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6938      	ldr	r0, [r7, #16]
 800dd42:	f000 fce8 	bl	800e716 <xQueueGiveFromISR>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d003      	beq.n	800dd54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dd4c:	f06f 0302 	mvn.w	r3, #2
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	e017      	b.n	800dd84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d014      	beq.n	800dd84 <osSemaphoreRelease+0x78>
 800dd5a:	4b0d      	ldr	r3, [pc, #52]	; (800dd90 <osSemaphoreRelease+0x84>)
 800dd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	e00b      	b.n	800dd84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	2200      	movs	r2, #0
 800dd70:	2100      	movs	r1, #0
 800dd72:	6938      	ldr	r0, [r7, #16]
 800dd74:	f000 fb36 	bl	800e3e4 <xQueueGenericSend>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d002      	beq.n	800dd84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800dd7e:	f06f 0302 	mvn.w	r3, #2
 800dd82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dd84:	697b      	ldr	r3, [r7, #20]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3718      	adds	r7, #24
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	e000ed04 	.word	0xe000ed04

0800dd94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dda0:	f3ef 8305 	mrs	r3, IPSR
 800dda4:	60fb      	str	r3, [r7, #12]
  return(result);
 800dda6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800ddac:	f06f 0305 	mvn.w	r3, #5
 800ddb0:	617b      	str	r3, [r7, #20]
 800ddb2:	e00e      	b.n	800ddd2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800ddba:	f06f 0303 	mvn.w	r3, #3
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	e007      	b.n	800ddd2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800ddc2:	6938      	ldr	r0, [r7, #16]
 800ddc4:	f001 f916 	bl	800eff4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800ddcc:	6938      	ldr	r0, [r7, #16]
 800ddce:	f000 ff9b 	bl	800ed08 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ddd2:	697b      	ldr	r3, [r7, #20]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08a      	sub	sp, #40	; 0x28
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddec:	f3ef 8305 	mrs	r3, IPSR
 800ddf0:	613b      	str	r3, [r7, #16]
  return(result);
 800ddf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d15f      	bne.n	800deb8 <osMessageQueueNew+0xdc>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d05c      	beq.n	800deb8 <osMessageQueueNew+0xdc>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d059      	beq.n	800deb8 <osMessageQueueNew+0xdc>
    mem = -1;
 800de04:	f04f 33ff 	mov.w	r3, #4294967295
 800de08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d029      	beq.n	800de64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d012      	beq.n	800de3e <osMessageQueueNew+0x62>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	2b4f      	cmp	r3, #79	; 0x4f
 800de1e:	d90e      	bls.n	800de3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00a      	beq.n	800de3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	695a      	ldr	r2, [r3, #20]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	68b9      	ldr	r1, [r7, #8]
 800de30:	fb01 f303 	mul.w	r3, r1, r3
 800de34:	429a      	cmp	r2, r3
 800de36:	d302      	bcc.n	800de3e <osMessageQueueNew+0x62>
        mem = 1;
 800de38:	2301      	movs	r3, #1
 800de3a:	61bb      	str	r3, [r7, #24]
 800de3c:	e014      	b.n	800de68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d110      	bne.n	800de68 <osMessageQueueNew+0x8c>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d10c      	bne.n	800de68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de52:	2b00      	cmp	r3, #0
 800de54:	d108      	bne.n	800de68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d104      	bne.n	800de68 <osMessageQueueNew+0x8c>
          mem = 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	61bb      	str	r3, [r7, #24]
 800de62:	e001      	b.n	800de68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d10b      	bne.n	800de86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691a      	ldr	r2, [r3, #16]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	2100      	movs	r1, #0
 800de78:	9100      	str	r1, [sp, #0]
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 f971 	bl	800e164 <xQueueGenericCreateStatic>
 800de82:	61f8      	str	r0, [r7, #28]
 800de84:	e008      	b.n	800de98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d105      	bne.n	800de98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800de8c:	2200      	movs	r2, #0
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 f9df 	bl	800e254 <xQueueGenericCreate>
 800de96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00c      	beq.n	800deb8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <osMessageQueueNew+0xd0>
        name = attr->name;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e001      	b.n	800deb0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800deb0:	6979      	ldr	r1, [r7, #20]
 800deb2:	69f8      	ldr	r0, [r7, #28]
 800deb4:	f001 f874 	bl	800efa0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800deb8:	69fb      	ldr	r3, [r7, #28]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	4a07      	ldr	r2, [pc, #28]	; (800def0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ded4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	4a06      	ldr	r2, [pc, #24]	; (800def4 <vApplicationGetIdleTaskMemory+0x30>)
 800deda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dee2:	601a      	str	r2, [r3, #0]
}
 800dee4:	bf00      	nop
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	2000192c 	.word	0x2000192c
 800def4:	20001998 	.word	0x20001998

0800def8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	4a07      	ldr	r2, [pc, #28]	; (800df24 <vApplicationGetTimerTaskMemory+0x2c>)
 800df08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	4a06      	ldr	r2, [pc, #24]	; (800df28 <vApplicationGetTimerTaskMemory+0x30>)
 800df0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df16:	601a      	str	r2, [r3, #0]
}
 800df18:	bf00      	nop
 800df1a:	3714      	adds	r7, #20
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	20001d98 	.word	0x20001d98
 800df28:	20001e04 	.word	0x20001e04

0800df2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f103 0208 	add.w	r2, r3, #8
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f04f 32ff 	mov.w	r2, #4294967295
 800df44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f103 0208 	add.w	r2, r3, #8
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f103 0208 	add.w	r2, r3, #8
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df7a:	bf00      	nop
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df86:	b480      	push	{r7}
 800df88:	b085      	sub	sp, #20
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	601a      	str	r2, [r3, #0]
}
 800dfc2:	bf00      	nop
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d103      	bne.n	800dfee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e00c      	b.n	800e008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3308      	adds	r3, #8
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e002      	b.n	800dffc <vListInsert+0x2e>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	429a      	cmp	r2, r3
 800e006:	d2f6      	bcs.n	800dff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	685a      	ldr	r2, [r3, #4]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6892      	ldr	r2, [r2, #8]
 800e056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	6852      	ldr	r2, [r2, #4]
 800e060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d103      	bne.n	800e074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	689a      	ldr	r2, [r3, #8]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	1e5a      	subs	r2, r3, #1
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e0be:	f002 fd71 	bl	8010ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	68f9      	ldr	r1, [r7, #12]
 800e0cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0ce:	fb01 f303 	mul.w	r3, r1, r3
 800e0d2:	441a      	add	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0f4:	fb01 f303 	mul.w	r3, r1, r3
 800e0f8:	441a      	add	r2, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	22ff      	movs	r2, #255	; 0xff
 800e102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	22ff      	movs	r2, #255	; 0xff
 800e10a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d114      	bne.n	800e13e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01a      	beq.n	800e152 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	3310      	adds	r3, #16
 800e120:	4618      	mov	r0, r3
 800e122:	f001 fd2b 	bl	800fb7c <xTaskRemoveFromEventList>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d012      	beq.n	800e152 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e12c:	4b0c      	ldr	r3, [pc, #48]	; (800e160 <xQueueGenericReset+0xcc>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	e009      	b.n	800e152 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3310      	adds	r3, #16
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fef2 	bl	800df2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3324      	adds	r3, #36	; 0x24
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff feed 	bl	800df2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e152:	f002 fd57 	bl	8010c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e156:	2301      	movs	r3, #1
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	e000ed04 	.word	0xe000ed04

0800e164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08e      	sub	sp, #56	; 0x38
 800e168:	af02      	add	r7, sp, #8
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10a      	bne.n	800e1aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <xQueueGenericCreateStatic+0x52>
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d001      	beq.n	800e1ba <xQueueGenericCreateStatic+0x56>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <xQueueGenericCreateStatic+0x58>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10a      	bne.n	800e1d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	623b      	str	r3, [r7, #32]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d102      	bne.n	800e1e2 <xQueueGenericCreateStatic+0x7e>
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <xQueueGenericCreateStatic+0x82>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e000      	b.n	800e1e8 <xQueueGenericCreateStatic+0x84>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10a      	bne.n	800e202 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	61fb      	str	r3, [r7, #28]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e202:	2350      	movs	r3, #80	; 0x50
 800e204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b50      	cmp	r3, #80	; 0x50
 800e20a:	d00a      	beq.n	800e222 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	61bb      	str	r3, [r7, #24]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e222:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00d      	beq.n	800e24a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	2201      	movs	r2, #1
 800e232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e236:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	4613      	mov	r3, r2
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	68b9      	ldr	r1, [r7, #8]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 f83f 	bl	800e2c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3730      	adds	r7, #48	; 0x30
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e254:	b580      	push	{r7, lr}
 800e256:	b08a      	sub	sp, #40	; 0x28
 800e258:	af02      	add	r7, sp, #8
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	4613      	mov	r3, r2
 800e260:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10a      	bne.n	800e27e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	613b      	str	r3, [r7, #16]
}
 800e27a:	bf00      	nop
 800e27c:	e7fe      	b.n	800e27c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	fb02 f303 	mul.w	r3, r2, r3
 800e286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	3350      	adds	r3, #80	; 0x50
 800e28c:	4618      	mov	r0, r3
 800e28e:	f002 fdab 	bl	8010de8 <pvPortMalloc>
 800e292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d011      	beq.n	800e2be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	3350      	adds	r3, #80	; 0x50
 800e2a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	697a      	ldr	r2, [r7, #20]
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f000 f805 	bl	800e2c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2be:	69bb      	ldr	r3, [r7, #24]
	}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3720      	adds	r7, #32
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d103      	bne.n	800e2e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	e002      	b.n	800e2ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	69b8      	ldr	r0, [r7, #24]
 800e2fa:	f7ff fecb 	bl	800e094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	78fa      	ldrb	r2, [r7, #3]
 800e302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e306:	bf00      	nop
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b08a      	sub	sp, #40	; 0x28
 800e312:	af02      	add	r7, sp, #8
 800e314:	60f8      	str	r0, [r7, #12]
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10a      	bne.n	800e336 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	61bb      	str	r3, [r7, #24]
}
 800e332:	bf00      	nop
 800e334:	e7fe      	b.n	800e334 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d90a      	bls.n	800e354 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	617b      	str	r3, [r7, #20]
}
 800e350:	bf00      	nop
 800e352:	e7fe      	b.n	800e352 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e354:	2302      	movs	r3, #2
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	2100      	movs	r1, #0
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f7ff ff00 	bl	800e164 <xQueueGenericCreateStatic>
 800e364:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e372:	69fb      	ldr	r3, [r7, #28]
	}
 800e374:	4618      	mov	r0, r3
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b086      	sub	sp, #24
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	613b      	str	r3, [r7, #16]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d90a      	bls.n	800e3c0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	60fb      	str	r3, [r7, #12]
}
 800e3bc:	bf00      	nop
 800e3be:	e7fe      	b.n	800e3be <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3c0:	2202      	movs	r2, #2
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff ff45 	bl	800e254 <xQueueGenericCreate>
 800e3ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d002      	beq.n	800e3d8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3d8:	697b      	ldr	r3, [r7, #20]
	}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
	...

0800e3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08e      	sub	sp, #56	; 0x38
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10a      	bne.n	800e416 <xQueueGenericSend+0x32>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e412:	bf00      	nop
 800e414:	e7fe      	b.n	800e414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <xQueueGenericSend+0x40>
 800e41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e420:	2b00      	cmp	r3, #0
 800e422:	d101      	bne.n	800e428 <xQueueGenericSend+0x44>
 800e424:	2301      	movs	r3, #1
 800e426:	e000      	b.n	800e42a <xQueueGenericSend+0x46>
 800e428:	2300      	movs	r3, #0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10a      	bne.n	800e444 <xQueueGenericSend+0x60>
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e440:	bf00      	nop
 800e442:	e7fe      	b.n	800e442 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b02      	cmp	r3, #2
 800e448:	d103      	bne.n	800e452 <xQueueGenericSend+0x6e>
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d101      	bne.n	800e456 <xQueueGenericSend+0x72>
 800e452:	2301      	movs	r3, #1
 800e454:	e000      	b.n	800e458 <xQueueGenericSend+0x74>
 800e456:	2300      	movs	r3, #0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <xQueueGenericSend+0x8e>
	__asm volatile
 800e45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	623b      	str	r3, [r7, #32]
}
 800e46e:	bf00      	nop
 800e470:	e7fe      	b.n	800e470 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e472:	f001 fd41 	bl	800fef8 <xTaskGetSchedulerState>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d102      	bne.n	800e482 <xQueueGenericSend+0x9e>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <xQueueGenericSend+0xa2>
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <xQueueGenericSend+0xa4>
 800e486:	2300      	movs	r3, #0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	61fb      	str	r3, [r7, #28]
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4a2:	f002 fb7f 	bl	8010ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d302      	bcc.n	800e4b8 <xQueueGenericSend+0xd4>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d129      	bne.n	800e50c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4be:	f000 fc5e 	bl	800ed7e <prvCopyDataToQueue>
 800e4c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d010      	beq.n	800e4ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ce:	3324      	adds	r3, #36	; 0x24
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f001 fb53 	bl	800fb7c <xTaskRemoveFromEventList>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d013      	beq.n	800e504 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4dc:	4b3f      	ldr	r3, [pc, #252]	; (800e5dc <xQueueGenericSend+0x1f8>)
 800e4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4e2:	601a      	str	r2, [r3, #0]
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	e00a      	b.n	800e504 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d007      	beq.n	800e504 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4f4:	4b39      	ldr	r3, [pc, #228]	; (800e5dc <xQueueGenericSend+0x1f8>)
 800e4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e504:	f002 fb7e 	bl	8010c04 <vPortExitCritical>
				return pdPASS;
 800e508:	2301      	movs	r3, #1
 800e50a:	e063      	b.n	800e5d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d103      	bne.n	800e51a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e512:	f002 fb77 	bl	8010c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e516:	2300      	movs	r3, #0
 800e518:	e05c      	b.n	800e5d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d106      	bne.n	800e52e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	4618      	mov	r0, r3
 800e526:	f001 fb8d 	bl	800fc44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e52a:	2301      	movs	r3, #1
 800e52c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e52e:	f002 fb69 	bl	8010c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e532:	f001 f8ff 	bl	800f734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e536:	f002 fb35 	bl	8010ba4 <vPortEnterCritical>
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e540:	b25b      	sxtb	r3, r3
 800e542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e546:	d103      	bne.n	800e550 <xQueueGenericSend+0x16c>
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e556:	b25b      	sxtb	r3, r3
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55c:	d103      	bne.n	800e566 <xQueueGenericSend+0x182>
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	2200      	movs	r2, #0
 800e562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e566:	f002 fb4d 	bl	8010c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e56a:	1d3a      	adds	r2, r7, #4
 800e56c:	f107 0314 	add.w	r3, r7, #20
 800e570:	4611      	mov	r1, r2
 800e572:	4618      	mov	r0, r3
 800e574:	f001 fb7c 	bl	800fc70 <xTaskCheckForTimeOut>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d124      	bne.n	800e5c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e580:	f000 fcf5 	bl	800ef6e <prvIsQueueFull>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d018      	beq.n	800e5bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	3310      	adds	r3, #16
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f001 faa2 	bl	800fadc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e59a:	f000 fc80 	bl	800ee9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e59e:	f001 f8d7 	bl	800f750 <xTaskResumeAll>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f47f af7c 	bne.w	800e4a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e5aa:	4b0c      	ldr	r3, [pc, #48]	; (800e5dc <xQueueGenericSend+0x1f8>)
 800e5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	e772      	b.n	800e4a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5be:	f000 fc6e 	bl	800ee9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5c2:	f001 f8c5 	bl	800f750 <xTaskResumeAll>
 800e5c6:	e76c      	b.n	800e4a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ca:	f000 fc68 	bl	800ee9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ce:	f001 f8bf 	bl	800f750 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3738      	adds	r7, #56	; 0x38
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	e000ed04 	.word	0xe000ed04

0800e5e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b090      	sub	sp, #64	; 0x40
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10a      	bne.n	800e60e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e60a:	bf00      	nop
 800e60c:	e7fe      	b.n	800e60c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d103      	bne.n	800e61c <xQueueGenericSendFromISR+0x3c>
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d101      	bne.n	800e620 <xQueueGenericSendFromISR+0x40>
 800e61c:	2301      	movs	r3, #1
 800e61e:	e000      	b.n	800e622 <xQueueGenericSendFromISR+0x42>
 800e620:	2300      	movs	r3, #0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10a      	bne.n	800e63c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e638:	bf00      	nop
 800e63a:	e7fe      	b.n	800e63a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d103      	bne.n	800e64a <xQueueGenericSendFromISR+0x6a>
 800e642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e646:	2b01      	cmp	r3, #1
 800e648:	d101      	bne.n	800e64e <xQueueGenericSendFromISR+0x6e>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e000      	b.n	800e650 <xQueueGenericSendFromISR+0x70>
 800e64e:	2300      	movs	r3, #0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	623b      	str	r3, [r7, #32]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e66a:	f002 fb7d 	bl	8010d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e66e:	f3ef 8211 	mrs	r2, BASEPRI
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	61fa      	str	r2, [r7, #28]
 800e684:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e686:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e688:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e692:	429a      	cmp	r2, r3
 800e694:	d302      	bcc.n	800e69c <xQueueGenericSendFromISR+0xbc>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d12f      	bne.n	800e6fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6ac:	683a      	ldr	r2, [r7, #0]
 800e6ae:	68b9      	ldr	r1, [r7, #8]
 800e6b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6b2:	f000 fb64 	bl	800ed7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6be:	d112      	bne.n	800e6e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d016      	beq.n	800e6f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	3324      	adds	r3, #36	; 0x24
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f001 fa55 	bl	800fb7c <xTaskRemoveFromEventList>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00e      	beq.n	800e6f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00b      	beq.n	800e6f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	e007      	b.n	800e6f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	b25a      	sxtb	r2, r3
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e6fa:	e001      	b.n	800e700 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e702:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e70a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3740      	adds	r7, #64	; 0x40
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b08e      	sub	sp, #56	; 0x38
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10a      	bne.n	800e740 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	623b      	str	r3, [r7, #32]
}
 800e73c:	bf00      	nop
 800e73e:	e7fe      	b.n	800e73e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00a      	beq.n	800e75e <xQueueGiveFromISR+0x48>
	__asm volatile
 800e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74c:	f383 8811 	msr	BASEPRI, r3
 800e750:	f3bf 8f6f 	isb	sy
 800e754:	f3bf 8f4f 	dsb	sy
 800e758:	61fb      	str	r3, [r7, #28]
}
 800e75a:	bf00      	nop
 800e75c:	e7fe      	b.n	800e75c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d103      	bne.n	800e76e <xQueueGiveFromISR+0x58>
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <xQueueGiveFromISR+0x5c>
 800e76e:	2301      	movs	r3, #1
 800e770:	e000      	b.n	800e774 <xQueueGiveFromISR+0x5e>
 800e772:	2300      	movs	r3, #0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10a      	bne.n	800e78e <xQueueGiveFromISR+0x78>
	__asm volatile
 800e778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77c:	f383 8811 	msr	BASEPRI, r3
 800e780:	f3bf 8f6f 	isb	sy
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	61bb      	str	r3, [r7, #24]
}
 800e78a:	bf00      	nop
 800e78c:	e7fe      	b.n	800e78c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e78e:	f002 faeb 	bl	8010d68 <vPortValidateInterruptPriority>
	__asm volatile
 800e792:	f3ef 8211 	mrs	r2, BASEPRI
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	617a      	str	r2, [r7, #20]
 800e7a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d22b      	bcs.n	800e816 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d8:	d112      	bne.n	800e800 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d016      	beq.n	800e810 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e4:	3324      	adds	r3, #36	; 0x24
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f001 f9c8 	bl	800fb7c <xTaskRemoveFromEventList>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00e      	beq.n	800e810 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00b      	beq.n	800e810 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e007      	b.n	800e810 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e804:	3301      	adds	r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	b25a      	sxtb	r2, r3
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e810:	2301      	movs	r3, #1
 800e812:	637b      	str	r3, [r7, #52]	; 0x34
 800e814:	e001      	b.n	800e81a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e816:	2300      	movs	r3, #0
 800e818:	637b      	str	r3, [r7, #52]	; 0x34
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f383 8811 	msr	BASEPRI, r3
}
 800e824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3738      	adds	r7, #56	; 0x38
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b08c      	sub	sp, #48	; 0x30
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e83c:	2300      	movs	r3, #0
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10a      	bne.n	800e860 <xQueueReceive+0x30>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	623b      	str	r3, [r7, #32]
}
 800e85c:	bf00      	nop
 800e85e:	e7fe      	b.n	800e85e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d103      	bne.n	800e86e <xQueueReceive+0x3e>
 800e866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <xQueueReceive+0x42>
 800e86e:	2301      	movs	r3, #1
 800e870:	e000      	b.n	800e874 <xQueueReceive+0x44>
 800e872:	2300      	movs	r3, #0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10a      	bne.n	800e88e <xQueueReceive+0x5e>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	61fb      	str	r3, [r7, #28]
}
 800e88a:	bf00      	nop
 800e88c:	e7fe      	b.n	800e88c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e88e:	f001 fb33 	bl	800fef8 <xTaskGetSchedulerState>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d102      	bne.n	800e89e <xQueueReceive+0x6e>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <xQueueReceive+0x72>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e000      	b.n	800e8a4 <xQueueReceive+0x74>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xQueueReceive+0x8e>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	61bb      	str	r3, [r7, #24]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8be:	f002 f971 	bl	8010ba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01f      	beq.n	800e90e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d2:	f000 fabe 	bl	800ee52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	1e5a      	subs	r2, r3, #1
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00f      	beq.n	800e906 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	3310      	adds	r3, #16
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f001 f946 	bl	800fb7c <xTaskRemoveFromEventList>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d007      	beq.n	800e906 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8f6:	4b3d      	ldr	r3, [pc, #244]	; (800e9ec <xQueueReceive+0x1bc>)
 800e8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e906:	f002 f97d 	bl	8010c04 <vPortExitCritical>
				return pdPASS;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e069      	b.n	800e9e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d103      	bne.n	800e91c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e914:	f002 f976 	bl	8010c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e918:	2300      	movs	r3, #0
 800e91a:	e062      	b.n	800e9e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d106      	bne.n	800e930 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e922:	f107 0310 	add.w	r3, r7, #16
 800e926:	4618      	mov	r0, r3
 800e928:	f001 f98c 	bl	800fc44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e92c:	2301      	movs	r3, #1
 800e92e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e930:	f002 f968 	bl	8010c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e934:	f000 fefe 	bl	800f734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e938:	f002 f934 	bl	8010ba4 <vPortEnterCritical>
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e942:	b25b      	sxtb	r3, r3
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e948:	d103      	bne.n	800e952 <xQueueReceive+0x122>
 800e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e958:	b25b      	sxtb	r3, r3
 800e95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e95e:	d103      	bne.n	800e968 <xQueueReceive+0x138>
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	2200      	movs	r2, #0
 800e964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e968:	f002 f94c 	bl	8010c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e96c:	1d3a      	adds	r2, r7, #4
 800e96e:	f107 0310 	add.w	r3, r7, #16
 800e972:	4611      	mov	r1, r2
 800e974:	4618      	mov	r0, r3
 800e976:	f001 f97b 	bl	800fc70 <xTaskCheckForTimeOut>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d123      	bne.n	800e9c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e982:	f000 fade 	bl	800ef42 <prvIsQueueEmpty>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d017      	beq.n	800e9bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	3324      	adds	r3, #36	; 0x24
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	4611      	mov	r1, r2
 800e994:	4618      	mov	r0, r3
 800e996:	f001 f8a1 	bl	800fadc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e99c:	f000 fa7f 	bl	800ee9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9a0:	f000 fed6 	bl	800f750 <xTaskResumeAll>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d189      	bne.n	800e8be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e9aa:	4b10      	ldr	r3, [pc, #64]	; (800e9ec <xQueueReceive+0x1bc>)
 800e9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	e780      	b.n	800e8be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9be:	f000 fa6e 	bl	800ee9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9c2:	f000 fec5 	bl	800f750 <xTaskResumeAll>
 800e9c6:	e77a      	b.n	800e8be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ca:	f000 fa68 	bl	800ee9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9ce:	f000 febf 	bl	800f750 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d4:	f000 fab5 	bl	800ef42 <prvIsQueueEmpty>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f43f af6f 	beq.w	800e8be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3730      	adds	r7, #48	; 0x30
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	e000ed04 	.word	0xe000ed04

0800e9f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08e      	sub	sp, #56	; 0x38
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea02:	2300      	movs	r3, #0
 800ea04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10a      	bne.n	800ea22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	623b      	str	r3, [r7, #32]
}
 800ea1e:	bf00      	nop
 800ea20:	e7fe      	b.n	800ea20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00a      	beq.n	800ea40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	61fb      	str	r3, [r7, #28]
}
 800ea3c:	bf00      	nop
 800ea3e:	e7fe      	b.n	800ea3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea40:	f001 fa5a 	bl	800fef8 <xTaskGetSchedulerState>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d102      	bne.n	800ea50 <xQueueSemaphoreTake+0x60>
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d101      	bne.n	800ea54 <xQueueSemaphoreTake+0x64>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e000      	b.n	800ea56 <xQueueSemaphoreTake+0x66>
 800ea54:	2300      	movs	r3, #0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	61bb      	str	r3, [r7, #24]
}
 800ea6c:	bf00      	nop
 800ea6e:	e7fe      	b.n	800ea6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea70:	f002 f898 	bl	8010ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d024      	beq.n	800eaca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	1e5a      	subs	r2, r3, #1
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ea90:	f001 fba8 	bl	80101e4 <pvTaskIncrementMutexHeldCount>
 800ea94:	4602      	mov	r2, r0
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00f      	beq.n	800eac2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	3310      	adds	r3, #16
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 f868 	bl	800fb7c <xTaskRemoveFromEventList>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d007      	beq.n	800eac2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eab2:	4b54      	ldr	r3, [pc, #336]	; (800ec04 <xQueueSemaphoreTake+0x214>)
 800eab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eac2:	f002 f89f 	bl	8010c04 <vPortExitCritical>
				return pdPASS;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e097      	b.n	800ebfa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d111      	bne.n	800eaf4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ead0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00a      	beq.n	800eaec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ead6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eada:	f383 8811 	msr	BASEPRI, r3
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	f3bf 8f4f 	dsb	sy
 800eae6:	617b      	str	r3, [r7, #20]
}
 800eae8:	bf00      	nop
 800eaea:	e7fe      	b.n	800eaea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eaec:	f002 f88a 	bl	8010c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	e082      	b.n	800ebfa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d106      	bne.n	800eb08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eafa:	f107 030c 	add.w	r3, r7, #12
 800eafe:	4618      	mov	r0, r3
 800eb00:	f001 f8a0 	bl	800fc44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb04:	2301      	movs	r3, #1
 800eb06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb08:	f002 f87c 	bl	8010c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb0c:	f000 fe12 	bl	800f734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb10:	f002 f848 	bl	8010ba4 <vPortEnterCritical>
 800eb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb1a:	b25b      	sxtb	r3, r3
 800eb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb20:	d103      	bne.n	800eb2a <xQueueSemaphoreTake+0x13a>
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb30:	b25b      	sxtb	r3, r3
 800eb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb36:	d103      	bne.n	800eb40 <xQueueSemaphoreTake+0x150>
 800eb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb40:	f002 f860 	bl	8010c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb44:	463a      	mov	r2, r7
 800eb46:	f107 030c 	add.w	r3, r7, #12
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f001 f88f 	bl	800fc70 <xTaskCheckForTimeOut>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d132      	bne.n	800ebbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb5a:	f000 f9f2 	bl	800ef42 <prvIsQueueEmpty>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d026      	beq.n	800ebb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d109      	bne.n	800eb80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800eb6c:	f002 f81a 	bl	8010ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f001 f9dd 	bl	800ff34 <xTaskPriorityInherit>
 800eb7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eb7c:	f002 f842 	bl	8010c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb82:	3324      	adds	r3, #36	; 0x24
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	4611      	mov	r1, r2
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 ffa7 	bl	800fadc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb90:	f000 f985 	bl	800ee9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb94:	f000 fddc 	bl	800f750 <xTaskResumeAll>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f47f af68 	bne.w	800ea70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800eba0:	4b18      	ldr	r3, [pc, #96]	; (800ec04 <xQueueSemaphoreTake+0x214>)
 800eba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eba6:	601a      	str	r2, [r3, #0]
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	e75e      	b.n	800ea70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ebb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebb4:	f000 f973 	bl	800ee9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebb8:	f000 fdca 	bl	800f750 <xTaskResumeAll>
 800ebbc:	e758      	b.n	800ea70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ebbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebc0:	f000 f96d 	bl	800ee9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebc4:	f000 fdc4 	bl	800f750 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebca:	f000 f9ba 	bl	800ef42 <prvIsQueueEmpty>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f43f af4d 	beq.w	800ea70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00d      	beq.n	800ebf8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ebdc:	f001 ffe2 	bl	8010ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ebe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebe2:	f000 f8b4 	bl	800ed4e <prvGetDisinheritPriorityAfterTimeout>
 800ebe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f001 fa76 	bl	80100e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ebf4:	f002 f806 	bl	8010c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ebf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3738      	adds	r7, #56	; 0x38
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	e000ed04 	.word	0xe000ed04

0800ec08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b08e      	sub	sp, #56	; 0x38
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10a      	bne.n	800ec34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ec1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	623b      	str	r3, [r7, #32]
}
 800ec30:	bf00      	nop
 800ec32:	e7fe      	b.n	800ec32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d103      	bne.n	800ec42 <xQueueReceiveFromISR+0x3a>
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <xQueueReceiveFromISR+0x3e>
 800ec42:	2301      	movs	r3, #1
 800ec44:	e000      	b.n	800ec48 <xQueueReceiveFromISR+0x40>
 800ec46:	2300      	movs	r3, #0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10a      	bne.n	800ec62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ec4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec50:	f383 8811 	msr	BASEPRI, r3
 800ec54:	f3bf 8f6f 	isb	sy
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	61fb      	str	r3, [r7, #28]
}
 800ec5e:	bf00      	nop
 800ec60:	e7fe      	b.n	800ec60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec62:	f002 f881 	bl	8010d68 <vPortValidateInterruptPriority>
	__asm volatile
 800ec66:	f3ef 8211 	mrs	r2, BASEPRI
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	61ba      	str	r2, [r7, #24]
 800ec7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ec7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d02f      	beq.n	800ecee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec9c:	f000 f8d9 	bl	800ee52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca2:	1e5a      	subs	r2, r3, #1
 800eca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb0:	d112      	bne.n	800ecd8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d016      	beq.n	800ece8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	3310      	adds	r3, #16
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 ff5c 	bl	800fb7c <xTaskRemoveFromEventList>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00e      	beq.n	800ece8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00b      	beq.n	800ece8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	e007      	b.n	800ece8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ecd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	b25a      	sxtb	r2, r3
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ece8:	2301      	movs	r3, #1
 800ecea:	637b      	str	r3, [r7, #52]	; 0x34
 800ecec:	e001      	b.n	800ecf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	f383 8811 	msr	BASEPRI, r3
}
 800ecfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3738      	adds	r7, #56	; 0x38
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10a      	bne.n	800ed30 <vQueueDelete+0x28>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	60bb      	str	r3, [r7, #8]
}
 800ed2c:	bf00      	nop
 800ed2e:	e7fe      	b.n	800ed2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f000 f95f 	bl	800eff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d102      	bne.n	800ed46 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f002 f91d 	bl	8010f80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ed46:	bf00      	nop
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed4e:	b480      	push	{r7}
 800ed50:	b085      	sub	sp, #20
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d006      	beq.n	800ed6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	e001      	b.n	800ed70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ed70:	68fb      	ldr	r3, [r7, #12]
	}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b086      	sub	sp, #24
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	60f8      	str	r0, [r7, #12]
 800ed86:	60b9      	str	r1, [r7, #8]
 800ed88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10d      	bne.n	800edb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d14d      	bne.n	800ee40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f001 f92b 	bl	8010004 <xTaskPriorityDisinherit>
 800edae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	609a      	str	r2, [r3, #8]
 800edb6:	e043      	b.n	800ee40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d119      	bne.n	800edf2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6858      	ldr	r0, [r3, #4]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc6:	461a      	mov	r2, r3
 800edc8:	68b9      	ldr	r1, [r7, #8]
 800edca:	f002 ff41 	bl	8011c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd6:	441a      	add	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d32b      	bcc.n	800ee40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	605a      	str	r2, [r3, #4]
 800edf0:	e026      	b.n	800ee40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	68d8      	ldr	r0, [r3, #12]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfa:	461a      	mov	r2, r3
 800edfc:	68b9      	ldr	r1, [r7, #8]
 800edfe:	f002 ff27 	bl	8011c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	68da      	ldr	r2, [r3, #12]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0a:	425b      	negs	r3, r3
 800ee0c:	441a      	add	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	68da      	ldr	r2, [r3, #12]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d207      	bcs.n	800ee2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	689a      	ldr	r2, [r3, #8]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee26:	425b      	negs	r3, r3
 800ee28:	441a      	add	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d105      	bne.n	800ee40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d002      	beq.n	800ee40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ee48:	697b      	ldr	r3, [r7, #20]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d018      	beq.n	800ee96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68da      	ldr	r2, [r3, #12]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee6c:	441a      	add	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68da      	ldr	r2, [r3, #12]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d303      	bcc.n	800ee86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68d9      	ldr	r1, [r3, #12]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6838      	ldr	r0, [r7, #0]
 800ee92:	f002 fedd 	bl	8011c50 <memcpy>
	}
}
 800ee96:	bf00      	nop
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eea6:	f001 fe7d 	bl	8010ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eeb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eeb2:	e011      	b.n	800eed8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d012      	beq.n	800eee2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3324      	adds	r3, #36	; 0x24
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 fe5b 	bl	800fb7c <xTaskRemoveFromEventList>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eecc:	f000 ff32 	bl	800fd34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	dce9      	bgt.n	800eeb4 <prvUnlockQueue+0x16>
 800eee0:	e000      	b.n	800eee4 <prvUnlockQueue+0x46>
					break;
 800eee2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	22ff      	movs	r2, #255	; 0xff
 800eee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eeec:	f001 fe8a 	bl	8010c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eef0:	f001 fe58 	bl	8010ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eefa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eefc:	e011      	b.n	800ef22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d012      	beq.n	800ef2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3310      	adds	r3, #16
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 fe36 	bl	800fb7c <xTaskRemoveFromEventList>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d001      	beq.n	800ef1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef16:	f000 ff0d 	bl	800fd34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef1a:	7bbb      	ldrb	r3, [r7, #14]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	dce9      	bgt.n	800eefe <prvUnlockQueue+0x60>
 800ef2a:	e000      	b.n	800ef2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	22ff      	movs	r2, #255	; 0xff
 800ef32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ef36:	f001 fe65 	bl	8010c04 <vPortExitCritical>
}
 800ef3a:	bf00      	nop
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef4a:	f001 fe2b 	bl	8010ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d102      	bne.n	800ef5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ef56:	2301      	movs	r3, #1
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e001      	b.n	800ef60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef60:	f001 fe50 	bl	8010c04 <vPortExitCritical>

	return xReturn;
 800ef64:	68fb      	ldr	r3, [r7, #12]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b084      	sub	sp, #16
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef76:	f001 fe15 	bl	8010ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d102      	bne.n	800ef8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ef86:	2301      	movs	r3, #1
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	e001      	b.n	800ef90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef90:	f001 fe38 	bl	8010c04 <vPortExitCritical>

	return xReturn;
 800ef94:	68fb      	ldr	r3, [r7, #12]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
	...

0800efa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	e014      	b.n	800efda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800efb0:	4a0f      	ldr	r2, [pc, #60]	; (800eff0 <vQueueAddToRegistry+0x50>)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10b      	bne.n	800efd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800efbc:	490c      	ldr	r1, [pc, #48]	; (800eff0 <vQueueAddToRegistry+0x50>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800efc6:	4a0a      	ldr	r2, [pc, #40]	; (800eff0 <vQueueAddToRegistry+0x50>)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	00db      	lsls	r3, r3, #3
 800efcc:	4413      	add	r3, r2
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800efd2:	e006      	b.n	800efe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	3301      	adds	r3, #1
 800efd8:	60fb      	str	r3, [r7, #12]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b07      	cmp	r3, #7
 800efde:	d9e7      	bls.n	800efb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800efe0:	bf00      	nop
 800efe2:	bf00      	nop
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	20002604 	.word	0x20002604

0800eff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800effc:	2300      	movs	r3, #0
 800effe:	60fb      	str	r3, [r7, #12]
 800f000:	e016      	b.n	800f030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f002:	4a10      	ldr	r2, [pc, #64]	; (800f044 <vQueueUnregisterQueue+0x50>)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	4413      	add	r3, r2
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d10b      	bne.n	800f02a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f012:	4a0c      	ldr	r2, [pc, #48]	; (800f044 <vQueueUnregisterQueue+0x50>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2100      	movs	r1, #0
 800f018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f01c:	4a09      	ldr	r2, [pc, #36]	; (800f044 <vQueueUnregisterQueue+0x50>)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	4413      	add	r3, r2
 800f024:	2200      	movs	r2, #0
 800f026:	605a      	str	r2, [r3, #4]
				break;
 800f028:	e006      	b.n	800f038 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3301      	adds	r3, #1
 800f02e:	60fb      	str	r3, [r7, #12]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2b07      	cmp	r3, #7
 800f034:	d9e5      	bls.n	800f002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f036:	bf00      	nop
 800f038:	bf00      	nop
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	20002604 	.word	0x20002604

0800f048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f058:	f001 fda4 	bl	8010ba4 <vPortEnterCritical>
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f062:	b25b      	sxtb	r3, r3
 800f064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f068:	d103      	bne.n	800f072 <vQueueWaitForMessageRestricted+0x2a>
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f078:	b25b      	sxtb	r3, r3
 800f07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f07e:	d103      	bne.n	800f088 <vQueueWaitForMessageRestricted+0x40>
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f088:	f001 fdbc 	bl	8010c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f090:	2b00      	cmp	r3, #0
 800f092:	d106      	bne.n	800f0a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	3324      	adds	r3, #36	; 0x24
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	68b9      	ldr	r1, [r7, #8]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 fd41 	bl	800fb24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f0a2:	6978      	ldr	r0, [r7, #20]
 800f0a4:	f7ff fefb 	bl	800ee9e <prvUnlockQueue>
	}
 800f0a8:	bf00      	nop
 800f0aa:	3718      	adds	r7, #24
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08e      	sub	sp, #56	; 0x38
 800f0b4:	af04      	add	r7, sp, #16
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10a      	bne.n	800f0da <xTaskCreateStatic+0x2a>
	__asm volatile
 800f0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c8:	f383 8811 	msr	BASEPRI, r3
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	f3bf 8f4f 	dsb	sy
 800f0d4:	623b      	str	r3, [r7, #32]
}
 800f0d6:	bf00      	nop
 800f0d8:	e7fe      	b.n	800f0d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10a      	bne.n	800f0f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800f0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	61fb      	str	r3, [r7, #28]
}
 800f0f2:	bf00      	nop
 800f0f4:	e7fe      	b.n	800f0f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f0f6:	236c      	movs	r3, #108	; 0x6c
 800f0f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	2b6c      	cmp	r3, #108	; 0x6c
 800f0fe:	d00a      	beq.n	800f116 <xTaskCreateStatic+0x66>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	61bb      	str	r3, [r7, #24]
}
 800f112:	bf00      	nop
 800f114:	e7fe      	b.n	800f114 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f116:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d01e      	beq.n	800f15c <xTaskCreateStatic+0xac>
 800f11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f120:	2b00      	cmp	r3, #0
 800f122:	d01b      	beq.n	800f15c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f12c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	2202      	movs	r2, #2
 800f132:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f136:	2300      	movs	r3, #0
 800f138:	9303      	str	r3, [sp, #12]
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	9302      	str	r3, [sp, #8]
 800f13e:	f107 0314 	add.w	r3, r7, #20
 800f142:	9301      	str	r3, [sp, #4]
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f000 f850 	bl	800f1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f156:	f000 f8dd 	bl	800f314 <prvAddNewTaskToReadyList>
 800f15a:	e001      	b.n	800f160 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f15c:	2300      	movs	r3, #0
 800f15e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f160:	697b      	ldr	r3, [r7, #20]
	}
 800f162:	4618      	mov	r0, r3
 800f164:	3728      	adds	r7, #40	; 0x28
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b08c      	sub	sp, #48	; 0x30
 800f16e:	af04      	add	r7, sp, #16
 800f170:	60f8      	str	r0, [r7, #12]
 800f172:	60b9      	str	r1, [r7, #8]
 800f174:	603b      	str	r3, [r7, #0]
 800f176:	4613      	mov	r3, r2
 800f178:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f17a:	88fb      	ldrh	r3, [r7, #6]
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	4618      	mov	r0, r3
 800f180:	f001 fe32 	bl	8010de8 <pvPortMalloc>
 800f184:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00e      	beq.n	800f1aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f18c:	206c      	movs	r0, #108	; 0x6c
 800f18e:	f001 fe2b 	bl	8010de8 <pvPortMalloc>
 800f192:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d003      	beq.n	800f1a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	631a      	str	r2, [r3, #48]	; 0x30
 800f1a0:	e005      	b.n	800f1ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f1a2:	6978      	ldr	r0, [r7, #20]
 800f1a4:	f001 feec 	bl	8010f80 <vPortFree>
 800f1a8:	e001      	b.n	800f1ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d017      	beq.n	800f1e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f1bc:	88fa      	ldrh	r2, [r7, #6]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9303      	str	r3, [sp, #12]
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	9302      	str	r3, [sp, #8]
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	9301      	str	r3, [sp, #4]
 800f1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1cc:	9300      	str	r3, [sp, #0]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	68b9      	ldr	r1, [r7, #8]
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f000 f80e 	bl	800f1f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1d8:	69f8      	ldr	r0, [r7, #28]
 800f1da:	f000 f89b 	bl	800f314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	61bb      	str	r3, [r7, #24]
 800f1e2:	e002      	b.n	800f1ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f1ea:	69bb      	ldr	r3, [r7, #24]
	}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3720      	adds	r7, #32
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b088      	sub	sp, #32
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	461a      	mov	r2, r3
 800f20c:	21a5      	movs	r1, #165	; 0xa5
 800f20e:	f002 fd2d 	bl	8011c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f21c:	3b01      	subs	r3, #1
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	f023 0307 	bic.w	r3, r3, #7
 800f22a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	f003 0307 	and.w	r3, r3, #7
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00a      	beq.n	800f24c <prvInitialiseNewTask+0x58>
	__asm volatile
 800f236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	617b      	str	r3, [r7, #20]
}
 800f248:	bf00      	nop
 800f24a:	e7fe      	b.n	800f24a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d01f      	beq.n	800f292 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f252:	2300      	movs	r3, #0
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	e012      	b.n	800f27e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	4413      	add	r3, r2
 800f25e:	7819      	ldrb	r1, [r3, #0]
 800f260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	4413      	add	r3, r2
 800f266:	3334      	adds	r3, #52	; 0x34
 800f268:	460a      	mov	r2, r1
 800f26a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	4413      	add	r3, r2
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d006      	beq.n	800f286 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	3301      	adds	r3, #1
 800f27c:	61fb      	str	r3, [r7, #28]
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	2b1d      	cmp	r3, #29
 800f282:	d9e9      	bls.n	800f258 <prvInitialiseNewTask+0x64>
 800f284:	e000      	b.n	800f288 <prvInitialiseNewTask+0x94>
			{
				break;
 800f286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800f290:	e003      	b.n	800f29a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	2200      	movs	r2, #0
 800f296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29c:	2b37      	cmp	r3, #55	; 0x37
 800f29e:	d901      	bls.n	800f2a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f2a0:	2337      	movs	r3, #55	; 0x37
 800f2a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2ae:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800f2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b8:	3304      	adds	r3, #4
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fe fe56 	bl	800df6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c2:	3318      	adds	r3, #24
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fe51 	bl	800df6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f2ee:	683a      	ldr	r2, [r7, #0]
 800f2f0:	68f9      	ldr	r1, [r7, #12]
 800f2f2:	69b8      	ldr	r0, [r7, #24]
 800f2f4:	f001 fb2c 	bl	8010950 <pxPortInitialiseStack>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f300:	2b00      	cmp	r3, #0
 800f302:	d002      	beq.n	800f30a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f30a:	bf00      	nop
 800f30c:	3720      	adds	r7, #32
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
	...

0800f314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f31c:	f001 fc42 	bl	8010ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f320:	4b2d      	ldr	r3, [pc, #180]	; (800f3d8 <prvAddNewTaskToReadyList+0xc4>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3301      	adds	r3, #1
 800f326:	4a2c      	ldr	r2, [pc, #176]	; (800f3d8 <prvAddNewTaskToReadyList+0xc4>)
 800f328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f32a:	4b2c      	ldr	r3, [pc, #176]	; (800f3dc <prvAddNewTaskToReadyList+0xc8>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d109      	bne.n	800f346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f332:	4a2a      	ldr	r2, [pc, #168]	; (800f3dc <prvAddNewTaskToReadyList+0xc8>)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f338:	4b27      	ldr	r3, [pc, #156]	; (800f3d8 <prvAddNewTaskToReadyList+0xc4>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d110      	bne.n	800f362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f340:	f000 fd1c 	bl	800fd7c <prvInitialiseTaskLists>
 800f344:	e00d      	b.n	800f362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f346:	4b26      	ldr	r3, [pc, #152]	; (800f3e0 <prvAddNewTaskToReadyList+0xcc>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d109      	bne.n	800f362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f34e:	4b23      	ldr	r3, [pc, #140]	; (800f3dc <prvAddNewTaskToReadyList+0xc8>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	429a      	cmp	r2, r3
 800f35a:	d802      	bhi.n	800f362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f35c:	4a1f      	ldr	r2, [pc, #124]	; (800f3dc <prvAddNewTaskToReadyList+0xc8>)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f362:	4b20      	ldr	r3, [pc, #128]	; (800f3e4 <prvAddNewTaskToReadyList+0xd0>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3301      	adds	r3, #1
 800f368:	4a1e      	ldr	r2, [pc, #120]	; (800f3e4 <prvAddNewTaskToReadyList+0xd0>)
 800f36a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f36c:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <prvAddNewTaskToReadyList+0xd0>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f378:	4b1b      	ldr	r3, [pc, #108]	; (800f3e8 <prvAddNewTaskToReadyList+0xd4>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d903      	bls.n	800f388 <prvAddNewTaskToReadyList+0x74>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f384:	4a18      	ldr	r2, [pc, #96]	; (800f3e8 <prvAddNewTaskToReadyList+0xd4>)
 800f386:	6013      	str	r3, [r2, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f38c:	4613      	mov	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4a15      	ldr	r2, [pc, #84]	; (800f3ec <prvAddNewTaskToReadyList+0xd8>)
 800f396:	441a      	add	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4619      	mov	r1, r3
 800f39e:	4610      	mov	r0, r2
 800f3a0:	f7fe fdf1 	bl	800df86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f3a4:	f001 fc2e 	bl	8010c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f3a8:	4b0d      	ldr	r3, [pc, #52]	; (800f3e0 <prvAddNewTaskToReadyList+0xcc>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00e      	beq.n	800f3ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <prvAddNewTaskToReadyList+0xc8>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d207      	bcs.n	800f3ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <prvAddNewTaskToReadyList+0xdc>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3ce:	bf00      	nop
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20002b18 	.word	0x20002b18
 800f3dc:	20002644 	.word	0x20002644
 800f3e0:	20002b24 	.word	0x20002b24
 800f3e4:	20002b34 	.word	0x20002b34
 800f3e8:	20002b20 	.word	0x20002b20
 800f3ec:	20002648 	.word	0x20002648
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d017      	beq.n	800f436 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f406:	4b13      	ldr	r3, [pc, #76]	; (800f454 <vTaskDelay+0x60>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00a      	beq.n	800f424 <vTaskDelay+0x30>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	60bb      	str	r3, [r7, #8]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f424:	f000 f986 	bl	800f734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f428:	2100      	movs	r1, #0
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 feee 	bl	801020c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f430:	f000 f98e 	bl	800f750 <xTaskResumeAll>
 800f434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d107      	bne.n	800f44c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f43c:	4b06      	ldr	r3, [pc, #24]	; (800f458 <vTaskDelay+0x64>)
 800f43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f44c:	bf00      	nop
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	20002b40 	.word	0x20002b40
 800f458:	e000ed04 	.word	0xe000ed04

0800f45c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f464:	f001 fb9e 	bl	8010ba4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <vTaskSuspend+0x18>
 800f46e:	4b30      	ldr	r3, [pc, #192]	; (800f530 <vTaskSuspend+0xd4>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	e000      	b.n	800f476 <vTaskSuspend+0x1a>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	3304      	adds	r3, #4
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fe fddf 	bl	800e040 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f486:	2b00      	cmp	r3, #0
 800f488:	d004      	beq.n	800f494 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3318      	adds	r3, #24
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fe fdd6 	bl	800e040 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	3304      	adds	r3, #4
 800f498:	4619      	mov	r1, r3
 800f49a:	4826      	ldr	r0, [pc, #152]	; (800f534 <vTaskSuspend+0xd8>)
 800f49c:	f7fe fd73 	bl	800df86 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d103      	bne.n	800f4b4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f4b4:	f001 fba6 	bl	8010c04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f4b8:	4b1f      	ldr	r3, [pc, #124]	; (800f538 <vTaskSuspend+0xdc>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f4c0:	f001 fb70 	bl	8010ba4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f4c4:	f000 fcf8 	bl	800feb8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f4c8:	f001 fb9c 	bl	8010c04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f4cc:	4b18      	ldr	r3, [pc, #96]	; (800f530 <vTaskSuspend+0xd4>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d127      	bne.n	800f526 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800f4d6:	4b18      	ldr	r3, [pc, #96]	; (800f538 <vTaskSuspend+0xdc>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d017      	beq.n	800f50e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f4de:	4b17      	ldr	r3, [pc, #92]	; (800f53c <vTaskSuspend+0xe0>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00a      	beq.n	800f4fc <vTaskSuspend+0xa0>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60bb      	str	r3, [r7, #8]
}
 800f4f8:	bf00      	nop
 800f4fa:	e7fe      	b.n	800f4fa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800f4fc:	4b10      	ldr	r3, [pc, #64]	; (800f540 <vTaskSuspend+0xe4>)
 800f4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f50c:	e00b      	b.n	800f526 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800f50e:	4b09      	ldr	r3, [pc, #36]	; (800f534 <vTaskSuspend+0xd8>)
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	4b0c      	ldr	r3, [pc, #48]	; (800f544 <vTaskSuspend+0xe8>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	429a      	cmp	r2, r3
 800f518:	d103      	bne.n	800f522 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800f51a:	4b05      	ldr	r3, [pc, #20]	; (800f530 <vTaskSuspend+0xd4>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
	}
 800f520:	e001      	b.n	800f526 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800f522:	f000 fa7d 	bl	800fa20 <vTaskSwitchContext>
	}
 800f526:	bf00      	nop
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	20002644 	.word	0x20002644
 800f534:	20002b04 	.word	0x20002b04
 800f538:	20002b24 	.word	0x20002b24
 800f53c:	20002b40 	.word	0x20002b40
 800f540:	e000ed04 	.word	0xe000ed04
 800f544:	20002b18 	.word	0x20002b18

0800f548 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f550:	2300      	movs	r3, #0
 800f552:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10a      	bne.n	800f574 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	60fb      	str	r3, [r7, #12]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	695b      	ldr	r3, [r3, #20]
 800f578:	4a0a      	ldr	r2, [pc, #40]	; (800f5a4 <prvTaskIsTaskSuspended+0x5c>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d10a      	bne.n	800f594 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f582:	4a09      	ldr	r2, [pc, #36]	; (800f5a8 <prvTaskIsTaskSuspended+0x60>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d005      	beq.n	800f594 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800f590:	2301      	movs	r3, #1
 800f592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f594:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f596:	4618      	mov	r0, r3
 800f598:	371c      	adds	r7, #28
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	20002b04 	.word	0x20002b04
 800f5a8:	20002ad8 	.word	0x20002ad8

0800f5ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d10a      	bne.n	800f5d4 <vTaskResume+0x28>
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	60bb      	str	r3, [r7, #8]
}
 800f5d0:	bf00      	nop
 800f5d2:	e7fe      	b.n	800f5d2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800f5d4:	4b20      	ldr	r3, [pc, #128]	; (800f658 <vTaskResume+0xac>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d038      	beq.n	800f650 <vTaskResume+0xa4>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d035      	beq.n	800f650 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800f5e4:	f001 fade 	bl	8010ba4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f7ff ffad 	bl	800f548 <prvTaskIsTaskSuspended>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d02b      	beq.n	800f64c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fe fd21 	bl	800e040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f602:	4b16      	ldr	r3, [pc, #88]	; (800f65c <vTaskResume+0xb0>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	429a      	cmp	r2, r3
 800f608:	d903      	bls.n	800f612 <vTaskResume+0x66>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f60e:	4a13      	ldr	r2, [pc, #76]	; (800f65c <vTaskResume+0xb0>)
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f616:	4613      	mov	r3, r2
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4413      	add	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4a10      	ldr	r2, [pc, #64]	; (800f660 <vTaskResume+0xb4>)
 800f620:	441a      	add	r2, r3
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3304      	adds	r3, #4
 800f626:	4619      	mov	r1, r3
 800f628:	4610      	mov	r0, r2
 800f62a:	f7fe fcac 	bl	800df86 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f632:	4b09      	ldr	r3, [pc, #36]	; (800f658 <vTaskResume+0xac>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	429a      	cmp	r2, r3
 800f63a:	d307      	bcc.n	800f64c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800f63c:	4b09      	ldr	r3, [pc, #36]	; (800f664 <vTaskResume+0xb8>)
 800f63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800f64c:	f001 fada 	bl	8010c04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f650:	bf00      	nop
 800f652:	3710      	adds	r7, #16
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}
 800f658:	20002644 	.word	0x20002644
 800f65c:	20002b20 	.word	0x20002b20
 800f660:	20002648 	.word	0x20002648
 800f664:	e000ed04 	.word	0xe000ed04

0800f668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	; 0x28
 800f66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f66e:	2300      	movs	r3, #0
 800f670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f672:	2300      	movs	r3, #0
 800f674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f676:	463a      	mov	r2, r7
 800f678:	1d39      	adds	r1, r7, #4
 800f67a:	f107 0308 	add.w	r3, r7, #8
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fe fc20 	bl	800dec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	9202      	str	r2, [sp, #8]
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	2300      	movs	r3, #0
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	2300      	movs	r3, #0
 800f694:	460a      	mov	r2, r1
 800f696:	4921      	ldr	r1, [pc, #132]	; (800f71c <vTaskStartScheduler+0xb4>)
 800f698:	4821      	ldr	r0, [pc, #132]	; (800f720 <vTaskStartScheduler+0xb8>)
 800f69a:	f7ff fd09 	bl	800f0b0 <xTaskCreateStatic>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4a20      	ldr	r2, [pc, #128]	; (800f724 <vTaskStartScheduler+0xbc>)
 800f6a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6a4:	4b1f      	ldr	r3, [pc, #124]	; (800f724 <vTaskStartScheduler+0xbc>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d002      	beq.n	800f6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e001      	b.n	800f6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d102      	bne.n	800f6c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f6bc:	f000 fdfa 	bl	80102b4 <xTimerCreateTimerTask>
 800f6c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d116      	bne.n	800f6f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800f6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	613b      	str	r3, [r7, #16]
}
 800f6da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f6dc:	4b12      	ldr	r3, [pc, #72]	; (800f728 <vTaskStartScheduler+0xc0>)
 800f6de:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f6e4:	4b11      	ldr	r3, [pc, #68]	; (800f72c <vTaskStartScheduler+0xc4>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6ea:	4b11      	ldr	r3, [pc, #68]	; (800f730 <vTaskStartScheduler+0xc8>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6f0:	f001 f9b6 	bl	8010a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6f4:	e00e      	b.n	800f714 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6fc:	d10a      	bne.n	800f714 <vTaskStartScheduler+0xac>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	60fb      	str	r3, [r7, #12]
}
 800f710:	bf00      	nop
 800f712:	e7fe      	b.n	800f712 <vTaskStartScheduler+0xaa>
}
 800f714:	bf00      	nop
 800f716:	3718      	adds	r7, #24
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	08012784 	.word	0x08012784
 800f720:	0800fd4d 	.word	0x0800fd4d
 800f724:	20002b3c 	.word	0x20002b3c
 800f728:	20002b38 	.word	0x20002b38
 800f72c:	20002b24 	.word	0x20002b24
 800f730:	20002b1c 	.word	0x20002b1c

0800f734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f734:	b480      	push	{r7}
 800f736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f738:	4b04      	ldr	r3, [pc, #16]	; (800f74c <vTaskSuspendAll+0x18>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	3301      	adds	r3, #1
 800f73e:	4a03      	ldr	r2, [pc, #12]	; (800f74c <vTaskSuspendAll+0x18>)
 800f740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f742:	bf00      	nop
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr
 800f74c:	20002b40 	.word	0x20002b40

0800f750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f756:	2300      	movs	r3, #0
 800f758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f75a:	2300      	movs	r3, #0
 800f75c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f75e:	4b42      	ldr	r3, [pc, #264]	; (800f868 <xTaskResumeAll+0x118>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10a      	bne.n	800f77c <xTaskResumeAll+0x2c>
	__asm volatile
 800f766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	603b      	str	r3, [r7, #0]
}
 800f778:	bf00      	nop
 800f77a:	e7fe      	b.n	800f77a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f77c:	f001 fa12 	bl	8010ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f780:	4b39      	ldr	r3, [pc, #228]	; (800f868 <xTaskResumeAll+0x118>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3b01      	subs	r3, #1
 800f786:	4a38      	ldr	r2, [pc, #224]	; (800f868 <xTaskResumeAll+0x118>)
 800f788:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f78a:	4b37      	ldr	r3, [pc, #220]	; (800f868 <xTaskResumeAll+0x118>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d162      	bne.n	800f858 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f792:	4b36      	ldr	r3, [pc, #216]	; (800f86c <xTaskResumeAll+0x11c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d05e      	beq.n	800f858 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f79a:	e02f      	b.n	800f7fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f79c:	4b34      	ldr	r3, [pc, #208]	; (800f870 <xTaskResumeAll+0x120>)
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	3318      	adds	r3, #24
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fe fc49 	bl	800e040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe fc44 	bl	800e040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7bc:	4b2d      	ldr	r3, [pc, #180]	; (800f874 <xTaskResumeAll+0x124>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d903      	bls.n	800f7cc <xTaskResumeAll+0x7c>
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	4a2a      	ldr	r2, [pc, #168]	; (800f874 <xTaskResumeAll+0x124>)
 800f7ca:	6013      	str	r3, [r2, #0]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4413      	add	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4a27      	ldr	r2, [pc, #156]	; (800f878 <xTaskResumeAll+0x128>)
 800f7da:	441a      	add	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	3304      	adds	r3, #4
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f7fe fbcf 	bl	800df86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ec:	4b23      	ldr	r3, [pc, #140]	; (800f87c <xTaskResumeAll+0x12c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d302      	bcc.n	800f7fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f7f6:	4b22      	ldr	r3, [pc, #136]	; (800f880 <xTaskResumeAll+0x130>)
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7fc:	4b1c      	ldr	r3, [pc, #112]	; (800f870 <xTaskResumeAll+0x120>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1cb      	bne.n	800f79c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d001      	beq.n	800f80e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f80a:	f000 fb55 	bl	800feb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f80e:	4b1d      	ldr	r3, [pc, #116]	; (800f884 <xTaskResumeAll+0x134>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d010      	beq.n	800f83c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f81a:	f000 f847 	bl	800f8ac <xTaskIncrementTick>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f824:	4b16      	ldr	r3, [pc, #88]	; (800f880 <xTaskResumeAll+0x130>)
 800f826:	2201      	movs	r2, #1
 800f828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1f1      	bne.n	800f81a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f836:	4b13      	ldr	r3, [pc, #76]	; (800f884 <xTaskResumeAll+0x134>)
 800f838:	2200      	movs	r2, #0
 800f83a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f83c:	4b10      	ldr	r3, [pc, #64]	; (800f880 <xTaskResumeAll+0x130>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d009      	beq.n	800f858 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f844:	2301      	movs	r3, #1
 800f846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f848:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <xTaskResumeAll+0x138>)
 800f84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f858:	f001 f9d4 	bl	8010c04 <vPortExitCritical>

	return xAlreadyYielded;
 800f85c:	68bb      	ldr	r3, [r7, #8]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	20002b40 	.word	0x20002b40
 800f86c:	20002b18 	.word	0x20002b18
 800f870:	20002ad8 	.word	0x20002ad8
 800f874:	20002b20 	.word	0x20002b20
 800f878:	20002648 	.word	0x20002648
 800f87c:	20002644 	.word	0x20002644
 800f880:	20002b2c 	.word	0x20002b2c
 800f884:	20002b28 	.word	0x20002b28
 800f888:	e000ed04 	.word	0xe000ed04

0800f88c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f892:	4b05      	ldr	r3, [pc, #20]	; (800f8a8 <xTaskGetTickCount+0x1c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f898:	687b      	ldr	r3, [r7, #4]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	370c      	adds	r7, #12
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	20002b1c 	.word	0x20002b1c

0800f8ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8b6:	4b4f      	ldr	r3, [pc, #316]	; (800f9f4 <xTaskIncrementTick+0x148>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f040 808f 	bne.w	800f9de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f8c0:	4b4d      	ldr	r3, [pc, #308]	; (800f9f8 <xTaskIncrementTick+0x14c>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f8c8:	4a4b      	ldr	r2, [pc, #300]	; (800f9f8 <xTaskIncrementTick+0x14c>)
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d120      	bne.n	800f916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f8d4:	4b49      	ldr	r3, [pc, #292]	; (800f9fc <xTaskIncrementTick+0x150>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00a      	beq.n	800f8f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	603b      	str	r3, [r7, #0]
}
 800f8f0:	bf00      	nop
 800f8f2:	e7fe      	b.n	800f8f2 <xTaskIncrementTick+0x46>
 800f8f4:	4b41      	ldr	r3, [pc, #260]	; (800f9fc <xTaskIncrementTick+0x150>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]
 800f8fa:	4b41      	ldr	r3, [pc, #260]	; (800fa00 <xTaskIncrementTick+0x154>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a3f      	ldr	r2, [pc, #252]	; (800f9fc <xTaskIncrementTick+0x150>)
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	4a3f      	ldr	r2, [pc, #252]	; (800fa00 <xTaskIncrementTick+0x154>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6013      	str	r3, [r2, #0]
 800f908:	4b3e      	ldr	r3, [pc, #248]	; (800fa04 <xTaskIncrementTick+0x158>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3301      	adds	r3, #1
 800f90e:	4a3d      	ldr	r2, [pc, #244]	; (800fa04 <xTaskIncrementTick+0x158>)
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	f000 fad1 	bl	800feb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f916:	4b3c      	ldr	r3, [pc, #240]	; (800fa08 <xTaskIncrementTick+0x15c>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d349      	bcc.n	800f9b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f920:	4b36      	ldr	r3, [pc, #216]	; (800f9fc <xTaskIncrementTick+0x150>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d104      	bne.n	800f934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f92a:	4b37      	ldr	r3, [pc, #220]	; (800fa08 <xTaskIncrementTick+0x15c>)
 800f92c:	f04f 32ff 	mov.w	r2, #4294967295
 800f930:	601a      	str	r2, [r3, #0]
					break;
 800f932:	e03f      	b.n	800f9b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f934:	4b31      	ldr	r3, [pc, #196]	; (800f9fc <xTaskIncrementTick+0x150>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f944:	693a      	ldr	r2, [r7, #16]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d203      	bcs.n	800f954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f94c:	4a2e      	ldr	r2, [pc, #184]	; (800fa08 <xTaskIncrementTick+0x15c>)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f952:	e02f      	b.n	800f9b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	3304      	adds	r3, #4
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fe fb71 	bl	800e040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f962:	2b00      	cmp	r3, #0
 800f964:	d004      	beq.n	800f970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	3318      	adds	r3, #24
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fe fb68 	bl	800e040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f974:	4b25      	ldr	r3, [pc, #148]	; (800fa0c <xTaskIncrementTick+0x160>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d903      	bls.n	800f984 <xTaskIncrementTick+0xd8>
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f980:	4a22      	ldr	r2, [pc, #136]	; (800fa0c <xTaskIncrementTick+0x160>)
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4a1f      	ldr	r2, [pc, #124]	; (800fa10 <xTaskIncrementTick+0x164>)
 800f992:	441a      	add	r2, r3
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	3304      	adds	r3, #4
 800f998:	4619      	mov	r1, r3
 800f99a:	4610      	mov	r0, r2
 800f99c:	f7fe faf3 	bl	800df86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a4:	4b1b      	ldr	r3, [pc, #108]	; (800fa14 <xTaskIncrementTick+0x168>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d3b8      	bcc.n	800f920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9b2:	e7b5      	b.n	800f920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f9b4:	4b17      	ldr	r3, [pc, #92]	; (800fa14 <xTaskIncrementTick+0x168>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ba:	4915      	ldr	r1, [pc, #84]	; (800fa10 <xTaskIncrementTick+0x164>)
 800f9bc:	4613      	mov	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	440b      	add	r3, r1
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d901      	bls.n	800f9d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f9d0:	4b11      	ldr	r3, [pc, #68]	; (800fa18 <xTaskIncrementTick+0x16c>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d007      	beq.n	800f9e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	e004      	b.n	800f9e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f9de:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <xTaskIncrementTick+0x170>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	4a0d      	ldr	r2, [pc, #52]	; (800fa1c <xTaskIncrementTick+0x170>)
 800f9e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f9e8:	697b      	ldr	r3, [r7, #20]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20002b40 	.word	0x20002b40
 800f9f8:	20002b1c 	.word	0x20002b1c
 800f9fc:	20002ad0 	.word	0x20002ad0
 800fa00:	20002ad4 	.word	0x20002ad4
 800fa04:	20002b30 	.word	0x20002b30
 800fa08:	20002b38 	.word	0x20002b38
 800fa0c:	20002b20 	.word	0x20002b20
 800fa10:	20002648 	.word	0x20002648
 800fa14:	20002644 	.word	0x20002644
 800fa18:	20002b2c 	.word	0x20002b2c
 800fa1c:	20002b28 	.word	0x20002b28

0800fa20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa26:	4b28      	ldr	r3, [pc, #160]	; (800fac8 <vTaskSwitchContext+0xa8>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d003      	beq.n	800fa36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa2e:	4b27      	ldr	r3, [pc, #156]	; (800facc <vTaskSwitchContext+0xac>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa34:	e041      	b.n	800faba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fa36:	4b25      	ldr	r3, [pc, #148]	; (800facc <vTaskSwitchContext+0xac>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa3c:	4b24      	ldr	r3, [pc, #144]	; (800fad0 <vTaskSwitchContext+0xb0>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	60fb      	str	r3, [r7, #12]
 800fa42:	e010      	b.n	800fa66 <vTaskSwitchContext+0x46>
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10a      	bne.n	800fa60 <vTaskSwitchContext+0x40>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	607b      	str	r3, [r7, #4]
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <vTaskSwitchContext+0x3e>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	3b01      	subs	r3, #1
 800fa64:	60fb      	str	r3, [r7, #12]
 800fa66:	491b      	ldr	r1, [pc, #108]	; (800fad4 <vTaskSwitchContext+0xb4>)
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	440b      	add	r3, r1
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d0e4      	beq.n	800fa44 <vTaskSwitchContext+0x24>
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	4413      	add	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4a13      	ldr	r2, [pc, #76]	; (800fad4 <vTaskSwitchContext+0xb4>)
 800fa86:	4413      	add	r3, r2
 800fa88:	60bb      	str	r3, [r7, #8]
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	685a      	ldr	r2, [r3, #4]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d104      	bne.n	800faaa <vTaskSwitchContext+0x8a>
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	605a      	str	r2, [r3, #4]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	4a09      	ldr	r2, [pc, #36]	; (800fad8 <vTaskSwitchContext+0xb8>)
 800fab2:	6013      	str	r3, [r2, #0]
 800fab4:	4a06      	ldr	r2, [pc, #24]	; (800fad0 <vTaskSwitchContext+0xb0>)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6013      	str	r3, [r2, #0]
}
 800faba:	bf00      	nop
 800fabc:	3714      	adds	r7, #20
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	20002b40 	.word	0x20002b40
 800facc:	20002b2c 	.word	0x20002b2c
 800fad0:	20002b20 	.word	0x20002b20
 800fad4:	20002648 	.word	0x20002648
 800fad8:	20002644 	.word	0x20002644

0800fadc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d10a      	bne.n	800fb02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	60fb      	str	r3, [r7, #12]
}
 800fafe:	bf00      	nop
 800fb00:	e7fe      	b.n	800fb00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb02:	4b07      	ldr	r3, [pc, #28]	; (800fb20 <vTaskPlaceOnEventList+0x44>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3318      	adds	r3, #24
 800fb08:	4619      	mov	r1, r3
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7fe fa5f 	bl	800dfce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb10:	2101      	movs	r1, #1
 800fb12:	6838      	ldr	r0, [r7, #0]
 800fb14:	f000 fb7a 	bl	801020c <prvAddCurrentTaskToDelayedList>
}
 800fb18:	bf00      	nop
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20002644 	.word	0x20002644

0800fb24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10a      	bne.n	800fb4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	617b      	str	r3, [r7, #20]
}
 800fb48:	bf00      	nop
 800fb4a:	e7fe      	b.n	800fb4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <vTaskPlaceOnEventListRestricted+0x54>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3318      	adds	r3, #24
 800fb52:	4619      	mov	r1, r3
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f7fe fa16 	bl	800df86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d002      	beq.n	800fb66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb60:	f04f 33ff 	mov.w	r3, #4294967295
 800fb64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	68b8      	ldr	r0, [r7, #8]
 800fb6a:	f000 fb4f 	bl	801020c <prvAddCurrentTaskToDelayedList>
	}
 800fb6e:	bf00      	nop
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20002644 	.word	0x20002644

0800fb7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d10a      	bne.n	800fba8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	60fb      	str	r3, [r7, #12]
}
 800fba4:	bf00      	nop
 800fba6:	e7fe      	b.n	800fba6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	3318      	adds	r3, #24
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fe fa47 	bl	800e040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbb2:	4b1e      	ldr	r3, [pc, #120]	; (800fc2c <xTaskRemoveFromEventList+0xb0>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d11d      	bne.n	800fbf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fe fa3e 	bl	800e040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc8:	4b19      	ldr	r3, [pc, #100]	; (800fc30 <xTaskRemoveFromEventList+0xb4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d903      	bls.n	800fbd8 <xTaskRemoveFromEventList+0x5c>
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	4a16      	ldr	r2, [pc, #88]	; (800fc30 <xTaskRemoveFromEventList+0xb4>)
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbdc:	4613      	mov	r3, r2
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4413      	add	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4a13      	ldr	r2, [pc, #76]	; (800fc34 <xTaskRemoveFromEventList+0xb8>)
 800fbe6:	441a      	add	r2, r3
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	3304      	adds	r3, #4
 800fbec:	4619      	mov	r1, r3
 800fbee:	4610      	mov	r0, r2
 800fbf0:	f7fe f9c9 	bl	800df86 <vListInsertEnd>
 800fbf4:	e005      	b.n	800fc02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	3318      	adds	r3, #24
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	480e      	ldr	r0, [pc, #56]	; (800fc38 <xTaskRemoveFromEventList+0xbc>)
 800fbfe:	f7fe f9c2 	bl	800df86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc06:	4b0d      	ldr	r3, [pc, #52]	; (800fc3c <xTaskRemoveFromEventList+0xc0>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d905      	bls.n	800fc1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc10:	2301      	movs	r3, #1
 800fc12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc14:	4b0a      	ldr	r3, [pc, #40]	; (800fc40 <xTaskRemoveFromEventList+0xc4>)
 800fc16:	2201      	movs	r2, #1
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	e001      	b.n	800fc20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc20:	697b      	ldr	r3, [r7, #20]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20002b40 	.word	0x20002b40
 800fc30:	20002b20 	.word	0x20002b20
 800fc34:	20002648 	.word	0x20002648
 800fc38:	20002ad8 	.word	0x20002ad8
 800fc3c:	20002644 	.word	0x20002644
 800fc40:	20002b2c 	.word	0x20002b2c

0800fc44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc4c:	4b06      	ldr	r3, [pc, #24]	; (800fc68 <vTaskInternalSetTimeOutState+0x24>)
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc54:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <vTaskInternalSetTimeOutState+0x28>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	605a      	str	r2, [r3, #4]
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	20002b30 	.word	0x20002b30
 800fc6c:	20002b1c 	.word	0x20002b1c

0800fc70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10a      	bne.n	800fc96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	613b      	str	r3, [r7, #16]
}
 800fc92:	bf00      	nop
 800fc94:	e7fe      	b.n	800fc94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10a      	bne.n	800fcb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	60fb      	str	r3, [r7, #12]
}
 800fcae:	bf00      	nop
 800fcb0:	e7fe      	b.n	800fcb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fcb2:	f000 ff77 	bl	8010ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcb6:	4b1d      	ldr	r3, [pc, #116]	; (800fd2c <xTaskCheckForTimeOut+0xbc>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	69ba      	ldr	r2, [r7, #24]
 800fcc2:	1ad3      	subs	r3, r2, r3
 800fcc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcce:	d102      	bne.n	800fcd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	61fb      	str	r3, [r7, #28]
 800fcd4:	e023      	b.n	800fd1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	4b15      	ldr	r3, [pc, #84]	; (800fd30 <xTaskCheckForTimeOut+0xc0>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d007      	beq.n	800fcf2 <xTaskCheckForTimeOut+0x82>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	69ba      	ldr	r2, [r7, #24]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d302      	bcc.n	800fcf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcec:	2301      	movs	r3, #1
 800fcee:	61fb      	str	r3, [r7, #28]
 800fcf0:	e015      	b.n	800fd1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d20b      	bcs.n	800fd14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	1ad2      	subs	r2, r2, r3
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff ff9b 	bl	800fc44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	61fb      	str	r3, [r7, #28]
 800fd12:	e004      	b.n	800fd1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	2200      	movs	r2, #0
 800fd18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd1e:	f000 ff71 	bl	8010c04 <vPortExitCritical>

	return xReturn;
 800fd22:	69fb      	ldr	r3, [r7, #28]
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3720      	adds	r7, #32
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	20002b1c 	.word	0x20002b1c
 800fd30:	20002b30 	.word	0x20002b30

0800fd34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd34:	b480      	push	{r7}
 800fd36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd38:	4b03      	ldr	r3, [pc, #12]	; (800fd48 <vTaskMissedYield+0x14>)
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	601a      	str	r2, [r3, #0]
}
 800fd3e:	bf00      	nop
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	20002b2c 	.word	0x20002b2c

0800fd4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd54:	f000 f852 	bl	800fdfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd58:	4b06      	ldr	r3, [pc, #24]	; (800fd74 <prvIdleTask+0x28>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d9f9      	bls.n	800fd54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd60:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <prvIdleTask+0x2c>)
 800fd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd66:	601a      	str	r2, [r3, #0]
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd70:	e7f0      	b.n	800fd54 <prvIdleTask+0x8>
 800fd72:	bf00      	nop
 800fd74:	20002648 	.word	0x20002648
 800fd78:	e000ed04 	.word	0xe000ed04

0800fd7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd82:	2300      	movs	r3, #0
 800fd84:	607b      	str	r3, [r7, #4]
 800fd86:	e00c      	b.n	800fda2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4613      	mov	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4a12      	ldr	r2, [pc, #72]	; (800fddc <prvInitialiseTaskLists+0x60>)
 800fd94:	4413      	add	r3, r2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe f8c8 	bl	800df2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	607b      	str	r3, [r7, #4]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b37      	cmp	r3, #55	; 0x37
 800fda6:	d9ef      	bls.n	800fd88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fda8:	480d      	ldr	r0, [pc, #52]	; (800fde0 <prvInitialiseTaskLists+0x64>)
 800fdaa:	f7fe f8bf 	bl	800df2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdae:	480d      	ldr	r0, [pc, #52]	; (800fde4 <prvInitialiseTaskLists+0x68>)
 800fdb0:	f7fe f8bc 	bl	800df2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdb4:	480c      	ldr	r0, [pc, #48]	; (800fde8 <prvInitialiseTaskLists+0x6c>)
 800fdb6:	f7fe f8b9 	bl	800df2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdba:	480c      	ldr	r0, [pc, #48]	; (800fdec <prvInitialiseTaskLists+0x70>)
 800fdbc:	f7fe f8b6 	bl	800df2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdc0:	480b      	ldr	r0, [pc, #44]	; (800fdf0 <prvInitialiseTaskLists+0x74>)
 800fdc2:	f7fe f8b3 	bl	800df2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdc6:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <prvInitialiseTaskLists+0x78>)
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <prvInitialiseTaskLists+0x64>)
 800fdca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdcc:	4b0a      	ldr	r3, [pc, #40]	; (800fdf8 <prvInitialiseTaskLists+0x7c>)
 800fdce:	4a05      	ldr	r2, [pc, #20]	; (800fde4 <prvInitialiseTaskLists+0x68>)
 800fdd0:	601a      	str	r2, [r3, #0]
}
 800fdd2:	bf00      	nop
 800fdd4:	3708      	adds	r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	20002648 	.word	0x20002648
 800fde0:	20002aa8 	.word	0x20002aa8
 800fde4:	20002abc 	.word	0x20002abc
 800fde8:	20002ad8 	.word	0x20002ad8
 800fdec:	20002aec 	.word	0x20002aec
 800fdf0:	20002b04 	.word	0x20002b04
 800fdf4:	20002ad0 	.word	0x20002ad0
 800fdf8:	20002ad4 	.word	0x20002ad4

0800fdfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe02:	e019      	b.n	800fe38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe04:	f000 fece 	bl	8010ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe08:	4b10      	ldr	r3, [pc, #64]	; (800fe4c <prvCheckTasksWaitingTermination+0x50>)
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3304      	adds	r3, #4
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fe f913 	bl	800e040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe1a:	4b0d      	ldr	r3, [pc, #52]	; (800fe50 <prvCheckTasksWaitingTermination+0x54>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	4a0b      	ldr	r2, [pc, #44]	; (800fe50 <prvCheckTasksWaitingTermination+0x54>)
 800fe22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe24:	4b0b      	ldr	r3, [pc, #44]	; (800fe54 <prvCheckTasksWaitingTermination+0x58>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	4a0a      	ldr	r2, [pc, #40]	; (800fe54 <prvCheckTasksWaitingTermination+0x58>)
 800fe2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe2e:	f000 fee9 	bl	8010c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 f810 	bl	800fe58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe38:	4b06      	ldr	r3, [pc, #24]	; (800fe54 <prvCheckTasksWaitingTermination+0x58>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1e1      	bne.n	800fe04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe40:	bf00      	nop
 800fe42:	bf00      	nop
 800fe44:	3708      	adds	r7, #8
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20002aec 	.word	0x20002aec
 800fe50:	20002b18 	.word	0x20002b18
 800fe54:	20002b00 	.word	0x20002b00

0800fe58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d108      	bne.n	800fe7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f001 f886 	bl	8010f80 <vPortFree>
				vPortFree( pxTCB );
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f001 f883 	bl	8010f80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe7a:	e018      	b.n	800feae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d103      	bne.n	800fe8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f001 f87a 	bl	8010f80 <vPortFree>
	}
 800fe8c:	e00f      	b.n	800feae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d00a      	beq.n	800feae <prvDeleteTCB+0x56>
	__asm volatile
 800fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	60fb      	str	r3, [r7, #12]
}
 800feaa:	bf00      	nop
 800feac:	e7fe      	b.n	800feac <prvDeleteTCB+0x54>
	}
 800feae:	bf00      	nop
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
	...

0800feb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800febe:	4b0c      	ldr	r3, [pc, #48]	; (800fef0 <prvResetNextTaskUnblockTime+0x38>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d104      	bne.n	800fed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fec8:	4b0a      	ldr	r3, [pc, #40]	; (800fef4 <prvResetNextTaskUnblockTime+0x3c>)
 800feca:	f04f 32ff 	mov.w	r2, #4294967295
 800fece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fed0:	e008      	b.n	800fee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fed2:	4b07      	ldr	r3, [pc, #28]	; (800fef0 <prvResetNextTaskUnblockTime+0x38>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	68db      	ldr	r3, [r3, #12]
 800feda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	4a04      	ldr	r2, [pc, #16]	; (800fef4 <prvResetNextTaskUnblockTime+0x3c>)
 800fee2:	6013      	str	r3, [r2, #0]
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	20002ad0 	.word	0x20002ad0
 800fef4:	20002b38 	.word	0x20002b38

0800fef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fefe:	4b0b      	ldr	r3, [pc, #44]	; (800ff2c <xTaskGetSchedulerState+0x34>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d102      	bne.n	800ff0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff06:	2301      	movs	r3, #1
 800ff08:	607b      	str	r3, [r7, #4]
 800ff0a:	e008      	b.n	800ff1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff0c:	4b08      	ldr	r3, [pc, #32]	; (800ff30 <xTaskGetSchedulerState+0x38>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d102      	bne.n	800ff1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff14:	2302      	movs	r3, #2
 800ff16:	607b      	str	r3, [r7, #4]
 800ff18:	e001      	b.n	800ff1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff1e:	687b      	ldr	r3, [r7, #4]
	}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	20002b24 	.word	0x20002b24
 800ff30:	20002b40 	.word	0x20002b40

0800ff34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff40:	2300      	movs	r3, #0
 800ff42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d051      	beq.n	800ffee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4e:	4b2a      	ldr	r3, [pc, #168]	; (800fff8 <xTaskPriorityInherit+0xc4>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d241      	bcs.n	800ffdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	db06      	blt.n	800ff6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff60:	4b25      	ldr	r3, [pc, #148]	; (800fff8 <xTaskPriorityInherit+0xc4>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	6959      	ldr	r1, [r3, #20]
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff76:	4613      	mov	r3, r2
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	4413      	add	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4a1f      	ldr	r2, [pc, #124]	; (800fffc <xTaskPriorityInherit+0xc8>)
 800ff80:	4413      	add	r3, r2
 800ff82:	4299      	cmp	r1, r3
 800ff84:	d122      	bne.n	800ffcc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe f858 	bl	800e040 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff90:	4b19      	ldr	r3, [pc, #100]	; (800fff8 <xTaskPriorityInherit+0xc4>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff9e:	4b18      	ldr	r3, [pc, #96]	; (8010000 <xTaskPriorityInherit+0xcc>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d903      	bls.n	800ffae <xTaskPriorityInherit+0x7a>
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffaa:	4a15      	ldr	r2, [pc, #84]	; (8010000 <xTaskPriorityInherit+0xcc>)
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4a10      	ldr	r2, [pc, #64]	; (800fffc <xTaskPriorityInherit+0xc8>)
 800ffbc:	441a      	add	r2, r3
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	f7fd ffde 	bl	800df86 <vListInsertEnd>
 800ffca:	e004      	b.n	800ffd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffcc:	4b0a      	ldr	r3, [pc, #40]	; (800fff8 <xTaskPriorityInherit+0xc4>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	60fb      	str	r3, [r7, #12]
 800ffda:	e008      	b.n	800ffee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffe0:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <xTaskPriorityInherit+0xc4>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d201      	bcs.n	800ffee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ffea:	2301      	movs	r3, #1
 800ffec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffee:	68fb      	ldr	r3, [r7, #12]
	}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20002644 	.word	0x20002644
 800fffc:	20002648 	.word	0x20002648
 8010000:	20002b20 	.word	0x20002b20

08010004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010004:	b580      	push	{r7, lr}
 8010006:	b086      	sub	sp, #24
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d056      	beq.n	80100c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801001a:	4b2e      	ldr	r3, [pc, #184]	; (80100d4 <xTaskPriorityDisinherit+0xd0>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	693a      	ldr	r2, [r7, #16]
 8010020:	429a      	cmp	r2, r3
 8010022:	d00a      	beq.n	801003a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	60fb      	str	r3, [r7, #12]
}
 8010036:	bf00      	nop
 8010038:	e7fe      	b.n	8010038 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801003e:	2b00      	cmp	r3, #0
 8010040:	d10a      	bne.n	8010058 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010046:	f383 8811 	msr	BASEPRI, r3
 801004a:	f3bf 8f6f 	isb	sy
 801004e:	f3bf 8f4f 	dsb	sy
 8010052:	60bb      	str	r3, [r7, #8]
}
 8010054:	bf00      	nop
 8010056:	e7fe      	b.n	8010056 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801005c:	1e5a      	subs	r2, r3, #1
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801006a:	429a      	cmp	r2, r3
 801006c:	d02c      	beq.n	80100c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010072:	2b00      	cmp	r3, #0
 8010074:	d128      	bne.n	80100c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	3304      	adds	r3, #4
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd ffe0 	bl	800e040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801008c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010098:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <xTaskPriorityDisinherit+0xd4>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	429a      	cmp	r2, r3
 801009e:	d903      	bls.n	80100a8 <xTaskPriorityDisinherit+0xa4>
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	4a0c      	ldr	r2, [pc, #48]	; (80100d8 <xTaskPriorityDisinherit+0xd4>)
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ac:	4613      	mov	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	4413      	add	r3, r2
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	4a09      	ldr	r2, [pc, #36]	; (80100dc <xTaskPriorityDisinherit+0xd8>)
 80100b6:	441a      	add	r2, r3
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	3304      	adds	r3, #4
 80100bc:	4619      	mov	r1, r3
 80100be:	4610      	mov	r0, r2
 80100c0:	f7fd ff61 	bl	800df86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100c8:	697b      	ldr	r3, [r7, #20]
	}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20002644 	.word	0x20002644
 80100d8:	20002b20 	.word	0x20002b20
 80100dc:	20002648 	.word	0x20002648

080100e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80100ee:	2301      	movs	r3, #1
 80100f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d06a      	beq.n	80101ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10a      	bne.n	8010116 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	60fb      	str	r3, [r7, #12]
}
 8010112:	bf00      	nop
 8010114:	e7fe      	b.n	8010114 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	429a      	cmp	r2, r3
 801011e:	d902      	bls.n	8010126 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	61fb      	str	r3, [r7, #28]
 8010124:	e002      	b.n	801012c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801012a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010130:	69fa      	ldr	r2, [r7, #28]
 8010132:	429a      	cmp	r2, r3
 8010134:	d04b      	beq.n	80101ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	429a      	cmp	r2, r3
 801013e:	d146      	bne.n	80101ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010140:	4b25      	ldr	r3, [pc, #148]	; (80101d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	69ba      	ldr	r2, [r7, #24]
 8010146:	429a      	cmp	r2, r3
 8010148:	d10a      	bne.n	8010160 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801014a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	60bb      	str	r3, [r7, #8]
}
 801015c:	bf00      	nop
 801015e:	e7fe      	b.n	801015e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	2b00      	cmp	r3, #0
 8010172:	db04      	blt.n	801017e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	6959      	ldr	r1, [r3, #20]
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	4613      	mov	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4a13      	ldr	r2, [pc, #76]	; (80101dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801018e:	4413      	add	r3, r2
 8010190:	4299      	cmp	r1, r3
 8010192:	d11c      	bne.n	80101ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	3304      	adds	r3, #4
 8010198:	4618      	mov	r0, r3
 801019a:	f7fd ff51 	bl	800e040 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a2:	4b0f      	ldr	r3, [pc, #60]	; (80101e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d903      	bls.n	80101b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ae:	4a0c      	ldr	r2, [pc, #48]	; (80101e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101b6:	4613      	mov	r3, r2
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4413      	add	r3, r2
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4a07      	ldr	r2, [pc, #28]	; (80101dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101c0:	441a      	add	r2, r3
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	3304      	adds	r3, #4
 80101c6:	4619      	mov	r1, r3
 80101c8:	4610      	mov	r0, r2
 80101ca:	f7fd fedc 	bl	800df86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101ce:	bf00      	nop
 80101d0:	3720      	adds	r7, #32
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20002644 	.word	0x20002644
 80101dc:	20002648 	.word	0x20002648
 80101e0:	20002b20 	.word	0x20002b20

080101e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101e4:	b480      	push	{r7}
 80101e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80101e8:	4b07      	ldr	r3, [pc, #28]	; (8010208 <pvTaskIncrementMutexHeldCount+0x24>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d004      	beq.n	80101fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80101f0:	4b05      	ldr	r3, [pc, #20]	; (8010208 <pvTaskIncrementMutexHeldCount+0x24>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80101f6:	3201      	adds	r2, #1
 80101f8:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80101fa:	4b03      	ldr	r3, [pc, #12]	; (8010208 <pvTaskIncrementMutexHeldCount+0x24>)
 80101fc:	681b      	ldr	r3, [r3, #0]
	}
 80101fe:	4618      	mov	r0, r3
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	20002644 	.word	0x20002644

0801020c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010216:	4b21      	ldr	r3, [pc, #132]	; (801029c <prvAddCurrentTaskToDelayedList+0x90>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801021c:	4b20      	ldr	r3, [pc, #128]	; (80102a0 <prvAddCurrentTaskToDelayedList+0x94>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3304      	adds	r3, #4
 8010222:	4618      	mov	r0, r3
 8010224:	f7fd ff0c 	bl	800e040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801022e:	d10a      	bne.n	8010246 <prvAddCurrentTaskToDelayedList+0x3a>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d007      	beq.n	8010246 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010236:	4b1a      	ldr	r3, [pc, #104]	; (80102a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	3304      	adds	r3, #4
 801023c:	4619      	mov	r1, r3
 801023e:	4819      	ldr	r0, [pc, #100]	; (80102a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010240:	f7fd fea1 	bl	800df86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010244:	e026      	b.n	8010294 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4413      	add	r3, r2
 801024c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801024e:	4b14      	ldr	r3, [pc, #80]	; (80102a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010256:	68ba      	ldr	r2, [r7, #8]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	429a      	cmp	r2, r3
 801025c:	d209      	bcs.n	8010272 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801025e:	4b12      	ldr	r3, [pc, #72]	; (80102a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3304      	adds	r3, #4
 8010268:	4619      	mov	r1, r3
 801026a:	4610      	mov	r0, r2
 801026c:	f7fd feaf 	bl	800dfce <vListInsert>
}
 8010270:	e010      	b.n	8010294 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010272:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3304      	adds	r3, #4
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f7fd fea5 	bl	800dfce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010284:	4b0a      	ldr	r3, [pc, #40]	; (80102b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	429a      	cmp	r2, r3
 801028c:	d202      	bcs.n	8010294 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801028e:	4a08      	ldr	r2, [pc, #32]	; (80102b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	6013      	str	r3, [r2, #0]
}
 8010294:	bf00      	nop
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20002b1c 	.word	0x20002b1c
 80102a0:	20002644 	.word	0x20002644
 80102a4:	20002b04 	.word	0x20002b04
 80102a8:	20002ad4 	.word	0x20002ad4
 80102ac:	20002ad0 	.word	0x20002ad0
 80102b0:	20002b38 	.word	0x20002b38

080102b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b08a      	sub	sp, #40	; 0x28
 80102b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102be:	f000 fb07 	bl	80108d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102c2:	4b1c      	ldr	r3, [pc, #112]	; (8010334 <xTimerCreateTimerTask+0x80>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d021      	beq.n	801030e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102ce:	2300      	movs	r3, #0
 80102d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102d2:	1d3a      	adds	r2, r7, #4
 80102d4:	f107 0108 	add.w	r1, r7, #8
 80102d8:	f107 030c 	add.w	r3, r7, #12
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fd fe0b 	bl	800def8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80102e2:	6879      	ldr	r1, [r7, #4]
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	9202      	str	r2, [sp, #8]
 80102ea:	9301      	str	r3, [sp, #4]
 80102ec:	2302      	movs	r3, #2
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	2300      	movs	r3, #0
 80102f2:	460a      	mov	r2, r1
 80102f4:	4910      	ldr	r1, [pc, #64]	; (8010338 <xTimerCreateTimerTask+0x84>)
 80102f6:	4811      	ldr	r0, [pc, #68]	; (801033c <xTimerCreateTimerTask+0x88>)
 80102f8:	f7fe feda 	bl	800f0b0 <xTaskCreateStatic>
 80102fc:	4603      	mov	r3, r0
 80102fe:	4a10      	ldr	r2, [pc, #64]	; (8010340 <xTimerCreateTimerTask+0x8c>)
 8010300:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010302:	4b0f      	ldr	r3, [pc, #60]	; (8010340 <xTimerCreateTimerTask+0x8c>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801030a:	2301      	movs	r3, #1
 801030c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d10a      	bne.n	801032a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	613b      	str	r3, [r7, #16]
}
 8010326:	bf00      	nop
 8010328:	e7fe      	b.n	8010328 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801032a:	697b      	ldr	r3, [r7, #20]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	20002b74 	.word	0x20002b74
 8010338:	0801278c 	.word	0x0801278c
 801033c:	08010479 	.word	0x08010479
 8010340:	20002b78 	.word	0x20002b78

08010344 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b08a      	sub	sp, #40	; 0x28
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
 8010350:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010352:	2300      	movs	r3, #0
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10a      	bne.n	8010372 <xTimerGenericCommand+0x2e>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	623b      	str	r3, [r7, #32]
}
 801036e:	bf00      	nop
 8010370:	e7fe      	b.n	8010370 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010372:	4b1a      	ldr	r3, [pc, #104]	; (80103dc <xTimerGenericCommand+0x98>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d02a      	beq.n	80103d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	2b05      	cmp	r3, #5
 801038a:	dc18      	bgt.n	80103be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801038c:	f7ff fdb4 	bl	800fef8 <xTaskGetSchedulerState>
 8010390:	4603      	mov	r3, r0
 8010392:	2b02      	cmp	r3, #2
 8010394:	d109      	bne.n	80103aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010396:	4b11      	ldr	r3, [pc, #68]	; (80103dc <xTimerGenericCommand+0x98>)
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	f107 0110 	add.w	r1, r7, #16
 801039e:	2300      	movs	r3, #0
 80103a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a2:	f7fe f81f 	bl	800e3e4 <xQueueGenericSend>
 80103a6:	6278      	str	r0, [r7, #36]	; 0x24
 80103a8:	e012      	b.n	80103d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103aa:	4b0c      	ldr	r3, [pc, #48]	; (80103dc <xTimerGenericCommand+0x98>)
 80103ac:	6818      	ldr	r0, [r3, #0]
 80103ae:	f107 0110 	add.w	r1, r7, #16
 80103b2:	2300      	movs	r3, #0
 80103b4:	2200      	movs	r2, #0
 80103b6:	f7fe f815 	bl	800e3e4 <xQueueGenericSend>
 80103ba:	6278      	str	r0, [r7, #36]	; 0x24
 80103bc:	e008      	b.n	80103d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103be:	4b07      	ldr	r3, [pc, #28]	; (80103dc <xTimerGenericCommand+0x98>)
 80103c0:	6818      	ldr	r0, [r3, #0]
 80103c2:	f107 0110 	add.w	r1, r7, #16
 80103c6:	2300      	movs	r3, #0
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	f7fe f909 	bl	800e5e0 <xQueueGenericSendFromISR>
 80103ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3728      	adds	r7, #40	; 0x28
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	20002b74 	.word	0x20002b74

080103e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b088      	sub	sp, #32
 80103e4:	af02      	add	r7, sp, #8
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ea:	4b22      	ldr	r3, [pc, #136]	; (8010474 <prvProcessExpiredTimer+0x94>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	3304      	adds	r3, #4
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fd fe21 	bl	800e040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010404:	f003 0304 	and.w	r3, r3, #4
 8010408:	2b00      	cmp	r3, #0
 801040a:	d022      	beq.n	8010452 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	699a      	ldr	r2, [r3, #24]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	18d1      	adds	r1, r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	6978      	ldr	r0, [r7, #20]
 801041a:	f000 f8d1 	bl	80105c0 <prvInsertTimerInActiveList>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d01f      	beq.n	8010464 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010424:	2300      	movs	r3, #0
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	2300      	movs	r3, #0
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	2100      	movs	r1, #0
 801042e:	6978      	ldr	r0, [r7, #20]
 8010430:	f7ff ff88 	bl	8010344 <xTimerGenericCommand>
 8010434:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d113      	bne.n	8010464 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801043c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	60fb      	str	r3, [r7, #12]
}
 801044e:	bf00      	nop
 8010450:	e7fe      	b.n	8010450 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010458:	f023 0301 	bic.w	r3, r3, #1
 801045c:	b2da      	uxtb	r2, r3
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	6a1b      	ldr	r3, [r3, #32]
 8010468:	6978      	ldr	r0, [r7, #20]
 801046a:	4798      	blx	r3
}
 801046c:	bf00      	nop
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	20002b6c 	.word	0x20002b6c

08010478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010480:	f107 0308 	add.w	r3, r7, #8
 8010484:	4618      	mov	r0, r3
 8010486:	f000 f857 	bl	8010538 <prvGetNextExpireTime>
 801048a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	4619      	mov	r1, r3
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 f803 	bl	801049c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010496:	f000 f8d5 	bl	8010644 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801049a:	e7f1      	b.n	8010480 <prvTimerTask+0x8>

0801049c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104a6:	f7ff f945 	bl	800f734 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104aa:	f107 0308 	add.w	r3, r7, #8
 80104ae:	4618      	mov	r0, r3
 80104b0:	f000 f866 	bl	8010580 <prvSampleTimeNow>
 80104b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d130      	bne.n	801051e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <prvProcessTimerOrBlockTask+0x3c>
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d806      	bhi.n	80104d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104ca:	f7ff f941 	bl	800f750 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80104ce:	68f9      	ldr	r1, [r7, #12]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7ff ff85 	bl	80103e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80104d6:	e024      	b.n	8010522 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d008      	beq.n	80104f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80104de:	4b13      	ldr	r3, [pc, #76]	; (801052c <prvProcessTimerOrBlockTask+0x90>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d101      	bne.n	80104ec <prvProcessTimerOrBlockTask+0x50>
 80104e8:	2301      	movs	r3, #1
 80104ea:	e000      	b.n	80104ee <prvProcessTimerOrBlockTask+0x52>
 80104ec:	2300      	movs	r3, #0
 80104ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80104f0:	4b0f      	ldr	r3, [pc, #60]	; (8010530 <prvProcessTimerOrBlockTask+0x94>)
 80104f2:	6818      	ldr	r0, [r3, #0]
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	4619      	mov	r1, r3
 80104fe:	f7fe fda3 	bl	800f048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010502:	f7ff f925 	bl	800f750 <xTaskResumeAll>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10a      	bne.n	8010522 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801050c:	4b09      	ldr	r3, [pc, #36]	; (8010534 <prvProcessTimerOrBlockTask+0x98>)
 801050e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	f3bf 8f6f 	isb	sy
}
 801051c:	e001      	b.n	8010522 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801051e:	f7ff f917 	bl	800f750 <xTaskResumeAll>
}
 8010522:	bf00      	nop
 8010524:	3710      	adds	r7, #16
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	20002b70 	.word	0x20002b70
 8010530:	20002b74 	.word	0x20002b74
 8010534:	e000ed04 	.word	0xe000ed04

08010538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010540:	4b0e      	ldr	r3, [pc, #56]	; (801057c <prvGetNextExpireTime+0x44>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d101      	bne.n	801054e <prvGetNextExpireTime+0x16>
 801054a:	2201      	movs	r2, #1
 801054c:	e000      	b.n	8010550 <prvGetNextExpireTime+0x18>
 801054e:	2200      	movs	r2, #0
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d105      	bne.n	8010568 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801055c:	4b07      	ldr	r3, [pc, #28]	; (801057c <prvGetNextExpireTime+0x44>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]
 8010566:	e001      	b.n	801056c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010568:	2300      	movs	r3, #0
 801056a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801056c:	68fb      	ldr	r3, [r7, #12]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3714      	adds	r7, #20
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	20002b6c 	.word	0x20002b6c

08010580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010588:	f7ff f980 	bl	800f88c <xTaskGetTickCount>
 801058c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801058e:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <prvSampleTimeNow+0x3c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	429a      	cmp	r2, r3
 8010596:	d205      	bcs.n	80105a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010598:	f000 f936 	bl	8010808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	e002      	b.n	80105aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105aa:	4a04      	ldr	r2, [pc, #16]	; (80105bc <prvSampleTimeNow+0x3c>)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105b0:	68fb      	ldr	r3, [r7, #12]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	20002b7c 	.word	0x20002b7c

080105c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
 80105cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80105de:	68ba      	ldr	r2, [r7, #8]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d812      	bhi.n	801060c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	1ad2      	subs	r2, r2, r3
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d302      	bcc.n	80105fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80105f4:	2301      	movs	r3, #1
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	e01b      	b.n	8010632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80105fa:	4b10      	ldr	r3, [pc, #64]	; (801063c <prvInsertTimerInActiveList+0x7c>)
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3304      	adds	r3, #4
 8010602:	4619      	mov	r1, r3
 8010604:	4610      	mov	r0, r2
 8010606:	f7fd fce2 	bl	800dfce <vListInsert>
 801060a:	e012      	b.n	8010632 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	429a      	cmp	r2, r3
 8010612:	d206      	bcs.n	8010622 <prvInsertTimerInActiveList+0x62>
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	429a      	cmp	r2, r3
 801061a:	d302      	bcc.n	8010622 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801061c:	2301      	movs	r3, #1
 801061e:	617b      	str	r3, [r7, #20]
 8010620:	e007      	b.n	8010632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010622:	4b07      	ldr	r3, [pc, #28]	; (8010640 <prvInsertTimerInActiveList+0x80>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	3304      	adds	r3, #4
 801062a:	4619      	mov	r1, r3
 801062c:	4610      	mov	r0, r2
 801062e:	f7fd fcce 	bl	800dfce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010632:	697b      	ldr	r3, [r7, #20]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20002b70 	.word	0x20002b70
 8010640:	20002b6c 	.word	0x20002b6c

08010644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b08e      	sub	sp, #56	; 0x38
 8010648:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801064a:	e0ca      	b.n	80107e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	da18      	bge.n	8010684 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010652:	1d3b      	adds	r3, r7, #4
 8010654:	3304      	adds	r3, #4
 8010656:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	2b00      	cmp	r3, #0
 801065c:	d10a      	bne.n	8010674 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010662:	f383 8811 	msr	BASEPRI, r3
 8010666:	f3bf 8f6f 	isb	sy
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	61fb      	str	r3, [r7, #28]
}
 8010670:	bf00      	nop
 8010672:	e7fe      	b.n	8010672 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801067a:	6850      	ldr	r0, [r2, #4]
 801067c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801067e:	6892      	ldr	r2, [r2, #8]
 8010680:	4611      	mov	r1, r2
 8010682:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	f2c0 80aa 	blt.w	80107e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010692:	695b      	ldr	r3, [r3, #20]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069a:	3304      	adds	r3, #4
 801069c:	4618      	mov	r0, r3
 801069e:	f7fd fccf 	bl	800e040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106a2:	463b      	mov	r3, r7
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff ff6b 	bl	8010580 <prvSampleTimeNow>
 80106aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b09      	cmp	r3, #9
 80106b0:	f200 8097 	bhi.w	80107e2 <prvProcessReceivedCommands+0x19e>
 80106b4:	a201      	add	r2, pc, #4	; (adr r2, 80106bc <prvProcessReceivedCommands+0x78>)
 80106b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ba:	bf00      	nop
 80106bc:	080106e5 	.word	0x080106e5
 80106c0:	080106e5 	.word	0x080106e5
 80106c4:	080106e5 	.word	0x080106e5
 80106c8:	08010759 	.word	0x08010759
 80106cc:	0801076d 	.word	0x0801076d
 80106d0:	080107b7 	.word	0x080107b7
 80106d4:	080106e5 	.word	0x080106e5
 80106d8:	080106e5 	.word	0x080106e5
 80106dc:	08010759 	.word	0x08010759
 80106e0:	0801076d 	.word	0x0801076d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106ea:	f043 0301 	orr.w	r3, r3, #1
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	699b      	ldr	r3, [r3, #24]
 80106fc:	18d1      	adds	r1, r2, r3
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010704:	f7ff ff5c 	bl	80105c0 <prvInsertTimerInActiveList>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d069      	beq.n	80107e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010714:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801071c:	f003 0304 	and.w	r3, r3, #4
 8010720:	2b00      	cmp	r3, #0
 8010722:	d05e      	beq.n	80107e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	441a      	add	r2, r3
 801072c:	2300      	movs	r3, #0
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	2300      	movs	r3, #0
 8010732:	2100      	movs	r1, #0
 8010734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010736:	f7ff fe05 	bl	8010344 <xTimerGenericCommand>
 801073a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d14f      	bne.n	80107e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	f383 8811 	msr	BASEPRI, r3
 801074a:	f3bf 8f6f 	isb	sy
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	61bb      	str	r3, [r7, #24]
}
 8010754:	bf00      	nop
 8010756:	e7fe      	b.n	8010756 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801075e:	f023 0301 	bic.w	r3, r3, #1
 8010762:	b2da      	uxtb	r2, r3
 8010764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801076a:	e03a      	b.n	80107e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010772:	f043 0301 	orr.w	r3, r3, #1
 8010776:	b2da      	uxtb	r2, r3
 8010778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801077e:	68ba      	ldr	r2, [r7, #8]
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	699b      	ldr	r3, [r3, #24]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10a      	bne.n	80107a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010790:	f383 8811 	msr	BASEPRI, r3
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	617b      	str	r3, [r7, #20]
}
 801079e:	bf00      	nop
 80107a0:	e7fe      	b.n	80107a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	699a      	ldr	r2, [r3, #24]
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	18d1      	adds	r1, r2, r3
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107b0:	f7ff ff06 	bl	80105c0 <prvInsertTimerInActiveList>
					break;
 80107b4:	e015      	b.n	80107e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107bc:	f003 0302 	and.w	r3, r3, #2
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d103      	bne.n	80107cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80107c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c6:	f000 fbdb 	bl	8010f80 <vPortFree>
 80107ca:	e00a      	b.n	80107e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107d2:	f023 0301 	bic.w	r3, r3, #1
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80107de:	e000      	b.n	80107e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80107e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107e2:	4b08      	ldr	r3, [pc, #32]	; (8010804 <prvProcessReceivedCommands+0x1c0>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	1d39      	adds	r1, r7, #4
 80107e8:	2200      	movs	r2, #0
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe f820 	bl	800e830 <xQueueReceive>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f47f af2a 	bne.w	801064c <prvProcessReceivedCommands+0x8>
	}
}
 80107f8:	bf00      	nop
 80107fa:	bf00      	nop
 80107fc:	3730      	adds	r7, #48	; 0x30
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	20002b74 	.word	0x20002b74

08010808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801080e:	e048      	b.n	80108a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010810:	4b2d      	ldr	r3, [pc, #180]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801081a:	4b2b      	ldr	r3, [pc, #172]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	3304      	adds	r3, #4
 8010828:	4618      	mov	r0, r3
 801082a:	f7fd fc09 	bl	800e040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6a1b      	ldr	r3, [r3, #32]
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	d02e      	beq.n	80108a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	699b      	ldr	r3, [r3, #24]
 8010848:	693a      	ldr	r2, [r7, #16]
 801084a:	4413      	add	r3, r2
 801084c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	429a      	cmp	r2, r3
 8010854:	d90e      	bls.n	8010874 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010862:	4b19      	ldr	r3, [pc, #100]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3304      	adds	r3, #4
 801086a:	4619      	mov	r1, r3
 801086c:	4610      	mov	r0, r2
 801086e:	f7fd fbae 	bl	800dfce <vListInsert>
 8010872:	e016      	b.n	80108a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010874:	2300      	movs	r3, #0
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	2300      	movs	r3, #0
 801087a:	693a      	ldr	r2, [r7, #16]
 801087c:	2100      	movs	r1, #0
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7ff fd60 	bl	8010344 <xTimerGenericCommand>
 8010884:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d10a      	bne.n	80108a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	603b      	str	r3, [r7, #0]
}
 801089e:	bf00      	nop
 80108a0:	e7fe      	b.n	80108a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108a2:	4b09      	ldr	r3, [pc, #36]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1b1      	bne.n	8010810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108ac:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108b2:	4b06      	ldr	r3, [pc, #24]	; (80108cc <prvSwitchTimerLists+0xc4>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a04      	ldr	r2, [pc, #16]	; (80108c8 <prvSwitchTimerLists+0xc0>)
 80108b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108ba:	4a04      	ldr	r2, [pc, #16]	; (80108cc <prvSwitchTimerLists+0xc4>)
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	6013      	str	r3, [r2, #0]
}
 80108c0:	bf00      	nop
 80108c2:	3718      	adds	r7, #24
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	20002b6c 	.word	0x20002b6c
 80108cc:	20002b70 	.word	0x20002b70

080108d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80108d6:	f000 f965 	bl	8010ba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80108da:	4b15      	ldr	r3, [pc, #84]	; (8010930 <prvCheckForValidListAndQueue+0x60>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d120      	bne.n	8010924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80108e2:	4814      	ldr	r0, [pc, #80]	; (8010934 <prvCheckForValidListAndQueue+0x64>)
 80108e4:	f7fd fb22 	bl	800df2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80108e8:	4813      	ldr	r0, [pc, #76]	; (8010938 <prvCheckForValidListAndQueue+0x68>)
 80108ea:	f7fd fb1f 	bl	800df2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80108ee:	4b13      	ldr	r3, [pc, #76]	; (801093c <prvCheckForValidListAndQueue+0x6c>)
 80108f0:	4a10      	ldr	r2, [pc, #64]	; (8010934 <prvCheckForValidListAndQueue+0x64>)
 80108f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80108f4:	4b12      	ldr	r3, [pc, #72]	; (8010940 <prvCheckForValidListAndQueue+0x70>)
 80108f6:	4a10      	ldr	r2, [pc, #64]	; (8010938 <prvCheckForValidListAndQueue+0x68>)
 80108f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80108fa:	2300      	movs	r3, #0
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4b11      	ldr	r3, [pc, #68]	; (8010944 <prvCheckForValidListAndQueue+0x74>)
 8010900:	4a11      	ldr	r2, [pc, #68]	; (8010948 <prvCheckForValidListAndQueue+0x78>)
 8010902:	2110      	movs	r1, #16
 8010904:	200a      	movs	r0, #10
 8010906:	f7fd fc2d 	bl	800e164 <xQueueGenericCreateStatic>
 801090a:	4603      	mov	r3, r0
 801090c:	4a08      	ldr	r2, [pc, #32]	; (8010930 <prvCheckForValidListAndQueue+0x60>)
 801090e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010910:	4b07      	ldr	r3, [pc, #28]	; (8010930 <prvCheckForValidListAndQueue+0x60>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d005      	beq.n	8010924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010918:	4b05      	ldr	r3, [pc, #20]	; (8010930 <prvCheckForValidListAndQueue+0x60>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	490b      	ldr	r1, [pc, #44]	; (801094c <prvCheckForValidListAndQueue+0x7c>)
 801091e:	4618      	mov	r0, r3
 8010920:	f7fe fb3e 	bl	800efa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010924:	f000 f96e 	bl	8010c04 <vPortExitCritical>
}
 8010928:	bf00      	nop
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	20002b74 	.word	0x20002b74
 8010934:	20002b44 	.word	0x20002b44
 8010938:	20002b58 	.word	0x20002b58
 801093c:	20002b6c 	.word	0x20002b6c
 8010940:	20002b70 	.word	0x20002b70
 8010944:	20002c20 	.word	0x20002c20
 8010948:	20002b80 	.word	0x20002b80
 801094c:	08012794 	.word	0x08012794

08010950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010950:	b480      	push	{r7}
 8010952:	b085      	sub	sp, #20
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	3b04      	subs	r3, #4
 8010960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3b04      	subs	r3, #4
 801096e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	f023 0201 	bic.w	r2, r3, #1
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3b04      	subs	r3, #4
 801097e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010980:	4a0c      	ldr	r2, [pc, #48]	; (80109b4 <pxPortInitialiseStack+0x64>)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	3b14      	subs	r3, #20
 801098a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3b04      	subs	r3, #4
 8010996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f06f 0202 	mvn.w	r2, #2
 801099e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3b20      	subs	r3, #32
 80109a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109a6:	68fb      	ldr	r3, [r7, #12]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr
 80109b4:	080109b9 	.word	0x080109b9

080109b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109be:	2300      	movs	r3, #0
 80109c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80109c2:	4b12      	ldr	r3, [pc, #72]	; (8010a0c <prvTaskExitError+0x54>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ca:	d00a      	beq.n	80109e2 <prvTaskExitError+0x2a>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	60fb      	str	r3, [r7, #12]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <prvTaskExitError+0x28>
	__asm volatile
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	f383 8811 	msr	BASEPRI, r3
 80109ea:	f3bf 8f6f 	isb	sy
 80109ee:	f3bf 8f4f 	dsb	sy
 80109f2:	60bb      	str	r3, [r7, #8]
}
 80109f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80109f6:	bf00      	nop
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d0fc      	beq.n	80109f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	3714      	adds	r7, #20
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr
 8010a0c:	20000598 	.word	0x20000598

08010a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a10:	4b07      	ldr	r3, [pc, #28]	; (8010a30 <pxCurrentTCBConst2>)
 8010a12:	6819      	ldr	r1, [r3, #0]
 8010a14:	6808      	ldr	r0, [r1, #0]
 8010a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1a:	f380 8809 	msr	PSP, r0
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f04f 0000 	mov.w	r0, #0
 8010a26:	f380 8811 	msr	BASEPRI, r0
 8010a2a:	4770      	bx	lr
 8010a2c:	f3af 8000 	nop.w

08010a30 <pxCurrentTCBConst2>:
 8010a30:	20002644 	.word	0x20002644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a34:	bf00      	nop
 8010a36:	bf00      	nop

08010a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a38:	4808      	ldr	r0, [pc, #32]	; (8010a5c <prvPortStartFirstTask+0x24>)
 8010a3a:	6800      	ldr	r0, [r0, #0]
 8010a3c:	6800      	ldr	r0, [r0, #0]
 8010a3e:	f380 8808 	msr	MSP, r0
 8010a42:	f04f 0000 	mov.w	r0, #0
 8010a46:	f380 8814 	msr	CONTROL, r0
 8010a4a:	b662      	cpsie	i
 8010a4c:	b661      	cpsie	f
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	df00      	svc	0
 8010a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a5a:	bf00      	nop
 8010a5c:	e000ed08 	.word	0xe000ed08

08010a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a66:	4b46      	ldr	r3, [pc, #280]	; (8010b80 <xPortStartScheduler+0x120>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a46      	ldr	r2, [pc, #280]	; (8010b84 <xPortStartScheduler+0x124>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d10a      	bne.n	8010a86 <xPortStartScheduler+0x26>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	613b      	str	r3, [r7, #16]
}
 8010a82:	bf00      	nop
 8010a84:	e7fe      	b.n	8010a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a86:	4b3e      	ldr	r3, [pc, #248]	; (8010b80 <xPortStartScheduler+0x120>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a3f      	ldr	r2, [pc, #252]	; (8010b88 <xPortStartScheduler+0x128>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d10a      	bne.n	8010aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	60fb      	str	r3, [r7, #12]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010aa6:	4b39      	ldr	r3, [pc, #228]	; (8010b8c <xPortStartScheduler+0x12c>)
 8010aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	22ff      	movs	r2, #255	; 0xff
 8010ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	4b31      	ldr	r3, [pc, #196]	; (8010b90 <xPortStartScheduler+0x130>)
 8010acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ace:	4b31      	ldr	r3, [pc, #196]	; (8010b94 <xPortStartScheduler+0x134>)
 8010ad0:	2207      	movs	r2, #7
 8010ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ad4:	e009      	b.n	8010aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ad6:	4b2f      	ldr	r3, [pc, #188]	; (8010b94 <xPortStartScheduler+0x134>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3b01      	subs	r3, #1
 8010adc:	4a2d      	ldr	r2, [pc, #180]	; (8010b94 <xPortStartScheduler+0x134>)
 8010ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010aea:	78fb      	ldrb	r3, [r7, #3]
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010af2:	2b80      	cmp	r3, #128	; 0x80
 8010af4:	d0ef      	beq.n	8010ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010af6:	4b27      	ldr	r3, [pc, #156]	; (8010b94 <xPortStartScheduler+0x134>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f1c3 0307 	rsb	r3, r3, #7
 8010afe:	2b04      	cmp	r3, #4
 8010b00:	d00a      	beq.n	8010b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	60bb      	str	r3, [r7, #8]
}
 8010b14:	bf00      	nop
 8010b16:	e7fe      	b.n	8010b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b18:	4b1e      	ldr	r3, [pc, #120]	; (8010b94 <xPortStartScheduler+0x134>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	021b      	lsls	r3, r3, #8
 8010b1e:	4a1d      	ldr	r2, [pc, #116]	; (8010b94 <xPortStartScheduler+0x134>)
 8010b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b22:	4b1c      	ldr	r3, [pc, #112]	; (8010b94 <xPortStartScheduler+0x134>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b2a:	4a1a      	ldr	r2, [pc, #104]	; (8010b94 <xPortStartScheduler+0x134>)
 8010b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	b2da      	uxtb	r2, r3
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b36:	4b18      	ldr	r3, [pc, #96]	; (8010b98 <xPortStartScheduler+0x138>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a17      	ldr	r2, [pc, #92]	; (8010b98 <xPortStartScheduler+0x138>)
 8010b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b42:	4b15      	ldr	r3, [pc, #84]	; (8010b98 <xPortStartScheduler+0x138>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a14      	ldr	r2, [pc, #80]	; (8010b98 <xPortStartScheduler+0x138>)
 8010b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b4e:	f000 f8dd 	bl	8010d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b52:	4b12      	ldr	r3, [pc, #72]	; (8010b9c <xPortStartScheduler+0x13c>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b58:	f000 f8fc 	bl	8010d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b5c:	4b10      	ldr	r3, [pc, #64]	; (8010ba0 <xPortStartScheduler+0x140>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a0f      	ldr	r2, [pc, #60]	; (8010ba0 <xPortStartScheduler+0x140>)
 8010b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b68:	f7ff ff66 	bl	8010a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b6c:	f7fe ff58 	bl	800fa20 <vTaskSwitchContext>
	prvTaskExitError();
 8010b70:	f7ff ff22 	bl	80109b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	e000ed00 	.word	0xe000ed00
 8010b84:	410fc271 	.word	0x410fc271
 8010b88:	410fc270 	.word	0x410fc270
 8010b8c:	e000e400 	.word	0xe000e400
 8010b90:	20002c70 	.word	0x20002c70
 8010b94:	20002c74 	.word	0x20002c74
 8010b98:	e000ed20 	.word	0xe000ed20
 8010b9c:	20000598 	.word	0x20000598
 8010ba0:	e000ef34 	.word	0xe000ef34

08010ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8010baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bae:	f383 8811 	msr	BASEPRI, r3
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	607b      	str	r3, [r7, #4]
}
 8010bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bbe:	4b0f      	ldr	r3, [pc, #60]	; (8010bfc <vPortEnterCritical+0x58>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	4a0d      	ldr	r2, [pc, #52]	; (8010bfc <vPortEnterCritical+0x58>)
 8010bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010bc8:	4b0c      	ldr	r3, [pc, #48]	; (8010bfc <vPortEnterCritical+0x58>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d10f      	bne.n	8010bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bd0:	4b0b      	ldr	r3, [pc, #44]	; (8010c00 <vPortEnterCritical+0x5c>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00a      	beq.n	8010bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bde:	f383 8811 	msr	BASEPRI, r3
 8010be2:	f3bf 8f6f 	isb	sy
 8010be6:	f3bf 8f4f 	dsb	sy
 8010bea:	603b      	str	r3, [r7, #0]
}
 8010bec:	bf00      	nop
 8010bee:	e7fe      	b.n	8010bee <vPortEnterCritical+0x4a>
	}
}
 8010bf0:	bf00      	nop
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr
 8010bfc:	20000598 	.word	0x20000598
 8010c00:	e000ed04 	.word	0xe000ed04

08010c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c0a:	4b12      	ldr	r3, [pc, #72]	; (8010c54 <vPortExitCritical+0x50>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d10a      	bne.n	8010c28 <vPortExitCritical+0x24>
	__asm volatile
 8010c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c16:	f383 8811 	msr	BASEPRI, r3
 8010c1a:	f3bf 8f6f 	isb	sy
 8010c1e:	f3bf 8f4f 	dsb	sy
 8010c22:	607b      	str	r3, [r7, #4]
}
 8010c24:	bf00      	nop
 8010c26:	e7fe      	b.n	8010c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c28:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <vPortExitCritical+0x50>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	4a09      	ldr	r2, [pc, #36]	; (8010c54 <vPortExitCritical+0x50>)
 8010c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c32:	4b08      	ldr	r3, [pc, #32]	; (8010c54 <vPortExitCritical+0x50>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <vPortExitCritical+0x42>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	f383 8811 	msr	BASEPRI, r3
}
 8010c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c46:	bf00      	nop
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	20000598 	.word	0x20000598
	...

08010c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c60:	f3ef 8009 	mrs	r0, PSP
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	4b15      	ldr	r3, [pc, #84]	; (8010cc0 <pxCurrentTCBConst>)
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	f01e 0f10 	tst.w	lr, #16
 8010c70:	bf08      	it	eq
 8010c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7a:	6010      	str	r0, [r2, #0]
 8010c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c84:	f380 8811 	msr	BASEPRI, r0
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	f3bf 8f6f 	isb	sy
 8010c90:	f7fe fec6 	bl	800fa20 <vTaskSwitchContext>
 8010c94:	f04f 0000 	mov.w	r0, #0
 8010c98:	f380 8811 	msr	BASEPRI, r0
 8010c9c:	bc09      	pop	{r0, r3}
 8010c9e:	6819      	ldr	r1, [r3, #0]
 8010ca0:	6808      	ldr	r0, [r1, #0]
 8010ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca6:	f01e 0f10 	tst.w	lr, #16
 8010caa:	bf08      	it	eq
 8010cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cb0:	f380 8809 	msr	PSP, r0
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	f3af 8000 	nop.w

08010cc0 <pxCurrentTCBConst>:
 8010cc0:	20002644 	.word	0x20002644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010cc4:	bf00      	nop
 8010cc6:	bf00      	nop

08010cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	607b      	str	r3, [r7, #4]
}
 8010ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ce2:	f7fe fde3 	bl	800f8ac <xTaskIncrementTick>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d003      	beq.n	8010cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010cec:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <xPortSysTickHandler+0x40>)
 8010cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cf2:	601a      	str	r2, [r3, #0]
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	f383 8811 	msr	BASEPRI, r3
}
 8010cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	e000ed04 	.word	0xe000ed04

08010d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d10:	4b0b      	ldr	r3, [pc, #44]	; (8010d40 <vPortSetupTimerInterrupt+0x34>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d16:	4b0b      	ldr	r3, [pc, #44]	; (8010d44 <vPortSetupTimerInterrupt+0x38>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d1c:	4b0a      	ldr	r3, [pc, #40]	; (8010d48 <vPortSetupTimerInterrupt+0x3c>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a0a      	ldr	r2, [pc, #40]	; (8010d4c <vPortSetupTimerInterrupt+0x40>)
 8010d22:	fba2 2303 	umull	r2, r3, r2, r3
 8010d26:	099b      	lsrs	r3, r3, #6
 8010d28:	4a09      	ldr	r2, [pc, #36]	; (8010d50 <vPortSetupTimerInterrupt+0x44>)
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d2e:	4b04      	ldr	r3, [pc, #16]	; (8010d40 <vPortSetupTimerInterrupt+0x34>)
 8010d30:	2207      	movs	r2, #7
 8010d32:	601a      	str	r2, [r3, #0]
}
 8010d34:	bf00      	nop
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	e000e010 	.word	0xe000e010
 8010d44:	e000e018 	.word	0xe000e018
 8010d48:	200004ec 	.word	0x200004ec
 8010d4c:	10624dd3 	.word	0x10624dd3
 8010d50:	e000e014 	.word	0xe000e014

08010d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d64 <vPortEnableVFP+0x10>
 8010d58:	6801      	ldr	r1, [r0, #0]
 8010d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d5e:	6001      	str	r1, [r0, #0]
 8010d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d62:	bf00      	nop
 8010d64:	e000ed88 	.word	0xe000ed88

08010d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d68:	b480      	push	{r7}
 8010d6a:	b085      	sub	sp, #20
 8010d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d6e:	f3ef 8305 	mrs	r3, IPSR
 8010d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b0f      	cmp	r3, #15
 8010d78:	d914      	bls.n	8010da4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d7a:	4a17      	ldr	r2, [pc, #92]	; (8010dd8 <vPortValidateInterruptPriority+0x70>)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	4413      	add	r3, r2
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d84:	4b15      	ldr	r3, [pc, #84]	; (8010ddc <vPortValidateInterruptPriority+0x74>)
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	7afa      	ldrb	r2, [r7, #11]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d20a      	bcs.n	8010da4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	607b      	str	r3, [r7, #4]
}
 8010da0:	bf00      	nop
 8010da2:	e7fe      	b.n	8010da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010da4:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <vPortValidateInterruptPriority+0x78>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010dac:	4b0d      	ldr	r3, [pc, #52]	; (8010de4 <vPortValidateInterruptPriority+0x7c>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d90a      	bls.n	8010dca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db8:	f383 8811 	msr	BASEPRI, r3
 8010dbc:	f3bf 8f6f 	isb	sy
 8010dc0:	f3bf 8f4f 	dsb	sy
 8010dc4:	603b      	str	r3, [r7, #0]
}
 8010dc6:	bf00      	nop
 8010dc8:	e7fe      	b.n	8010dc8 <vPortValidateInterruptPriority+0x60>
	}
 8010dca:	bf00      	nop
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr
 8010dd6:	bf00      	nop
 8010dd8:	e000e3f0 	.word	0xe000e3f0
 8010ddc:	20002c70 	.word	0x20002c70
 8010de0:	e000ed0c 	.word	0xe000ed0c
 8010de4:	20002c74 	.word	0x20002c74

08010de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b08a      	sub	sp, #40	; 0x28
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010df0:	2300      	movs	r3, #0
 8010df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010df4:	f7fe fc9e 	bl	800f734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010df8:	4b5b      	ldr	r3, [pc, #364]	; (8010f68 <pvPortMalloc+0x180>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d101      	bne.n	8010e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e00:	f000 f920 	bl	8011044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e04:	4b59      	ldr	r3, [pc, #356]	; (8010f6c <pvPortMalloc+0x184>)
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f040 8093 	bne.w	8010f38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d01d      	beq.n	8010e54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010e18:	2208      	movs	r2, #8
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f003 0307 	and.w	r3, r3, #7
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d014      	beq.n	8010e54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f023 0307 	bic.w	r3, r3, #7
 8010e30:	3308      	adds	r3, #8
 8010e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00a      	beq.n	8010e54 <pvPortMalloc+0x6c>
	__asm volatile
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	617b      	str	r3, [r7, #20]
}
 8010e50:	bf00      	nop
 8010e52:	e7fe      	b.n	8010e52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d06e      	beq.n	8010f38 <pvPortMalloc+0x150>
 8010e5a:	4b45      	ldr	r3, [pc, #276]	; (8010f70 <pvPortMalloc+0x188>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d869      	bhi.n	8010f38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e64:	4b43      	ldr	r3, [pc, #268]	; (8010f74 <pvPortMalloc+0x18c>)
 8010e66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e68:	4b42      	ldr	r3, [pc, #264]	; (8010f74 <pvPortMalloc+0x18c>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e6e:	e004      	b.n	8010e7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d903      	bls.n	8010e8c <pvPortMalloc+0xa4>
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1f1      	bne.n	8010e70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e8c:	4b36      	ldr	r3, [pc, #216]	; (8010f68 <pvPortMalloc+0x180>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d050      	beq.n	8010f38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2208      	movs	r2, #8
 8010e9c:	4413      	add	r3, r2
 8010e9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	6a3b      	ldr	r3, [r7, #32]
 8010ea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	685a      	ldr	r2, [r3, #4]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	1ad2      	subs	r2, r2, r3
 8010eb0:	2308      	movs	r3, #8
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d91f      	bls.n	8010ef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	f003 0307 	and.w	r3, r3, #7
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00a      	beq.n	8010ee0 <pvPortMalloc+0xf8>
	__asm volatile
 8010eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ece:	f383 8811 	msr	BASEPRI, r3
 8010ed2:	f3bf 8f6f 	isb	sy
 8010ed6:	f3bf 8f4f 	dsb	sy
 8010eda:	613b      	str	r3, [r7, #16]
}
 8010edc:	bf00      	nop
 8010ede:	e7fe      	b.n	8010ede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee2:	685a      	ldr	r2, [r3, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	1ad2      	subs	r2, r2, r3
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ef2:	69b8      	ldr	r0, [r7, #24]
 8010ef4:	f000 f908 	bl	8011108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ef8:	4b1d      	ldr	r3, [pc, #116]	; (8010f70 <pvPortMalloc+0x188>)
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	4a1b      	ldr	r2, [pc, #108]	; (8010f70 <pvPortMalloc+0x188>)
 8010f04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f06:	4b1a      	ldr	r3, [pc, #104]	; (8010f70 <pvPortMalloc+0x188>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	4b1b      	ldr	r3, [pc, #108]	; (8010f78 <pvPortMalloc+0x190>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d203      	bcs.n	8010f1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f12:	4b17      	ldr	r3, [pc, #92]	; (8010f70 <pvPortMalloc+0x188>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a18      	ldr	r2, [pc, #96]	; (8010f78 <pvPortMalloc+0x190>)
 8010f18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	685a      	ldr	r2, [r3, #4]
 8010f1e:	4b13      	ldr	r3, [pc, #76]	; (8010f6c <pvPortMalloc+0x184>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	431a      	orrs	r2, r3
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f2e:	4b13      	ldr	r3, [pc, #76]	; (8010f7c <pvPortMalloc+0x194>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3301      	adds	r3, #1
 8010f34:	4a11      	ldr	r2, [pc, #68]	; (8010f7c <pvPortMalloc+0x194>)
 8010f36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f38:	f7fe fc0a 	bl	800f750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	f003 0307 	and.w	r3, r3, #7
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00a      	beq.n	8010f5c <pvPortMalloc+0x174>
	__asm volatile
 8010f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4a:	f383 8811 	msr	BASEPRI, r3
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	60fb      	str	r3, [r7, #12]
}
 8010f58:	bf00      	nop
 8010f5a:	e7fe      	b.n	8010f5a <pvPortMalloc+0x172>
	return pvReturn;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3728      	adds	r7, #40	; 0x28
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop
 8010f68:	20006880 	.word	0x20006880
 8010f6c:	20006894 	.word	0x20006894
 8010f70:	20006884 	.word	0x20006884
 8010f74:	20006878 	.word	0x20006878
 8010f78:	20006888 	.word	0x20006888
 8010f7c:	2000688c 	.word	0x2000688c

08010f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d04d      	beq.n	801102e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f92:	2308      	movs	r3, #8
 8010f94:	425b      	negs	r3, r3
 8010f96:	697a      	ldr	r2, [r7, #20]
 8010f98:	4413      	add	r3, r2
 8010f9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	685a      	ldr	r2, [r3, #4]
 8010fa4:	4b24      	ldr	r3, [pc, #144]	; (8011038 <vPortFree+0xb8>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4013      	ands	r3, r2
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <vPortFree+0x44>
	__asm volatile
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	60fb      	str	r3, [r7, #12]
}
 8010fc0:	bf00      	nop
 8010fc2:	e7fe      	b.n	8010fc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00a      	beq.n	8010fe2 <vPortFree+0x62>
	__asm volatile
 8010fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd0:	f383 8811 	msr	BASEPRI, r3
 8010fd4:	f3bf 8f6f 	isb	sy
 8010fd8:	f3bf 8f4f 	dsb	sy
 8010fdc:	60bb      	str	r3, [r7, #8]
}
 8010fde:	bf00      	nop
 8010fe0:	e7fe      	b.n	8010fe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	685a      	ldr	r2, [r3, #4]
 8010fe6:	4b14      	ldr	r3, [pc, #80]	; (8011038 <vPortFree+0xb8>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4013      	ands	r3, r2
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d01e      	beq.n	801102e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d11a      	bne.n	801102e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	4b0e      	ldr	r3, [pc, #56]	; (8011038 <vPortFree+0xb8>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	43db      	mvns	r3, r3
 8011002:	401a      	ands	r2, r3
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011008:	f7fe fb94 	bl	800f734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	685a      	ldr	r2, [r3, #4]
 8011010:	4b0a      	ldr	r3, [pc, #40]	; (801103c <vPortFree+0xbc>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4413      	add	r3, r2
 8011016:	4a09      	ldr	r2, [pc, #36]	; (801103c <vPortFree+0xbc>)
 8011018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801101a:	6938      	ldr	r0, [r7, #16]
 801101c:	f000 f874 	bl	8011108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011020:	4b07      	ldr	r3, [pc, #28]	; (8011040 <vPortFree+0xc0>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	4a06      	ldr	r2, [pc, #24]	; (8011040 <vPortFree+0xc0>)
 8011028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801102a:	f7fe fb91 	bl	800f750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801102e:	bf00      	nop
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	20006894 	.word	0x20006894
 801103c:	20006884 	.word	0x20006884
 8011040:	20006890 	.word	0x20006890

08011044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801104a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801104e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011050:	4b27      	ldr	r3, [pc, #156]	; (80110f0 <prvHeapInit+0xac>)
 8011052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f003 0307 	and.w	r3, r3, #7
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00c      	beq.n	8011078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3307      	adds	r3, #7
 8011062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f023 0307 	bic.w	r3, r3, #7
 801106a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801106c:	68ba      	ldr	r2, [r7, #8]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	4a1f      	ldr	r2, [pc, #124]	; (80110f0 <prvHeapInit+0xac>)
 8011074:	4413      	add	r3, r2
 8011076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801107c:	4a1d      	ldr	r2, [pc, #116]	; (80110f4 <prvHeapInit+0xb0>)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011082:	4b1c      	ldr	r3, [pc, #112]	; (80110f4 <prvHeapInit+0xb0>)
 8011084:	2200      	movs	r2, #0
 8011086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	4413      	add	r3, r2
 801108e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011090:	2208      	movs	r2, #8
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	1a9b      	subs	r3, r3, r2
 8011096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f023 0307 	bic.w	r3, r3, #7
 801109e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	4a15      	ldr	r2, [pc, #84]	; (80110f8 <prvHeapInit+0xb4>)
 80110a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110a6:	4b14      	ldr	r3, [pc, #80]	; (80110f8 <prvHeapInit+0xb4>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2200      	movs	r2, #0
 80110ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110ae:	4b12      	ldr	r3, [pc, #72]	; (80110f8 <prvHeapInit+0xb4>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2200      	movs	r2, #0
 80110b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	1ad2      	subs	r2, r2, r3
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110c4:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <prvHeapInit+0xb4>)
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	4a0a      	ldr	r2, [pc, #40]	; (80110fc <prvHeapInit+0xb8>)
 80110d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	4a09      	ldr	r2, [pc, #36]	; (8011100 <prvHeapInit+0xbc>)
 80110da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110dc:	4b09      	ldr	r3, [pc, #36]	; (8011104 <prvHeapInit+0xc0>)
 80110de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80110e2:	601a      	str	r2, [r3, #0]
}
 80110e4:	bf00      	nop
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr
 80110f0:	20002c78 	.word	0x20002c78
 80110f4:	20006878 	.word	0x20006878
 80110f8:	20006880 	.word	0x20006880
 80110fc:	20006888 	.word	0x20006888
 8011100:	20006884 	.word	0x20006884
 8011104:	20006894 	.word	0x20006894

08011108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011110:	4b28      	ldr	r3, [pc, #160]	; (80111b4 <prvInsertBlockIntoFreeList+0xac>)
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	e002      	b.n	801111c <prvInsertBlockIntoFreeList+0x14>
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	60fb      	str	r3, [r7, #12]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	429a      	cmp	r2, r3
 8011124:	d8f7      	bhi.n	8011116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	68ba      	ldr	r2, [r7, #8]
 8011130:	4413      	add	r3, r2
 8011132:	687a      	ldr	r2, [r7, #4]
 8011134:	429a      	cmp	r2, r3
 8011136:	d108      	bne.n	801114a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	685a      	ldr	r2, [r3, #4]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	441a      	add	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	441a      	add	r2, r3
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	429a      	cmp	r2, r3
 801115c:	d118      	bne.n	8011190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	4b15      	ldr	r3, [pc, #84]	; (80111b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	429a      	cmp	r2, r3
 8011168:	d00d      	beq.n	8011186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685a      	ldr	r2, [r3, #4]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	441a      	add	r2, r3
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	601a      	str	r2, [r3, #0]
 8011184:	e008      	b.n	8011198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011186:	4b0c      	ldr	r3, [pc, #48]	; (80111b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	e003      	b.n	8011198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	429a      	cmp	r2, r3
 801119e:	d002      	beq.n	80111a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111a6:	bf00      	nop
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	20006878 	.word	0x20006878
 80111b8:	20006880 	.word	0x20006880

080111bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80111c0:	2200      	movs	r2, #0
 80111c2:	4912      	ldr	r1, [pc, #72]	; (801120c <MX_USB_DEVICE_Init+0x50>)
 80111c4:	4812      	ldr	r0, [pc, #72]	; (8011210 <MX_USB_DEVICE_Init+0x54>)
 80111c6:	f7f8 fc57 	bl	8009a78 <USBD_Init>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80111d0:	f7f1 f962 	bl	8002498 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80111d4:	490f      	ldr	r1, [pc, #60]	; (8011214 <MX_USB_DEVICE_Init+0x58>)
 80111d6:	480e      	ldr	r0, [pc, #56]	; (8011210 <MX_USB_DEVICE_Init+0x54>)
 80111d8:	f7f8 fc7e 	bl	8009ad8 <USBD_RegisterClass>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80111e2:	f7f1 f959 	bl	8002498 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80111e6:	490c      	ldr	r1, [pc, #48]	; (8011218 <MX_USB_DEVICE_Init+0x5c>)
 80111e8:	4809      	ldr	r0, [pc, #36]	; (8011210 <MX_USB_DEVICE_Init+0x54>)
 80111ea:	f7f8 fb6f 	bl	80098cc <USBD_CDC_RegisterInterface>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80111f4:	f7f1 f950 	bl	8002498 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80111f8:	4805      	ldr	r0, [pc, #20]	; (8011210 <MX_USB_DEVICE_Init+0x54>)
 80111fa:	f7f8 fca3 	bl	8009b44 <USBD_Start>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011204:	f7f1 f948 	bl	8002498 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011208:	bf00      	nop
 801120a:	bd80      	pop	{r7, pc}
 801120c:	200005b0 	.word	0x200005b0
 8011210:	20006898 	.word	0x20006898
 8011214:	20000518 	.word	0x20000518
 8011218:	2000059c 	.word	0x2000059c

0801121c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011220:	2200      	movs	r2, #0
 8011222:	4905      	ldr	r1, [pc, #20]	; (8011238 <CDC_Init_FS+0x1c>)
 8011224:	4805      	ldr	r0, [pc, #20]	; (801123c <CDC_Init_FS+0x20>)
 8011226:	f7f8 fb6b 	bl	8009900 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801122a:	4905      	ldr	r1, [pc, #20]	; (8011240 <CDC_Init_FS+0x24>)
 801122c:	4803      	ldr	r0, [pc, #12]	; (801123c <CDC_Init_FS+0x20>)
 801122e:	f7f8 fb89 	bl	8009944 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011234:	4618      	mov	r0, r3
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20006f74 	.word	0x20006f74
 801123c:	20006898 	.word	0x20006898
 8011240:	20006b74 	.word	0x20006b74

08011244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011244:	b480      	push	{r7}
 8011246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801124a:	4618      	mov	r0, r3
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr

08011254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	4603      	mov	r3, r0
 801125c:	6039      	str	r1, [r7, #0]
 801125e:	71fb      	strb	r3, [r7, #7]
 8011260:	4613      	mov	r3, r2
 8011262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011264:	79fb      	ldrb	r3, [r7, #7]
 8011266:	2b23      	cmp	r3, #35	; 0x23
 8011268:	d84a      	bhi.n	8011300 <CDC_Control_FS+0xac>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <CDC_Control_FS+0x1c>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	08011301 	.word	0x08011301
 8011274:	08011301 	.word	0x08011301
 8011278:	08011301 	.word	0x08011301
 801127c:	08011301 	.word	0x08011301
 8011280:	08011301 	.word	0x08011301
 8011284:	08011301 	.word	0x08011301
 8011288:	08011301 	.word	0x08011301
 801128c:	08011301 	.word	0x08011301
 8011290:	08011301 	.word	0x08011301
 8011294:	08011301 	.word	0x08011301
 8011298:	08011301 	.word	0x08011301
 801129c:	08011301 	.word	0x08011301
 80112a0:	08011301 	.word	0x08011301
 80112a4:	08011301 	.word	0x08011301
 80112a8:	08011301 	.word	0x08011301
 80112ac:	08011301 	.word	0x08011301
 80112b0:	08011301 	.word	0x08011301
 80112b4:	08011301 	.word	0x08011301
 80112b8:	08011301 	.word	0x08011301
 80112bc:	08011301 	.word	0x08011301
 80112c0:	08011301 	.word	0x08011301
 80112c4:	08011301 	.word	0x08011301
 80112c8:	08011301 	.word	0x08011301
 80112cc:	08011301 	.word	0x08011301
 80112d0:	08011301 	.word	0x08011301
 80112d4:	08011301 	.word	0x08011301
 80112d8:	08011301 	.word	0x08011301
 80112dc:	08011301 	.word	0x08011301
 80112e0:	08011301 	.word	0x08011301
 80112e4:	08011301 	.word	0x08011301
 80112e8:	08011301 	.word	0x08011301
 80112ec:	08011301 	.word	0x08011301
 80112f0:	08011301 	.word	0x08011301
 80112f4:	08011301 	.word	0x08011301
 80112f8:	08011301 	.word	0x08011301
 80112fc:	08011301 	.word	0x08011301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011300:	bf00      	nop
  }

  return (USBD_OK);
 8011302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011304:	4618      	mov	r0, r3
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801131a:	6879      	ldr	r1, [r7, #4]
 801131c:	4805      	ldr	r0, [pc, #20]	; (8011334 <CDC_Receive_FS+0x24>)
 801131e:	f7f8 fb11 	bl	8009944 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011322:	4804      	ldr	r0, [pc, #16]	; (8011334 <CDC_Receive_FS+0x24>)
 8011324:	f7f8 fb72 	bl	8009a0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011328:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801132a:	4618      	mov	r0, r3
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	20006898 	.word	0x20006898

08011338 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	460b      	mov	r3, r1
 8011342:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011348:	4b0d      	ldr	r3, [pc, #52]	; (8011380 <CDC_Transmit_FS+0x48>)
 801134a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801134e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011356:	2b00      	cmp	r3, #0
 8011358:	d001      	beq.n	801135e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801135a:	2301      	movs	r3, #1
 801135c:	e00b      	b.n	8011376 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801135e:	887b      	ldrh	r3, [r7, #2]
 8011360:	461a      	mov	r2, r3
 8011362:	6879      	ldr	r1, [r7, #4]
 8011364:	4806      	ldr	r0, [pc, #24]	; (8011380 <CDC_Transmit_FS+0x48>)
 8011366:	f7f8 facb 	bl	8009900 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801136a:	4805      	ldr	r0, [pc, #20]	; (8011380 <CDC_Transmit_FS+0x48>)
 801136c:	f7f8 fb08 	bl	8009980 <USBD_CDC_TransmitPacket>
 8011370:	4603      	mov	r3, r0
 8011372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011374:	7bfb      	ldrb	r3, [r7, #15]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
 801137e:	bf00      	nop
 8011380:	20006898 	.word	0x20006898

08011384 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011384:	b480      	push	{r7}
 8011386:	b087      	sub	sp, #28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	4613      	mov	r3, r2
 8011390:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801139a:	4618      	mov	r0, r3
 801139c:	371c      	adds	r7, #28
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
	...

080113a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	6039      	str	r1, [r7, #0]
 80113b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	2212      	movs	r2, #18
 80113b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80113ba:	4b03      	ldr	r3, [pc, #12]	; (80113c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80113bc:	4618      	mov	r0, r3
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	200005cc 	.word	0x200005cc

080113cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	4603      	mov	r3, r0
 80113d4:	6039      	str	r1, [r7, #0]
 80113d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	2204      	movs	r2, #4
 80113dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113de:	4b03      	ldr	r3, [pc, #12]	; (80113ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr
 80113ec:	200005e0 	.word	0x200005e0

080113f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	6039      	str	r1, [r7, #0]
 80113fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d105      	bne.n	801140e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	4907      	ldr	r1, [pc, #28]	; (8011424 <USBD_FS_ProductStrDescriptor+0x34>)
 8011406:	4808      	ldr	r0, [pc, #32]	; (8011428 <USBD_FS_ProductStrDescriptor+0x38>)
 8011408:	f7f9 fd48 	bl	800ae9c <USBD_GetString>
 801140c:	e004      	b.n	8011418 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	4904      	ldr	r1, [pc, #16]	; (8011424 <USBD_FS_ProductStrDescriptor+0x34>)
 8011412:	4805      	ldr	r0, [pc, #20]	; (8011428 <USBD_FS_ProductStrDescriptor+0x38>)
 8011414:	f7f9 fd42 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011418:	4b02      	ldr	r3, [pc, #8]	; (8011424 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801141a:	4618      	mov	r0, r3
 801141c:	3708      	adds	r7, #8
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	20007374 	.word	0x20007374
 8011428:	0801279c 	.word	0x0801279c

0801142c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	6039      	str	r1, [r7, #0]
 8011436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011438:	683a      	ldr	r2, [r7, #0]
 801143a:	4904      	ldr	r1, [pc, #16]	; (801144c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801143c:	4804      	ldr	r0, [pc, #16]	; (8011450 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801143e:	f7f9 fd2d 	bl	800ae9c <USBD_GetString>
  return USBD_StrDesc;
 8011442:	4b02      	ldr	r3, [pc, #8]	; (801144c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	20007374 	.word	0x20007374
 8011450:	080127b4 	.word	0x080127b4

08011454 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	4603      	mov	r3, r0
 801145c:	6039      	str	r1, [r7, #0]
 801145e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	221a      	movs	r2, #26
 8011464:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011466:	f000 f843 	bl	80114f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801146a:	4b02      	ldr	r3, [pc, #8]	; (8011474 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801146c:	4618      	mov	r0, r3
 801146e:	3708      	adds	r7, #8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	200005e4 	.word	0x200005e4

08011478 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	4603      	mov	r3, r0
 8011480:	6039      	str	r1, [r7, #0]
 8011482:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d105      	bne.n	8011496 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801148a:	683a      	ldr	r2, [r7, #0]
 801148c:	4907      	ldr	r1, [pc, #28]	; (80114ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801148e:	4808      	ldr	r0, [pc, #32]	; (80114b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011490:	f7f9 fd04 	bl	800ae9c <USBD_GetString>
 8011494:	e004      	b.n	80114a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	4904      	ldr	r1, [pc, #16]	; (80114ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801149a:	4805      	ldr	r0, [pc, #20]	; (80114b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801149c:	f7f9 fcfe 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80114a0:	4b02      	ldr	r3, [pc, #8]	; (80114ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	20007374 	.word	0x20007374
 80114b0:	080127c8 	.word	0x080127c8

080114b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	4603      	mov	r3, r0
 80114bc:	6039      	str	r1, [r7, #0]
 80114be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d105      	bne.n	80114d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	4907      	ldr	r1, [pc, #28]	; (80114e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114ca:	4808      	ldr	r0, [pc, #32]	; (80114ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114cc:	f7f9 fce6 	bl	800ae9c <USBD_GetString>
 80114d0:	e004      	b.n	80114dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114d2:	683a      	ldr	r2, [r7, #0]
 80114d4:	4904      	ldr	r1, [pc, #16]	; (80114e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114d6:	4805      	ldr	r0, [pc, #20]	; (80114ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114d8:	f7f9 fce0 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80114dc:	4b02      	ldr	r3, [pc, #8]	; (80114e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	20007374 	.word	0x20007374
 80114ec:	080127d4 	.word	0x080127d4

080114f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114f6:	4b0f      	ldr	r3, [pc, #60]	; (8011534 <Get_SerialNum+0x44>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114fc:	4b0e      	ldr	r3, [pc, #56]	; (8011538 <Get_SerialNum+0x48>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011502:	4b0e      	ldr	r3, [pc, #56]	; (801153c <Get_SerialNum+0x4c>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4413      	add	r3, r2
 801150e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d009      	beq.n	801152a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011516:	2208      	movs	r2, #8
 8011518:	4909      	ldr	r1, [pc, #36]	; (8011540 <Get_SerialNum+0x50>)
 801151a:	68f8      	ldr	r0, [r7, #12]
 801151c:	f000 f814 	bl	8011548 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011520:	2204      	movs	r2, #4
 8011522:	4908      	ldr	r1, [pc, #32]	; (8011544 <Get_SerialNum+0x54>)
 8011524:	68b8      	ldr	r0, [r7, #8]
 8011526:	f000 f80f 	bl	8011548 <IntToUnicode>
  }
}
 801152a:	bf00      	nop
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	1fff7a10 	.word	0x1fff7a10
 8011538:	1fff7a14 	.word	0x1fff7a14
 801153c:	1fff7a18 	.word	0x1fff7a18
 8011540:	200005e6 	.word	0x200005e6
 8011544:	200005f6 	.word	0x200005f6

08011548 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011548:	b480      	push	{r7}
 801154a:	b087      	sub	sp, #28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801155a:	2300      	movs	r3, #0
 801155c:	75fb      	strb	r3, [r7, #23]
 801155e:	e027      	b.n	80115b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	0f1b      	lsrs	r3, r3, #28
 8011564:	2b09      	cmp	r3, #9
 8011566:	d80b      	bhi.n	8011580 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	0f1b      	lsrs	r3, r3, #28
 801156c:	b2da      	uxtb	r2, r3
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4619      	mov	r1, r3
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	440b      	add	r3, r1
 8011578:	3230      	adds	r2, #48	; 0x30
 801157a:	b2d2      	uxtb	r2, r2
 801157c:	701a      	strb	r2, [r3, #0]
 801157e:	e00a      	b.n	8011596 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	0f1b      	lsrs	r3, r3, #28
 8011584:	b2da      	uxtb	r2, r3
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	005b      	lsls	r3, r3, #1
 801158a:	4619      	mov	r1, r3
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	440b      	add	r3, r1
 8011590:	3237      	adds	r2, #55	; 0x37
 8011592:	b2d2      	uxtb	r2, r2
 8011594:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	011b      	lsls	r3, r3, #4
 801159a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801159c:	7dfb      	ldrb	r3, [r7, #23]
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	3301      	adds	r3, #1
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	4413      	add	r3, r2
 80115a6:	2200      	movs	r2, #0
 80115a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80115aa:	7dfb      	ldrb	r3, [r7, #23]
 80115ac:	3301      	adds	r3, #1
 80115ae:	75fb      	strb	r3, [r7, #23]
 80115b0:	7dfa      	ldrb	r2, [r7, #23]
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d3d3      	bcc.n	8011560 <IntToUnicode+0x18>
  }
}
 80115b8:	bf00      	nop
 80115ba:	bf00      	nop
 80115bc:	371c      	adds	r7, #28
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr
	...

080115c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08a      	sub	sp, #40	; 0x28
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115d0:	f107 0314 	add.w	r3, r7, #20
 80115d4:	2200      	movs	r2, #0
 80115d6:	601a      	str	r2, [r3, #0]
 80115d8:	605a      	str	r2, [r3, #4]
 80115da:	609a      	str	r2, [r3, #8]
 80115dc:	60da      	str	r2, [r3, #12]
 80115de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115e8:	d13a      	bne.n	8011660 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ea:	2300      	movs	r3, #0
 80115ec:	613b      	str	r3, [r7, #16]
 80115ee:	4b1e      	ldr	r3, [pc, #120]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 80115f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f2:	4a1d      	ldr	r2, [pc, #116]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 80115f4:	f043 0301 	orr.w	r3, r3, #1
 80115f8:	6313      	str	r3, [r2, #48]	; 0x30
 80115fa:	4b1b      	ldr	r3, [pc, #108]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 80115fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	613b      	str	r3, [r7, #16]
 8011604:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011606:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801160c:	2302      	movs	r3, #2
 801160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011610:	2300      	movs	r3, #0
 8011612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011614:	2303      	movs	r3, #3
 8011616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011618:	230a      	movs	r3, #10
 801161a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801161c:	f107 0314 	add.w	r3, r7, #20
 8011620:	4619      	mov	r1, r3
 8011622:	4812      	ldr	r0, [pc, #72]	; (801166c <HAL_PCD_MspInit+0xa4>)
 8011624:	f7f1 fafe 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011628:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 801162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801162c:	4a0e      	ldr	r2, [pc, #56]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 801162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011632:	6353      	str	r3, [r2, #52]	; 0x34
 8011634:	2300      	movs	r3, #0
 8011636:	60fb      	str	r3, [r7, #12]
 8011638:	4b0b      	ldr	r3, [pc, #44]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 801163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163c:	4a0a      	ldr	r2, [pc, #40]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 801163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011642:	6453      	str	r3, [r2, #68]	; 0x44
 8011644:	4b08      	ldr	r3, [pc, #32]	; (8011668 <HAL_PCD_MspInit+0xa0>)
 8011646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801164c:	60fb      	str	r3, [r7, #12]
 801164e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011650:	2200      	movs	r2, #0
 8011652:	2105      	movs	r1, #5
 8011654:	2043      	movs	r0, #67	; 0x43
 8011656:	f7f1 fabb 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801165a:	2043      	movs	r0, #67	; 0x43
 801165c:	f7f1 fad4 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011660:	bf00      	nop
 8011662:	3728      	adds	r7, #40	; 0x28
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	40023800 	.word	0x40023800
 801166c:	40020000 	.word	0x40020000

08011670 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011684:	4619      	mov	r1, r3
 8011686:	4610      	mov	r0, r2
 8011688:	f7f8 faa9 	bl	8009bde <USBD_LL_SetupStage>
}
 801168c:	bf00      	nop
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	460b      	mov	r3, r1
 801169e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116a6:	78fa      	ldrb	r2, [r7, #3]
 80116a8:	6879      	ldr	r1, [r7, #4]
 80116aa:	4613      	mov	r3, r2
 80116ac:	00db      	lsls	r3, r3, #3
 80116ae:	4413      	add	r3, r2
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	440b      	add	r3, r1
 80116b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	4619      	mov	r1, r3
 80116be:	f7f8 fae3 	bl	8009c88 <USBD_LL_DataOutStage>
}
 80116c2:	bf00      	nop
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b082      	sub	sp, #8
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
 80116d2:	460b      	mov	r3, r1
 80116d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116dc:	78fa      	ldrb	r2, [r7, #3]
 80116de:	6879      	ldr	r1, [r7, #4]
 80116e0:	4613      	mov	r3, r2
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	4413      	add	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	440b      	add	r3, r1
 80116ea:	334c      	adds	r3, #76	; 0x4c
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	78fb      	ldrb	r3, [r7, #3]
 80116f0:	4619      	mov	r1, r3
 80116f2:	f7f8 fb7c 	bl	8009dee <USBD_LL_DataInStage>
}
 80116f6:	bf00      	nop
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b082      	sub	sp, #8
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801170c:	4618      	mov	r0, r3
 801170e:	f7f8 fcb0 	bl	800a072 <USBD_LL_SOF>
}
 8011712:	bf00      	nop
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b084      	sub	sp, #16
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011722:	2301      	movs	r3, #1
 8011724:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	2b02      	cmp	r3, #2
 801172c:	d001      	beq.n	8011732 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801172e:	f7f0 feb3 	bl	8002498 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011738:	7bfa      	ldrb	r2, [r7, #15]
 801173a:	4611      	mov	r1, r2
 801173c:	4618      	mov	r0, r3
 801173e:	f7f8 fc5a 	bl	8009ff6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011748:	4618      	mov	r0, r3
 801174a:	f7f8 fc02 	bl	8009f52 <USBD_LL_Reset>
}
 801174e:	bf00      	nop
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
	...

08011758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011766:	4618      	mov	r0, r3
 8011768:	f7f8 fc55 	bl	800a016 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	6812      	ldr	r2, [r2, #0]
 801177a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801177e:	f043 0301 	orr.w	r3, r3, #1
 8011782:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a1b      	ldr	r3, [r3, #32]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d005      	beq.n	8011798 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801178c:	4b04      	ldr	r3, [pc, #16]	; (80117a0 <HAL_PCD_SuspendCallback+0x48>)
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	4a03      	ldr	r2, [pc, #12]	; (80117a0 <HAL_PCD_SuspendCallback+0x48>)
 8011792:	f043 0306 	orr.w	r3, r3, #6
 8011796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011798:	bf00      	nop
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	e000ed00 	.word	0xe000ed00

080117a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7f8 fc45 	bl	800a042 <USBD_LL_Resume>
}
 80117b8:	bf00      	nop
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	460b      	mov	r3, r1
 80117ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117d2:	78fa      	ldrb	r2, [r7, #3]
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7f8 fc9d 	bl	800a116 <USBD_LL_IsoOUTIncomplete>
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	460b      	mov	r3, r1
 80117ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117f6:	78fa      	ldrb	r2, [r7, #3]
 80117f8:	4611      	mov	r1, r2
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f8 fc59 	bl	800a0b2 <USBD_LL_IsoINIncomplete>
}
 8011800:	bf00      	nop
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}

08011808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011816:	4618      	mov	r0, r3
 8011818:	f7f8 fcaf 	bl	800a17a <USBD_LL_DevConnected>
}
 801181c:	bf00      	nop
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011832:	4618      	mov	r0, r3
 8011834:	f7f8 fcac 	bl	800a190 <USBD_LL_DevDisconnected>
}
 8011838:	bf00      	nop
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d13c      	bne.n	80118ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011850:	4a20      	ldr	r2, [pc, #128]	; (80118d4 <USBD_LL_Init+0x94>)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4a1e      	ldr	r2, [pc, #120]	; (80118d4 <USBD_LL_Init+0x94>)
 801185c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011860:	4b1c      	ldr	r3, [pc, #112]	; (80118d4 <USBD_LL_Init+0x94>)
 8011862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011868:	4b1a      	ldr	r3, [pc, #104]	; (80118d4 <USBD_LL_Init+0x94>)
 801186a:	2204      	movs	r2, #4
 801186c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801186e:	4b19      	ldr	r3, [pc, #100]	; (80118d4 <USBD_LL_Init+0x94>)
 8011870:	2202      	movs	r2, #2
 8011872:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011874:	4b17      	ldr	r3, [pc, #92]	; (80118d4 <USBD_LL_Init+0x94>)
 8011876:	2200      	movs	r2, #0
 8011878:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801187a:	4b16      	ldr	r3, [pc, #88]	; (80118d4 <USBD_LL_Init+0x94>)
 801187c:	2202      	movs	r2, #2
 801187e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011880:	4b14      	ldr	r3, [pc, #80]	; (80118d4 <USBD_LL_Init+0x94>)
 8011882:	2200      	movs	r2, #0
 8011884:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011886:	4b13      	ldr	r3, [pc, #76]	; (80118d4 <USBD_LL_Init+0x94>)
 8011888:	2200      	movs	r2, #0
 801188a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801188c:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <USBD_LL_Init+0x94>)
 801188e:	2200      	movs	r2, #0
 8011890:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011892:	4b10      	ldr	r3, [pc, #64]	; (80118d4 <USBD_LL_Init+0x94>)
 8011894:	2200      	movs	r2, #0
 8011896:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011898:	4b0e      	ldr	r3, [pc, #56]	; (80118d4 <USBD_LL_Init+0x94>)
 801189a:	2200      	movs	r2, #0
 801189c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801189e:	480d      	ldr	r0, [pc, #52]	; (80118d4 <USBD_LL_Init+0x94>)
 80118a0:	f7f2 fb35 	bl	8003f0e <HAL_PCD_Init>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d001      	beq.n	80118ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80118aa:	f7f0 fdf5 	bl	8002498 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80118ae:	2180      	movs	r1, #128	; 0x80
 80118b0:	4808      	ldr	r0, [pc, #32]	; (80118d4 <USBD_LL_Init+0x94>)
 80118b2:	f7f3 fd8c 	bl	80053ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80118b6:	2240      	movs	r2, #64	; 0x40
 80118b8:	2100      	movs	r1, #0
 80118ba:	4806      	ldr	r0, [pc, #24]	; (80118d4 <USBD_LL_Init+0x94>)
 80118bc:	f7f3 fd40 	bl	8005340 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80118c0:	2280      	movs	r2, #128	; 0x80
 80118c2:	2101      	movs	r1, #1
 80118c4:	4803      	ldr	r0, [pc, #12]	; (80118d4 <USBD_LL_Init+0x94>)
 80118c6:	f7f3 fd3b 	bl	8005340 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20007574 	.word	0x20007574

080118d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7f2 fc2a 	bl	8004148 <HAL_PCD_Start>
 80118f4:	4603      	mov	r3, r0
 80118f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f000 f942 	bl	8011b84 <USBD_Get_USB_Status>
 8011900:	4603      	mov	r3, r0
 8011902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011904:	7bbb      	ldrb	r3, [r7, #14]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801190e:	b580      	push	{r7, lr}
 8011910:	b084      	sub	sp, #16
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
 8011916:	4608      	mov	r0, r1
 8011918:	4611      	mov	r1, r2
 801191a:	461a      	mov	r2, r3
 801191c:	4603      	mov	r3, r0
 801191e:	70fb      	strb	r3, [r7, #3]
 8011920:	460b      	mov	r3, r1
 8011922:	70bb      	strb	r3, [r7, #2]
 8011924:	4613      	mov	r3, r2
 8011926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011928:	2300      	movs	r3, #0
 801192a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801192c:	2300      	movs	r3, #0
 801192e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011936:	78bb      	ldrb	r3, [r7, #2]
 8011938:	883a      	ldrh	r2, [r7, #0]
 801193a:	78f9      	ldrb	r1, [r7, #3]
 801193c:	f7f3 f8fb 	bl	8004b36 <HAL_PCD_EP_Open>
 8011940:	4603      	mov	r3, r0
 8011942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011944:	7bfb      	ldrb	r3, [r7, #15]
 8011946:	4618      	mov	r0, r3
 8011948:	f000 f91c 	bl	8011b84 <USBD_Get_USB_Status>
 801194c:	4603      	mov	r3, r0
 801194e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011950:	7bbb      	ldrb	r3, [r7, #14]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b084      	sub	sp, #16
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
 8011962:	460b      	mov	r3, r1
 8011964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801196a:	2300      	movs	r3, #0
 801196c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011974:	78fa      	ldrb	r2, [r7, #3]
 8011976:	4611      	mov	r1, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f7f3 f944 	bl	8004c06 <HAL_PCD_EP_Close>
 801197e:	4603      	mov	r3, r0
 8011980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011982:	7bfb      	ldrb	r3, [r7, #15]
 8011984:	4618      	mov	r0, r3
 8011986:	f000 f8fd 	bl	8011b84 <USBD_Get_USB_Status>
 801198a:	4603      	mov	r3, r0
 801198c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801198e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011990:	4618      	mov	r0, r3
 8011992:	3710      	adds	r7, #16
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	460b      	mov	r3, r1
 80119a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119b2:	78fa      	ldrb	r2, [r7, #3]
 80119b4:	4611      	mov	r1, r2
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7f3 fa1c 	bl	8004df4 <HAL_PCD_EP_SetStall>
 80119bc:	4603      	mov	r3, r0
 80119be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c0:	7bfb      	ldrb	r3, [r7, #15]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f000 f8de 	bl	8011b84 <USBD_Get_USB_Status>
 80119c8:	4603      	mov	r3, r0
 80119ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b084      	sub	sp, #16
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	460b      	mov	r3, r1
 80119e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119e2:	2300      	movs	r3, #0
 80119e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119e6:	2300      	movs	r3, #0
 80119e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119f0:	78fa      	ldrb	r2, [r7, #3]
 80119f2:	4611      	mov	r1, r2
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7f3 fa61 	bl	8004ebc <HAL_PCD_EP_ClrStall>
 80119fa:	4603      	mov	r3, r0
 80119fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119fe:	7bfb      	ldrb	r3, [r7, #15]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 f8bf 	bl	8011b84 <USBD_Get_USB_Status>
 8011a06:	4603      	mov	r3, r0
 8011a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	da0b      	bge.n	8011a48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011a30:	78fb      	ldrb	r3, [r7, #3]
 8011a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a36:	68f9      	ldr	r1, [r7, #12]
 8011a38:	4613      	mov	r3, r2
 8011a3a:	00db      	lsls	r3, r3, #3
 8011a3c:	4413      	add	r3, r2
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	440b      	add	r3, r1
 8011a42:	333e      	adds	r3, #62	; 0x3e
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	e00b      	b.n	8011a60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a4e:	68f9      	ldr	r1, [r7, #12]
 8011a50:	4613      	mov	r3, r2
 8011a52:	00db      	lsls	r3, r3, #3
 8011a54:	4413      	add	r3, r2
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	440b      	add	r3, r1
 8011a5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011a5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3714      	adds	r7, #20
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	460b      	mov	r3, r1
 8011a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a86:	78fa      	ldrb	r2, [r7, #3]
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7f3 f82e 	bl	8004aec <HAL_PCD_SetAddress>
 8011a90:	4603      	mov	r3, r0
 8011a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a94:	7bfb      	ldrb	r3, [r7, #15]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 f874 	bl	8011b84 <USBD_Get_USB_Status>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b086      	sub	sp, #24
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	607a      	str	r2, [r7, #4]
 8011ab4:	603b      	str	r3, [r7, #0]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ac8:	7af9      	ldrb	r1, [r7, #11]
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	f7f3 f947 	bl	8004d60 <HAL_PCD_EP_Transmit>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ad6:	7dfb      	ldrb	r3, [r7, #23]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f000 f853 	bl	8011b84 <USBD_Get_USB_Status>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3718      	adds	r7, #24
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	607a      	str	r2, [r7, #4]
 8011af6:	603b      	str	r3, [r7, #0]
 8011af8:	460b      	mov	r3, r1
 8011afa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b0a:	7af9      	ldrb	r1, [r7, #11]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	f7f3 f8c3 	bl	8004c9a <HAL_PCD_EP_Receive>
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 f832 	bl	8011b84 <USBD_Get_USB_Status>
 8011b20:	4603      	mov	r3, r0
 8011b22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b24:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3718      	adds	r7, #24
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b2e:	b580      	push	{r7, lr}
 8011b30:	b082      	sub	sp, #8
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	460b      	mov	r3, r1
 8011b38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b40:	78fa      	ldrb	r2, [r7, #3]
 8011b42:	4611      	mov	r1, r2
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7f3 f8f3 	bl	8004d30 <HAL_PCD_EP_GetRxCount>
 8011b4a:	4603      	mov	r3, r0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b5c:	4b03      	ldr	r3, [pc, #12]	; (8011b6c <USBD_static_malloc+0x18>)
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	20007a80 	.word	0x20007a80

08011b70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]

}
 8011b78:	bf00      	nop
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	d817      	bhi.n	8011bc8 <USBD_Get_USB_Status+0x44>
 8011b98:	a201      	add	r2, pc, #4	; (adr r2, 8011ba0 <USBD_Get_USB_Status+0x1c>)
 8011b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b9e:	bf00      	nop
 8011ba0:	08011bb1 	.word	0x08011bb1
 8011ba4:	08011bb7 	.word	0x08011bb7
 8011ba8:	08011bbd 	.word	0x08011bbd
 8011bac:	08011bc3 	.word	0x08011bc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8011bb4:	e00b      	b.n	8011bce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8011bba:	e008      	b.n	8011bce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8011bc0:	e005      	b.n	8011bce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011bc2:	2303      	movs	r3, #3
 8011bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8011bc6:	e002      	b.n	8011bce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011bc8:	2303      	movs	r3, #3
 8011bca:	73fb      	strb	r3, [r7, #15]
    break;
 8011bcc:	bf00      	nop
  }
  return usb_status;
 8011bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3714      	adds	r7, #20
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <__errno>:
 8011bdc:	4b01      	ldr	r3, [pc, #4]	; (8011be4 <__errno+0x8>)
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	20000600 	.word	0x20000600

08011be8 <__libc_init_array>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	4d0d      	ldr	r5, [pc, #52]	; (8011c20 <__libc_init_array+0x38>)
 8011bec:	4c0d      	ldr	r4, [pc, #52]	; (8011c24 <__libc_init_array+0x3c>)
 8011bee:	1b64      	subs	r4, r4, r5
 8011bf0:	10a4      	asrs	r4, r4, #2
 8011bf2:	2600      	movs	r6, #0
 8011bf4:	42a6      	cmp	r6, r4
 8011bf6:	d109      	bne.n	8011c0c <__libc_init_array+0x24>
 8011bf8:	4d0b      	ldr	r5, [pc, #44]	; (8011c28 <__libc_init_array+0x40>)
 8011bfa:	4c0c      	ldr	r4, [pc, #48]	; (8011c2c <__libc_init_array+0x44>)
 8011bfc:	f000 fcb2 	bl	8012564 <_init>
 8011c00:	1b64      	subs	r4, r4, r5
 8011c02:	10a4      	asrs	r4, r4, #2
 8011c04:	2600      	movs	r6, #0
 8011c06:	42a6      	cmp	r6, r4
 8011c08:	d105      	bne.n	8011c16 <__libc_init_array+0x2e>
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}
 8011c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c10:	4798      	blx	r3
 8011c12:	3601      	adds	r6, #1
 8011c14:	e7ee      	b.n	8011bf4 <__libc_init_array+0xc>
 8011c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c1a:	4798      	blx	r3
 8011c1c:	3601      	adds	r6, #1
 8011c1e:	e7f2      	b.n	8011c06 <__libc_init_array+0x1e>
 8011c20:	08012c18 	.word	0x08012c18
 8011c24:	08012c18 	.word	0x08012c18
 8011c28:	08012c18 	.word	0x08012c18
 8011c2c:	08012c1c 	.word	0x08012c1c

08011c30 <malloc>:
 8011c30:	4b02      	ldr	r3, [pc, #8]	; (8011c3c <malloc+0xc>)
 8011c32:	4601      	mov	r1, r0
 8011c34:	6818      	ldr	r0, [r3, #0]
 8011c36:	f000 b88d 	b.w	8011d54 <_malloc_r>
 8011c3a:	bf00      	nop
 8011c3c:	20000600 	.word	0x20000600

08011c40 <free>:
 8011c40:	4b02      	ldr	r3, [pc, #8]	; (8011c4c <free+0xc>)
 8011c42:	4601      	mov	r1, r0
 8011c44:	6818      	ldr	r0, [r3, #0]
 8011c46:	f000 b819 	b.w	8011c7c <_free_r>
 8011c4a:	bf00      	nop
 8011c4c:	20000600 	.word	0x20000600

08011c50 <memcpy>:
 8011c50:	440a      	add	r2, r1
 8011c52:	4291      	cmp	r1, r2
 8011c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c58:	d100      	bne.n	8011c5c <memcpy+0xc>
 8011c5a:	4770      	bx	lr
 8011c5c:	b510      	push	{r4, lr}
 8011c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c66:	4291      	cmp	r1, r2
 8011c68:	d1f9      	bne.n	8011c5e <memcpy+0xe>
 8011c6a:	bd10      	pop	{r4, pc}

08011c6c <memset>:
 8011c6c:	4402      	add	r2, r0
 8011c6e:	4603      	mov	r3, r0
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d100      	bne.n	8011c76 <memset+0xa>
 8011c74:	4770      	bx	lr
 8011c76:	f803 1b01 	strb.w	r1, [r3], #1
 8011c7a:	e7f9      	b.n	8011c70 <memset+0x4>

08011c7c <_free_r>:
 8011c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c7e:	2900      	cmp	r1, #0
 8011c80:	d044      	beq.n	8011d0c <_free_r+0x90>
 8011c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c86:	9001      	str	r0, [sp, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8011c8e:	bfb8      	it	lt
 8011c90:	18e4      	addlt	r4, r4, r3
 8011c92:	f000 f917 	bl	8011ec4 <__malloc_lock>
 8011c96:	4a1e      	ldr	r2, [pc, #120]	; (8011d10 <_free_r+0x94>)
 8011c98:	9801      	ldr	r0, [sp, #4]
 8011c9a:	6813      	ldr	r3, [r2, #0]
 8011c9c:	b933      	cbnz	r3, 8011cac <_free_r+0x30>
 8011c9e:	6063      	str	r3, [r4, #4]
 8011ca0:	6014      	str	r4, [r2, #0]
 8011ca2:	b003      	add	sp, #12
 8011ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ca8:	f000 b912 	b.w	8011ed0 <__malloc_unlock>
 8011cac:	42a3      	cmp	r3, r4
 8011cae:	d908      	bls.n	8011cc2 <_free_r+0x46>
 8011cb0:	6825      	ldr	r5, [r4, #0]
 8011cb2:	1961      	adds	r1, r4, r5
 8011cb4:	428b      	cmp	r3, r1
 8011cb6:	bf01      	itttt	eq
 8011cb8:	6819      	ldreq	r1, [r3, #0]
 8011cba:	685b      	ldreq	r3, [r3, #4]
 8011cbc:	1949      	addeq	r1, r1, r5
 8011cbe:	6021      	streq	r1, [r4, #0]
 8011cc0:	e7ed      	b.n	8011c9e <_free_r+0x22>
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	b10b      	cbz	r3, 8011ccc <_free_r+0x50>
 8011cc8:	42a3      	cmp	r3, r4
 8011cca:	d9fa      	bls.n	8011cc2 <_free_r+0x46>
 8011ccc:	6811      	ldr	r1, [r2, #0]
 8011cce:	1855      	adds	r5, r2, r1
 8011cd0:	42a5      	cmp	r5, r4
 8011cd2:	d10b      	bne.n	8011cec <_free_r+0x70>
 8011cd4:	6824      	ldr	r4, [r4, #0]
 8011cd6:	4421      	add	r1, r4
 8011cd8:	1854      	adds	r4, r2, r1
 8011cda:	42a3      	cmp	r3, r4
 8011cdc:	6011      	str	r1, [r2, #0]
 8011cde:	d1e0      	bne.n	8011ca2 <_free_r+0x26>
 8011ce0:	681c      	ldr	r4, [r3, #0]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	6053      	str	r3, [r2, #4]
 8011ce6:	4421      	add	r1, r4
 8011ce8:	6011      	str	r1, [r2, #0]
 8011cea:	e7da      	b.n	8011ca2 <_free_r+0x26>
 8011cec:	d902      	bls.n	8011cf4 <_free_r+0x78>
 8011cee:	230c      	movs	r3, #12
 8011cf0:	6003      	str	r3, [r0, #0]
 8011cf2:	e7d6      	b.n	8011ca2 <_free_r+0x26>
 8011cf4:	6825      	ldr	r5, [r4, #0]
 8011cf6:	1961      	adds	r1, r4, r5
 8011cf8:	428b      	cmp	r3, r1
 8011cfa:	bf04      	itt	eq
 8011cfc:	6819      	ldreq	r1, [r3, #0]
 8011cfe:	685b      	ldreq	r3, [r3, #4]
 8011d00:	6063      	str	r3, [r4, #4]
 8011d02:	bf04      	itt	eq
 8011d04:	1949      	addeq	r1, r1, r5
 8011d06:	6021      	streq	r1, [r4, #0]
 8011d08:	6054      	str	r4, [r2, #4]
 8011d0a:	e7ca      	b.n	8011ca2 <_free_r+0x26>
 8011d0c:	b003      	add	sp, #12
 8011d0e:	bd30      	pop	{r4, r5, pc}
 8011d10:	20007ca0 	.word	0x20007ca0

08011d14 <sbrk_aligned>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	4e0e      	ldr	r6, [pc, #56]	; (8011d50 <sbrk_aligned+0x3c>)
 8011d18:	460c      	mov	r4, r1
 8011d1a:	6831      	ldr	r1, [r6, #0]
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	b911      	cbnz	r1, 8011d26 <sbrk_aligned+0x12>
 8011d20:	f000 f88c 	bl	8011e3c <_sbrk_r>
 8011d24:	6030      	str	r0, [r6, #0]
 8011d26:	4621      	mov	r1, r4
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f000 f887 	bl	8011e3c <_sbrk_r>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	d00a      	beq.n	8011d48 <sbrk_aligned+0x34>
 8011d32:	1cc4      	adds	r4, r0, #3
 8011d34:	f024 0403 	bic.w	r4, r4, #3
 8011d38:	42a0      	cmp	r0, r4
 8011d3a:	d007      	beq.n	8011d4c <sbrk_aligned+0x38>
 8011d3c:	1a21      	subs	r1, r4, r0
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f000 f87c 	bl	8011e3c <_sbrk_r>
 8011d44:	3001      	adds	r0, #1
 8011d46:	d101      	bne.n	8011d4c <sbrk_aligned+0x38>
 8011d48:	f04f 34ff 	mov.w	r4, #4294967295
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	20007ca4 	.word	0x20007ca4

08011d54 <_malloc_r>:
 8011d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d58:	1ccd      	adds	r5, r1, #3
 8011d5a:	f025 0503 	bic.w	r5, r5, #3
 8011d5e:	3508      	adds	r5, #8
 8011d60:	2d0c      	cmp	r5, #12
 8011d62:	bf38      	it	cc
 8011d64:	250c      	movcc	r5, #12
 8011d66:	2d00      	cmp	r5, #0
 8011d68:	4607      	mov	r7, r0
 8011d6a:	db01      	blt.n	8011d70 <_malloc_r+0x1c>
 8011d6c:	42a9      	cmp	r1, r5
 8011d6e:	d905      	bls.n	8011d7c <_malloc_r+0x28>
 8011d70:	230c      	movs	r3, #12
 8011d72:	603b      	str	r3, [r7, #0]
 8011d74:	2600      	movs	r6, #0
 8011d76:	4630      	mov	r0, r6
 8011d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d7c:	4e2e      	ldr	r6, [pc, #184]	; (8011e38 <_malloc_r+0xe4>)
 8011d7e:	f000 f8a1 	bl	8011ec4 <__malloc_lock>
 8011d82:	6833      	ldr	r3, [r6, #0]
 8011d84:	461c      	mov	r4, r3
 8011d86:	bb34      	cbnz	r4, 8011dd6 <_malloc_r+0x82>
 8011d88:	4629      	mov	r1, r5
 8011d8a:	4638      	mov	r0, r7
 8011d8c:	f7ff ffc2 	bl	8011d14 <sbrk_aligned>
 8011d90:	1c43      	adds	r3, r0, #1
 8011d92:	4604      	mov	r4, r0
 8011d94:	d14d      	bne.n	8011e32 <_malloc_r+0xde>
 8011d96:	6834      	ldr	r4, [r6, #0]
 8011d98:	4626      	mov	r6, r4
 8011d9a:	2e00      	cmp	r6, #0
 8011d9c:	d140      	bne.n	8011e20 <_malloc_r+0xcc>
 8011d9e:	6823      	ldr	r3, [r4, #0]
 8011da0:	4631      	mov	r1, r6
 8011da2:	4638      	mov	r0, r7
 8011da4:	eb04 0803 	add.w	r8, r4, r3
 8011da8:	f000 f848 	bl	8011e3c <_sbrk_r>
 8011dac:	4580      	cmp	r8, r0
 8011dae:	d13a      	bne.n	8011e26 <_malloc_r+0xd2>
 8011db0:	6821      	ldr	r1, [r4, #0]
 8011db2:	3503      	adds	r5, #3
 8011db4:	1a6d      	subs	r5, r5, r1
 8011db6:	f025 0503 	bic.w	r5, r5, #3
 8011dba:	3508      	adds	r5, #8
 8011dbc:	2d0c      	cmp	r5, #12
 8011dbe:	bf38      	it	cc
 8011dc0:	250c      	movcc	r5, #12
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	f7ff ffa5 	bl	8011d14 <sbrk_aligned>
 8011dca:	3001      	adds	r0, #1
 8011dcc:	d02b      	beq.n	8011e26 <_malloc_r+0xd2>
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	442b      	add	r3, r5
 8011dd2:	6023      	str	r3, [r4, #0]
 8011dd4:	e00e      	b.n	8011df4 <_malloc_r+0xa0>
 8011dd6:	6822      	ldr	r2, [r4, #0]
 8011dd8:	1b52      	subs	r2, r2, r5
 8011dda:	d41e      	bmi.n	8011e1a <_malloc_r+0xc6>
 8011ddc:	2a0b      	cmp	r2, #11
 8011dde:	d916      	bls.n	8011e0e <_malloc_r+0xba>
 8011de0:	1961      	adds	r1, r4, r5
 8011de2:	42a3      	cmp	r3, r4
 8011de4:	6025      	str	r5, [r4, #0]
 8011de6:	bf18      	it	ne
 8011de8:	6059      	strne	r1, [r3, #4]
 8011dea:	6863      	ldr	r3, [r4, #4]
 8011dec:	bf08      	it	eq
 8011dee:	6031      	streq	r1, [r6, #0]
 8011df0:	5162      	str	r2, [r4, r5]
 8011df2:	604b      	str	r3, [r1, #4]
 8011df4:	4638      	mov	r0, r7
 8011df6:	f104 060b 	add.w	r6, r4, #11
 8011dfa:	f000 f869 	bl	8011ed0 <__malloc_unlock>
 8011dfe:	f026 0607 	bic.w	r6, r6, #7
 8011e02:	1d23      	adds	r3, r4, #4
 8011e04:	1af2      	subs	r2, r6, r3
 8011e06:	d0b6      	beq.n	8011d76 <_malloc_r+0x22>
 8011e08:	1b9b      	subs	r3, r3, r6
 8011e0a:	50a3      	str	r3, [r4, r2]
 8011e0c:	e7b3      	b.n	8011d76 <_malloc_r+0x22>
 8011e0e:	6862      	ldr	r2, [r4, #4]
 8011e10:	42a3      	cmp	r3, r4
 8011e12:	bf0c      	ite	eq
 8011e14:	6032      	streq	r2, [r6, #0]
 8011e16:	605a      	strne	r2, [r3, #4]
 8011e18:	e7ec      	b.n	8011df4 <_malloc_r+0xa0>
 8011e1a:	4623      	mov	r3, r4
 8011e1c:	6864      	ldr	r4, [r4, #4]
 8011e1e:	e7b2      	b.n	8011d86 <_malloc_r+0x32>
 8011e20:	4634      	mov	r4, r6
 8011e22:	6876      	ldr	r6, [r6, #4]
 8011e24:	e7b9      	b.n	8011d9a <_malloc_r+0x46>
 8011e26:	230c      	movs	r3, #12
 8011e28:	603b      	str	r3, [r7, #0]
 8011e2a:	4638      	mov	r0, r7
 8011e2c:	f000 f850 	bl	8011ed0 <__malloc_unlock>
 8011e30:	e7a1      	b.n	8011d76 <_malloc_r+0x22>
 8011e32:	6025      	str	r5, [r4, #0]
 8011e34:	e7de      	b.n	8011df4 <_malloc_r+0xa0>
 8011e36:	bf00      	nop
 8011e38:	20007ca0 	.word	0x20007ca0

08011e3c <_sbrk_r>:
 8011e3c:	b538      	push	{r3, r4, r5, lr}
 8011e3e:	4d06      	ldr	r5, [pc, #24]	; (8011e58 <_sbrk_r+0x1c>)
 8011e40:	2300      	movs	r3, #0
 8011e42:	4604      	mov	r4, r0
 8011e44:	4608      	mov	r0, r1
 8011e46:	602b      	str	r3, [r5, #0]
 8011e48:	f7f0 fd32 	bl	80028b0 <_sbrk>
 8011e4c:	1c43      	adds	r3, r0, #1
 8011e4e:	d102      	bne.n	8011e56 <_sbrk_r+0x1a>
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	b103      	cbz	r3, 8011e56 <_sbrk_r+0x1a>
 8011e54:	6023      	str	r3, [r4, #0]
 8011e56:	bd38      	pop	{r3, r4, r5, pc}
 8011e58:	20007ca8 	.word	0x20007ca8

08011e5c <siprintf>:
 8011e5c:	b40e      	push	{r1, r2, r3}
 8011e5e:	b500      	push	{lr}
 8011e60:	b09c      	sub	sp, #112	; 0x70
 8011e62:	ab1d      	add	r3, sp, #116	; 0x74
 8011e64:	9002      	str	r0, [sp, #8]
 8011e66:	9006      	str	r0, [sp, #24]
 8011e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e6c:	4809      	ldr	r0, [pc, #36]	; (8011e94 <siprintf+0x38>)
 8011e6e:	9107      	str	r1, [sp, #28]
 8011e70:	9104      	str	r1, [sp, #16]
 8011e72:	4909      	ldr	r1, [pc, #36]	; (8011e98 <siprintf+0x3c>)
 8011e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e78:	9105      	str	r1, [sp, #20]
 8011e7a:	6800      	ldr	r0, [r0, #0]
 8011e7c:	9301      	str	r3, [sp, #4]
 8011e7e:	a902      	add	r1, sp, #8
 8011e80:	f000 f888 	bl	8011f94 <_svfiprintf_r>
 8011e84:	9b02      	ldr	r3, [sp, #8]
 8011e86:	2200      	movs	r2, #0
 8011e88:	701a      	strb	r2, [r3, #0]
 8011e8a:	b01c      	add	sp, #112	; 0x70
 8011e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e90:	b003      	add	sp, #12
 8011e92:	4770      	bx	lr
 8011e94:	20000600 	.word	0x20000600
 8011e98:	ffff0208 	.word	0xffff0208

08011e9c <strncpy>:
 8011e9c:	b510      	push	{r4, lr}
 8011e9e:	3901      	subs	r1, #1
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	b132      	cbz	r2, 8011eb2 <strncpy+0x16>
 8011ea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ea8:	f803 4b01 	strb.w	r4, [r3], #1
 8011eac:	3a01      	subs	r2, #1
 8011eae:	2c00      	cmp	r4, #0
 8011eb0:	d1f7      	bne.n	8011ea2 <strncpy+0x6>
 8011eb2:	441a      	add	r2, r3
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d100      	bne.n	8011ebc <strncpy+0x20>
 8011eba:	bd10      	pop	{r4, pc}
 8011ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8011ec0:	e7f9      	b.n	8011eb6 <strncpy+0x1a>
	...

08011ec4 <__malloc_lock>:
 8011ec4:	4801      	ldr	r0, [pc, #4]	; (8011ecc <__malloc_lock+0x8>)
 8011ec6:	f000 baf9 	b.w	80124bc <__retarget_lock_acquire_recursive>
 8011eca:	bf00      	nop
 8011ecc:	20007cac 	.word	0x20007cac

08011ed0 <__malloc_unlock>:
 8011ed0:	4801      	ldr	r0, [pc, #4]	; (8011ed8 <__malloc_unlock+0x8>)
 8011ed2:	f000 baf4 	b.w	80124be <__retarget_lock_release_recursive>
 8011ed6:	bf00      	nop
 8011ed8:	20007cac 	.word	0x20007cac

08011edc <__ssputs_r>:
 8011edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee0:	688e      	ldr	r6, [r1, #8]
 8011ee2:	429e      	cmp	r6, r3
 8011ee4:	4682      	mov	sl, r0
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	4690      	mov	r8, r2
 8011eea:	461f      	mov	r7, r3
 8011eec:	d838      	bhi.n	8011f60 <__ssputs_r+0x84>
 8011eee:	898a      	ldrh	r2, [r1, #12]
 8011ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ef4:	d032      	beq.n	8011f5c <__ssputs_r+0x80>
 8011ef6:	6825      	ldr	r5, [r4, #0]
 8011ef8:	6909      	ldr	r1, [r1, #16]
 8011efa:	eba5 0901 	sub.w	r9, r5, r1
 8011efe:	6965      	ldr	r5, [r4, #20]
 8011f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f08:	3301      	adds	r3, #1
 8011f0a:	444b      	add	r3, r9
 8011f0c:	106d      	asrs	r5, r5, #1
 8011f0e:	429d      	cmp	r5, r3
 8011f10:	bf38      	it	cc
 8011f12:	461d      	movcc	r5, r3
 8011f14:	0553      	lsls	r3, r2, #21
 8011f16:	d531      	bpl.n	8011f7c <__ssputs_r+0xa0>
 8011f18:	4629      	mov	r1, r5
 8011f1a:	f7ff ff1b 	bl	8011d54 <_malloc_r>
 8011f1e:	4606      	mov	r6, r0
 8011f20:	b950      	cbnz	r0, 8011f38 <__ssputs_r+0x5c>
 8011f22:	230c      	movs	r3, #12
 8011f24:	f8ca 3000 	str.w	r3, [sl]
 8011f28:	89a3      	ldrh	r3, [r4, #12]
 8011f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f2e:	81a3      	strh	r3, [r4, #12]
 8011f30:	f04f 30ff 	mov.w	r0, #4294967295
 8011f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f38:	6921      	ldr	r1, [r4, #16]
 8011f3a:	464a      	mov	r2, r9
 8011f3c:	f7ff fe88 	bl	8011c50 <memcpy>
 8011f40:	89a3      	ldrh	r3, [r4, #12]
 8011f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f4a:	81a3      	strh	r3, [r4, #12]
 8011f4c:	6126      	str	r6, [r4, #16]
 8011f4e:	6165      	str	r5, [r4, #20]
 8011f50:	444e      	add	r6, r9
 8011f52:	eba5 0509 	sub.w	r5, r5, r9
 8011f56:	6026      	str	r6, [r4, #0]
 8011f58:	60a5      	str	r5, [r4, #8]
 8011f5a:	463e      	mov	r6, r7
 8011f5c:	42be      	cmp	r6, r7
 8011f5e:	d900      	bls.n	8011f62 <__ssputs_r+0x86>
 8011f60:	463e      	mov	r6, r7
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	4632      	mov	r2, r6
 8011f66:	4641      	mov	r1, r8
 8011f68:	f000 faaa 	bl	80124c0 <memmove>
 8011f6c:	68a3      	ldr	r3, [r4, #8]
 8011f6e:	1b9b      	subs	r3, r3, r6
 8011f70:	60a3      	str	r3, [r4, #8]
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	4433      	add	r3, r6
 8011f76:	6023      	str	r3, [r4, #0]
 8011f78:	2000      	movs	r0, #0
 8011f7a:	e7db      	b.n	8011f34 <__ssputs_r+0x58>
 8011f7c:	462a      	mov	r2, r5
 8011f7e:	f000 fab9 	bl	80124f4 <_realloc_r>
 8011f82:	4606      	mov	r6, r0
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d1e1      	bne.n	8011f4c <__ssputs_r+0x70>
 8011f88:	6921      	ldr	r1, [r4, #16]
 8011f8a:	4650      	mov	r0, sl
 8011f8c:	f7ff fe76 	bl	8011c7c <_free_r>
 8011f90:	e7c7      	b.n	8011f22 <__ssputs_r+0x46>
	...

08011f94 <_svfiprintf_r>:
 8011f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f98:	4698      	mov	r8, r3
 8011f9a:	898b      	ldrh	r3, [r1, #12]
 8011f9c:	061b      	lsls	r3, r3, #24
 8011f9e:	b09d      	sub	sp, #116	; 0x74
 8011fa0:	4607      	mov	r7, r0
 8011fa2:	460d      	mov	r5, r1
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	d50e      	bpl.n	8011fc6 <_svfiprintf_r+0x32>
 8011fa8:	690b      	ldr	r3, [r1, #16]
 8011faa:	b963      	cbnz	r3, 8011fc6 <_svfiprintf_r+0x32>
 8011fac:	2140      	movs	r1, #64	; 0x40
 8011fae:	f7ff fed1 	bl	8011d54 <_malloc_r>
 8011fb2:	6028      	str	r0, [r5, #0]
 8011fb4:	6128      	str	r0, [r5, #16]
 8011fb6:	b920      	cbnz	r0, 8011fc2 <_svfiprintf_r+0x2e>
 8011fb8:	230c      	movs	r3, #12
 8011fba:	603b      	str	r3, [r7, #0]
 8011fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc0:	e0d1      	b.n	8012166 <_svfiprintf_r+0x1d2>
 8011fc2:	2340      	movs	r3, #64	; 0x40
 8011fc4:	616b      	str	r3, [r5, #20]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011fca:	2320      	movs	r3, #32
 8011fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fd4:	2330      	movs	r3, #48	; 0x30
 8011fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012180 <_svfiprintf_r+0x1ec>
 8011fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fde:	f04f 0901 	mov.w	r9, #1
 8011fe2:	4623      	mov	r3, r4
 8011fe4:	469a      	mov	sl, r3
 8011fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fea:	b10a      	cbz	r2, 8011ff0 <_svfiprintf_r+0x5c>
 8011fec:	2a25      	cmp	r2, #37	; 0x25
 8011fee:	d1f9      	bne.n	8011fe4 <_svfiprintf_r+0x50>
 8011ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ff4:	d00b      	beq.n	801200e <_svfiprintf_r+0x7a>
 8011ff6:	465b      	mov	r3, fp
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	4638      	mov	r0, r7
 8011ffe:	f7ff ff6d 	bl	8011edc <__ssputs_r>
 8012002:	3001      	adds	r0, #1
 8012004:	f000 80aa 	beq.w	801215c <_svfiprintf_r+0x1c8>
 8012008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801200a:	445a      	add	r2, fp
 801200c:	9209      	str	r2, [sp, #36]	; 0x24
 801200e:	f89a 3000 	ldrb.w	r3, [sl]
 8012012:	2b00      	cmp	r3, #0
 8012014:	f000 80a2 	beq.w	801215c <_svfiprintf_r+0x1c8>
 8012018:	2300      	movs	r3, #0
 801201a:	f04f 32ff 	mov.w	r2, #4294967295
 801201e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012022:	f10a 0a01 	add.w	sl, sl, #1
 8012026:	9304      	str	r3, [sp, #16]
 8012028:	9307      	str	r3, [sp, #28]
 801202a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801202e:	931a      	str	r3, [sp, #104]	; 0x68
 8012030:	4654      	mov	r4, sl
 8012032:	2205      	movs	r2, #5
 8012034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012038:	4851      	ldr	r0, [pc, #324]	; (8012180 <_svfiprintf_r+0x1ec>)
 801203a:	f7ee f8d9 	bl	80001f0 <memchr>
 801203e:	9a04      	ldr	r2, [sp, #16]
 8012040:	b9d8      	cbnz	r0, 801207a <_svfiprintf_r+0xe6>
 8012042:	06d0      	lsls	r0, r2, #27
 8012044:	bf44      	itt	mi
 8012046:	2320      	movmi	r3, #32
 8012048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801204c:	0711      	lsls	r1, r2, #28
 801204e:	bf44      	itt	mi
 8012050:	232b      	movmi	r3, #43	; 0x2b
 8012052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012056:	f89a 3000 	ldrb.w	r3, [sl]
 801205a:	2b2a      	cmp	r3, #42	; 0x2a
 801205c:	d015      	beq.n	801208a <_svfiprintf_r+0xf6>
 801205e:	9a07      	ldr	r2, [sp, #28]
 8012060:	4654      	mov	r4, sl
 8012062:	2000      	movs	r0, #0
 8012064:	f04f 0c0a 	mov.w	ip, #10
 8012068:	4621      	mov	r1, r4
 801206a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801206e:	3b30      	subs	r3, #48	; 0x30
 8012070:	2b09      	cmp	r3, #9
 8012072:	d94e      	bls.n	8012112 <_svfiprintf_r+0x17e>
 8012074:	b1b0      	cbz	r0, 80120a4 <_svfiprintf_r+0x110>
 8012076:	9207      	str	r2, [sp, #28]
 8012078:	e014      	b.n	80120a4 <_svfiprintf_r+0x110>
 801207a:	eba0 0308 	sub.w	r3, r0, r8
 801207e:	fa09 f303 	lsl.w	r3, r9, r3
 8012082:	4313      	orrs	r3, r2
 8012084:	9304      	str	r3, [sp, #16]
 8012086:	46a2      	mov	sl, r4
 8012088:	e7d2      	b.n	8012030 <_svfiprintf_r+0x9c>
 801208a:	9b03      	ldr	r3, [sp, #12]
 801208c:	1d19      	adds	r1, r3, #4
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	9103      	str	r1, [sp, #12]
 8012092:	2b00      	cmp	r3, #0
 8012094:	bfbb      	ittet	lt
 8012096:	425b      	neglt	r3, r3
 8012098:	f042 0202 	orrlt.w	r2, r2, #2
 801209c:	9307      	strge	r3, [sp, #28]
 801209e:	9307      	strlt	r3, [sp, #28]
 80120a0:	bfb8      	it	lt
 80120a2:	9204      	strlt	r2, [sp, #16]
 80120a4:	7823      	ldrb	r3, [r4, #0]
 80120a6:	2b2e      	cmp	r3, #46	; 0x2e
 80120a8:	d10c      	bne.n	80120c4 <_svfiprintf_r+0x130>
 80120aa:	7863      	ldrb	r3, [r4, #1]
 80120ac:	2b2a      	cmp	r3, #42	; 0x2a
 80120ae:	d135      	bne.n	801211c <_svfiprintf_r+0x188>
 80120b0:	9b03      	ldr	r3, [sp, #12]
 80120b2:	1d1a      	adds	r2, r3, #4
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	9203      	str	r2, [sp, #12]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	bfb8      	it	lt
 80120bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80120c0:	3402      	adds	r4, #2
 80120c2:	9305      	str	r3, [sp, #20]
 80120c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012190 <_svfiprintf_r+0x1fc>
 80120c8:	7821      	ldrb	r1, [r4, #0]
 80120ca:	2203      	movs	r2, #3
 80120cc:	4650      	mov	r0, sl
 80120ce:	f7ee f88f 	bl	80001f0 <memchr>
 80120d2:	b140      	cbz	r0, 80120e6 <_svfiprintf_r+0x152>
 80120d4:	2340      	movs	r3, #64	; 0x40
 80120d6:	eba0 000a 	sub.w	r0, r0, sl
 80120da:	fa03 f000 	lsl.w	r0, r3, r0
 80120de:	9b04      	ldr	r3, [sp, #16]
 80120e0:	4303      	orrs	r3, r0
 80120e2:	3401      	adds	r4, #1
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ea:	4826      	ldr	r0, [pc, #152]	; (8012184 <_svfiprintf_r+0x1f0>)
 80120ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120f0:	2206      	movs	r2, #6
 80120f2:	f7ee f87d 	bl	80001f0 <memchr>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d038      	beq.n	801216c <_svfiprintf_r+0x1d8>
 80120fa:	4b23      	ldr	r3, [pc, #140]	; (8012188 <_svfiprintf_r+0x1f4>)
 80120fc:	bb1b      	cbnz	r3, 8012146 <_svfiprintf_r+0x1b2>
 80120fe:	9b03      	ldr	r3, [sp, #12]
 8012100:	3307      	adds	r3, #7
 8012102:	f023 0307 	bic.w	r3, r3, #7
 8012106:	3308      	adds	r3, #8
 8012108:	9303      	str	r3, [sp, #12]
 801210a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801210c:	4433      	add	r3, r6
 801210e:	9309      	str	r3, [sp, #36]	; 0x24
 8012110:	e767      	b.n	8011fe2 <_svfiprintf_r+0x4e>
 8012112:	fb0c 3202 	mla	r2, ip, r2, r3
 8012116:	460c      	mov	r4, r1
 8012118:	2001      	movs	r0, #1
 801211a:	e7a5      	b.n	8012068 <_svfiprintf_r+0xd4>
 801211c:	2300      	movs	r3, #0
 801211e:	3401      	adds	r4, #1
 8012120:	9305      	str	r3, [sp, #20]
 8012122:	4619      	mov	r1, r3
 8012124:	f04f 0c0a 	mov.w	ip, #10
 8012128:	4620      	mov	r0, r4
 801212a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801212e:	3a30      	subs	r2, #48	; 0x30
 8012130:	2a09      	cmp	r2, #9
 8012132:	d903      	bls.n	801213c <_svfiprintf_r+0x1a8>
 8012134:	2b00      	cmp	r3, #0
 8012136:	d0c5      	beq.n	80120c4 <_svfiprintf_r+0x130>
 8012138:	9105      	str	r1, [sp, #20]
 801213a:	e7c3      	b.n	80120c4 <_svfiprintf_r+0x130>
 801213c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012140:	4604      	mov	r4, r0
 8012142:	2301      	movs	r3, #1
 8012144:	e7f0      	b.n	8012128 <_svfiprintf_r+0x194>
 8012146:	ab03      	add	r3, sp, #12
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	462a      	mov	r2, r5
 801214c:	4b0f      	ldr	r3, [pc, #60]	; (801218c <_svfiprintf_r+0x1f8>)
 801214e:	a904      	add	r1, sp, #16
 8012150:	4638      	mov	r0, r7
 8012152:	f3af 8000 	nop.w
 8012156:	1c42      	adds	r2, r0, #1
 8012158:	4606      	mov	r6, r0
 801215a:	d1d6      	bne.n	801210a <_svfiprintf_r+0x176>
 801215c:	89ab      	ldrh	r3, [r5, #12]
 801215e:	065b      	lsls	r3, r3, #25
 8012160:	f53f af2c 	bmi.w	8011fbc <_svfiprintf_r+0x28>
 8012164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012166:	b01d      	add	sp, #116	; 0x74
 8012168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	ab03      	add	r3, sp, #12
 801216e:	9300      	str	r3, [sp, #0]
 8012170:	462a      	mov	r2, r5
 8012172:	4b06      	ldr	r3, [pc, #24]	; (801218c <_svfiprintf_r+0x1f8>)
 8012174:	a904      	add	r1, sp, #16
 8012176:	4638      	mov	r0, r7
 8012178:	f000 f87a 	bl	8012270 <_printf_i>
 801217c:	e7eb      	b.n	8012156 <_svfiprintf_r+0x1c2>
 801217e:	bf00      	nop
 8012180:	08012bda 	.word	0x08012bda
 8012184:	08012be4 	.word	0x08012be4
 8012188:	00000000 	.word	0x00000000
 801218c:	08011edd 	.word	0x08011edd
 8012190:	08012be0 	.word	0x08012be0

08012194 <_printf_common>:
 8012194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012198:	4616      	mov	r6, r2
 801219a:	4699      	mov	r9, r3
 801219c:	688a      	ldr	r2, [r1, #8]
 801219e:	690b      	ldr	r3, [r1, #16]
 80121a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121a4:	4293      	cmp	r3, r2
 80121a6:	bfb8      	it	lt
 80121a8:	4613      	movlt	r3, r2
 80121aa:	6033      	str	r3, [r6, #0]
 80121ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80121b0:	4607      	mov	r7, r0
 80121b2:	460c      	mov	r4, r1
 80121b4:	b10a      	cbz	r2, 80121ba <_printf_common+0x26>
 80121b6:	3301      	adds	r3, #1
 80121b8:	6033      	str	r3, [r6, #0]
 80121ba:	6823      	ldr	r3, [r4, #0]
 80121bc:	0699      	lsls	r1, r3, #26
 80121be:	bf42      	ittt	mi
 80121c0:	6833      	ldrmi	r3, [r6, #0]
 80121c2:	3302      	addmi	r3, #2
 80121c4:	6033      	strmi	r3, [r6, #0]
 80121c6:	6825      	ldr	r5, [r4, #0]
 80121c8:	f015 0506 	ands.w	r5, r5, #6
 80121cc:	d106      	bne.n	80121dc <_printf_common+0x48>
 80121ce:	f104 0a19 	add.w	sl, r4, #25
 80121d2:	68e3      	ldr	r3, [r4, #12]
 80121d4:	6832      	ldr	r2, [r6, #0]
 80121d6:	1a9b      	subs	r3, r3, r2
 80121d8:	42ab      	cmp	r3, r5
 80121da:	dc26      	bgt.n	801222a <_printf_common+0x96>
 80121dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121e0:	1e13      	subs	r3, r2, #0
 80121e2:	6822      	ldr	r2, [r4, #0]
 80121e4:	bf18      	it	ne
 80121e6:	2301      	movne	r3, #1
 80121e8:	0692      	lsls	r2, r2, #26
 80121ea:	d42b      	bmi.n	8012244 <_printf_common+0xb0>
 80121ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121f0:	4649      	mov	r1, r9
 80121f2:	4638      	mov	r0, r7
 80121f4:	47c0      	blx	r8
 80121f6:	3001      	adds	r0, #1
 80121f8:	d01e      	beq.n	8012238 <_printf_common+0xa4>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	68e5      	ldr	r5, [r4, #12]
 80121fe:	6832      	ldr	r2, [r6, #0]
 8012200:	f003 0306 	and.w	r3, r3, #6
 8012204:	2b04      	cmp	r3, #4
 8012206:	bf08      	it	eq
 8012208:	1aad      	subeq	r5, r5, r2
 801220a:	68a3      	ldr	r3, [r4, #8]
 801220c:	6922      	ldr	r2, [r4, #16]
 801220e:	bf0c      	ite	eq
 8012210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012214:	2500      	movne	r5, #0
 8012216:	4293      	cmp	r3, r2
 8012218:	bfc4      	itt	gt
 801221a:	1a9b      	subgt	r3, r3, r2
 801221c:	18ed      	addgt	r5, r5, r3
 801221e:	2600      	movs	r6, #0
 8012220:	341a      	adds	r4, #26
 8012222:	42b5      	cmp	r5, r6
 8012224:	d11a      	bne.n	801225c <_printf_common+0xc8>
 8012226:	2000      	movs	r0, #0
 8012228:	e008      	b.n	801223c <_printf_common+0xa8>
 801222a:	2301      	movs	r3, #1
 801222c:	4652      	mov	r2, sl
 801222e:	4649      	mov	r1, r9
 8012230:	4638      	mov	r0, r7
 8012232:	47c0      	blx	r8
 8012234:	3001      	adds	r0, #1
 8012236:	d103      	bne.n	8012240 <_printf_common+0xac>
 8012238:	f04f 30ff 	mov.w	r0, #4294967295
 801223c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012240:	3501      	adds	r5, #1
 8012242:	e7c6      	b.n	80121d2 <_printf_common+0x3e>
 8012244:	18e1      	adds	r1, r4, r3
 8012246:	1c5a      	adds	r2, r3, #1
 8012248:	2030      	movs	r0, #48	; 0x30
 801224a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801224e:	4422      	add	r2, r4
 8012250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012258:	3302      	adds	r3, #2
 801225a:	e7c7      	b.n	80121ec <_printf_common+0x58>
 801225c:	2301      	movs	r3, #1
 801225e:	4622      	mov	r2, r4
 8012260:	4649      	mov	r1, r9
 8012262:	4638      	mov	r0, r7
 8012264:	47c0      	blx	r8
 8012266:	3001      	adds	r0, #1
 8012268:	d0e6      	beq.n	8012238 <_printf_common+0xa4>
 801226a:	3601      	adds	r6, #1
 801226c:	e7d9      	b.n	8012222 <_printf_common+0x8e>
	...

08012270 <_printf_i>:
 8012270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012274:	7e0f      	ldrb	r7, [r1, #24]
 8012276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012278:	2f78      	cmp	r7, #120	; 0x78
 801227a:	4691      	mov	r9, r2
 801227c:	4680      	mov	r8, r0
 801227e:	460c      	mov	r4, r1
 8012280:	469a      	mov	sl, r3
 8012282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012286:	d807      	bhi.n	8012298 <_printf_i+0x28>
 8012288:	2f62      	cmp	r7, #98	; 0x62
 801228a:	d80a      	bhi.n	80122a2 <_printf_i+0x32>
 801228c:	2f00      	cmp	r7, #0
 801228e:	f000 80d8 	beq.w	8012442 <_printf_i+0x1d2>
 8012292:	2f58      	cmp	r7, #88	; 0x58
 8012294:	f000 80a3 	beq.w	80123de <_printf_i+0x16e>
 8012298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801229c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80122a0:	e03a      	b.n	8012318 <_printf_i+0xa8>
 80122a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80122a6:	2b15      	cmp	r3, #21
 80122a8:	d8f6      	bhi.n	8012298 <_printf_i+0x28>
 80122aa:	a101      	add	r1, pc, #4	; (adr r1, 80122b0 <_printf_i+0x40>)
 80122ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122b0:	08012309 	.word	0x08012309
 80122b4:	0801231d 	.word	0x0801231d
 80122b8:	08012299 	.word	0x08012299
 80122bc:	08012299 	.word	0x08012299
 80122c0:	08012299 	.word	0x08012299
 80122c4:	08012299 	.word	0x08012299
 80122c8:	0801231d 	.word	0x0801231d
 80122cc:	08012299 	.word	0x08012299
 80122d0:	08012299 	.word	0x08012299
 80122d4:	08012299 	.word	0x08012299
 80122d8:	08012299 	.word	0x08012299
 80122dc:	08012429 	.word	0x08012429
 80122e0:	0801234d 	.word	0x0801234d
 80122e4:	0801240b 	.word	0x0801240b
 80122e8:	08012299 	.word	0x08012299
 80122ec:	08012299 	.word	0x08012299
 80122f0:	0801244b 	.word	0x0801244b
 80122f4:	08012299 	.word	0x08012299
 80122f8:	0801234d 	.word	0x0801234d
 80122fc:	08012299 	.word	0x08012299
 8012300:	08012299 	.word	0x08012299
 8012304:	08012413 	.word	0x08012413
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	1d1a      	adds	r2, r3, #4
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	602a      	str	r2, [r5, #0]
 8012310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012318:	2301      	movs	r3, #1
 801231a:	e0a3      	b.n	8012464 <_printf_i+0x1f4>
 801231c:	6820      	ldr	r0, [r4, #0]
 801231e:	6829      	ldr	r1, [r5, #0]
 8012320:	0606      	lsls	r6, r0, #24
 8012322:	f101 0304 	add.w	r3, r1, #4
 8012326:	d50a      	bpl.n	801233e <_printf_i+0xce>
 8012328:	680e      	ldr	r6, [r1, #0]
 801232a:	602b      	str	r3, [r5, #0]
 801232c:	2e00      	cmp	r6, #0
 801232e:	da03      	bge.n	8012338 <_printf_i+0xc8>
 8012330:	232d      	movs	r3, #45	; 0x2d
 8012332:	4276      	negs	r6, r6
 8012334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012338:	485e      	ldr	r0, [pc, #376]	; (80124b4 <_printf_i+0x244>)
 801233a:	230a      	movs	r3, #10
 801233c:	e019      	b.n	8012372 <_printf_i+0x102>
 801233e:	680e      	ldr	r6, [r1, #0]
 8012340:	602b      	str	r3, [r5, #0]
 8012342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012346:	bf18      	it	ne
 8012348:	b236      	sxthne	r6, r6
 801234a:	e7ef      	b.n	801232c <_printf_i+0xbc>
 801234c:	682b      	ldr	r3, [r5, #0]
 801234e:	6820      	ldr	r0, [r4, #0]
 8012350:	1d19      	adds	r1, r3, #4
 8012352:	6029      	str	r1, [r5, #0]
 8012354:	0601      	lsls	r1, r0, #24
 8012356:	d501      	bpl.n	801235c <_printf_i+0xec>
 8012358:	681e      	ldr	r6, [r3, #0]
 801235a:	e002      	b.n	8012362 <_printf_i+0xf2>
 801235c:	0646      	lsls	r6, r0, #25
 801235e:	d5fb      	bpl.n	8012358 <_printf_i+0xe8>
 8012360:	881e      	ldrh	r6, [r3, #0]
 8012362:	4854      	ldr	r0, [pc, #336]	; (80124b4 <_printf_i+0x244>)
 8012364:	2f6f      	cmp	r7, #111	; 0x6f
 8012366:	bf0c      	ite	eq
 8012368:	2308      	moveq	r3, #8
 801236a:	230a      	movne	r3, #10
 801236c:	2100      	movs	r1, #0
 801236e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012372:	6865      	ldr	r5, [r4, #4]
 8012374:	60a5      	str	r5, [r4, #8]
 8012376:	2d00      	cmp	r5, #0
 8012378:	bfa2      	ittt	ge
 801237a:	6821      	ldrge	r1, [r4, #0]
 801237c:	f021 0104 	bicge.w	r1, r1, #4
 8012380:	6021      	strge	r1, [r4, #0]
 8012382:	b90e      	cbnz	r6, 8012388 <_printf_i+0x118>
 8012384:	2d00      	cmp	r5, #0
 8012386:	d04d      	beq.n	8012424 <_printf_i+0x1b4>
 8012388:	4615      	mov	r5, r2
 801238a:	fbb6 f1f3 	udiv	r1, r6, r3
 801238e:	fb03 6711 	mls	r7, r3, r1, r6
 8012392:	5dc7      	ldrb	r7, [r0, r7]
 8012394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012398:	4637      	mov	r7, r6
 801239a:	42bb      	cmp	r3, r7
 801239c:	460e      	mov	r6, r1
 801239e:	d9f4      	bls.n	801238a <_printf_i+0x11a>
 80123a0:	2b08      	cmp	r3, #8
 80123a2:	d10b      	bne.n	80123bc <_printf_i+0x14c>
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	07de      	lsls	r6, r3, #31
 80123a8:	d508      	bpl.n	80123bc <_printf_i+0x14c>
 80123aa:	6923      	ldr	r3, [r4, #16]
 80123ac:	6861      	ldr	r1, [r4, #4]
 80123ae:	4299      	cmp	r1, r3
 80123b0:	bfde      	ittt	le
 80123b2:	2330      	movle	r3, #48	; 0x30
 80123b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80123bc:	1b52      	subs	r2, r2, r5
 80123be:	6122      	str	r2, [r4, #16]
 80123c0:	f8cd a000 	str.w	sl, [sp]
 80123c4:	464b      	mov	r3, r9
 80123c6:	aa03      	add	r2, sp, #12
 80123c8:	4621      	mov	r1, r4
 80123ca:	4640      	mov	r0, r8
 80123cc:	f7ff fee2 	bl	8012194 <_printf_common>
 80123d0:	3001      	adds	r0, #1
 80123d2:	d14c      	bne.n	801246e <_printf_i+0x1fe>
 80123d4:	f04f 30ff 	mov.w	r0, #4294967295
 80123d8:	b004      	add	sp, #16
 80123da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123de:	4835      	ldr	r0, [pc, #212]	; (80124b4 <_printf_i+0x244>)
 80123e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80123e4:	6829      	ldr	r1, [r5, #0]
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80123ec:	6029      	str	r1, [r5, #0]
 80123ee:	061d      	lsls	r5, r3, #24
 80123f0:	d514      	bpl.n	801241c <_printf_i+0x1ac>
 80123f2:	07df      	lsls	r7, r3, #31
 80123f4:	bf44      	itt	mi
 80123f6:	f043 0320 	orrmi.w	r3, r3, #32
 80123fa:	6023      	strmi	r3, [r4, #0]
 80123fc:	b91e      	cbnz	r6, 8012406 <_printf_i+0x196>
 80123fe:	6823      	ldr	r3, [r4, #0]
 8012400:	f023 0320 	bic.w	r3, r3, #32
 8012404:	6023      	str	r3, [r4, #0]
 8012406:	2310      	movs	r3, #16
 8012408:	e7b0      	b.n	801236c <_printf_i+0xfc>
 801240a:	6823      	ldr	r3, [r4, #0]
 801240c:	f043 0320 	orr.w	r3, r3, #32
 8012410:	6023      	str	r3, [r4, #0]
 8012412:	2378      	movs	r3, #120	; 0x78
 8012414:	4828      	ldr	r0, [pc, #160]	; (80124b8 <_printf_i+0x248>)
 8012416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801241a:	e7e3      	b.n	80123e4 <_printf_i+0x174>
 801241c:	0659      	lsls	r1, r3, #25
 801241e:	bf48      	it	mi
 8012420:	b2b6      	uxthmi	r6, r6
 8012422:	e7e6      	b.n	80123f2 <_printf_i+0x182>
 8012424:	4615      	mov	r5, r2
 8012426:	e7bb      	b.n	80123a0 <_printf_i+0x130>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	6826      	ldr	r6, [r4, #0]
 801242c:	6961      	ldr	r1, [r4, #20]
 801242e:	1d18      	adds	r0, r3, #4
 8012430:	6028      	str	r0, [r5, #0]
 8012432:	0635      	lsls	r5, r6, #24
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	d501      	bpl.n	801243c <_printf_i+0x1cc>
 8012438:	6019      	str	r1, [r3, #0]
 801243a:	e002      	b.n	8012442 <_printf_i+0x1d2>
 801243c:	0670      	lsls	r0, r6, #25
 801243e:	d5fb      	bpl.n	8012438 <_printf_i+0x1c8>
 8012440:	8019      	strh	r1, [r3, #0]
 8012442:	2300      	movs	r3, #0
 8012444:	6123      	str	r3, [r4, #16]
 8012446:	4615      	mov	r5, r2
 8012448:	e7ba      	b.n	80123c0 <_printf_i+0x150>
 801244a:	682b      	ldr	r3, [r5, #0]
 801244c:	1d1a      	adds	r2, r3, #4
 801244e:	602a      	str	r2, [r5, #0]
 8012450:	681d      	ldr	r5, [r3, #0]
 8012452:	6862      	ldr	r2, [r4, #4]
 8012454:	2100      	movs	r1, #0
 8012456:	4628      	mov	r0, r5
 8012458:	f7ed feca 	bl	80001f0 <memchr>
 801245c:	b108      	cbz	r0, 8012462 <_printf_i+0x1f2>
 801245e:	1b40      	subs	r0, r0, r5
 8012460:	6060      	str	r0, [r4, #4]
 8012462:	6863      	ldr	r3, [r4, #4]
 8012464:	6123      	str	r3, [r4, #16]
 8012466:	2300      	movs	r3, #0
 8012468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801246c:	e7a8      	b.n	80123c0 <_printf_i+0x150>
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	462a      	mov	r2, r5
 8012472:	4649      	mov	r1, r9
 8012474:	4640      	mov	r0, r8
 8012476:	47d0      	blx	sl
 8012478:	3001      	adds	r0, #1
 801247a:	d0ab      	beq.n	80123d4 <_printf_i+0x164>
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	079b      	lsls	r3, r3, #30
 8012480:	d413      	bmi.n	80124aa <_printf_i+0x23a>
 8012482:	68e0      	ldr	r0, [r4, #12]
 8012484:	9b03      	ldr	r3, [sp, #12]
 8012486:	4298      	cmp	r0, r3
 8012488:	bfb8      	it	lt
 801248a:	4618      	movlt	r0, r3
 801248c:	e7a4      	b.n	80123d8 <_printf_i+0x168>
 801248e:	2301      	movs	r3, #1
 8012490:	4632      	mov	r2, r6
 8012492:	4649      	mov	r1, r9
 8012494:	4640      	mov	r0, r8
 8012496:	47d0      	blx	sl
 8012498:	3001      	adds	r0, #1
 801249a:	d09b      	beq.n	80123d4 <_printf_i+0x164>
 801249c:	3501      	adds	r5, #1
 801249e:	68e3      	ldr	r3, [r4, #12]
 80124a0:	9903      	ldr	r1, [sp, #12]
 80124a2:	1a5b      	subs	r3, r3, r1
 80124a4:	42ab      	cmp	r3, r5
 80124a6:	dcf2      	bgt.n	801248e <_printf_i+0x21e>
 80124a8:	e7eb      	b.n	8012482 <_printf_i+0x212>
 80124aa:	2500      	movs	r5, #0
 80124ac:	f104 0619 	add.w	r6, r4, #25
 80124b0:	e7f5      	b.n	801249e <_printf_i+0x22e>
 80124b2:	bf00      	nop
 80124b4:	08012beb 	.word	0x08012beb
 80124b8:	08012bfc 	.word	0x08012bfc

080124bc <__retarget_lock_acquire_recursive>:
 80124bc:	4770      	bx	lr

080124be <__retarget_lock_release_recursive>:
 80124be:	4770      	bx	lr

080124c0 <memmove>:
 80124c0:	4288      	cmp	r0, r1
 80124c2:	b510      	push	{r4, lr}
 80124c4:	eb01 0402 	add.w	r4, r1, r2
 80124c8:	d902      	bls.n	80124d0 <memmove+0x10>
 80124ca:	4284      	cmp	r4, r0
 80124cc:	4623      	mov	r3, r4
 80124ce:	d807      	bhi.n	80124e0 <memmove+0x20>
 80124d0:	1e43      	subs	r3, r0, #1
 80124d2:	42a1      	cmp	r1, r4
 80124d4:	d008      	beq.n	80124e8 <memmove+0x28>
 80124d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124de:	e7f8      	b.n	80124d2 <memmove+0x12>
 80124e0:	4402      	add	r2, r0
 80124e2:	4601      	mov	r1, r0
 80124e4:	428a      	cmp	r2, r1
 80124e6:	d100      	bne.n	80124ea <memmove+0x2a>
 80124e8:	bd10      	pop	{r4, pc}
 80124ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124f2:	e7f7      	b.n	80124e4 <memmove+0x24>

080124f4 <_realloc_r>:
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	4680      	mov	r8, r0
 80124fa:	4614      	mov	r4, r2
 80124fc:	460e      	mov	r6, r1
 80124fe:	b921      	cbnz	r1, 801250a <_realloc_r+0x16>
 8012500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012504:	4611      	mov	r1, r2
 8012506:	f7ff bc25 	b.w	8011d54 <_malloc_r>
 801250a:	b92a      	cbnz	r2, 8012518 <_realloc_r+0x24>
 801250c:	f7ff fbb6 	bl	8011c7c <_free_r>
 8012510:	4625      	mov	r5, r4
 8012512:	4628      	mov	r0, r5
 8012514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012518:	f000 f81b 	bl	8012552 <_malloc_usable_size_r>
 801251c:	4284      	cmp	r4, r0
 801251e:	4607      	mov	r7, r0
 8012520:	d802      	bhi.n	8012528 <_realloc_r+0x34>
 8012522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012526:	d812      	bhi.n	801254e <_realloc_r+0x5a>
 8012528:	4621      	mov	r1, r4
 801252a:	4640      	mov	r0, r8
 801252c:	f7ff fc12 	bl	8011d54 <_malloc_r>
 8012530:	4605      	mov	r5, r0
 8012532:	2800      	cmp	r0, #0
 8012534:	d0ed      	beq.n	8012512 <_realloc_r+0x1e>
 8012536:	42bc      	cmp	r4, r7
 8012538:	4622      	mov	r2, r4
 801253a:	4631      	mov	r1, r6
 801253c:	bf28      	it	cs
 801253e:	463a      	movcs	r2, r7
 8012540:	f7ff fb86 	bl	8011c50 <memcpy>
 8012544:	4631      	mov	r1, r6
 8012546:	4640      	mov	r0, r8
 8012548:	f7ff fb98 	bl	8011c7c <_free_r>
 801254c:	e7e1      	b.n	8012512 <_realloc_r+0x1e>
 801254e:	4635      	mov	r5, r6
 8012550:	e7df      	b.n	8012512 <_realloc_r+0x1e>

08012552 <_malloc_usable_size_r>:
 8012552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012556:	1f18      	subs	r0, r3, #4
 8012558:	2b00      	cmp	r3, #0
 801255a:	bfbc      	itt	lt
 801255c:	580b      	ldrlt	r3, [r1, r0]
 801255e:	18c0      	addlt	r0, r0, r3
 8012560:	4770      	bx	lr
	...

08012564 <_init>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	bf00      	nop
 8012568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801256a:	bc08      	pop	{r3}
 801256c:	469e      	mov	lr, r3
 801256e:	4770      	bx	lr

08012570 <_fini>:
 8012570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012572:	bf00      	nop
 8012574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012576:	bc08      	pop	{r3}
 8012578:	469e      	mov	lr, r3
 801257a:	4770      	bx	lr
