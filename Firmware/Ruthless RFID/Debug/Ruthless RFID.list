
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e72c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e8cc  0800e8cc  0001e8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efac  0800efac  0002063c  2**0
                  CONTENTS
  4 .ARM          00000008  0800efac  0800efac  0001efac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efb4  0800efb4  0002063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efb4  0800efb4  0001efb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efb8  0800efb8  0001efb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000063c  20000000  0800efbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000063c  0800f5f8  0002063c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006be4  0800f5f8  00026be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bab  00000000  00000000  0002066c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526b  00000000  00000000  00046217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  0004b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  0004d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3d4  00000000  00000000  0004f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ac7  00000000  00000000  0006b544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e566  00000000  00000000  0009000b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008964  00000000  00000000  0012e5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000063c 	.word	0x2000063c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8b4 	.word	0x0800e8b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000640 	.word	0x20000640
 80001dc:	0800e8b4 	.word	0x0800e8b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fb5c 	bl	8002c7c <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000065c 	.word	0x2000065c

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fc37 	bl	8002e70 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000065c 	.word	0x2000065c

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fb19 	bl	8002c7c <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 ff11 	bl	800247c <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000065c 	.word	0x2000065c

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fbe5 	bl	8002e70 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fee3 	bl	800247c <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000065c 	.word	0x2000065c

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f001 fe73 	bl	800247c <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR);
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH,&result[1]);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 f8ed 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 f8e8 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fe43 	bl	800247c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 f8e0 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f001 fe3b 	bl	800247c <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	//SET_ANTGAIN();
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	//MFRC_REGW(TModeReg,0x80); //timer starts automatically after every transmission
	//MFRC_REGW(TPrescalerRegLO,0xA9); //Set prescaler to 169 => f_timer=40kHz, use this for timeouts
	//MFRC_REGW(TReloadHI,0x03); //Set reload counter to 4000 => 100ms timeout
	//MFRC_REGW(TReloadLO,0xE8);
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);


	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fde5 	bl	800247c <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d face 	bl	800df90 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d fa7b 	bl	800df90 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fcc1 	bl	800247c <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 fcb6 	bl	800247c <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 fcaf 	bl	800247c <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 fca6 	bl	800247c <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00d f9b2 	bl	800df90 <memcpy>
	CDC_Transmit_FS(send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00c fd25 	bl	800d688 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fc1c 	bl	800247c <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b090      	sub	sp, #64	; 0x40
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fbfe 	bl	800247c <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0018 	add.w	r0, r7, #24
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d fa58 	bl	800e19c <siprintf>
						Print(mess);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fba0 	bl	800247c <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fb9b 	bl	800247c <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d f9f5 	bl	800e19c <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000658 	.word	0x20000658
 8000dec:	0800e99c 	.word	0x0800e99c
 8000df0:	0800e9b4 	.word	0x0800e9b4
 8000df4:	0800e9c0 	.word	0x0800e9c0
 8000df8:	0800e9cc 	.word	0x0800e9cc
 8000dfc:	0800e9d8 	.word	0x0800e9d8

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d f8cb 	bl	800dfac <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 fdc0 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 fdbb 	bl	80029c0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 fd46 	bl	80058e6 <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 fdab 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fb06 	bl	800247c <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 fda1 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fafc 	bl	800247c <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006b0 	.word	0x200006b0

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 fd87 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 fd82 	bl	80029c0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 fd0d 	bl	80058e6 <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 fd72 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 fd6d 	bl	80029c0 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 fd66 	bl	80029c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 fd61 	bl	80029c0 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006b0 	.word	0x200006b0

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SCREEN_INIT>:
 * @param data: Array of strings that form the basis of the screen
 *
 * @param seldata: Array of data on where to place select arrow "->"
 * */

void SCREEN_INIT(Screen* screen,int datasize,int selsize,char** data,uint8_t (*dataloc)[2],uint8_t (*seldata)[2]){
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]

    screen->datsize=datasize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
    screen->selsize=selsize;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    screen->data=(char**)malloc((screen->datsize)*sizeof(char*));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00c fff0 	bl	800df80 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]
    screen->dataloc=(uint8_t (*)[2])malloc(screen->datsize*sizeof(uint8_t*));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00c ffe6 	bl	800df80 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	60da      	str	r2, [r3, #12]
    screen->seldata=(uint8_t (*)[2])malloc(screen->selsize*sizeof(uint8_t*));
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00c ffdc 	bl	800df80 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	611a      	str	r2, [r3, #16]

    for(int j=0;j<screen->datsize;j++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e024      	b.n	8001020 <SCREEN_INIT+0xa6>
        screen->data[j]=malloc((strlen(data[j])+1)*sizeof(char));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8fd 	bl	80001e0 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18d4      	adds	r4, r2, r3
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	f00c ffc3 	bl	800df80 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6023      	str	r3, [r4, #0]
        strcpy(screen->data[j],data[j]);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f00d f8e1 	bl	800e1dc <strcpy>
    for(int j=0;j<screen->datsize;j++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbd5      	blt.n	8000fd6 <SCREEN_INIT+0x5c>
    }

    memcpy(screen->dataloc,dataloc,datasize*2);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68d8      	ldr	r0, [r3, #12]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	461a      	mov	r2, r3
 8001034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001036:	f00c ffab 	bl	800df90 <memcpy>
    memcpy(screen->seldata,seldata,selsize*2);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6918      	ldr	r0, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	461a      	mov	r2, r3
 8001044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001046:	f00c ffa3 	bl	800df90 <memcpy>

}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <OLED_INIT+0xc8>)
 8001060:	f001 fcae 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <OLED_INIT+0xc8>)
 800106a:	f001 fca9 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <OLED_INIT+0xcc>)
 8001074:	f001 fca4 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f001 f9ff 	bl	800247c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4826      	ldr	r0, [pc, #152]	; (800111c <OLED_INIT+0xc8>)
 8001084:	f001 fc9c 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f001 f9f7 	bl	800247c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <OLED_INIT+0xc8>)
 8001094:	f001 fc94 	bl	80029c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001098:	2064      	movs	r0, #100	; 0x64
 800109a:	f001 f9ef 	bl	800247c <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <OLED_INIT+0xd0>)
 80010a0:	463c      	mov	r4, r7
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	c403      	stmia	r4!, {r0, r1}
 80010ae:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	e00c      	b.n	80010d0 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80010b6:	463a      	mov	r2, r7
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff feb2 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f001 f9d9 	bl	800247c <HAL_Delay>
	for(int i=0;i<25;i++){
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	ddef      	ble.n	80010b6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80010d6:	20a7      	movs	r0, #167	; 0xa7
 80010d8:	f7ff fea6 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <OLED_INIT+0xd4>)
 80010de:	f7ff ff19 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80010e2:	20af      	movs	r0, #175	; 0xaf
 80010e4:	f7ff fea0 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f001 f9c6 	bl	800247c <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80010f0:	20ae      	movs	r0, #174	; 0xae
 80010f2:	f7ff fe99 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 f9c0 	bl	800247c <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80010fc:	20a6      	movs	r0, #166	; 0xa6
 80010fe:	f7ff fe93 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f001 f9ba 	bl	800247c <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001108:	20af      	movs	r0, #175	; 0xaf
 800110a:	f7ff fe8d 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 800110e:	f7ff fe77 	bl	8000e00 <OLED_Clear>


}
 8001112:	bf00      	nop
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	0800eabc 	.word	0x0800eabc
 8001128:	20000000 	.word	0x20000000

0800112c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001138:	2005      	movs	r0, #5
 800113a:	f00c ff21 	bl	800df80 <malloc>
 800113e:	4603      	mov	r3, r0
 8001140:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e013      	b.n	8001170 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f1a3 0220 	sub.w	r2, r3, #32
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <OLED_InvChar+0x5c>)
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	18ca      	adds	r2, r1, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	440b      	add	r3, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b05      	cmp	r3, #5
 8001174:	dde8      	ble.n	8001148 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8001176:	2205      	movs	r2, #5
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f00c ff08 	bl	800df90 <memcpy>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800ec7c 	.word	0x0800ec7c

0800118c <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b50      	subs	r3, #80	; 0x50
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe39 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe32 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe29 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 80011d6:	2006      	movs	r0, #6
 80011d8:	f00c fed2 	bl	800df80 <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f1a3 0220 	sub.w	r2, r3, #32
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <OLED_drawChar+0x98>)
 80011f4:	4413      	add	r3, r2
 80011f6:	2205      	movs	r2, #5
 80011f8:	4619      	mov	r1, r3
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f00c fec8 	bl	800df90 <memcpy>
 8001200:	e004      	b.n	800120c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff90 	bl	800112c <OLED_InvChar>
	}

	*(data+5)=0x00;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3305      	adds	r3, #5
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001214:	2106      	movs	r1, #6
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe40 	bl	8000e9c <OLED_data>

	}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	0800ec7c 	.word	0x0800ec7c

08001228 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	603a      	str	r2, [r7, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e014      	b.n	800126e <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	4413      	add	r3, r2
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	79f8      	ldrb	r0, [r7, #7]
 8001264:	f7ff ff92 	bl	800118c <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7fe ffb6 	bl	80001e0 <strlen>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8e3      	bhi.n	8001244 <OLED_Printlin+0x1c>


	}
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4613      	mov	r3, r2
 8001294:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f7fe ffa2 	bl	80001e0 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	0fda      	lsrs	r2, r3, #31
 80012a4:	4413      	add	r3, r2
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	425b      	negs	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	3340      	adds	r3, #64	; 0x40
 80012b6:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	79f8      	ldrb	r0, [r7, #7]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	f7ff ffb1 	bl	8001228 <OLED_Printlin>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b094      	sub	sp, #80	; 0x50
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80012d6:	2320      	movs	r3, #32
 80012d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
 80012f0:	e018      	b.n	8001324 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80012f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f6:	4413      	add	r3, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b20      	cmp	r3, #32
 8001302:	d10b      	bne.n	800131c <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001306:	b2d9      	uxtb	r1, r3
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130e:	4413      	add	r3, r2
 8001310:	460a      	mov	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]
	                i++;
 8001314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001316:	3301      	adds	r3, #1
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800131a:	e000      	b.n	800131e <OLED_Print+0x50>
	            }
	            else{
	                continue;
 800131c:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800131e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001320:	3301      	adds	r3, #1
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
 8001324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001326:	2b15      	cmp	r3, #21
 8001328:	dde3      	ble.n	80012f2 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b20      	cmp	r3, #32
 8001334:	d102      	bne.n	800133c <OLED_Print+0x6e>
	            last_ind++;
 8001336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001338:	3301      	adds	r3, #1
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 800133c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff4c 	bl	80001e0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	2b15      	cmp	r3, #21
 800134c:	d828      	bhi.n	80013a0 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800134e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800135e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4618      	mov	r0, r3
 800136c:	f00c ff3e 	bl	800e1ec <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	f107 0220 	add.w	r2, r7, #32
 8001376:	18d0      	adds	r0, r2, r3
 8001378:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137e:	f1c3 0315 	rsb	r3, r3, #21
 8001382:	461a      	mov	r2, r3
 8001384:	f00c fe12 	bl	800dfac <memset>
	            thisline[21]=' ';
 8001388:	2320      	movs	r3, #32
 800138a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	b2d8      	uxtb	r0, r3
 8001392:	f107 0220 	add.w	r2, r7, #32
 8001396:	2300      	movs	r3, #0
 8001398:	2102      	movs	r1, #2
 800139a:	f7ff ff45 	bl	8001228 <OLED_Printlin>




	    }
}
 800139e:	e05e      	b.n	800145e <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80013a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a2:	3314      	adds	r3, #20
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d03a      	beq.n	8001424 <OLED_Print+0x156>
 80013ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b0:	3315      	adds	r3, #21
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d033      	beq.n	8001424 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80013bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	18d1      	adds	r1, r2, r3
 80013c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c4:	3b01      	subs	r3, #1
 80013c6:	3350      	adds	r3, #80	; 0x50
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00c ff09 	bl	800e1ec <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80013da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013dc:	3b01      	subs	r3, #1
 80013de:	3350      	adds	r3, #80	; 0x50
 80013e0:	443b      	add	r3, r7
 80013e2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	1898      	adds	r0, r3, r2
 80013ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80013f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f4:	3b01      	subs	r3, #1
 80013f6:	3350      	adds	r3, #80	; 0x50
 80013f8:	443b      	add	r3, r7
 80013fa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013fe:	f1c3 0315 	rsb	r3, r3, #21
 8001402:	461a      	mov	r2, r3
 8001404:	f00c fdd2 	bl	800dfac <memset>
	            thisline[21]=' ';
 8001408:	2320      	movs	r3, #32
 800140a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800140e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001410:	3b01      	subs	r3, #1
 8001412:	3350      	adds	r3, #80	; 0x50
 8001414:	443b      	add	r3, r7
 8001416:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800141a:	461a      	mov	r2, r3
 800141c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141e:	4413      	add	r3, r2
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
 8001422:	e00e      	b.n	8001442 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	18d1      	adds	r1, r2, r3
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2215      	movs	r2, #21
 8001430:	4618      	mov	r0, r3
 8001432:	f00c fedb 	bl	800e1ec <strncpy>
	            thisline[21]=' ';
 8001436:	2320      	movs	r3, #32
 8001438:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	3315      	adds	r3, #21
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001448:	b2d8      	uxtb	r0, r3
 800144a:	f107 0220 	add.w	r2, r7, #32
 800144e:	2300      	movs	r3, #0
 8001450:	2102      	movs	r1, #2
 8001452:	f7ff fee9 	bl	8001228 <OLED_Printlin>
	        line++;
 8001456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001458:	3301      	adds	r3, #1
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 800145c:	e746      	b.n	80012ec <OLED_Print+0x1e>
}
 800145e:	3750      	adds	r7, #80	; 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(Screen* screen,uint8_t invert){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001470:	f7ff fcc6 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, screen->data[0], invert);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4619      	mov	r1, r3
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff01 	bl	8001286 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e01a      	b.n	80014c0 <OLED_SCREEN+0x5c>
		OLED_Printlin(screen->dataloc[i+1][0], screen->dataloc[i+1][1], screen->data[i+1], invert);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	7818      	ldrb	r0, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	7859      	ldrb	r1, [r3, #1]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f7ff feb7 	bl	8001228 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbde      	blt.n	800148a <OLED_SCREEN+0x26>
	}
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(Screen* screen,uint8_t dataindx,char* data){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	460b      	mov	r3, r1
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe75 	bl	80001e0 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	3302      	adds	r3, #2
 8001506:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	7818      	ldrb	r0, [r3, #0]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	b2d9      	uxtb	r1, r3
 8001518:	2300      	movs	r3, #0
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	f7ff fe84 	bl	8001228 <OLED_Printlin>
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(Screen* screen,uint8_t selopt, int restore){
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	460b      	mov	r3, r1
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <OLED_SELECT+0x110>)
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4611      	mov	r1, r2
 8001540:	8019      	strh	r1, [r3, #0]
 8001542:	3302      	adds	r3, #2
 8001544:	0c12      	lsrs	r2, r2, #16
 8001546:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d116      	bne.n	800157c <OLED_SELECT+0x54>
			if(selopt==0){
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10b      	bne.n	800156c <OLED_SELECT+0x44>
			rest=screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001560:	3b01      	subs	r3, #1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	e009      	b.n	8001580 <OLED_SELECT+0x58>
			}
			else{
				rest=screen->data[selopt];
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	7afb      	ldrb	r3, [r7, #11]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e001      	b.n	8001580 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <OLED_SELECT+0x114>)
 800157e:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d124      	bne.n	80015d0 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001592:	3b01      	subs	r3, #1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	3b01      	subs	r3, #1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	785b      	ldrb	r3, [r3, #1]
 80015cc:	773b      	strb	r3, [r7, #28]
 80015ce:	e021      	b.n	8001614 <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015da:	3b01      	subs	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015ee:	3b01      	subs	r3, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	7afb      	ldrb	r3, [r7, #11]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001614:	7fb9      	ldrb	r1, [r7, #30]
 8001616:	7ff8      	ldrb	r0, [r7, #31]
 8001618:	2300      	movs	r3, #0
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f7ff fe04 	bl	8001228 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001620:	f107 0214 	add.w	r2, r7, #20
 8001624:	7f39      	ldrb	r1, [r7, #28]
 8001626:	7f78      	ldrb	r0, [r7, #29]
 8001628:	2300      	movs	r3, #0
 800162a:	f7ff fdfd 	bl	8001228 <OLED_Printlin>

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0800eadc 	.word	0x0800eadc
 800163c:	0800ead8 	.word	0x0800ead8

08001640 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001644:	2108      	movs	r1, #8
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <BUZZ+0x20>)
 8001648:	f004 fce2 	bl	8006010 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800164c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001650:	f000 ff14 	bl	800247c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001654:	2108      	movs	r1, #8
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <BUZZ+0x20>)
 8001658:	f004 fd8a 	bl	8006170 <HAL_TIM_PWM_Stop>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000760 	.word	0x20000760

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fec6 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f864 	bl	8001738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 fa2c 	bl	8001acc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001674:	f000 f8ca 	bl	800180c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001678:	f000 f8f6 	bl	8001868 <MX_SPI1_Init>
  MX_SPI2_Init();
 800167c:	f000 f92c 	bl	80018d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001680:	f000 f960 	bl	8001944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001684:	f000 f9d4 	bl	8001a30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001688:	f009 f838 	bl	800a6fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <main+0x90>)
 800168e:	2104      	movs	r1, #4
 8001690:	2001      	movs	r0, #1
 8001692:	f009 f92b 	bl	800a8ec <osMessageQueueNew>
 8001696:	4603      	mov	r3, r0
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <main+0x94>)
 800169a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <main+0x98>)
 800169e:	2100      	movs	r1, #0
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <main+0x9c>)
 80016a2:	f009 f875 	bl	800a790 <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <main+0xa0>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <main+0xa4>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4816      	ldr	r0, [pc, #88]	; (800170c <main+0xa8>)
 80016b2:	f009 f86d 	bl	800a790 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <main+0xac>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <main+0xb0>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4815      	ldr	r0, [pc, #84]	; (8001718 <main+0xb4>)
 80016c2:	f009 f865 	bl	800a790 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <main+0xb8>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <main+0xbc>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <main+0xc0>)
 80016d2:	f009 f85d 	bl	800a790 <osThreadNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <main+0xc4>)
 80016da:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <main+0xc8>)
 80016de:	2100      	movs	r1, #0
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <main+0xcc>)
 80016e2:	f009 f855 	bl	800a790 <osThreadNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <main+0xd0>)
 80016ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016ec:	f009 f82a 	bl	800a744 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <main+0x8c>
 80016f2:	bf00      	nop
 80016f4:	0800ef48 	.word	0x0800ef48
 80016f8:	20000804 	.word	0x20000804
 80016fc:	0800ee94 	.word	0x0800ee94
 8001700:	08001bb5 	.word	0x08001bb5
 8001704:	200007f0 	.word	0x200007f0
 8001708:	0800eeb8 	.word	0x0800eeb8
 800170c:	08001c3d 	.word	0x08001c3d
 8001710:	200007f4 	.word	0x200007f4
 8001714:	0800eedc 	.word	0x0800eedc
 8001718:	08001cf1 	.word	0x08001cf1
 800171c:	200007f8 	.word	0x200007f8
 8001720:	0800ef00 	.word	0x0800ef00
 8001724:	08001d01 	.word	0x08001d01
 8001728:	200007fc 	.word	0x200007fc
 800172c:	0800ef24 	.word	0x0800ef24
 8001730:	08001dc1 	.word	0x08001dc1
 8001734:	20000800 	.word	0x20000800

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2230      	movs	r2, #48	; 0x30
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f00c fc30 	bl	800dfac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <SystemClock_Config+0xcc>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <SystemClock_Config+0xd0>)
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b0:	23a8      	movs	r3, #168	; 0xa8
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017b8:	2307      	movs	r3, #7
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fb53 	bl	8004e6c <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017cc:	f000 fb96 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fdb5 	bl	800535c <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f8:	f000 fb80 	bl	8001efc <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_I2C1_Init+0x50>)
 8001812:	4a13      	ldr	r2, [pc, #76]	; (8001860 <MX_I2C1_Init+0x54>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_I2C1_Init+0x50>)
 8001818:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_I2C1_Init+0x58>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_I2C1_Init+0x50>)
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_I2C1_Init+0x50>)
 800184a:	f001 f8d3 	bl	80029f4 <HAL_I2C_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001854:	f000 fb52 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000065c 	.word	0x2000065c
 8001860:	40005400 	.word	0x40005400
 8001864:	000186a0 	.word	0x000186a0

08001868 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_SPI1_Init+0x68>)
 800186e:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <MX_SPI1_Init+0x6c>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_SPI1_Init+0x68>)
 800187c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001880:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_SPI1_Init+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_SPI1_Init+0x68>)
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_SPI1_Init+0x68>)
 800189e:	2218      	movs	r2, #24
 80018a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018b6:	220a      	movs	r2, #10
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_SPI1_Init+0x68>)
 80018bc:	f003 ff8a 	bl	80057d4 <HAL_SPI_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018c6:	f000 fb19 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200006b0 	.word	0x200006b0
 80018d4:	40013000 	.word	0x40013000

080018d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SPI2_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <MX_SPI2_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_SPI2_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SPI2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SPI2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_SPI2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_SPI2_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SPI2_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SPI2_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SPI2_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SPI2_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SPI2_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SPI2_Init+0x64>)
 800192a:	f003 ff53 	bl	80057d4 <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 fae2 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000708 	.word	0x20000708
 8001940:	40003800 	.word	0x40003800

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800197e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800198c:	2231      	movs	r2, #49	; 0x31
 800198e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <MX_TIM2_Init+0xe8>)
 800199e:	f004 f9a9 	bl	8005cf4 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019a8:	f000 faa8 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b6:	4619      	mov	r1, r3
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019ba:	f004 fe07 	bl	80065cc <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019c4:	f000 fa9a 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019ca:	f004 fac7 	bl	8005f5c <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019d4:	f000 fa92 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <MX_TIM2_Init+0xe8>)
 80019e8:	f005 f9ac 	bl	8006d44 <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019f2:	f000 fa83 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f6:	2360      	movs	r3, #96	; 0x60
 80019f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 80019fa:	2318      	movs	r3, #24
 80019fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a0e:	f004 fd1b 	bl	8006448 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a18:	f000 fa70 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM2_Init+0xe8>)
 8001a1e:	f000 fb9b 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3738      	adds	r7, #56	; 0x38
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000760 	.word	0x20000760

08001a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	463b      	mov	r3, r7
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <MX_TIM3_Init+0x98>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a54:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a76:	f004 f93d 	bl	8005cf4 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a80:	f000 fa3c 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001a92:	f004 fd9b 	bl	80065cc <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a9c:	f000 fa2e 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM3_Init+0x94>)
 8001aae:	f005 f949 	bl	8006d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ab8:	f000 fa20 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200007a8 	.word	0x200007a8
 8001ac8:	40000400 	.word	0x40000400

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_GPIO_Init+0xdc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b3c:	481b      	ldr	r0, [pc, #108]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b3e:	f000 ff3f 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2122      	movs	r1, #34	; 0x22
 8001b46:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b48:	f000 ff3a 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4813      	ldr	r0, [pc, #76]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b60:	f000 fd92 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001b64:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <MX_GPIO_Init+0xe0>)
 8001b7e:	f000 fd83 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001b82:	2322      	movs	r3, #34	; 0x22
 8001b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b9a:	f000 fd75 	bl	8002688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bbc:	f00b fca6 	bl	800d50c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <Start_Init+0x70>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f009 fee9 	bl	800b99c <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <Start_Init+0x74>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f009 fee4 	bl	800b99c <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <Start_Init+0x78>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 fedf 	bl	800b99c <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <Start_Init+0x7c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f009 feda 	bl	800b99c <vTaskSuspend>
    MFRC_INIT();
 8001be8:	f7fe fdf6 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001bec:	f7fe fdac 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8001bf0:	f7ff fa30 	bl	8001054 <OLED_INIT>
    OLED_Print(TC);
 8001bf4:	480f      	ldr	r0, [pc, #60]	; (8001c34 <Start_Init+0x80>)
 8001bf6:	f7ff fb6a 	bl	80012ce <OLED_Print>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)!=0);
 8001bfa:	bf00      	nop
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <Start_Init+0x84>)
 8001c00:	f000 fec6 	bl	8002990 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f8      	bne.n	8001bfc <Start_Init+0x48>
    vTaskResume(HomeHandle);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <Start_Init+0x78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 ff6c 	bl	800baec <vTaskResume>
    osDelay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f008 fe4e 	bl	800a8b6 <osDelay>
    vTaskSuspend(NULL);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f009 febe 	bl	800b99c <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8001c20:	e7ce      	b.n	8001bc0 <Start_Init+0xc>
 8001c22:	bf00      	nop
 8001c24:	200007f4 	.word	0x200007f4
 8001c28:	200007f8 	.word	0x200007f8
 8001c2c:	200007fc 	.word	0x200007fc
 8001c30:	20000800 	.word	0x20000800
 8001c34:	2000043c 	.word	0x2000043c
 8001c38:	40020000 	.word	0x40020000

08001c3c <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	b095      	sub	sp, #84	; 0x54
 8001c40:	af06      	add	r7, sp, #24
 8001c42:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	Screen read;
	SCREEN_INIT(&read, 3, 1, READ_SCREEN, READ_DATLOC, READ_SEL);
 8001c44:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <StartReadCard+0x9c>)
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <StartReadCard+0xa0>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <StartReadCard+0xa4>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	2103      	movs	r1, #3
 8001c56:	f7ff f990 	bl	8000f7a <SCREEN_INIT>
	OLED_SCREEN(&read, NORMAL);
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fbff 	bl	8001464 <OLED_SCREEN>
	MFRC_ANTON();
 8001c66:	f7fe fd35 	bl	80006d4 <MFRC_ANTON>
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8001c6a:	201a      	movs	r0, #26
 8001c6c:	f00c f988 	bl	800df80 <malloc>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]

	while(1){
		if(DumpINFO(cardinf)==PCD_OK){
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ffe9 	bl	8000c50 <DumpINFO>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2bcc      	cmp	r3, #204	; 0xcc
 8001c82:	d1f7      	bne.n	8001c74 <StartReadCard+0x38>
			BUZZ();
 8001c84:	f7ff fcdc 	bl	8001640 <BUZZ>
			MFRC_ANTOFF();
 8001c88:	f7fe fd5e 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	7c3b      	ldrb	r3, [r7, #16]
 8001c90:	461e      	mov	r6, r3
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	469c      	mov	ip, r3
 8001c96:	7cbb      	ldrb	r3, [r7, #18]
 8001c98:	7cfa      	ldrb	r2, [r7, #19]
 8001c9a:	7d39      	ldrb	r1, [r7, #20]
 8001c9c:	7d7c      	ldrb	r4, [r7, #21]
 8001c9e:	7dbd      	ldrb	r5, [r7, #22]
 8001ca0:	9504      	str	r5, [sp, #16]
 8001ca2:	9403      	str	r4, [sp, #12]
 8001ca4:	9102      	str	r1, [sp, #8]
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4663      	mov	r3, ip
 8001cac:	4632      	mov	r2, r6
 8001cae:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <StartReadCard+0xa8>)
 8001cb0:	f00c fa74 	bl	800e19c <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <StartReadCard+0xac>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f107 010c 	add.w	r1, r7, #12
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f009 f8ae 	bl	800ae20 <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <StartReadCard+0xb0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 ff0f 	bl	800baec <vTaskResume>
			vTaskSuspend(NULL);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f009 fe64 	bl	800b99c <vTaskSuspend>
		if(DumpINFO(cardinf)==PCD_OK){
 8001cd4:	e7ce      	b.n	8001c74 <StartReadCard+0x38>
 8001cd6:	bf00      	nop
 8001cd8:	0800ee80 	.word	0x0800ee80
 8001cdc:	0800ee78 	.word	0x0800ee78
 8001ce0:	2000041c 	.word	0x2000041c
 8001ce4:	0800ebf8 	.word	0x0800ebf8
 8001ce8:	20000804 	.word	0x20000804
 8001cec:	20000800 	.word	0x20000800

08001cf0 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f008 fddc 	bl	800a8b6 <osDelay>
 8001cfe:	e7fb      	b.n	8001cf8 <StartWriteCard+0x8>

08001d00 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
  /* Infinite loop */
  for(;;)
  {
	Screen HOME;
	uint32_t count = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
	SCREEN_INIT(&HOME,7,6,(char**)HOME_SCREEN,HOME_DATLOC,HOME_SEL);
 8001d0c:	f107 0008 	add.w	r0, r7, #8
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <StartHome+0xa8>)
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <StartHome+0xac>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <StartHome+0xb0>)
 8001d1a:	2206      	movs	r2, #6
 8001d1c:	2107      	movs	r1, #7
 8001d1e:	f7ff f92c 	bl	8000f7a <SCREEN_INIT>
	OLED_SCREEN(&HOME, NORMAL);
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb9b 	bl	8001464 <OLED_SCREEN>

	while(1) {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4820      	ldr	r0, [pc, #128]	; (8001db4 <StartHome+0xb4>)
 8001d32:	f000 fe2d 	bl	8002990 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f8      	bne.n	8001d2e <StartHome+0x2e>
		  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <StartHome+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d44:	e014      	b.n	8001d70 <StartHome+0x70>
			  HAL_TIM_Base_Start(&htim3);
 8001d46:	481c      	ldr	r0, [pc, #112]	; (8001db8 <StartHome+0xb8>)
 8001d48:	f004 f824 	bl	8005d94 <HAL_TIM_Base_Start>
			  if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <StartHome+0xb8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10a      	bne.n	8001d70 <StartHome+0x70>
				  HAL_TIM_Base_Stop(&htim3);
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <StartHome+0xb8>)
 8001d5c:	f004 f874 	bl	8005e48 <HAL_TIM_Base_Stop>
				  vTaskResume(ReadCardHandle);
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <StartHome+0xbc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f009 fec1 	bl	800baec <vTaskResume>
				  vTaskSuspend(NULL);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f009 fe16 	bl	800b99c <vTaskSuspend>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001d70:	2102      	movs	r1, #2
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <StartHome+0xb4>)
 8001d74:	f000 fe0c 	bl	8002990 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0e3      	beq.n	8001d46 <StartHome+0x46>
				  }
			  }
		  HAL_TIM_Base_Stop(&htim3);
 8001d7e:	480e      	ldr	r0, [pc, #56]	; (8001db8 <StartHome+0xb8>)
 8001d80:	f004 f862 	bl	8005e48 <HAL_TIM_Base_Stop>
		  count++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
		  if(count == 6) {
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d101      	bne.n	8001d94 <StartHome+0x94>
			  count = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
		  	 }
		  OLED_SELECT(&HOME, count, OLED_RESTORE);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	b2d9      	uxtb	r1, r3
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fbc2 	bl	8001528 <OLED_SELECT>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001da4:	e7c3      	b.n	8001d2e <StartHome+0x2e>
 8001da6:	bf00      	nop
 8001da8:	0800ee6c 	.word	0x0800ee6c
 8001dac:	0800ee5c 	.word	0x0800ee5c
 8001db0:	20000400 	.word	0x20000400
 8001db4:	40020000 	.word	0x40020000
 8001db8:	200007a8 	.word	0x200007a8
 8001dbc:	200007f4 	.word	0x200007f4

08001dc0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b090      	sub	sp, #64	; 0x40
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
  /* Infinite loop */
  for(;;)
  {
	 Screen found;
	 uint32_t count = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <CardFoundStart+0xf8>)
 8001dce:	f107 0408 	add.w	r4, r7, #8
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	8023      	strh	r3, [r4, #0]
	 SCREEN_INIT(&found, 5, 2, (char**)CARD_FOUNDSCREEN, CARD_FOUNDATLOC, CARD_FOUNDSEL);
 8001ddc:	f107 0020 	add.w	r0, r7, #32
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <CardFoundStart+0xfc>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <CardFoundStart+0x100>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <CardFoundStart+0x104>)
 8001dea:	2202      	movs	r2, #2
 8001dec:	2105      	movs	r1, #5
 8001dee:	f7ff f8c4 	bl	8000f7a <SCREEN_INIT>
 	 OLED_SCREEN(&found, NORMAL);
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb33 	bl	8001464 <OLED_SCREEN>

 	while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 8001dfe:	bf00      	nop
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <CardFoundStart+0x108>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f107 011c 	add.w	r1, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f009 f9a2 	bl	800b154 <xQueueReceive>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d1f4      	bne.n	8001e00 <CardFoundStart+0x40>
 	osDelay(100);
 8001e16:	2064      	movs	r0, #100	; 0x64
 8001e18:	f008 fd4d 	bl	800a8b6 <osDelay>
 	OLED_SCRNREF(&found, 1, cardinf);
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fb56 	bl	80014d6 <OLED_SCRNREF>
 	OLED_SCRNREF(&found, 2, type);
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fb4e 	bl	80014d6 <OLED_SCRNREF>
 	while(1){
 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <CardFoundStart+0x10c>)
 8001e3e:	f000 fda7 	bl	8002990 <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f8      	bne.n	8001e3a <CardFoundStart+0x7a>
 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <CardFoundStart+0x110>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e50:	e017      	b.n	8001e82 <CardFoundStart+0xc2>
 	    	HAL_TIM_Base_Start(&htim3);
 8001e52:	481f      	ldr	r0, [pc, #124]	; (8001ed0 <CardFoundStart+0x110>)
 8001e54:	f003 ff9e 	bl	8005d94 <HAL_TIM_Base_Start>
 	    	if((__HAL_TIM_GET_COUNTER(&htim3)==999)&&(count==1)){
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <CardFoundStart+0x110>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10d      	bne.n	8001e82 <CardFoundStart+0xc2>
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10a      	bne.n	8001e82 <CardFoundStart+0xc2>
 	    		HAL_TIM_Base_Stop(&htim3);
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <CardFoundStart+0x110>)
 8001e6e:	f003 ffeb 	bl	8005e48 <HAL_TIM_Base_Stop>
 	    		vTaskResume(HomeHandle);
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <CardFoundStart+0x114>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f009 fe38 	bl	800baec <vTaskResume>
 	    		vTaskSuspend(NULL);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f009 fd8d 	bl	800b99c <vTaskSuspend>
 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001e82:	2102      	movs	r1, #2
 8001e84:	4811      	ldr	r0, [pc, #68]	; (8001ecc <CardFoundStart+0x10c>)
 8001e86:	f000 fd83 	bl	8002990 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0e0      	beq.n	8001e52 <CardFoundStart+0x92>
 	    		}
 	    	}
 	    count++;
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	3301      	adds	r3, #1
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 	    if (count == 2) {
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d101      	bne.n	8001ea0 <CardFoundStart+0xe0>
 	    	count = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
 	    }
 	    OLED_SELECT(&found, count, OLED_NORESTORE);
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	b2d9      	uxtb	r1, r3
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fb3c 	bl	8001528 <OLED_SELECT>
 	    HAL_TIM_Base_Stop(&htim3);
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <CardFoundStart+0x110>)
 8001eb2:	f003 ffc9 	bl	8005e48 <HAL_TIM_Base_Stop>
 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001eb6:	e7c0      	b.n	8001e3a <CardFoundStart+0x7a>
 8001eb8:	0800ec08 	.word	0x0800ec08
 8001ebc:	0800ee90 	.word	0x0800ee90
 8001ec0:	0800ee84 	.word	0x0800ee84
 8001ec4:	20000428 	.word	0x20000428
 8001ec8:	20000804 	.word	0x20000804
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	200007a8 	.word	0x200007a8
 8001ed4:	200007fc 	.word	0x200007fc

08001ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eea:	f000 faa7 	bl	800243c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40000c00 	.word	0x40000c00

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <Error_Handler+0x8>
	...

08001f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_MspInit+0x54>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_MspInit+0x54>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_MspInit+0x54>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_MspInit+0x54>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_MspInit+0x54>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_MspInit+0x54>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	210f      	movs	r1, #15
 8001f4a:	f06f 0001 	mvn.w	r0, #1
 8001f4e:	f000 fb71 	bl	8002634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_I2C_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa2:	2312      	movs	r3, #18
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <HAL_I2C_MspInit+0x8c>)
 8001fba:	f000 fb65 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <HAL_SPI_MspInit+0xe8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12c      	bne.n	800206c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_SPI_MspInit+0xec>)
 800201c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a29      	ldr	r2, [pc, #164]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800204a:	23a0      	movs	r3, #160	; 0xa0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800205a:	2305      	movs	r3, #5
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	481e      	ldr	r0, [pc, #120]	; (80020e0 <HAL_SPI_MspInit+0xf0>)
 8002066:	f000 fb0f 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800206a:	e031      	b.n	80020d0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_SPI_MspInit+0xf4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12c      	bne.n	80020d0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_SPI_MspInit+0xec>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_SPI_MspInit+0xec>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_SPI_MspInit+0xec>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_SPI_MspInit+0xec>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c0:	2305      	movs	r3, #5
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <HAL_SPI_MspInit+0xf8>)
 80020cc:	f000 fadc 	bl	8002688 <HAL_GPIO_Init>
}
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	; 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40013000 	.word	0x40013000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40003800 	.word	0x40003800
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800211a:	e012      	b.n	8002142 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10d      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_TIM_Base_MspInit+0x64>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40000400 	.word	0x40000400

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d11d      	bne.n	80021b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002196:	2304      	movs	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 80021b2:	f000 fa69 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <HAL_InitTick+0xe4>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a32      	ldr	r2, [pc, #200]	; (80022ac <HAL_InitTick+0xe4>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_InitTick+0xe4>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f4:	f107 0210 	add.w	r2, r7, #16
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fab6 	bl	8005770 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800220e:	f003 fa9b 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8002212:	6378      	str	r0, [r7, #52]	; 0x34
 8002214:	e004      	b.n	8002220 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002216:	f003 fa97 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 800221a:	4603      	mov	r3, r0
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_InitTick+0xe8>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	3b01      	subs	r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_InitTick+0xec>)
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_InitTick+0xf0>)
 8002232:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_InitTick+0xec>)
 8002236:	f240 32e7 	movw	r2, #999	; 0x3e7
 800223a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_InitTick+0xec>)
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_InitTick+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_InitTick+0xec>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_InitTick+0xec>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002254:	4817      	ldr	r0, [pc, #92]	; (80022b4 <HAL_InitTick+0xec>)
 8002256:	f003 fd4d 	bl	8005cf4 <HAL_TIM_Base_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002260:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11b      	bne.n	80022a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002268:	4812      	ldr	r0, [pc, #72]	; (80022b4 <HAL_InitTick+0xec>)
 800226a:	f003 fe15 	bl	8005e98 <HAL_TIM_Base_Start_IT>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002274:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002278:	2b00      	cmp	r3, #0
 800227a:	d111      	bne.n	80022a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800227c:	2032      	movs	r0, #50	; 0x32
 800227e:	f000 f9f5 	bl	800266c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d808      	bhi.n	800229a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	2032      	movs	r0, #50	; 0x32
 800228e:	f000 f9d1 	bl	8002634 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_InitTick+0xf4>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e002      	b.n	80022a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3738      	adds	r7, #56	; 0x38
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	20000808 	.word	0x20000808
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	200004dc 	.word	0x200004dc

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM5_IRQHandler+0x10>)
 80022f2:	f003 ffa1 	bl	8006238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000808 	.word	0x20000808

08002300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <OTG_FS_IRQHandler+0x10>)
 8002306:	f001 fc84 	bl	8003c12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200064a8 	.word	0x200064a8

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f00b fdf2 	bl	800df2c <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20010000 	.word	0x20010000
 8002374:	00000400 	.word	0x00000400
 8002378:	20000850 	.word	0x20000850
 800237c:	20006be8 	.word	0x20006be8

08002380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <SystemInit+0x20>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <SystemInit+0x20>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c0:	4c0b      	ldr	r4, [pc, #44]	; (80023f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ce:	f7ff ffd7 	bl	8002380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d2:	f00b fdb1 	bl	800df38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f945 	bl	8001664 <main>
  bx  lr    
 80023da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e4:	2000063c 	.word	0x2000063c
  ldr r2, =_sidata
 80023e8:	0800efbc 	.word	0x0800efbc
  ldr r2, =_sbss
 80023ec:	2000063c 	.word	0x2000063c
  ldr r4, =_ebss
 80023f0:	20006be4 	.word	0x20006be4

080023f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_Init+0x40>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_Init+0x40>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x40>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 f8fc 	bl	800261e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	200f      	movs	r0, #15
 8002428:	f7ff fece 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff fd6c 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	200004e0 	.word	0x200004e0
 8002460:	20000854 	.word	0x20000854

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000854 	.word	0x20000854

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff ffee 	bl	8002464 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_Delay+0x44>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffde 	bl	8002464 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200004e0 	.word	0x200004e0

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	; (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4907      	ldr	r1, [pc, #28]	; (8002560 <__NVIC_EnableIRQ+0x38>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
         );
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff4c 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002646:	f7ff ff61 	bl	800250c <__NVIC_GetPriorityGrouping>
 800264a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	6978      	ldr	r0, [r7, #20]
 8002652:	f7ff ffb1 	bl	80025b8 <NVIC_EncodePriority>
 8002656:	4602      	mov	r2, r0
 8002658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff80 	bl	8002564 <__NVIC_SetPriority>
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff54 	bl	8002528 <__NVIC_EnableIRQ>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e159      	b.n	8002958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8148 	bne.w	8002952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d005      	beq.n	80026da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d130      	bne.n	800273c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0201 	and.w	r2, r3, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b03      	cmp	r3, #3
 8002746:	d017      	beq.n	8002778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d123      	bne.n	80027cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	220f      	movs	r2, #15
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a2 	beq.w	8002952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a49      	ldr	r2, [pc, #292]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x202>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_GPIO_Init+0x2f4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1fe>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_GPIO_Init+0x2f8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1fa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1f6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a45      	ldr	r2, [pc, #276]	; (8002988 <HAL_GPIO_Init+0x300>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1f2>
 8002876:	2304      	movs	r3, #4
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287a:	2307      	movs	r3, #7
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x204>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <HAL_GPIO_Init+0x304>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a2f      	ldr	r2, [pc, #188]	; (800298c <HAL_GPIO_Init+0x304>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_GPIO_Init+0x304>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_GPIO_Init+0x304>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_GPIO_Init+0x304>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_GPIO_Init+0x304>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_GPIO_Init+0x304>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_GPIO_Init+0x304>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f aea2 	bls.w	80026a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e12b      	b.n	8002c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff faa0 	bl	8001f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a58:	f002 fe76 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a81      	ldr	r2, [pc, #516]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d807      	bhi.n	8002a78 <HAL_I2C_Init+0x84>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a80      	ldr	r2, [pc, #512]	; (8002c6c <HAL_I2C_Init+0x278>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e006      	b.n	8002a86 <HAL_I2C_Init+0x92>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a7d      	ldr	r2, [pc, #500]	; (8002c70 <HAL_I2C_Init+0x27c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0e7      	b.n	8002c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a78      	ldr	r2, [pc, #480]	; (8002c74 <HAL_I2C_Init+0x280>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9b      	lsrs	r3, r3, #18
 8002a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a6a      	ldr	r2, [pc, #424]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d802      	bhi.n	8002ac8 <HAL_I2C_Init+0xd4>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	e009      	b.n	8002adc <HAL_I2C_Init+0xe8>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_I2C_Init+0x284>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	3301      	adds	r3, #1
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	495c      	ldr	r1, [pc, #368]	; (8002c68 <HAL_I2C_Init+0x274>)
 8002af8:	428b      	cmp	r3, r1
 8002afa:	d819      	bhi.n	8002b30 <HAL_I2C_Init+0x13c>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e59      	subs	r1, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b10:	400b      	ands	r3, r1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_I2C_Init+0x138>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e59      	subs	r1, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2a:	e051      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	e04f      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <HAL_I2C_Init+0x168>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e012      	b.n	8002b82 <HAL_I2C_Init+0x18e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x196>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e022      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10e      	bne.n	8002bb0 <HAL_I2C_Init+0x1bc>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e58      	subs	r0, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	e00f      	b.n	8002bd0 <HAL_I2C_Init+0x1dc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	0099      	lsls	r1, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6911      	ldr	r1, [r2, #16]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	000186a0 	.word	0x000186a0
 8002c6c:	001e847f 	.word	0x001e847f
 8002c70:	003d08ff 	.word	0x003d08ff
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	10624dd3 	.word	0x10624dd3

08002c7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	817b      	strh	r3, [r7, #10]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	813b      	strh	r3, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c96:	f7ff fbe5 	bl	8002464 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	f040 80d9 	bne.w	8002e5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2319      	movs	r3, #25
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	496d      	ldr	r1, [pc, #436]	; (8002e68 <HAL_I2C_Mem_Write+0x1ec>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fc7f 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0cc      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Mem_Write+0x56>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0c5      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d007      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2221      	movs	r2, #33	; 0x21
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_I2C_Mem_Write+0x1f0>)
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d3a:	88f8      	ldrh	r0, [r7, #6]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4603      	mov	r3, r0
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fab6 	bl	80032bc <I2C_RequestMemoryWrite>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d052      	beq.n	8002dfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e081      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fd00 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d107      	bne.n	8002d82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11b      	bne.n	8002dfc <HAL_I2C_Mem_Write+0x180>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1aa      	bne.n	8002d5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fcec 	bl	80037e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d107      	bne.n	8002e2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e016      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	00100002 	.word	0x00100002
 8002e6c:	ffff0000 	.word	0xffff0000

08002e70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	817b      	strh	r3, [r7, #10]
 8002e82:	460b      	mov	r3, r1
 8002e84:	813b      	strh	r3, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8a:	f7ff faeb 	bl	8002464 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	f040 8208 	bne.w	80032ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2319      	movs	r3, #25
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	497b      	ldr	r1, [pc, #492]	; (8003094 <HAL_I2C_Mem_Read+0x224>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fb85 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e1fb      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Mem_Read+0x56>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e1f4      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d007      	beq.n	8002eec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2222      	movs	r2, #34	; 0x22
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <HAL_I2C_Mem_Read+0x228>)
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2e:	88f8      	ldrh	r0, [r7, #6]
 8002f30:	893a      	ldrh	r2, [r7, #8]
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa52 	bl	80033e8 <I2C_RequestMemoryRead>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e1b0      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e184      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d11b      	bne.n	8002fbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e164      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d11b      	bne.n	8002ffe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	e144      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003014:	e138      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	2b03      	cmp	r3, #3
 800301c:	f200 80f1 	bhi.w	8003202 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b01      	cmp	r3, #1
 8003026:	d123      	bne.n	8003070 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fc1b 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e139      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800306e:	e10b      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14e      	bne.n	8003116 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	2200      	movs	r2, #0
 8003080:	4906      	ldr	r1, [pc, #24]	; (800309c <HAL_I2C_Mem_Read+0x22c>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fa98 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e10e      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
 8003092:	bf00      	nop
 8003094:	00100002 	.word	0x00100002
 8003098:	ffff0000 	.word	0xffff0000
 800309c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003114:	e0b8      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	2200      	movs	r2, #0
 800311e:	4966      	ldr	r1, [pc, #408]	; (80032b8 <HAL_I2C_Mem_Read+0x448>)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fa49 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0bf      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	494f      	ldr	r1, [pc, #316]	; (80032b8 <HAL_I2C_Mem_Read+0x448>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fa1b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e091      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003200:	e042      	b.n	8003288 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fb2e 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e04c      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d118      	bne.n	8003288 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f aec2 	bne.w	8003016 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00010004 	.word	0x00010004

080032bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f960 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d103      	bne.n	8003316 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e05f      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <I2C_RequestMemoryWrite+0x128>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f998 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04c      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa02 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02b      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e021      	b.n	80033d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b29b      	uxth	r3, r3
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	6a39      	ldr	r1, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f9dc 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e005      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00010002 	.word	0x00010002

080033e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003410:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2200      	movs	r2, #0
 800342a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8c2 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d103      	bne.n	8003452 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0aa      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	4952      	ldr	r1, [pc, #328]	; (80035b4 <I2C_RequestMemoryRead+0x1cc>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f8fa 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e097      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f964 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e076      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c4:	893b      	ldrh	r3, [r7, #8]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	e021      	b.n	8003514 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	6a39      	ldr	r1, [r7, #32]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f93e 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d107      	bne.n	8003506 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e050      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	6a39      	ldr	r1, [r7, #32]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f923 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e035      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800354e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2200      	movs	r2, #0
 8003558:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f82b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003576:	d103      	bne.n	8003580 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e013      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	4906      	ldr	r1, [pc, #24]	; (80035b4 <I2C_RequestMemoryRead+0x1cc>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f863 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	e025      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d021      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fe ff47 	bl	8002464 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e023      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	e00c      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d0b6      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003674:	e051      	b.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d123      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e046      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe fec5 	bl	8002464 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e020      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d18d      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8ce 	bl	8003914 <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d021      	beq.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe fe6b 	bl	8002464 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d1ca      	bne.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f88d 	bl	8003914 <I2C_IsAcknowledgeFailed>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02d      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d021      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fe fe2a 	bl	8002464 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1ca      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e042      	b.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e029      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fdd4 	bl	8002464 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d1b5      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d11b      	bne.n	8003964 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003934:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003974:	b08f      	sub	sp, #60	; 0x3c
 8003976:	af0a      	add	r7, sp, #40	; 0x28
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e10f      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f009 ffba 	bl	800d918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fb55 	bl	8007072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	687e      	ldr	r6, [r7, #4]
 80039d0:	466d      	mov	r5, sp
 80039d2:	f106 0410 	add.w	r4, r6, #16
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e6:	1d33      	adds	r3, r6, #4
 80039e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f003 fa2c 	bl	8006e48 <USB_CoreInit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0d0      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 fb43 	bl	8007094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e04a      	b.n	8003aaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	333d      	adds	r3, #61	; 0x3d
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	b298      	uxth	r0, r3
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3344      	adds	r3, #68	; 0x44
 8003a50:	4602      	mov	r2, r0
 8003a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3340      	adds	r3, #64	; 0x40
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3348      	adds	r3, #72	; 0x48
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	334c      	adds	r3, #76	; 0x4c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3354      	adds	r3, #84	; 0x54
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3af      	bcc.n	8003a14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e044      	b.n	8003b44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3301      	adds	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d3b5      	bcc.n	8003aba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	687e      	ldr	r6, [r7, #4]
 8003b56:	466d      	mov	r5, sp
 8003b58:	f106 0410 	add.w	r4, r6, #16
 8003b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b6c:	1d33      	adds	r3, r6, #4
 8003b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f003 fadb 	bl	800712c <USB_DevInit>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00d      	b.n	8003ba4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 fc2a 	bl	80083f6 <USB_DevDisconnect>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PCD_Start+0x1c>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e020      	b.n	8003c0a <HAL_PCD_Start+0x5e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d109      	bne.n	8003bec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fa2d 	bl	8007050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f004 fbda 	bl	80083b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b08d      	sub	sp, #52	; 0x34
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 fc98 	bl	800855e <USB_GetMode>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 848a 	bne.w	800454a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f004 fbfc 	bl	8008438 <USB_ReadInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8480 	beq.w	8004548 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fbe9 	bl	8008438 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d107      	bne.n	8003c80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f002 0202 	and.w	r2, r2, #2
 8003c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fbd7 	bl	8008438 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d161      	bne.n	8003d58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0210 	bic.w	r2, r2, #16
 8003ca2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	0c5b      	lsrs	r3, r3, #17
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d124      	bne.n	8003d1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d035      	beq.n	8003d48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	6a38      	ldr	r0, [r7, #32]
 8003cf0:	f004 fa0e 	bl	8008110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d00:	441a      	add	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d12:	441a      	add	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
 8003d18:	e016      	b.n	8003d48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	0c5b      	lsrs	r3, r3, #17
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d110      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6a38      	ldr	r0, [r7, #32]
 8003d32:	f004 f9ed 	bl	8008110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d42:	441a      	add	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fb6b 	bl	8008438 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d6c:	f040 80a7 	bne.w	8003ebe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f004 fb70 	bl	800845e <USB_ReadDevAllOutEpInterrupt>
 8003d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d80:	e099      	b.n	8003eb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 808e 	beq.w	8003eaa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fb94 	bl	80084c6 <USB_ReadDevOutEPInterrupt>
 8003d9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	2301      	movs	r3, #1
 8003dba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fec2 	bl	8004b48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2308      	movs	r3, #8
 8003dde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 ff98 	bl	8004d18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2310      	movs	r3, #16
 8003e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d030      	beq.n	8003e70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d109      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d108      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f009 fe59 	bl	800db10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	461a      	mov	r2, r3
 8003e88:	2320      	movs	r3, #32
 8003e8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ea8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	3301      	adds	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f af62 	bne.w	8003d82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f004 fab8 	bl	8008438 <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ed2:	f040 80db 	bne.w	800408c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fad9 	bl	8008492 <USB_ReadDevAllInEpInterrupt>
 8003ee0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ee6:	e0cd      	b.n	8004084 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80c2 	beq.w	8004078 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 faff 	bl	8008502 <USB_ReadDevInEPInterrupt>
 8003f04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d057      	beq.n	8003fc0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f30:	4013      	ands	r3, r2
 8003f32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	461a      	mov	r2, r3
 8003f42:	2301      	movs	r3, #1
 8003f44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d132      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	334c      	adds	r3, #76	; 0x4c
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4403      	add	r3, r0
 8003f6e:	3348      	adds	r3, #72	; 0x48
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4419      	add	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4403      	add	r3, r0
 8003f82:	334c      	adds	r3, #76	; 0x4c
 8003f84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d113      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x3a2>
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3354      	adds	r3, #84	; 0x54
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fac:	461a      	mov	r2, r3
 8003fae:	2101      	movs	r1, #1
 8003fb0:	f004 fb06 	bl	80085c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f009 fd2d 	bl	800da1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2308      	movs	r3, #8
 8003fda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	461a      	mov	r2, r3
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d023      	beq.n	8004066 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800401e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004020:	6a38      	ldr	r0, [r7, #32]
 8004022:	f003 f9e7 	bl	80073f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3338      	adds	r3, #56	; 0x38
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	78db      	ldrb	r3, [r3, #3]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f009 fd70 	bl	800db34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	461a      	mov	r2, r3
 8004062:	2302      	movs	r3, #2
 8004064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fcdb 	bl	8004a2e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	3301      	adds	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	f47f af2e 	bne.w	8003ee8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f004 f9d1 	bl	8008438 <USB_ReadInterrupts>
 8004096:	4603      	mov	r3, r0
 8004098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a0:	d122      	bne.n	80040e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d108      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fec2 	bl	8004e54 <HAL_PCDEx_LPM_Callback>
 80040d0:	e002      	b.n	80040d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f009 fd0e 	bl	800daf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 f9a3 	bl	8008438 <USB_ReadInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fc:	d112      	bne.n	8004124 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f009 fcca 	bl	800daa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004122:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f004 f985 	bl	8008438 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	f040 80b7 	bne.w	80042aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2110      	movs	r1, #16
 8004156:	4618      	mov	r0, r3
 8004158:	f003 f94c 	bl	80073f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004160:	e046      	b.n	80041f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	461a      	mov	r2, r3
 8004170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004174:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004194:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	3301      	adds	r3, #1
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d3b3      	bcc.n	8004162 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004208:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800420c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f043 030b 	orr.w	r3, r3, #11
 800422a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423c:	f043 030b 	orr.w	r3, r3, #11
 8004240:	6453      	str	r3, [r2, #68]	; 0x44
 8004242:	e015      	b.n	8004270 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004256:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800425a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426a:	f043 030b 	orr.w	r3, r3, #11
 800426e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004282:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004294:	461a      	mov	r2, r3
 8004296:	f004 f993 	bl	80085c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 f8c2 	bl	8008438 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042be:	d124      	bne.n	800430a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 f958 	bl	800857a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 f90d 	bl	80074ee <USB_GetDevSpeed>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681c      	ldr	r4, [r3, #0]
 80042e0:	f001 fa26 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 80042e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	4620      	mov	r0, r4
 80042f0:	f002 fe0c 	bl	8006f0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f009 fbb8 	bl	800da6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004308:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 f892 	bl	8008438 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b08      	cmp	r3, #8
 800431c:	d10a      	bne.n	8004334 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f009 fb95 	bl	800da4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f002 0208 	and.w	r2, r2, #8
 8004332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f004 f87d 	bl	8008438 <USB_ReadInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d122      	bne.n	800438e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004354:	2301      	movs	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	e014      	b.n	8004384 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fb27 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	3301      	adds	r3, #1
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	429a      	cmp	r2, r3
 800438c:	d3e5      	bcc.n	800435a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f004 f850 	bl	8008438 <USB_ReadInterrupts>
 8004398:	4603      	mov	r3, r0
 800439a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d13b      	bne.n	800441c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a4:	2301      	movs	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	e02b      	b.n	8004402 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3340      	adds	r3, #64	; 0x40
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d115      	bne.n	80043fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da12      	bge.n	80043fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	333f      	adds	r3, #63	; 0x3f
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fae8 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3301      	adds	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	429a      	cmp	r2, r3
 800440a:	d3ce      	bcc.n	80043aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800441a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 f809 	bl	8008438 <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004430:	d155      	bne.n	80044de <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004432:	2301      	movs	r3, #1
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e045      	b.n	80044c4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d12e      	bne.n	80044be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004460:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004462:	2b00      	cmp	r3, #0
 8004464:	da2b      	bge.n	80044be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004472:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004476:	429a      	cmp	r2, r3
 8004478:	d121      	bne.n	80044be <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ba:	6053      	str	r3, [r2, #4]
            break;
 80044bc:	e007      	b.n	80044ce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b4      	bcc.n	8004438 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 ffa8 	bl	8008438 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d10a      	bne.n	800450a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f009 fb2f 	bl	800db58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f003 ff92 	bl	8008438 <USB_ReadInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d115      	bne.n	800454a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f009 fb1f 	bl	800db74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e000      	b.n	800454a <HAL_PCD_IRQHandler+0x938>
      return;
 8004548:	bf00      	nop
    }
  }
}
 800454a:	3734      	adds	r7, #52	; 0x34
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}

08004550 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_PCD_SetAddress+0x1a>
 8004566:	2302      	movs	r3, #2
 8004568:	e013      	b.n	8004592 <HAL_PCD_SetAddress+0x42>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f003 fef0 	bl	8008368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	461a      	mov	r2, r3
 80045a8:	4603      	mov	r3, r0
 80045aa:	70fb      	strb	r3, [r7, #3]
 80045ac:	460b      	mov	r3, r1
 80045ae:	803b      	strh	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	da0f      	bge.n	80045e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	3338      	adds	r3, #56	; 0x38
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4413      	add	r3, r2
 80045d4:	3304      	adds	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	705a      	strb	r2, [r3, #1]
 80045de:	e00f      	b.n	8004600 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	3304      	adds	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800460c:	883a      	ldrh	r2, [r7, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	78ba      	ldrb	r2, [r7, #2]
 8004616:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800462a:	78bb      	ldrb	r3, [r7, #2]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d102      	bne.n	8004636 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_PCD_EP_Open+0xaa>
 8004640:	2302      	movs	r3, #2
 8004642:	e00e      	b.n	8004662 <HAL_PCD_EP_Open+0xc8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	4618      	mov	r0, r3
 8004654:	f002 ff70 	bl	8007538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004660:	7afb      	ldrb	r3, [r7, #11]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da0f      	bge.n	800469e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3338      	adds	r3, #56	; 0x38
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	705a      	strb	r2, [r3, #1]
 800469c:	e00f      	b.n	80046be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_PCD_EP_Close+0x6e>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e00e      	b.n	80046f6 <HAL_PCD_EP_Close+0x8c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f002 ffae 	bl	8007648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	460b      	mov	r3, r1
 800470c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	3304      	adds	r3, #4
 8004726:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2200      	movs	r2, #0
 8004738:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004740:	7afb      	ldrb	r3, [r7, #11]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	b2da      	uxtb	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d102      	bne.n	800475a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	6979      	ldr	r1, [r7, #20]
 8004772:	f003 fa8d 	bl	8007c90 <USB_EP0StartXfer>
 8004776:	e008      	b.n	800478a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	f003 f83b 	bl	8007800 <USB_EPStartXfer>
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	460b      	mov	r3, r1
 80047d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	3338      	adds	r3, #56	; 0x38
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2201      	movs	r2, #1
 8004802:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004804:	7afb      	ldrb	r3, [r7, #11]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	b2da      	uxtb	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d102      	bne.n	800481e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	f003 fa2b 	bl	8007c90 <USB_EP0StartXfer>
 800483a:	e008      	b.n	800484e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	f002 ffd9 	bl	8007800 <USB_EPStartXfer>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d901      	bls.n	8004876 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e050      	b.n	8004918 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	da0f      	bge.n	800489e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 020f 	and.w	r2, r3, #15
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	3338      	adds	r3, #56	; 0x38
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	3304      	adds	r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	705a      	strb	r2, [r3, #1]
 800489c:	e00d      	b.n	80048ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_PCD_EP_SetStall+0x82>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e01e      	b.n	8004918 <HAL_PCD_EP_SetStall+0xc0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f003 fc69 	bl	80081c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	b2d9      	uxtb	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004908:	461a      	mov	r2, r3
 800490a:	f003 fe59 	bl	80085c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d901      	bls.n	800493e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e042      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da0f      	bge.n	8004966 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	3304      	adds	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	705a      	strb	r2, [r3, #1]
 8004964:	e00f      	b.n	8004986 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_PCD_EP_ClrStall+0x86>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e00e      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f003 fc71 	bl	800829c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da0c      	bge.n	80049fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3338      	adds	r3, #56	; 0x38
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e00c      	b.n	8004a14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f003 fa90 	bl	8007f40 <USB_EPStopXfer>
 8004a20:	4603      	mov	r3, r0
 8004a22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08a      	sub	sp, #40	; 0x28
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3338      	adds	r3, #56	; 0x38
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d901      	bls.n	8004a66 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06c      	b.n	8004b40 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d902      	bls.n	8004a82 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3303      	adds	r3, #3
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a8a:	e02b      	b.n	8004ae4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d902      	bls.n	8004aa8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6919      	ldr	r1, [r3, #16]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	6978      	ldr	r0, [r7, #20]
 8004ac8:	f003 fae4 	bl	8008094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d809      	bhi.n	8004b0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d203      	bcs.n	8004b0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1be      	bne.n	8004a8c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d811      	bhi.n	8004b3e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2201      	movs	r2, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	6939      	ldr	r1, [r7, #16]
 8004b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	333c      	adds	r3, #60	; 0x3c
 8004b60:	3304      	adds	r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d17b      	bne.n	8004c76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d015      	beq.n	8004bb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4a61      	ldr	r2, [pc, #388]	; (8004d10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f240 80b9 	bls.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80b3 	beq.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	461a      	mov	r2, r3
 8004bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	e0a7      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2320      	movs	r3, #32
 8004bce:	6093      	str	r3, [r2, #8]
 8004bd0:	e098      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8093 	bne.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	; (8004d10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d90f      	bls.n	8004c06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	6093      	str	r3, [r2, #8]
 8004c04:	e07e      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	0159      	lsls	r1, r3, #5
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d114      	bne.n	8004c68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c50:	461a      	mov	r2, r3
 8004c52:	2101      	movs	r1, #1
 8004c54:	f003 fcb4 	bl	80085c0 <USB_EP0_OutStart>
 8004c58:	e006      	b.n	8004c68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f008 feb8 	bl	800d9e4 <HAL_PCD_DataOutStageCallback>
 8004c74:	e046      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d124      	bne.n	8004cc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	461a      	mov	r2, r3
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	6093      	str	r3, [r2, #8]
 8004c9c:	e032      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f008 fe8f 	bl	800d9e4 <HAL_PCD_DataOutStageCallback>
 8004cc6:	e01d      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d114      	bne.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f003 fc64 	bl	80085c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f008 fe70 	bl	800d9e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	4f54300a 	.word	0x4f54300a
 8004d14:	4f54310a 	.word	0x4f54310a

08004d18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	333c      	adds	r3, #60	; 0x3c
 8004d30:	3304      	adds	r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d90e      	bls.n	8004d6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f008 fe27 	bl	800d9c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d90c      	bls.n	8004d94 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2101      	movs	r1, #1
 8004d90:	f003 fc16 	bl	80085c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	4f54300a 	.word	0x4f54300a

08004da4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
 8004db0:	4613      	mov	r3, r2
 8004db2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dc2:	883b      	ldrh	r3, [r7, #0]
 8004dc4:	0419      	lsls	r1, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd0:	e028      	b.n	8004e24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e00d      	b.n	8004e02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	3340      	adds	r3, #64	; 0x40
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3ec      	bcc.n	8004de6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e0c:	883b      	ldrh	r3, [r7, #0]
 8004e0e:	0418      	lsls	r0, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	4302      	orrs	r2, r0
 8004e1c:	3340      	adds	r3, #64	; 0x40
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e267      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d075      	beq.n	8004f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e8a:	4b88      	ldr	r3, [pc, #544]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d00c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e96:	4b85      	ldr	r3, [pc, #532]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d112      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	4b7e      	ldr	r3, [pc, #504]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x108>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d157      	bne.n	8004f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e242      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x74>
 8004ed2:	4b76      	ldr	r3, [pc, #472]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a75      	ldr	r2, [pc, #468]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e01d      	b.n	8004f1c <HAL_RCC_OscConfig+0xb0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x98>
 8004eea:	4b70      	ldr	r3, [pc, #448]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6f      	ldr	r2, [pc, #444]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b6d      	ldr	r3, [pc, #436]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6c      	ldr	r2, [pc, #432]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0xb0>
 8004f04:	4b69      	ldr	r3, [pc, #420]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a68      	ldr	r2, [pc, #416]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b66      	ldr	r3, [pc, #408]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a65      	ldr	r2, [pc, #404]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fd fa9e 	bl	8002464 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fa9a 	bl	8002464 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e207      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0xc0>
 8004f4a:	e014      	b.n	8004f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fa8a 	bl	8002464 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fd fa86 	bl	8002464 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1f3      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	4b51      	ldr	r3, [pc, #324]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0xe8>
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d063      	beq.n	800504a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f82:	4b4a      	ldr	r3, [pc, #296]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d11c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9a:	4b44      	ldr	r3, [pc, #272]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	4b41      	ldr	r3, [pc, #260]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCC_OscConfig+0x152>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e1c7      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4937      	ldr	r1, [pc, #220]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	e03a      	b.n	800504a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fdc:	4b34      	ldr	r3, [pc, #208]	; (80050b0 <HAL_RCC_OscConfig+0x244>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fd fa3f 	bl	8002464 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fea:	f7fd fa3b 	bl	8002464 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1a8      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4925      	ldr	r1, [pc, #148]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	e015      	b.n	800504a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_OscConfig+0x244>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fd fa1e 	bl	8002464 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800502c:	f7fd fa1a 	bl	8002464 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e187      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d036      	beq.n	80050c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCC_OscConfig+0x248>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fd f9fe 	bl	8002464 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506c:	f7fd f9fa 	bl	8002464 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e167      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCC_OscConfig+0x240>)
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x200>
 800508a:	e01b      	b.n	80050c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_OscConfig+0x248>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fd f9e7 	bl	8002464 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005098:	e00e      	b.n	80050b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509a:	f7fd f9e3 	bl	8002464 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d907      	bls.n	80050b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e150      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
 80050ac:	40023800 	.word	0x40023800
 80050b0:	42470000 	.word	0x42470000
 80050b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	4b88      	ldr	r3, [pc, #544]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ea      	bne.n	800509a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8097 	beq.w	8005200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d6:	4b81      	ldr	r3, [pc, #516]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	4b7d      	ldr	r3, [pc, #500]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a7c      	ldr	r2, [pc, #496]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
 80050f2:	4b7a      	ldr	r3, [pc, #488]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005102:	4b77      	ldr	r3, [pc, #476]	; (80052e0 <HAL_RCC_OscConfig+0x474>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d118      	bne.n	8005140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <HAL_RCC_OscConfig+0x474>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a73      	ldr	r2, [pc, #460]	; (80052e0 <HAL_RCC_OscConfig+0x474>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511a:	f7fd f9a3 	bl	8002464 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7fd f99f 	bl	8002464 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e10c      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCC_OscConfig+0x474>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d106      	bne.n	8005156 <HAL_RCC_OscConfig+0x2ea>
 8005148:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	4a63      	ldr	r2, [pc, #396]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	6713      	str	r3, [r2, #112]	; 0x70
 8005154:	e01c      	b.n	8005190 <HAL_RCC_OscConfig+0x324>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b05      	cmp	r3, #5
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x30c>
 800515e:	4b5f      	ldr	r3, [pc, #380]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a5e      	ldr	r2, [pc, #376]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005164:	f043 0304 	orr.w	r3, r3, #4
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a5b      	ldr	r2, [pc, #364]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0x324>
 8005178:	4b58      	ldr	r3, [pc, #352]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a57      	ldr	r2, [pc, #348]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
 8005184:	4b55      	ldr	r3, [pc, #340]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a54      	ldr	r2, [pc, #336]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800518a:	f023 0304 	bic.w	r3, r3, #4
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fd f964 	bl	8002464 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd f960 	bl	8002464 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0cb      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ee      	beq.n	80051a0 <HAL_RCC_OscConfig+0x334>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c4:	f7fd f94e 	bl	8002464 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd f94a 	bl	8002464 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0b5      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e2:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1ee      	bne.n	80051cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b39      	ldr	r3, [pc, #228]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	4a38      	ldr	r2, [pc, #224]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80a1 	beq.w	800534c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800520a:	4b34      	ldr	r3, [pc, #208]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b08      	cmp	r3, #8
 8005214:	d05c      	beq.n	80052d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d141      	bne.n	80052a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <HAL_RCC_OscConfig+0x478>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fd f91e 	bl	8002464 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fd f91a 	bl	8002464 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e087      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	4b27      	ldr	r3, [pc, #156]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	3b01      	subs	r3, #1
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	491b      	ldr	r1, [pc, #108]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_RCC_OscConfig+0x478>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fd f8f3 	bl	8002464 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005282:	f7fd f8ef 	bl	8002464 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e05c      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x416>
 80052a0:	e054      	b.n	800534c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_RCC_OscConfig+0x478>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fd f8dc 	bl	8002464 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd f8d8 	bl	8002464 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e045      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_RCC_OscConfig+0x470>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x444>
 80052ce:	e03d      	b.n	800534c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e038      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40007000 	.word	0x40007000
 80052e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <HAL_RCC_OscConfig+0x4ec>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d028      	beq.n	8005348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d121      	bne.n	8005348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d11a      	bne.n	8005348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800531e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005320:	4293      	cmp	r3, r2
 8005322:	d111      	bne.n	8005348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d107      	bne.n	8005348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800

0800535c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0cc      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b68      	ldr	r3, [pc, #416]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d90c      	bls.n	8005398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b65      	ldr	r3, [pc, #404]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b63      	ldr	r3, [pc, #396]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0b8      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d020      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b0:	4b59      	ldr	r3, [pc, #356]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a58      	ldr	r2, [pc, #352]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b50      	ldr	r3, [pc, #320]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	494d      	ldr	r1, [pc, #308]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d044      	beq.n	800547c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d119      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e07f      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d003      	beq.n	800541a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005416:	2b03      	cmp	r3, #3
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	4b3f      	ldr	r3, [pc, #252]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e06f      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e067      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543a:	4b37      	ldr	r3, [pc, #220]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f023 0203 	bic.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4934      	ldr	r1, [pc, #208]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	4313      	orrs	r3, r2
 800544a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800544c:	f7fd f80a 	bl	8002464 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	e00a      	b.n	800546a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005454:	f7fd f806 	bl	8002464 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e04f      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 020c 	and.w	r2, r3, #12
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	429a      	cmp	r2, r3
 800547a:	d1eb      	bne.n	8005454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800547c:	4b25      	ldr	r3, [pc, #148]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d20c      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e032      	b.n	800550a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4916      	ldr	r1, [pc, #88]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	490e      	ldr	r1, [pc, #56]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054e2:	f000 f821 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	490a      	ldr	r1, [pc, #40]	; (800551c <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fc fe60 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40023c00 	.word	0x40023c00
 8005518:	40023800 	.word	0x40023800
 800551c:	0800ef60 	.word	0x0800ef60
 8005520:	200004d8 	.word	0x200004d8
 8005524:	200004dc 	.word	0x200004dc

08005528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800552c:	b094      	sub	sp, #80	; 0x50
 800552e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	647b      	str	r3, [r7, #68]	; 0x44
 8005534:	2300      	movs	r3, #0
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	2300      	movs	r3, #0
 800553a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005540:	4b79      	ldr	r3, [pc, #484]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b08      	cmp	r3, #8
 800554a:	d00d      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x40>
 800554c:	2b08      	cmp	r3, #8
 800554e:	f200 80e1 	bhi.w	8005714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x34>
 8005556:	2b04      	cmp	r3, #4
 8005558:	d003      	beq.n	8005562 <HAL_RCC_GetSysClockFreq+0x3a>
 800555a:	e0db      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800555c:	4b73      	ldr	r3, [pc, #460]	; (800572c <HAL_RCC_GetSysClockFreq+0x204>)
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005560:	e0db      	b.n	800571a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005562:	4b72      	ldr	r3, [pc, #456]	; (800572c <HAL_RCC_GetSysClockFreq+0x204>)
 8005564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005566:	e0d8      	b.n	800571a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005568:	4b6f      	ldr	r3, [pc, #444]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005570:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d063      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557e:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	099b      	lsrs	r3, r3, #6
 8005584:	2200      	movs	r2, #0
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
 8005588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
 8005592:	2300      	movs	r3, #0
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
 8005596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800559a:	4622      	mov	r2, r4
 800559c:	462b      	mov	r3, r5
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	0159      	lsls	r1, r3, #5
 80055a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ac:	0150      	lsls	r0, r2, #5
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4621      	mov	r1, r4
 80055b4:	1a51      	subs	r1, r2, r1
 80055b6:	6139      	str	r1, [r7, #16]
 80055b8:	4629      	mov	r1, r5
 80055ba:	eb63 0301 	sbc.w	r3, r3, r1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055cc:	4659      	mov	r1, fp
 80055ce:	018b      	lsls	r3, r1, #6
 80055d0:	4651      	mov	r1, sl
 80055d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055d6:	4651      	mov	r1, sl
 80055d8:	018a      	lsls	r2, r1, #6
 80055da:	4651      	mov	r1, sl
 80055dc:	ebb2 0801 	subs.w	r8, r2, r1
 80055e0:	4659      	mov	r1, fp
 80055e2:	eb63 0901 	sbc.w	r9, r3, r1
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055fa:	4690      	mov	r8, r2
 80055fc:	4699      	mov	r9, r3
 80055fe:	4623      	mov	r3, r4
 8005600:	eb18 0303 	adds.w	r3, r8, r3
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	462b      	mov	r3, r5
 8005608:	eb49 0303 	adc.w	r3, r9, r3
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800561a:	4629      	mov	r1, r5
 800561c:	028b      	lsls	r3, r1, #10
 800561e:	4621      	mov	r1, r4
 8005620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005624:	4621      	mov	r1, r4
 8005626:	028a      	lsls	r2, r1, #10
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562e:	2200      	movs	r2, #0
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
 8005632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005638:	f7fa fe2a 	bl	8000290 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4613      	mov	r3, r2
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005644:	e058      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b38      	ldr	r3, [pc, #224]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	2200      	movs	r2, #0
 800564e:	4618      	mov	r0, r3
 8005650:	4611      	mov	r1, r2
 8005652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	2300      	movs	r3, #0
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	0159      	lsls	r1, r3, #5
 800566e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005672:	0150      	lsls	r0, r2, #5
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4641      	mov	r1, r8
 800567a:	ebb2 0a01 	subs.w	sl, r2, r1
 800567e:	4649      	mov	r1, r9
 8005680:	eb63 0b01 	sbc.w	fp, r3, r1
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005698:	ebb2 040a 	subs.w	r4, r2, sl
 800569c:	eb63 050b 	sbc.w	r5, r3, fp
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	00eb      	lsls	r3, r5, #3
 80056aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ae:	00e2      	lsls	r2, r4, #3
 80056b0:	4614      	mov	r4, r2
 80056b2:	461d      	mov	r5, r3
 80056b4:	4643      	mov	r3, r8
 80056b6:	18e3      	adds	r3, r4, r3
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	464b      	mov	r3, r9
 80056bc:	eb45 0303 	adc.w	r3, r5, r3
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ce:	4629      	mov	r1, r5
 80056d0:	028b      	lsls	r3, r1, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d8:	4621      	mov	r1, r4
 80056da:	028a      	lsls	r2, r1, #10
 80056dc:	4610      	mov	r0, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e2:	2200      	movs	r2, #0
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	61fa      	str	r2, [r7, #28]
 80056e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ec:	f7fa fdd0 	bl	8000290 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_GetSysClockFreq+0x200>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	3301      	adds	r3, #1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800570a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005712:	e002      	b.n	800571a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_RCC_GetSysClockFreq+0x204>)
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800571c:	4618      	mov	r0, r3
 800571e:	3750      	adds	r7, #80	; 0x50
 8005720:	46bd      	mov	sp, r7
 8005722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005726:	bf00      	nop
 8005728:	40023800 	.word	0x40023800
 800572c:	00f42400 	.word	0x00f42400

08005730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_RCC_GetHCLKFreq+0x14>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	200004d8 	.word	0x200004d8

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800574c:	f7ff fff0 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800ef70 	.word	0x0800ef70

08005770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	220f      	movs	r2, #15
 800577e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0203 	and.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_RCC_GetClockConfig+0x60>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0207 	and.w	r2, r3, #7
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40023c00 	.word	0x40023c00

080057d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e07b      	b.n	80058de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d108      	bne.n	8005800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f6:	d009      	beq.n	800580c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	61da      	str	r2, [r3, #28]
 80057fe:	e005      	b.n	800580c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fbe2 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	ea42 0103 	orr.w	r1, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	f003 0104 	and.w	r1, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0210 	and.w	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b088      	sub	sp, #32
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_SPI_Transmit+0x22>
 8005904:	2302      	movs	r3, #2
 8005906:	e126      	b.n	8005b56 <HAL_SPI_Transmit+0x270>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005910:	f7fc fda8 	bl	8002464 <HAL_GetTick>
 8005914:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d002      	beq.n	800592c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
    goto error;
 800592a:	e10b      	b.n	8005b44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_Transmit+0x52>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800593c:	e102      	b.n	8005b44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2203      	movs	r2, #3
 8005942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005984:	d10f      	bne.n	80059a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d007      	beq.n	80059c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059cc:	d14b      	bne.n	8005a66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_Transmit+0xf6>
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d13e      	bne.n	8005a5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	881a      	ldrh	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a00:	e02b      	b.n	8005a5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d112      	bne.n	8005a36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a34:	e011      	b.n	8005a5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a36:	f7fc fd15 	bl	8002464 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d803      	bhi.n	8005a4e <HAL_SPI_Transmit+0x168>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d102      	bne.n	8005a54 <HAL_SPI_Transmit+0x16e>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a58:	e074      	b.n	8005b44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1ce      	bne.n	8005a02 <HAL_SPI_Transmit+0x11c>
 8005a64:	e04c      	b.n	8005b00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_SPI_Transmit+0x18e>
 8005a6e:	8afb      	ldrh	r3, [r7, #22]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d140      	bne.n	8005af6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a9a:	e02c      	b.n	8005af6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d113      	bne.n	8005ad2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	330c      	adds	r3, #12
 8005ab4:	7812      	ldrb	r2, [r2, #0]
 8005ab6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad0:	e011      	b.n	8005af6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad2:	f7fc fcc7 	bl	8002464 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d803      	bhi.n	8005aea <HAL_SPI_Transmit+0x204>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_Transmit+0x20a>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005af4:	e026      	b.n	8005b44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1cd      	bne.n	8005a9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f8b3 	bl	8005c70 <SPI_EndRxTxTransaction>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e000      	b.n	8005b44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b70:	f7fc fc78 	bl	8002464 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b80:	f7fc fc70 	bl	8002464 <HAL_GetTick>
 8005b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	015b      	lsls	r3, r3, #5
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b96:	e054      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d050      	beq.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba0:	f7fc fc60 	bl	8002464 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d902      	bls.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13d      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bce:	d111      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d004      	beq.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d107      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfc:	d10f      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e017      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d19b      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200004d8 	.word	0x200004d8

08005c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <SPI_EndRxTxTransaction+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <SPI_EndRxTxTransaction+0x80>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0d5b      	lsrs	r3, r3, #21
 8005c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d112      	bne.n	8005cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff ff5a 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00f      	b.n	8005ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d0f2      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x52>
 8005cdc:	e000      	b.n	8005ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cde:	bf00      	nop
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200004d8 	.word	0x200004d8
 8005cf0:	165e9f81 	.word	0x165e9f81

08005cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e041      	b.n	8005d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc f9e6 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 fd3a 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d001      	beq.n	8005dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e03c      	b.n	8005e26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <HAL_TIM_Base_Start+0xa0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d013      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_TIM_Base_Start+0xa4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <HAL_TIM_Base_Start+0xa8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <HAL_TIM_Base_Start+0xac>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <HAL_TIM_Base_Start+0xb0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d111      	bne.n	8005e14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d010      	beq.n	8005e24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	e007      	b.n	8005e24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40014000 	.word	0x40014000

08005e48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <HAL_TIM_Base_Stop+0x38>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f240 4344 	movw	r3, #1092	; 0x444
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_Base_Stop+0x38>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e044      	b.n	8005f3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d013      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <HAL_TIM_Base_Start_IT+0xb4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <HAL_TIM_Base_Start_IT+0xb8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d111      	bne.n	8005f28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d010      	beq.n	8005f38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	e007      	b.n	8005f38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40014000 	.word	0x40014000

08005f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e041      	b.n	8005ff2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f839 	bl	8005ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f000 fc06 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <HAL_TIM_PWM_Start+0x24>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	bf14      	ite	ne
 800602c:	2301      	movne	r3, #1
 800602e:	2300      	moveq	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	e022      	b.n	800607a <HAL_TIM_PWM_Start+0x6a>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d109      	bne.n	800604e <HAL_TIM_PWM_Start+0x3e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e015      	b.n	800607a <HAL_TIM_PWM_Start+0x6a>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d109      	bne.n	8006068 <HAL_TIM_PWM_Start+0x58>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e008      	b.n	800607a <HAL_TIM_PWM_Start+0x6a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e068      	b.n	8006154 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <HAL_TIM_PWM_Start+0x82>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006090:	e013      	b.n	80060ba <HAL_TIM_PWM_Start+0xaa>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d104      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x92>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a0:	e00b      	b.n	80060ba <HAL_TIM_PWM_Start+0xaa>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d104      	bne.n	80060b2 <HAL_TIM_PWM_Start+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b0:	e003      	b.n	80060ba <HAL_TIM_PWM_Start+0xaa>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fe18 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <HAL_TIM_PWM_Start+0x14c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d107      	bne.n	80060e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	; (800615c <HAL_TIM_PWM_Start+0x14c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_TIM_PWM_Start+0x10e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f4:	d013      	beq.n	800611e <HAL_TIM_PWM_Start+0x10e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a19      	ldr	r2, [pc, #100]	; (8006160 <HAL_TIM_PWM_Start+0x150>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_TIM_PWM_Start+0x10e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a17      	ldr	r2, [pc, #92]	; (8006164 <HAL_TIM_PWM_Start+0x154>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_TIM_PWM_Start+0x10e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a16      	ldr	r2, [pc, #88]	; (8006168 <HAL_TIM_PWM_Start+0x158>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIM_PWM_Start+0x10e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <HAL_TIM_PWM_Start+0x15c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d111      	bne.n	8006142 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b06      	cmp	r3, #6
 800612e:	d010      	beq.n	8006152 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	e007      	b.n	8006152 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000

08006170 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fdb8 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a29      	ldr	r2, [pc, #164]	; (8006234 <HAL_TIM_PWM_Stop+0xc4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d117      	bne.n	80061c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	f241 1311 	movw	r3, #4369	; 0x1111
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <HAL_TIM_PWM_Stop+0x52>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	f240 4344 	movw	r3, #1092	; 0x444
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_TIM_PWM_Stop+0x52>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <HAL_TIM_PWM_Stop+0x82>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a1a      	ldr	r2, [r3, #32]
 80061d8:	f240 4344 	movw	r3, #1092	; 0x444
 80061dc:	4013      	ands	r3, r2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <HAL_TIM_PWM_Stop+0x82>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Stop+0x92>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006200:	e013      	b.n	800622a <HAL_TIM_PWM_Stop+0xba>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Stop+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	e00b      	b.n	800622a <HAL_TIM_PWM_Stop+0xba>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Stop+0xb2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006220:	e003      	b.n	800622a <HAL_TIM_PWM_Stop+0xba>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40010000 	.word	0x40010000

08006238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d122      	bne.n	8006294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d11b      	bne.n	8006294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0202 	mvn.w	r2, #2
 8006264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa77 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa69 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa7a 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d122      	bne.n	80062e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d11b      	bne.n	80062e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0204 	mvn.w	r2, #4
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa4d 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa3f 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa50 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d122      	bne.n	800633c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d11b      	bne.n	800633c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0208 	mvn.w	r2, #8
 800630c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2204      	movs	r2, #4
 8006312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa23 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 8006328:	e005      	b.n	8006336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa15 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa26 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b10      	cmp	r3, #16
 8006348:	d122      	bne.n	8006390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b10      	cmp	r3, #16
 8006356:	d11b      	bne.n	8006390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0210 	mvn.w	r2, #16
 8006360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2208      	movs	r2, #8
 8006366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9f9 	bl	800676e <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9eb 	bl	800675a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f9fc 	bl	8006782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10e      	bne.n	80063bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d107      	bne.n	80063bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0201 	mvn.w	r2, #1
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb fd8e 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b80      	cmp	r3, #128	; 0x80
 80063c8:	d10e      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d107      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fd26 	bl	8006e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d10e      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d107      	bne.n	8006414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800640c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9c1 	bl	8006796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d10e      	bne.n	8006440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d107      	bne.n	8006440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0220 	mvn.w	r2, #32
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fcf0 	bl	8006e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006462:	2302      	movs	r3, #2
 8006464:	e0ae      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b0c      	cmp	r3, #12
 8006472:	f200 809f 	bhi.w	80065b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006476:	a201      	add	r2, pc, #4	; (adr r2, 800647c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064b1 	.word	0x080064b1
 8006480:	080065b5 	.word	0x080065b5
 8006484:	080065b5 	.word	0x080065b5
 8006488:	080065b5 	.word	0x080065b5
 800648c:	080064f1 	.word	0x080064f1
 8006490:	080065b5 	.word	0x080065b5
 8006494:	080065b5 	.word	0x080065b5
 8006498:	080065b5 	.word	0x080065b5
 800649c:	08006533 	.word	0x08006533
 80064a0:	080065b5 	.word	0x080065b5
 80064a4:	080065b5 	.word	0x080065b5
 80064a8:	080065b5 	.word	0x080065b5
 80064ac:	08006573 	.word	0x08006573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f9f8 	bl	80068ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0208 	orr.w	r2, r2, #8
 80064ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0204 	bic.w	r2, r2, #4
 80064da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6999      	ldr	r1, [r3, #24]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	619a      	str	r2, [r3, #24]
      break;
 80064ee:	e064      	b.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fa3e 	bl	8006978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800650a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6999      	ldr	r1, [r3, #24]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	021a      	lsls	r2, r3, #8
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	619a      	str	r2, [r3, #24]
      break;
 8006530:	e043      	b.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fa89 	bl	8006a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0208 	orr.w	r2, r2, #8
 800654c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0204 	bic.w	r2, r2, #4
 800655c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69d9      	ldr	r1, [r3, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	61da      	str	r2, [r3, #28]
      break;
 8006570:	e023      	b.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fad3 	bl	8006b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800658c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	021a      	lsls	r2, r3, #8
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	61da      	str	r2, [r3, #28]
      break;
 80065b2:	e002      	b.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
      break;
 80065b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIM_ConfigClockSource+0x1c>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e0b4      	b.n	8006752 <HAL_TIM_ConfigClockSource+0x186>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006620:	d03e      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0xd4>
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	f200 8087 	bhi.w	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	f000 8086 	beq.w	800673e <HAL_TIM_ConfigClockSource+0x172>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d87f      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b70      	cmp	r3, #112	; 0x70
 800663a:	d01a      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0xa6>
 800663c:	2b70      	cmp	r3, #112	; 0x70
 800663e:	d87b      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b60      	cmp	r3, #96	; 0x60
 8006642:	d050      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0x11a>
 8006644:	2b60      	cmp	r3, #96	; 0x60
 8006646:	d877      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b50      	cmp	r3, #80	; 0x50
 800664a:	d03c      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xfa>
 800664c:	2b50      	cmp	r3, #80	; 0x50
 800664e:	d873      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	d058      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x13a>
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d86f      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b30      	cmp	r3, #48	; 0x30
 800665a:	d064      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x15a>
 800665c:	2b30      	cmp	r3, #48	; 0x30
 800665e:	d86b      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b20      	cmp	r3, #32
 8006662:	d060      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	2b20      	cmp	r3, #32
 8006666:	d867      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d05c      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b10      	cmp	r3, #16
 800666e:	d05a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x15a>
 8006670:	e062      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6899      	ldr	r1, [r3, #8]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f000 fb19 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	609a      	str	r2, [r3, #8]
      break;
 800669e:	e04f      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	6899      	ldr	r1, [r3, #8]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f000 fb02 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c2:	609a      	str	r2, [r3, #8]
      break;
 80066c4:	e03c      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6859      	ldr	r1, [r3, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f000 fa76 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2150      	movs	r1, #80	; 0x50
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 facf 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80066e4:	e02c      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 fa95 	bl	8006c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2160      	movs	r1, #96	; 0x60
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fabf 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006704:	e01c      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6859      	ldr	r1, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	461a      	mov	r2, r3
 8006714:	f000 fa56 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2140      	movs	r1, #64	; 0x40
 800671e:	4618      	mov	r0, r3
 8006720:	f000 faaf 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006724:	e00c      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f000 faa6 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 8006736:	e003      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e000      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800673e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a34      	ldr	r2, [pc, #208]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00f      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d00b      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a31      	ldr	r2, [pc, #196]	; (8006894 <TIM_Base_SetConfig+0xe8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a30      	ldr	r2, [pc, #192]	; (8006898 <TIM_Base_SetConfig+0xec>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2f      	ldr	r2, [pc, #188]	; (800689c <TIM_Base_SetConfig+0xf0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a25      	ldr	r2, [pc, #148]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01b      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006804:	d017      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a22      	ldr	r2, [pc, #136]	; (8006894 <TIM_Base_SetConfig+0xe8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <TIM_Base_SetConfig+0xec>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <TIM_Base_SetConfig+0xf0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <TIM_Base_SetConfig+0xf4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <TIM_Base_SetConfig+0xf8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <TIM_Base_SetConfig+0xfc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a08      	ldr	r2, [pc, #32]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d103      	bne.n	800687c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	615a      	str	r2, [r3, #20]
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f023 0302 	bic.w	r3, r3, #2
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <TIM_OC1_SetConfig+0xc8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d10c      	bne.n	8006922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0308 	bic.w	r3, r3, #8
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_OC1_SetConfig+0xc8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d111      	bne.n	800694e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f023 0210 	bic.w	r2, r3, #16
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0320 	bic.w	r3, r3, #32
 80069c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <TIM_OC2_SetConfig+0xd4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <TIM_OC2_SetConfig+0xd4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d113      	bne.n	8006a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000

08006a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <TIM_OC3_SetConfig+0xd0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10d      	bne.n	8006aca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_OC3_SetConfig+0xd0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d113      	bne.n	8006afa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40010000 	.word	0x40010000

08006b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	031b      	lsls	r3, r3, #12
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a10      	ldr	r2, [pc, #64]	; (8006bc0 <TIM_OC4_SetConfig+0x9c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 030a 	bic.w	r3, r3, #10
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f043 0307 	orr.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f003 031f 	and.w	r3, r3, #31
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e050      	b.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d018      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da8:	d013      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d10c      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40014000 	.word	0x40014000

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e48:	b084      	sub	sp, #16
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	f107 001c 	add.w	r0, r7, #28
 8006e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d122      	bne.n	8006ea6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d105      	bne.n	8006e9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fbee 	bl	800867c <USB_CoreReset>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e01a      	b.n	8006edc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fbe2 	bl	800867c <USB_CoreReset>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ece:	e005      	b.n	8006edc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10b      	bne.n	8006efa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f043 0206 	orr.w	r2, r3, #6
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f06:	b004      	add	sp, #16
 8006f08:	4770      	bx	lr
	...

08006f0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d165      	bne.n	8006fec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4a41      	ldr	r2, [pc, #260]	; (8007028 <USB_SetTurnaroundTime+0x11c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d906      	bls.n	8006f36 <USB_SetTurnaroundTime+0x2a>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a40      	ldr	r2, [pc, #256]	; (800702c <USB_SetTurnaroundTime+0x120>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d202      	bcs.n	8006f36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f30:	230f      	movs	r3, #15
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	e062      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4a3c      	ldr	r2, [pc, #240]	; (800702c <USB_SetTurnaroundTime+0x120>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d306      	bcc.n	8006f4c <USB_SetTurnaroundTime+0x40>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <USB_SetTurnaroundTime+0x124>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d202      	bcs.n	8006f4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f46:	230e      	movs	r3, #14
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e057      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a38      	ldr	r2, [pc, #224]	; (8007030 <USB_SetTurnaroundTime+0x124>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d306      	bcc.n	8006f62 <USB_SetTurnaroundTime+0x56>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a37      	ldr	r2, [pc, #220]	; (8007034 <USB_SetTurnaroundTime+0x128>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d202      	bcs.n	8006f62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f5c:	230d      	movs	r3, #13
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e04c      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a33      	ldr	r2, [pc, #204]	; (8007034 <USB_SetTurnaroundTime+0x128>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d306      	bcc.n	8006f78 <USB_SetTurnaroundTime+0x6c>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a32      	ldr	r2, [pc, #200]	; (8007038 <USB_SetTurnaroundTime+0x12c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d802      	bhi.n	8006f78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f72:	230c      	movs	r3, #12
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e041      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <USB_SetTurnaroundTime+0x12c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d906      	bls.n	8006f8e <USB_SetTurnaroundTime+0x82>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a2e      	ldr	r2, [pc, #184]	; (800703c <USB_SetTurnaroundTime+0x130>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d802      	bhi.n	8006f8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f88:	230b      	movs	r3, #11
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e036      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a2a      	ldr	r2, [pc, #168]	; (800703c <USB_SetTurnaroundTime+0x130>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d906      	bls.n	8006fa4 <USB_SetTurnaroundTime+0x98>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a29      	ldr	r2, [pc, #164]	; (8007040 <USB_SetTurnaroundTime+0x134>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d802      	bhi.n	8006fa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e02b      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <USB_SetTurnaroundTime+0x134>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d906      	bls.n	8006fba <USB_SetTurnaroundTime+0xae>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <USB_SetTurnaroundTime+0x138>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d202      	bcs.n	8006fba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fb4:	2309      	movs	r3, #9
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e020      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a21      	ldr	r2, [pc, #132]	; (8007044 <USB_SetTurnaroundTime+0x138>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d306      	bcc.n	8006fd0 <USB_SetTurnaroundTime+0xc4>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a20      	ldr	r2, [pc, #128]	; (8007048 <USB_SetTurnaroundTime+0x13c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d802      	bhi.n	8006fd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fca:	2308      	movs	r3, #8
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e015      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <USB_SetTurnaroundTime+0x13c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d906      	bls.n	8006fe6 <USB_SetTurnaroundTime+0xda>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a1c      	ldr	r2, [pc, #112]	; (800704c <USB_SetTurnaroundTime+0x140>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d202      	bcs.n	8006fe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fe0:	2307      	movs	r3, #7
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e00a      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fe6:	2306      	movs	r3, #6
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e007      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006ff2:	2309      	movs	r3, #9
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e001      	b.n	8006ffc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ff8:	2309      	movs	r3, #9
 8006ffa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	029b      	lsls	r3, r3, #10
 8007010:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007014:	431a      	orrs	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	00d8acbf 	.word	0x00d8acbf
 800702c:	00e4e1c0 	.word	0x00e4e1c0
 8007030:	00f42400 	.word	0x00f42400
 8007034:	01067380 	.word	0x01067380
 8007038:	011a499f 	.word	0x011a499f
 800703c:	01312cff 	.word	0x01312cff
 8007040:	014ca43f 	.word	0x014ca43f
 8007044:	016e3600 	.word	0x016e3600
 8007048:	01a6ab1f 	.word	0x01a6ab1f
 800704c:	01e84800 	.word	0x01e84800

08007050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f043 0201 	orr.w	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f023 0201 	bic.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d115      	bne.n	80070e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7fb f9da 	bl	800247c <HAL_Delay>
      ms++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fa45 	bl	800855e <USB_GetMode>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d01e      	beq.n	8007118 <USB_SetCurrentMode+0x84>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b31      	cmp	r3, #49	; 0x31
 80070de:	d9f0      	bls.n	80070c2 <USB_SetCurrentMode+0x2e>
 80070e0:	e01a      	b.n	8007118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d115      	bne.n	8007114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070f4:	2001      	movs	r0, #1
 80070f6:	f7fb f9c1 	bl	800247c <HAL_Delay>
      ms++;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fa2c 	bl	800855e <USB_GetMode>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <USB_SetCurrentMode+0x84>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b31      	cmp	r3, #49	; 0x31
 8007110:	d9f0      	bls.n	80070f4 <USB_SetCurrentMode+0x60>
 8007112:	e001      	b.n	8007118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e005      	b.n	8007124 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b32      	cmp	r3, #50	; 0x32
 800711c:	d101      	bne.n	8007122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800712c:	b084      	sub	sp, #16
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800713a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	e009      	b.n	8007160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	3340      	adds	r3, #64	; 0x40
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	2200      	movs	r2, #0
 8007158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b0e      	cmp	r3, #14
 8007164:	d9f2      	bls.n	800714c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11c      	bne.n	80071a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717a:	f043 0302 	orr.w	r3, r3, #2
 800717e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
 80071a4:	e00b      	b.n	80071be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c4:	461a      	mov	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	4619      	mov	r1, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d8:	461a      	mov	r2, r3
 80071da:	680b      	ldr	r3, [r1, #0]
 80071dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10c      	bne.n	80071fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f965 	bl	80074bc <USB_SetDevSpeed>
 80071f2:	e008      	b.n	8007206 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f960 	bl	80074bc <USB_SetDevSpeed>
 80071fc:	e003      	b.n	8007206 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071fe:	2103      	movs	r1, #3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f95b 	bl	80074bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007206:	2110      	movs	r1, #16
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f8f3 	bl	80073f4 <USB_FlushTxFifo>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f91f 	bl	800745c <USB_FlushRxFifo>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	461a      	mov	r2, r3
 8007230:	2300      	movs	r3, #0
 8007232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723a:	461a      	mov	r2, r3
 800723c:	2300      	movs	r3, #0
 800723e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	461a      	mov	r2, r3
 8007248:	2300      	movs	r3, #0
 800724a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	e043      	b.n	80072da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007268:	d118      	bne.n	800729c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727c:	461a      	mov	r2, r3
 800727e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	e013      	b.n	80072ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	461a      	mov	r2, r3
 8007294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	e008      	b.n	80072ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	461a      	mov	r2, r3
 80072aa:	2300      	movs	r3, #0
 80072ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	461a      	mov	r2, r3
 80072ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3301      	adds	r3, #1
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d3b7      	bcc.n	8007252 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	e043      	b.n	8007370 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072fe:	d118      	bne.n	8007332 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10a      	bne.n	800731c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	461a      	mov	r2, r3
 8007314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e013      	b.n	8007344 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	461a      	mov	r2, r3
 800732a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e008      	b.n	8007344 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	461a      	mov	r2, r3
 8007340:	2300      	movs	r3, #0
 8007342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007362:	461a      	mov	r2, r3
 8007364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3301      	adds	r3, #1
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3b7      	bcc.n	80072e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f043 0210 	orr.w	r2, r3, #16
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <USB_DevInit+0x2c4>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f043 0208 	orr.w	r2, r3, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d107      	bne.n	80073e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d8:	f043 0304 	orr.w	r3, r3, #4
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073ec:	b004      	add	sp, #16
 80073ee:	4770      	bx	lr
 80073f0:	803c3800 	.word	0x803c3800

080073f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4a13      	ldr	r2, [pc, #76]	; (8007458 <USB_FlushTxFifo+0x64>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e01b      	b.n	800744c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	daf2      	bge.n	8007402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	019b      	lsls	r3, r3, #6
 8007424:	f043 0220 	orr.w	r2, r3, #32
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a08      	ldr	r2, [pc, #32]	; (8007458 <USB_FlushTxFifo+0x64>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e006      	b.n	800744c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b20      	cmp	r3, #32
 8007448:	d0f0      	beq.n	800742c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	00030d40 	.word	0x00030d40

0800745c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <USB_FlushRxFifo+0x5c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d901      	bls.n	800747a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e018      	b.n	80074ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	daf2      	bge.n	8007468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2210      	movs	r2, #16
 800748a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <USB_FlushRxFifo+0x5c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e006      	b.n	80074ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	2b10      	cmp	r3, #16
 80074a8:	d0f0      	beq.n	800748c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	00030d40 	.word	0x00030d40

080074bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074dc:	4313      	orrs	r3, r2
 80074de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0306 	and.w	r3, r3, #6
 8007506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
 8007512:	e00a      	b.n	800752a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d002      	beq.n	8007520 <USB_GetDevSpeed+0x32>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d102      	bne.n	8007526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007520:	2302      	movs	r3, #2
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e001      	b.n	800752a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007526:	230f      	movs	r3, #15
 8007528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
}
 800752c:	4618      	mov	r0, r3
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d13a      	bne.n	80075ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	2101      	movs	r1, #1
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	b29b      	uxth	r3, r3
 800756c:	68f9      	ldr	r1, [r7, #12]
 800756e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007572:	4313      	orrs	r3, r2
 8007574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d155      	bne.n	8007638 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	791b      	ldrb	r3, [r3, #4]
 80075a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	059b      	lsls	r3, r3, #22
 80075ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075b0:	4313      	orrs	r3, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e036      	b.n	8007638 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 030f 	and.w	r3, r3, #15
 80075da:	2101      	movs	r1, #1
 80075dc:	fa01 f303 	lsl.w	r3, r1, r3
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11a      	bne.n	8007638 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	791b      	ldrb	r3, [r3, #4]
 800761c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800761e:	430b      	orrs	r3, r1
 8007620:	4313      	orrs	r3, r2
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007636:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d161      	bne.n	8007728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800767a:	d11f      	bne.n	80076bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800769a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	2101      	movs	r1, #1
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076dc:	4013      	ands	r3, r2
 80076de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	43db      	mvns	r3, r3
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007700:	4013      	ands	r3, r2
 8007702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	0159      	lsls	r1, r3, #5
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	440b      	add	r3, r1
 800771a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771e:	4619      	mov	r1, r3
 8007720:	4b35      	ldr	r3, [pc, #212]	; (80077f8 <USB_DeactivateEndpoint+0x1b0>)
 8007722:	4013      	ands	r3, r2
 8007724:	600b      	str	r3, [r1, #0]
 8007726:	e060      	b.n	80077ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800773a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773e:	d11f      	bne.n	8007780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800775e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800777e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	2101      	movs	r1, #1
 8007792:	fa01 f303 	lsl.w	r3, r1, r3
 8007796:	041b      	lsls	r3, r3, #16
 8007798:	43db      	mvns	r3, r3
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a0:	4013      	ands	r3, r2
 80077a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ba:	041b      	lsls	r3, r3, #16
 80077bc:	43db      	mvns	r3, r3
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c4:	4013      	ands	r3, r2
 80077c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	0159      	lsls	r1, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	440b      	add	r3, r1
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	4619      	mov	r1, r3
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <USB_DeactivateEndpoint+0x1b4>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	ec337800 	.word	0xec337800
 80077fc:	eff37800 	.word	0xeff37800

08007800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 815c 	bne.w	8007ada <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d132      	bne.n	8007890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800784c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	440a      	add	r2, r1
 8007864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800786c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007888:	0cdb      	lsrs	r3, r3, #19
 800788a:	04db      	lsls	r3, r3, #19
 800788c:	6113      	str	r3, [r2, #16]
 800788e:	e074      	b.n	800797a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078aa:	0cdb      	lsrs	r3, r3, #19
 80078ac:	04db      	lsls	r3, r3, #19
 80078ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6999      	ldr	r1, [r3, #24]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	440b      	add	r3, r1
 80078ec:	1e59      	subs	r1, r3, #1
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078f8:	4b9d      	ldr	r3, [pc, #628]	; (8007b70 <USB_EPStartXfer+0x370>)
 80078fa:	400b      	ands	r3, r1
 80078fc:	69b9      	ldr	r1, [r7, #24]
 80078fe:	0148      	lsls	r0, r1, #5
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	4401      	add	r1, r0
 8007904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007908:	4313      	orrs	r3, r2
 800790a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007922:	69b9      	ldr	r1, [r7, #24]
 8007924:	0148      	lsls	r0, r1, #5
 8007926:	69f9      	ldr	r1, [r7, #28]
 8007928:	4401      	add	r1, r0
 800792a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800792e:	4313      	orrs	r3, r2
 8007930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d11f      	bne.n	800797a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d14b      	bne.n	8007a18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	461a      	mov	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d128      	bne.n	80079f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d110      	bne.n	80079d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e00f      	b.n	80079f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	e133      	b.n	8007c80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	791b      	ldrb	r3, [r3, #4]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d015      	beq.n	8007a6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 811b 	beq.w	8007c80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a66:	4313      	orrs	r3, r2
 8007a68:	634b      	str	r3, [r1, #52]	; 0x34
 8007a6a:	e109      	b.n	8007c80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d110      	bne.n	8007a9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e00f      	b.n	8007abe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6919      	ldr	r1, [r3, #16]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	781a      	ldrb	r2, [r3, #0]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	b298      	uxth	r0, r3
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fade 	bl	8008094 <USB_WritePacket>
 8007ad8:	e0d2      	b.n	8007c80 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af4:	0cdb      	lsrs	r3, r3, #19
 8007af6:	04db      	lsls	r3, r3, #19
 8007af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d126      	bne.n	8007b74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	0148      	lsls	r0, r1, #5
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	4401      	add	r1, r0
 8007b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b6a:	6113      	str	r3, [r2, #16]
 8007b6c:	e03a      	b.n	8007be4 <USB_EPStartXfer+0x3e4>
 8007b6e:	bf00      	nop
 8007b70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	1e5a      	subs	r2, r3, #1
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b88:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	8afa      	ldrh	r2, [r7, #22]
 8007b90:	fb03 f202 	mul.w	r2, r3, r2
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	8afb      	ldrh	r3, [r7, #22]
 8007ba8:	04d9      	lsls	r1, r3, #19
 8007baa:	4b38      	ldr	r3, [pc, #224]	; (8007c8c <USB_EPStartXfer+0x48c>)
 8007bac:	400b      	ands	r3, r1
 8007bae:	69b9      	ldr	r1, [r7, #24]
 8007bb0:	0148      	lsls	r0, r1, #5
 8007bb2:	69f9      	ldr	r1, [r7, #28]
 8007bb4:	4401      	add	r1, r0
 8007bb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd4:	69b9      	ldr	r1, [r7, #24]
 8007bd6:	0148      	lsls	r0, r1, #5
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	4401      	add	r1, r0
 8007bdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007be0:	4313      	orrs	r3, r2
 8007be2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10d      	bne.n	8007c06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6919      	ldr	r1, [r3, #16]
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	460a      	mov	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	791b      	ldrb	r3, [r3, #4]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d128      	bne.n	8007c60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d110      	bne.n	8007c40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e00f      	b.n	8007c60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	1ff80000 	.word	0x1ff80000

08007c90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	f040 80ce 	bne.w	8007e4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d132      	bne.n	8007d20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d18:	0cdb      	lsrs	r3, r3, #19
 8007d1a:	04db      	lsls	r3, r3, #19
 8007d1c:	6113      	str	r3, [r2, #16]
 8007d1e:	e04e      	b.n	8007dbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	0cdb      	lsrs	r3, r3, #19
 8007d3c:	04db      	lsls	r3, r3, #19
 8007d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d903      	bls.n	8007d78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dae:	6939      	ldr	r1, [r7, #16]
 8007db0:	0148      	lsls	r0, r1, #5
 8007db2:	6979      	ldr	r1, [r7, #20]
 8007db4:	4401      	add	r1, r0
 8007db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d11e      	bne.n	8007e02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	0151      	lsls	r1, r2, #5
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	440a      	add	r2, r1
 8007df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e097      	b.n	8007f32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8083 	beq.w	8007f32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	634b      	str	r3, [r1, #52]	; 0x34
 8007e4c:	e071      	b.n	8007f32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	0cdb      	lsrs	r3, r3, #19
 8007e6a:	04db      	lsls	r3, r3, #19
 8007e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee0:	6939      	ldr	r1, [r7, #16]
 8007ee2:	0148      	lsls	r0, r1, #5
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eec:	4313      	orrs	r3, r2
 8007eee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d10d      	bne.n	8007f12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6919      	ldr	r1, [r3, #16]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0e:	460a      	mov	r2, r1
 8007f10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d14a      	bne.n	8007ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f76:	f040 8086 	bne.w	8008086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	7812      	ldrb	r2, [r2, #0]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d902      	bls.n	8007fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e056      	b.n	8008086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff0:	d0e7      	beq.n	8007fc2 <USB_EPStopXfer+0x82>
 8007ff2:	e048      	b.n	8008086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800800c:	d13b      	bne.n	8008086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	7812      	ldrb	r2, [r2, #0]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	7812      	ldrb	r2, [r2, #0]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008062:	4293      	cmp	r3, r2
 8008064:	d902      	bls.n	800806c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e00c      	b.n	8008086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008084:	d0e7      	beq.n	8008056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008094:	b480      	push	{r7}
 8008096:	b089      	sub	sp, #36	; 0x24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	71fb      	strb	r3, [r7, #7]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d123      	bne.n	8008102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080ba:	88bb      	ldrh	r3, [r7, #4]
 80080bc:	3303      	adds	r3, #3
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e018      	b.n	80080fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	031a      	lsls	r2, r3, #12
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d4:	461a      	mov	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3301      	adds	r3, #1
 80080e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	3301      	adds	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	3301      	adds	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3e2      	bcc.n	80080c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3724      	adds	r7, #36	; 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008110:	b480      	push	{r7}
 8008112:	b08b      	sub	sp, #44	; 0x2c
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	089b      	lsrs	r3, r3, #2
 800812a:	b29b      	uxth	r3, r3
 800812c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
 800813a:	e014      	b.n	8008166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	601a      	str	r2, [r3, #0]
    pDest++;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	3301      	adds	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	3301      	adds	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	3301      	adds	r3, #1
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	3301      	adds	r3, #1
 8008164:	623b      	str	r3, [r7, #32]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3e6      	bcc.n	800813c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800816e:	8bfb      	ldrh	r3, [r7, #30]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01e      	beq.n	80081b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	461a      	mov	r2, r3
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	701a      	strb	r2, [r3, #0]
      i++;
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	3301      	adds	r3, #1
 800819e:	623b      	str	r3, [r7, #32]
      pDest++;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	3301      	adds	r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081a6:	8bfb      	ldrh	r3, [r7, #30]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081ac:	8bfb      	ldrh	r3, [r7, #30]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1ea      	bne.n	8008188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	372c      	adds	r7, #44	; 0x2c
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d12c      	bne.n	8008236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db12      	blt.n	8008214 <USB_EPSetStall+0x54>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00f      	beq.n	8008214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e02b      	b.n	800828e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	db12      	blt.n	800826e <USB_EPSetStall+0xae>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00f      	beq.n	800826e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800826c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800828c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d128      	bne.n	800830a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	791b      	ldrb	r3, [r3, #4]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d003      	beq.n	80082e8 <USB_EPClearStall+0x4c>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	791b      	ldrb	r3, [r3, #4]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d138      	bne.n	800835a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e027      	b.n	800835a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	2b03      	cmp	r3, #3
 8008330:	d003      	beq.n	800833a <USB_EPClearStall+0x9e>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	791b      	ldrb	r3, [r3, #4]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d10f      	bne.n	800835a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	0151      	lsls	r1, r2, #5
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	440a      	add	r2, r1
 8008350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800838a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800839c:	68f9      	ldr	r1, [r7, #12]
 800839e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a2:	4313      	orrs	r3, r2
 80083a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083ce:	f023 0303 	bic.w	r3, r3, #3
 80083d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083e2:	f023 0302 	bic.w	r3, r3, #2
 80083e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4013      	ands	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	4013      	ands	r3, r2
 8008480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	0c1b      	lsrs	r3, r3, #16
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	4013      	ands	r3, r2
 80084b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	b29b      	uxth	r3, r3
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4013      	ands	r3, r2
 80084f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084f4:	68bb      	ldr	r3, [r7, #8]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	01db      	lsls	r3, r3, #7
 8008534:	b2db      	uxtb	r3, r3
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	4313      	orrs	r3, r2
 800853a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4013      	ands	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008550:	68bb      	ldr	r3, [r7, #8]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	f003 0301 	and.w	r3, r3, #1
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008594:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008598:	f023 0307 	bic.w	r3, r3, #7
 800859c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	460b      	mov	r3, r1
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	333c      	adds	r3, #60	; 0x3c
 80085d6:	3304      	adds	r3, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	4a26      	ldr	r2, [pc, #152]	; (8008678 <USB_EP0_OutStart+0xb8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d90a      	bls.n	80085fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f4:	d101      	bne.n	80085fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	e037      	b.n	800866a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	461a      	mov	r2, r3
 8008602:	2300      	movs	r3, #0
 8008604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008628:	f043 0318 	orr.w	r3, r3, #24
 800862c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d10f      	bne.n	8008668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008662:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	4f54300a 	.word	0x4f54300a

0800867c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4a13      	ldr	r2, [pc, #76]	; (80086e0 <USB_CoreReset+0x64>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e01b      	b.n	80086d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	daf2      	bge.n	8008688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f043 0201 	orr.w	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4a09      	ldr	r2, [pc, #36]	; (80086e0 <USB_CoreReset+0x64>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d901      	bls.n	80086c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e006      	b.n	80086d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d0f0      	beq.n	80086b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	00030d40 	.word	0x00030d40

080086e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086f4:	f005 fbd6 	bl	800dea4 <USBD_static_malloc>
 80086f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d109      	bne.n	8008714 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32b0      	adds	r2, #176	; 0xb0
 800870a:	2100      	movs	r1, #0
 800870c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008710:	2302      	movs	r3, #2
 8008712:	e0d4      	b.n	80088be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008714:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008718:	2100      	movs	r1, #0
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f005 fc46 	bl	800dfac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	32b0      	adds	r2, #176	; 0xb0
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32b0      	adds	r2, #176	; 0xb0
 800873a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7c1b      	ldrb	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d138      	bne.n	80087be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800874c:	4b5e      	ldr	r3, [pc, #376]	; (80088c8 <USBD_CDC_Init+0x1e4>)
 800874e:	7819      	ldrb	r1, [r3, #0]
 8008750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008754:	2202      	movs	r2, #2
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f005 fa81 	bl	800dc5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800875c:	4b5a      	ldr	r3, [pc, #360]	; (80088c8 <USBD_CDC_Init+0x1e4>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	2201      	movs	r2, #1
 8008774:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008776:	4b55      	ldr	r3, [pc, #340]	; (80088cc <USBD_CDC_Init+0x1e8>)
 8008778:	7819      	ldrb	r1, [r3, #0]
 800877a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877e:	2202      	movs	r2, #2
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f005 fa6c 	bl	800dc5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008786:	4b51      	ldr	r3, [pc, #324]	; (80088cc <USBD_CDC_Init+0x1e8>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800879e:	2201      	movs	r2, #1
 80087a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087a2:	4b4b      	ldr	r3, [pc, #300]	; (80088d0 <USBD_CDC_Init+0x1ec>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	f003 020f 	and.w	r2, r3, #15
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	3326      	adds	r3, #38	; 0x26
 80087b8:	2210      	movs	r2, #16
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e035      	b.n	800882a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087be:	4b42      	ldr	r3, [pc, #264]	; (80088c8 <USBD_CDC_Init+0x1e4>)
 80087c0:	7819      	ldrb	r1, [r3, #0]
 80087c2:	2340      	movs	r3, #64	; 0x40
 80087c4:	2202      	movs	r2, #2
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f005 fa49 	bl	800dc5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087cc:	4b3e      	ldr	r3, [pc, #248]	; (80088c8 <USBD_CDC_Init+0x1e4>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3324      	adds	r3, #36	; 0x24
 80087e2:	2201      	movs	r2, #1
 80087e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <USBD_CDC_Init+0x1e8>)
 80087e8:	7819      	ldrb	r1, [r3, #0]
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	2202      	movs	r2, #2
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f005 fa35 	bl	800dc5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087f4:	4b35      	ldr	r3, [pc, #212]	; (80088cc <USBD_CDC_Init+0x1e8>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 020f 	and.w	r2, r3, #15
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800880c:	2201      	movs	r2, #1
 800880e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008810:	4b2f      	ldr	r3, [pc, #188]	; (80088d0 <USBD_CDC_Init+0x1ec>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f003 020f 	and.w	r2, r3, #15
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	3326      	adds	r3, #38	; 0x26
 8008826:	2210      	movs	r2, #16
 8008828:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800882a:	4b29      	ldr	r3, [pc, #164]	; (80088d0 <USBD_CDC_Init+0x1ec>)
 800882c:	7819      	ldrb	r1, [r3, #0]
 800882e:	2308      	movs	r3, #8
 8008830:	2203      	movs	r2, #3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f005 fa13 	bl	800dc5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <USBD_CDC_Init+0x1ec>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	2201      	movs	r2, #1
 8008850:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	33b0      	adds	r3, #176	; 0xb0
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008888:	2302      	movs	r3, #2
 800888a:	e018      	b.n	80088be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	7c1b      	ldrb	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <USBD_CDC_Init+0x1e8>)
 8008896:	7819      	ldrb	r1, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800889e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f005 faca 	bl	800de3c <USBD_LL_PrepareReceive>
 80088a8:	e008      	b.n	80088bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088aa:	4b08      	ldr	r3, [pc, #32]	; (80088cc <USBD_CDC_Init+0x1e8>)
 80088ac:	7819      	ldrb	r1, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088b4:	2340      	movs	r3, #64	; 0x40
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f005 fac0 	bl	800de3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000056b 	.word	0x2000056b
 80088cc:	2000056c 	.word	0x2000056c
 80088d0:	2000056d 	.word	0x2000056d

080088d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80088e0:	4b3a      	ldr	r3, [pc, #232]	; (80089cc <USBD_CDC_DeInit+0xf8>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f005 f9df 	bl	800dcaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80088ec:	4b37      	ldr	r3, [pc, #220]	; (80089cc <USBD_CDC_DeInit+0xf8>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 020f 	and.w	r2, r3, #15
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	3324      	adds	r3, #36	; 0x24
 8008902:	2200      	movs	r2, #0
 8008904:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008906:	4b32      	ldr	r3, [pc, #200]	; (80089d0 <USBD_CDC_DeInit+0xfc>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f005 f9cc 	bl	800dcaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008912:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <USBD_CDC_DeInit+0xfc>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800892a:	2200      	movs	r2, #0
 800892c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800892e:	4b29      	ldr	r3, [pc, #164]	; (80089d4 <USBD_CDC_DeInit+0x100>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f005 f9b8 	bl	800dcaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800893a:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <USBD_CDC_DeInit+0x100>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f003 020f 	and.w	r2, r3, #15
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	3324      	adds	r3, #36	; 0x24
 8008950:	2200      	movs	r2, #0
 8008952:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008954:	4b1f      	ldr	r3, [pc, #124]	; (80089d4 <USBD_CDC_DeInit+0x100>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	3326      	adds	r3, #38	; 0x26
 800896a:	2200      	movs	r2, #0
 800896c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32b0      	adds	r2, #176	; 0xb0
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01f      	beq.n	80089c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	33b0      	adds	r3, #176	; 0xb0
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	32b0      	adds	r2, #176	; 0xb0
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f005 fa8c 	bl	800dec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	32b0      	adds	r2, #176	; 0xb0
 80089b2:	2100      	movs	r1, #0
 80089b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	2000056b 	.word	0x2000056b
 80089d0:	2000056c 	.word	0x2000056c
 80089d4:	2000056d 	.word	0x2000056d

080089d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32b0      	adds	r2, #176	; 0xb0
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e0bf      	b.n	8008b88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d050      	beq.n	8008ab6 <USBD_CDC_Setup+0xde>
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	f040 80af 	bne.w	8008b78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d03a      	beq.n	8008a98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da1b      	bge.n	8008a64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	33b0      	adds	r3, #176	; 0xb0
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	88d2      	ldrh	r2, [r2, #6]
 8008a48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88db      	ldrh	r3, [r3, #6]
 8008a4e:	2b07      	cmp	r3, #7
 8008a50:	bf28      	it	cs
 8008a52:	2307      	movcs	r3, #7
 8008a54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	89fa      	ldrh	r2, [r7, #14]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fd89 	bl	800a574 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a62:	e090      	b.n	8008b86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	785a      	ldrb	r2, [r3, #1]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88db      	ldrh	r3, [r3, #6]
 8008a72:	2b3f      	cmp	r3, #63	; 0x3f
 8008a74:	d803      	bhi.n	8008a7e <USBD_CDC_Setup+0xa6>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	e000      	b.n	8008a80 <USBD_CDC_Setup+0xa8>
 8008a7e:	2240      	movs	r2, #64	; 0x40
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a86:	6939      	ldr	r1, [r7, #16]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fd9b 	bl	800a5cc <USBD_CtlPrepareRx>
      break;
 8008a96:	e076      	b.n	8008b86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	33b0      	adds	r3, #176	; 0xb0
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	7850      	ldrb	r0, [r2, #1]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4798      	blx	r3
      break;
 8008ab4:	e067      	b.n	8008b86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b0b      	cmp	r3, #11
 8008abc:	d851      	bhi.n	8008b62 <USBD_CDC_Setup+0x18a>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <USBD_CDC_Setup+0xec>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008b63 	.word	0x08008b63
 8008ad0:	08008b63 	.word	0x08008b63
 8008ad4:	08008b63 	.word	0x08008b63
 8008ad8:	08008b63 	.word	0x08008b63
 8008adc:	08008b63 	.word	0x08008b63
 8008ae0:	08008b63 	.word	0x08008b63
 8008ae4:	08008b63 	.word	0x08008b63
 8008ae8:	08008b63 	.word	0x08008b63
 8008aec:	08008b1f 	.word	0x08008b1f
 8008af0:	08008b49 	.word	0x08008b49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d107      	bne.n	8008b10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b00:	f107 030a 	add.w	r3, r7, #10
 8008b04:	2202      	movs	r2, #2
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fd33 	bl	800a574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b0e:	e032      	b.n	8008b76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fcbd 	bl	800a492 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b1c:	e02b      	b.n	8008b76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d107      	bne.n	8008b3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b2a:	f107 030d 	add.w	r3, r7, #13
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fd1e 	bl	800a574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b38:	e01d      	b.n	8008b76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fca8 	bl	800a492 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	75fb      	strb	r3, [r7, #23]
          break;
 8008b46:	e016      	b.n	8008b76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d00f      	beq.n	8008b74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 fc9b 	bl	800a492 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b60:	e008      	b.n	8008b74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 fc94 	bl	800a492 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6e:	e002      	b.n	8008b76 <USBD_CDC_Setup+0x19e>
          break;
 8008b70:	bf00      	nop
 8008b72:	e008      	b.n	8008b86 <USBD_CDC_Setup+0x1ae>
          break;
 8008b74:	bf00      	nop
      }
      break;
 8008b76:	e006      	b.n	8008b86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 fc89 	bl	800a492 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	75fb      	strb	r3, [r7, #23]
      break;
 8008b84:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	; 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e065      	b.n	8008c86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	32b0      	adds	r2, #176	; 0xb0
 8008bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	f003 020f 	and.w	r2, r3, #15
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	3318      	adds	r3, #24
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d02f      	beq.n	8008c44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	f003 010f 	and.w	r1, r3, #15
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	460b      	mov	r3, r1
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	440b      	add	r3, r1
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4403      	add	r3, r0
 8008c0c:	3348      	adds	r3, #72	; 0x48
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d112      	bne.n	8008c44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3318      	adds	r3, #24
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c36:	78f9      	ldrb	r1, [r7, #3]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f005 f8dc 	bl	800ddfa <USBD_LL_Transmit>
 8008c42:	e01f      	b.n	8008c84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	33b0      	adds	r3, #176	; 0xb0
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d010      	beq.n	8008c84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	33b0      	adds	r3, #176	; 0xb0
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c80:	78fa      	ldrb	r2, [r7, #3]
 8008c82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	32b0      	adds	r2, #176	; 0xb0
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	32b0      	adds	r2, #176	; 0xb0
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e01a      	b.n	8008cf6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f005 f8da 	bl	800de7e <USBD_LL_GetRxDataSize>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	33b0      	adds	r3, #176	; 0xb0
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32b0      	adds	r2, #176	; 0xb0
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e025      	b.n	8008d6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	33b0      	adds	r3, #176	; 0xb0
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <USBD_CDC_EP0_RxReady+0x6c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d3a:	2bff      	cmp	r3, #255	; 0xff
 8008d3c:	d015      	beq.n	8008d6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	33b0      	adds	r3, #176	; 0xb0
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	22ff      	movs	r2, #255	; 0xff
 8008d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d7c:	2182      	movs	r1, #130	; 0x82
 8008d7e:	4818      	ldr	r0, [pc, #96]	; (8008de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d80:	f000 fd4f 	bl	8009822 <USBD_GetEpDesc>
 8008d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d86:	2101      	movs	r1, #1
 8008d88:	4815      	ldr	r0, [pc, #84]	; (8008de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d8a:	f000 fd4a 	bl	8009822 <USBD_GetEpDesc>
 8008d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d90:	2181      	movs	r1, #129	; 0x81
 8008d92:	4813      	ldr	r0, [pc, #76]	; (8008de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d94:	f000 fd45 	bl	8009822 <USBD_GetEpDesc>
 8008d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2210      	movs	r2, #16
 8008da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d006      	beq.n	8008dba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db4:	711a      	strb	r2, [r3, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dc8:	711a      	strb	r2, [r3, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2243      	movs	r2, #67	; 0x43
 8008dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000528 	.word	0x20000528

08008de4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008dec:	2182      	movs	r1, #130	; 0x82
 8008dee:	4818      	ldr	r0, [pc, #96]	; (8008e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008df0:	f000 fd17 	bl	8009822 <USBD_GetEpDesc>
 8008df4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008df6:	2101      	movs	r1, #1
 8008df8:	4815      	ldr	r0, [pc, #84]	; (8008e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dfa:	f000 fd12 	bl	8009822 <USBD_GetEpDesc>
 8008dfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e00:	2181      	movs	r1, #129	; 0x81
 8008e02:	4813      	ldr	r0, [pc, #76]	; (8008e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e04:	f000 fd0d 	bl	8009822 <USBD_GetEpDesc>
 8008e08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2210      	movs	r2, #16
 8008e14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d006      	beq.n	8008e2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	711a      	strb	r2, [r3, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f042 0202 	orr.w	r2, r2, #2
 8008e28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	711a      	strb	r2, [r3, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f042 0202 	orr.w	r2, r2, #2
 8008e3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2243      	movs	r2, #67	; 0x43
 8008e42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000528 	.word	0x20000528

08008e54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e5c:	2182      	movs	r1, #130	; 0x82
 8008e5e:	4818      	ldr	r0, [pc, #96]	; (8008ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e60:	f000 fcdf 	bl	8009822 <USBD_GetEpDesc>
 8008e64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e66:	2101      	movs	r1, #1
 8008e68:	4815      	ldr	r0, [pc, #84]	; (8008ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e6a:	f000 fcda 	bl	8009822 <USBD_GetEpDesc>
 8008e6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e70:	2181      	movs	r1, #129	; 0x81
 8008e72:	4813      	ldr	r0, [pc, #76]	; (8008ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e74:	f000 fcd5 	bl	8009822 <USBD_GetEpDesc>
 8008e78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2210      	movs	r2, #16
 8008e84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d006      	beq.n	8008e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e94:	711a      	strb	r2, [r3, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d006      	beq.n	8008eae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea8:	711a      	strb	r2, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2243      	movs	r2, #67	; 0x43
 8008eb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000528 	.word	0x20000528

08008ec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	220a      	movs	r2, #10
 8008ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ed2:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	200004e4 	.word	0x200004e4

08008ee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e009      	b.n	8008f0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	33b0      	adds	r3, #176	; 0xb0
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	32b0      	adds	r2, #176	; 0xb0
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e008      	b.n	8008f50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	32b0      	adds	r2, #176	; 0xb0
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e004      	b.n	8008f8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32b0      	adds	r2, #176	; 0xb0
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32b0      	adds	r2, #176	; 0xb0
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e025      	b.n	8009016 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d11f      	bne.n	8009014 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008fdc:	4b10      	ldr	r3, [pc, #64]	; (8009020 <USBD_CDC_TransmitPacket+0x88>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 020f 	and.w	r2, r3, #15
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4403      	add	r3, r0
 8008ff6:	3318      	adds	r3, #24
 8008ff8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <USBD_CDC_TransmitPacket+0x88>)
 8008ffc:	7819      	ldrb	r1, [r3, #0]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f004 fef5 	bl	800ddfa <USBD_LL_Transmit>

    ret = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	2000056b 	.word	0x2000056b

08009024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	32b0      	adds	r2, #176	; 0xb0
 8009036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32b0      	adds	r2, #176	; 0xb0
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	e018      	b.n	8009084 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7c1b      	ldrb	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <USBD_CDC_ReceivePacket+0x68>)
 800905c:	7819      	ldrb	r1, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f004 fee7 	bl	800de3c <USBD_LL_PrepareReceive>
 800906e:	e008      	b.n	8009082 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009070:	4b06      	ldr	r3, [pc, #24]	; (800908c <USBD_CDC_ReceivePacket+0x68>)
 8009072:	7819      	ldrb	r1, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f004 fedd 	bl	800de3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	2000056c 	.word	0x2000056c

08009090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e01f      	b.n	80090e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	79fa      	ldrb	r2, [r7, #7]
 80090da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f004 fd57 	bl	800db90 <USBD_LL_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	e025      	b.n	8009154 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32ae      	adds	r2, #174	; 0xae
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00f      	beq.n	8009144 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	32ae      	adds	r2, #174	; 0xae
 800912e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	f107 020e 	add.w	r2, r7, #14
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
 800913c:	4602      	mov	r2, r0
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f004 fd5f 	bl	800dc28 <USBD_LL_Start>
 800916a:	4603      	mov	r3, r0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d009      	beq.n	80091b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	4611      	mov	r1, r2
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f001 f908 	bl	800a41e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	2b02      	cmp	r3, #2
 8009230:	d01a      	beq.n	8009268 <USBD_LL_SetupStage+0x72>
 8009232:	2b02      	cmp	r3, #2
 8009234:	d822      	bhi.n	800927c <USBD_LL_SetupStage+0x86>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <USBD_LL_SetupStage+0x4a>
 800923a:	2b01      	cmp	r3, #1
 800923c:	d00a      	beq.n	8009254 <USBD_LL_SetupStage+0x5e>
 800923e:	e01d      	b.n	800927c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fb5f 	bl	800990c <USBD_StdDevReq>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]
      break;
 8009252:	e020      	b.n	8009296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fbc7 	bl	80099f0 <USBD_StdItfReq>
 8009262:	4603      	mov	r3, r0
 8009264:	73fb      	strb	r3, [r7, #15]
      break;
 8009266:	e016      	b.n	8009296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc29 	bl	8009ac8 <USBD_StdEPReq>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
      break;
 800927a:	e00c      	b.n	8009296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f004 fd2c 	bl	800dce8 <USBD_LL_StallEP>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	bf00      	nop
  }

  return ret;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	460b      	mov	r3, r1
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d16e      	bne.n	8009396 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80092be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	f040 8098 	bne.w	80093fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d913      	bls.n	8009300 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	1ad2      	subs	r2, r2, r3
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	4293      	cmp	r3, r2
 80092f0:	bf28      	it	cs
 80092f2:	4613      	movcs	r3, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f001 f984 	bl	800a606 <USBD_CtlContinueRx>
 80092fe:	e07d      	b.n	80093fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2b02      	cmp	r3, #2
 800930c:	d014      	beq.n	8009338 <USBD_LL_DataOutStage+0x98>
 800930e:	2b02      	cmp	r3, #2
 8009310:	d81d      	bhi.n	800934e <USBD_LL_DataOutStage+0xae>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <USBD_LL_DataOutStage+0x7c>
 8009316:	2b01      	cmp	r3, #1
 8009318:	d003      	beq.n	8009322 <USBD_LL_DataOutStage+0x82>
 800931a:	e018      	b.n	800934e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	75bb      	strb	r3, [r7, #22]
            break;
 8009320:	e018      	b.n	8009354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fa5e 	bl	80097ee <USBD_CoreFindIF>
 8009332:	4603      	mov	r3, r0
 8009334:	75bb      	strb	r3, [r7, #22]
            break;
 8009336:	e00d      	b.n	8009354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800933e:	b2db      	uxtb	r3, r3
 8009340:	4619      	mov	r1, r3
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 fa60 	bl	8009808 <USBD_CoreFindEP>
 8009348:	4603      	mov	r3, r0
 800934a:	75bb      	strb	r3, [r7, #22]
            break;
 800934c:	e002      	b.n	8009354 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	75bb      	strb	r3, [r7, #22]
            break;
 8009352:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009354:	7dbb      	ldrb	r3, [r7, #22]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d119      	bne.n	800938e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b03      	cmp	r3, #3
 8009364:	d113      	bne.n	800938e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009366:	7dba      	ldrb	r2, [r7, #22]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	32ae      	adds	r2, #174	; 0xae
 800936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00b      	beq.n	800938e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009376:	7dba      	ldrb	r2, [r7, #22]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800937e:	7dba      	ldrb	r2, [r7, #22]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	32ae      	adds	r2, #174	; 0xae
 8009384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f001 f94a 	bl	800a628 <USBD_CtlSendStatus>
 8009394:	e032      	b.n	80093fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fa31 	bl	8009808 <USBD_CoreFindEP>
 80093a6:	4603      	mov	r3, r0
 80093a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093aa:	7dbb      	ldrb	r3, [r7, #22]
 80093ac:	2bff      	cmp	r3, #255	; 0xff
 80093ae:	d025      	beq.n	80093fc <USBD_LL_DataOutStage+0x15c>
 80093b0:	7dbb      	ldrb	r3, [r7, #22]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d122      	bne.n	80093fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d117      	bne.n	80093f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093c2:	7dba      	ldrb	r2, [r7, #22]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	32ae      	adds	r2, #174	; 0xae
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093d2:	7dba      	ldrb	r2, [r7, #22]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093da:	7dba      	ldrb	r2, [r7, #22]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	32ae      	adds	r2, #174	; 0xae
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	7afa      	ldrb	r2, [r7, #11]
 80093e8:	4611      	mov	r1, r2
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	4798      	blx	r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	e000      	b.n	80093fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	460b      	mov	r3, r1
 8009410:	607a      	str	r2, [r7, #4]
 8009412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d16f      	bne.n	80094fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3314      	adds	r3, #20
 800941e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009426:	2b02      	cmp	r3, #2
 8009428:	d15a      	bne.n	80094e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	429a      	cmp	r2, r3
 8009434:	d914      	bls.n	8009460 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	461a      	mov	r2, r3
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 f8ac 	bl	800a5aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009452:	2300      	movs	r3, #0
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f004 fcef 	bl	800de3c <USBD_LL_PrepareReceive>
 800945e:	e03f      	b.n	80094e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d11c      	bne.n	80094a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009474:	429a      	cmp	r2, r3
 8009476:	d316      	bcc.n	80094a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009482:	429a      	cmp	r2, r3
 8009484:	d20f      	bcs.n	80094a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f001 f88d 	bl	800a5aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009498:	2300      	movs	r3, #0
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f004 fccc 	bl	800de3c <USBD_LL_PrepareReceive>
 80094a4:	e01c      	b.n	80094e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d10f      	bne.n	80094d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094d2:	2180      	movs	r1, #128	; 0x80
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f004 fc07 	bl	800dce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f001 f8b7 	bl	800a64e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d03a      	beq.n	8009560 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fe42 	bl	8009174 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094f8:	e032      	b.n	8009560 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f97f 	bl	8009808 <USBD_CoreFindEP>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2bff      	cmp	r3, #255	; 0xff
 8009512:	d025      	beq.n	8009560 <USBD_LL_DataInStage+0x15a>
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d122      	bne.n	8009560 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d11c      	bne.n	8009560 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009526:	7dfa      	ldrb	r2, [r7, #23]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	32ae      	adds	r2, #174	; 0xae
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d014      	beq.n	8009560 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009536:	7dfa      	ldrb	r2, [r7, #23]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800953e:	7dfa      	ldrb	r2, [r7, #23]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	32ae      	adds	r2, #174	; 0xae
 8009544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	7afa      	ldrb	r2, [r7, #11]
 800954c:	4611      	mov	r1, r2
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	4798      	blx	r3
 8009552:	4603      	mov	r3, r0
 8009554:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009556:	7dbb      	ldrb	r3, [r7, #22]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800955c:	7dbb      	ldrb	r3, [r7, #22]
 800955e:	e000      	b.n	8009562 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d014      	beq.n	80095d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00e      	beq.n	80095d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6852      	ldr	r2, [r2, #4]
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	4611      	mov	r1, r2
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095d0:	2340      	movs	r3, #64	; 0x40
 80095d2:	2200      	movs	r2, #0
 80095d4:	2100      	movs	r1, #0
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f004 fb41 	bl	800dc5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2240      	movs	r2, #64	; 0x40
 80095e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ec:	2340      	movs	r3, #64	; 0x40
 80095ee:	2200      	movs	r2, #0
 80095f0:	2180      	movs	r1, #128	; 0x80
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f004 fb33 	bl	800dc5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2240      	movs	r2, #64	; 0x40
 8009602:	621a      	str	r2, [r3, #32]

  return ret;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963c:	b2da      	uxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2204      	movs	r2, #4
 8009648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b04      	cmp	r3, #4
 800966c:	d106      	bne.n	800967c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009674:	b2da      	uxtb	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d110      	bne.n	80096c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d005      	beq.n	80096c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	32ae      	adds	r2, #174	; 0xae
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e01c      	b.n	8009726 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d115      	bne.n	8009724 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	32ae      	adds	r2, #174	; 0xae
 8009702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32ae      	adds	r2, #174	; 0xae
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	4611      	mov	r1, r2
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	32ae      	adds	r2, #174	; 0xae
 8009744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	e01c      	b.n	800978a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b03      	cmp	r3, #3
 800975a:	d115      	bne.n	8009788 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	32ae      	adds	r2, #174	; 0xae
 8009766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	32ae      	adds	r2, #174	; 0xae
 800977a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	4611      	mov	r1, r2
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00e      	beq.n	80097e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6852      	ldr	r2, [r2, #4]
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	4611      	mov	r1, r2
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009814:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b086      	sub	sp, #24
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	885b      	ldrh	r3, [r3, #2]
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	429a      	cmp	r2, r3
 8009848:	d920      	bls.n	800988c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009852:	e013      	b.n	800987c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009854:	f107 030a 	add.w	r3, r7, #10
 8009858:	4619      	mov	r1, r3
 800985a:	6978      	ldr	r0, [r7, #20]
 800985c:	f000 f81b 	bl	8009896 <USBD_GetNextDesc>
 8009860:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b05      	cmp	r3, #5
 8009868:	d108      	bne.n	800987c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	789b      	ldrb	r3, [r3, #2]
 8009872:	78fa      	ldrb	r2, [r7, #3]
 8009874:	429a      	cmp	r2, r3
 8009876:	d008      	beq.n	800988a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	b29a      	uxth	r2, r3
 8009882:	897b      	ldrh	r3, [r7, #10]
 8009884:	429a      	cmp	r2, r3
 8009886:	d8e5      	bhi.n	8009854 <USBD_GetEpDesc+0x32>
 8009888:	e000      	b.n	800988c <USBD_GetEpDesc+0x6a>
          break;
 800988a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800988c:	693b      	ldr	r3, [r7, #16]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	881a      	ldrh	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4413      	add	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098c2:	68fb      	ldr	r3, [r7, #12]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3301      	adds	r3, #1
 80098e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098ee:	8a3b      	ldrh	r3, [r7, #16]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	b21a      	sxth	r2, r3
 80098f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	b21b      	sxth	r3, r3
 80098fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009900:	4618      	mov	r0, r3
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d005      	beq.n	8009932 <USBD_StdDevReq+0x26>
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	d857      	bhi.n	80099da <USBD_StdDevReq+0xce>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00f      	beq.n	800994e <USBD_StdDevReq+0x42>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d153      	bne.n	80099da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	32ae      	adds	r2, #174	; 0xae
 800993c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
      break;
 800994c:	e04a      	b.n	80099e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b09      	cmp	r3, #9
 8009954:	d83b      	bhi.n	80099ce <USBD_StdDevReq+0xc2>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <USBD_StdDevReq+0x50>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	080099b1 	.word	0x080099b1
 8009960:	080099c5 	.word	0x080099c5
 8009964:	080099cf 	.word	0x080099cf
 8009968:	080099bb 	.word	0x080099bb
 800996c:	080099cf 	.word	0x080099cf
 8009970:	0800998f 	.word	0x0800998f
 8009974:	08009985 	.word	0x08009985
 8009978:	080099cf 	.word	0x080099cf
 800997c:	080099a7 	.word	0x080099a7
 8009980:	08009999 	.word	0x08009999
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa3c 	bl	8009e04 <USBD_GetDescriptor>
          break;
 800998c:	e024      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fba1 	bl	800a0d8 <USBD_SetAddress>
          break;
 8009996:	e01f      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fbe0 	bl	800a160 <USBD_SetConfig>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]
          break;
 80099a4:	e018      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fc83 	bl	800a2b4 <USBD_GetConfig>
          break;
 80099ae:	e013      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fcb4 	bl	800a320 <USBD_GetStatus>
          break;
 80099b8:	e00e      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fce3 	bl	800a388 <USBD_SetFeature>
          break;
 80099c2:	e009      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fd07 	bl	800a3da <USBD_ClrFeature>
          break;
 80099cc:	e004      	b.n	80099d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fd5e 	bl	800a492 <USBD_CtlError>
          break;
 80099d6:	bf00      	nop
      }
      break;
 80099d8:	e004      	b.n	80099e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fd58 	bl	800a492 <USBD_CtlError>
      break;
 80099e2:	bf00      	nop
  }

  return ret;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d005      	beq.n	8009a16 <USBD_StdItfReq+0x26>
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	d852      	bhi.n	8009ab4 <USBD_StdItfReq+0xc4>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <USBD_StdItfReq+0x26>
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d14e      	bne.n	8009ab4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d840      	bhi.n	8009aa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	889b      	ldrh	r3, [r3, #4]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d836      	bhi.n	8009a9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	889b      	ldrh	r3, [r3, #4]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fed9 	bl	80097ee <USBD_CoreFindIF>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2bff      	cmp	r3, #255	; 0xff
 8009a44:	d01d      	beq.n	8009a82 <USBD_StdItfReq+0x92>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d11a      	bne.n	8009a82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a4c:	7bba      	ldrb	r2, [r7, #14]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	32ae      	adds	r2, #174	; 0xae
 8009a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00f      	beq.n	8009a7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a5c:	7bba      	ldrb	r2, [r7, #14]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a64:	7bba      	ldrb	r2, [r7, #14]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32ae      	adds	r2, #174	; 0xae
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a7a:	e004      	b.n	8009a86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a80:	e001      	b.n	8009a86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	88db      	ldrh	r3, [r3, #6]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d110      	bne.n	8009ab0 <USBD_StdItfReq+0xc0>
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10d      	bne.n	8009ab0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fdc7 	bl	800a628 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a9a:	e009      	b.n	8009ab0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fcf7 	bl	800a492 <USBD_CtlError>
          break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fcf2 	bl	800a492 <USBD_CtlError>
          break;
 8009aae:	e000      	b.n	8009ab2 <USBD_StdItfReq+0xc2>
          break;
 8009ab0:	bf00      	nop
      }
      break;
 8009ab2:	e004      	b.n	8009abe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fceb 	bl	800a492 <USBD_CtlError>
      break;
 8009abc:	bf00      	nop
  }

  return ret;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	889b      	ldrh	r3, [r3, #4]
 8009ada:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	d007      	beq.n	8009af8 <USBD_StdEPReq+0x30>
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	f200 817f 	bhi.w	8009dec <USBD_StdEPReq+0x324>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d02a      	beq.n	8009b48 <USBD_StdEPReq+0x80>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	f040 817a 	bne.w	8009dec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fe83 	bl	8009808 <USBD_CoreFindEP>
 8009b02:	4603      	mov	r3, r0
 8009b04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b06:	7b7b      	ldrb	r3, [r7, #13]
 8009b08:	2bff      	cmp	r3, #255	; 0xff
 8009b0a:	f000 8174 	beq.w	8009df6 <USBD_StdEPReq+0x32e>
 8009b0e:	7b7b      	ldrb	r3, [r7, #13]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8170 	bne.w	8009df6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b16:	7b7a      	ldrb	r2, [r7, #13]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b1e:	7b7a      	ldrb	r2, [r7, #13]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	32ae      	adds	r2, #174	; 0xae
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 8163 	beq.w	8009df6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b30:	7b7a      	ldrb	r2, [r7, #13]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	32ae      	adds	r2, #174	; 0xae
 8009b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b46:	e156      	b.n	8009df6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d008      	beq.n	8009b62 <USBD_StdEPReq+0x9a>
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	f300 8145 	bgt.w	8009de0 <USBD_StdEPReq+0x318>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 809b 	beq.w	8009c92 <USBD_StdEPReq+0x1ca>
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d03c      	beq.n	8009bda <USBD_StdEPReq+0x112>
 8009b60:	e13e      	b.n	8009de0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d002      	beq.n	8009b74 <USBD_StdEPReq+0xac>
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d016      	beq.n	8009ba0 <USBD_StdEPReq+0xd8>
 8009b72:	e02c      	b.n	8009bce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00d      	beq.n	8009b96 <USBD_StdEPReq+0xce>
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	2b80      	cmp	r3, #128	; 0x80
 8009b7e:	d00a      	beq.n	8009b96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f004 f8af 	bl	800dce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b8a:	2180      	movs	r1, #128	; 0x80
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f004 f8ab 	bl	800dce8 <USBD_LL_StallEP>
 8009b92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b94:	e020      	b.n	8009bd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc7a 	bl	800a492 <USBD_CtlError>
              break;
 8009b9e:	e01b      	b.n	8009bd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	885b      	ldrh	r3, [r3, #2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10e      	bne.n	8009bc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <USBD_StdEPReq+0xfe>
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	2b80      	cmp	r3, #128	; 0x80
 8009bb2:	d008      	beq.n	8009bc6 <USBD_StdEPReq+0xfe>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	88db      	ldrh	r3, [r3, #6]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d104      	bne.n	8009bc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f004 f891 	bl	800dce8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fd2e 	bl	800a628 <USBD_CtlSendStatus>

              break;
 8009bcc:	e004      	b.n	8009bd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc5e 	bl	800a492 <USBD_CtlError>
              break;
 8009bd6:	bf00      	nop
          }
          break;
 8009bd8:	e107      	b.n	8009dea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d002      	beq.n	8009bec <USBD_StdEPReq+0x124>
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	d016      	beq.n	8009c18 <USBD_StdEPReq+0x150>
 8009bea:	e04b      	b.n	8009c84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00d      	beq.n	8009c0e <USBD_StdEPReq+0x146>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b80      	cmp	r3, #128	; 0x80
 8009bf6:	d00a      	beq.n	8009c0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f004 f873 	bl	800dce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c02:	2180      	movs	r1, #128	; 0x80
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f004 f86f 	bl	800dce8 <USBD_LL_StallEP>
 8009c0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c0c:	e040      	b.n	8009c90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fc3e 	bl	800a492 <USBD_CtlError>
              break;
 8009c16:	e03b      	b.n	8009c90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	885b      	ldrh	r3, [r3, #2]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d136      	bne.n	8009c8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f004 f879 	bl	800dd26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fcf7 	bl	800a628 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fde2 	bl	8009808 <USBD_CoreFindEP>
 8009c44:	4603      	mov	r3, r0
 8009c46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c48:	7b7b      	ldrb	r3, [r7, #13]
 8009c4a:	2bff      	cmp	r3, #255	; 0xff
 8009c4c:	d01f      	beq.n	8009c8e <USBD_StdEPReq+0x1c6>
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d11c      	bne.n	8009c8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c54:	7b7a      	ldrb	r2, [r7, #13]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c5c:	7b7a      	ldrb	r2, [r7, #13]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	32ae      	adds	r2, #174	; 0xae
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d010      	beq.n	8009c8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c6c:	7b7a      	ldrb	r2, [r7, #13]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	32ae      	adds	r2, #174	; 0xae
 8009c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c82:	e004      	b.n	8009c8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc03 	bl	800a492 <USBD_CtlError>
              break;
 8009c8c:	e000      	b.n	8009c90 <USBD_StdEPReq+0x1c8>
              break;
 8009c8e:	bf00      	nop
          }
          break;
 8009c90:	e0ab      	b.n	8009dea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d002      	beq.n	8009ca4 <USBD_StdEPReq+0x1dc>
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d032      	beq.n	8009d08 <USBD_StdEPReq+0x240>
 8009ca2:	e097      	b.n	8009dd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d007      	beq.n	8009cba <USBD_StdEPReq+0x1f2>
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
 8009cac:	2b80      	cmp	r3, #128	; 0x80
 8009cae:	d004      	beq.n	8009cba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fbed 	bl	800a492 <USBD_CtlError>
                break;
 8009cb8:	e091      	b.n	8009dde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da0b      	bge.n	8009cda <USBD_StdEPReq+0x212>
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	e00b      	b.n	8009cf2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	4413      	add	r3, r2
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fc37 	bl	800a574 <USBD_CtlSendData>
              break;
 8009d06:	e06a      	b.n	8009dde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da11      	bge.n	8009d34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	f003 020f 	and.w	r2, r3, #15
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	440b      	add	r3, r1
 8009d22:	3324      	adds	r3, #36	; 0x24
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d117      	bne.n	8009d5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fbb0 	bl	800a492 <USBD_CtlError>
                  break;
 8009d32:	e054      	b.n	8009dde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	f003 020f 	and.w	r2, r3, #15
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d104      	bne.n	8009d5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fb9d 	bl	800a492 <USBD_CtlError>
                  break;
 8009d58:	e041      	b.n	8009dde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da0b      	bge.n	8009d7a <USBD_StdEPReq+0x2b2>
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	3310      	adds	r3, #16
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4413      	add	r3, r2
 8009d76:	3304      	adds	r3, #4
 8009d78:	e00b      	b.n	8009d92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4413      	add	r3, r2
 8009d90:	3304      	adds	r3, #4
 8009d92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <USBD_StdEPReq+0x2d8>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b80      	cmp	r3, #128	; 0x80
 8009d9e:	d103      	bne.n	8009da8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e00e      	b.n	8009dc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f003 ffd9 	bl	800dd64 <USBD_LL_IsStallEP>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	e002      	b.n	8009dc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fbd1 	bl	800a574 <USBD_CtlSendData>
              break;
 8009dd2:	e004      	b.n	8009dde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fb5b 	bl	800a492 <USBD_CtlError>
              break;
 8009ddc:	bf00      	nop
          }
          break;
 8009dde:	e004      	b.n	8009dea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fb55 	bl	800a492 <USBD_CtlError>
          break;
 8009de8:	bf00      	nop
      }
      break;
 8009dea:	e005      	b.n	8009df8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fb4f 	bl	800a492 <USBD_CtlError>
      break;
 8009df4:	e000      	b.n	8009df8 <USBD_StdEPReq+0x330>
      break;
 8009df6:	bf00      	nop
  }

  return ret;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	0a1b      	lsrs	r3, r3, #8
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	2b06      	cmp	r3, #6
 8009e26:	f200 8128 	bhi.w	800a07a <USBD_GetDescriptor+0x276>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_GetDescriptor+0x2c>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009ea5 	.word	0x08009ea5
 8009e3c:	0800a07b 	.word	0x0800a07b
 8009e40:	0800a07b 	.word	0x0800a07b
 8009e44:	0800a01b 	.word	0x0800a01b
 8009e48:	0800a047 	.word	0x0800a047
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	7c12      	ldrb	r2, [r2, #16]
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
      break;
 8009e62:	e112      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7c1b      	ldrb	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10d      	bne.n	8009e88 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f107 0208 	add.w	r2, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	2202      	movs	r2, #2
 8009e84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e86:	e100      	b.n	800a08a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f107 0208 	add.w	r2, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
      break;
 8009ea2:	e0f2      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	885b      	ldrh	r3, [r3, #2]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	f200 80ac 	bhi.w	800a008 <USBD_GetDescriptor+0x204>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBD_GetDescriptor+0xb4>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ed1 	.word	0x08009ed1
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f39 	.word	0x08009f39
 8009ec4:	08009f6d 	.word	0x08009f6d
 8009ec8:	08009fa1 	.word	0x08009fa1
 8009ecc:	08009fd5 	.word	0x08009fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef2:	e091      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 facb 	bl	800a492 <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e089      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f26:	e077      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fab1 	bl	800a492 <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e06f      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5a:	e05d      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa97 	bl	800a492 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e055      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8e:	e043      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa7d 	bl	800a492 <USBD_CtlError>
            err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9e:	e03b      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc2:	e029      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa63 	bl	800a492 <USBD_CtlError>
            err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd2:	e021      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7c12      	ldrb	r2, [r2, #16]
 8009fec:	f107 0108 	add.w	r1, r7, #8
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ff6:	e00f      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fa49 	bl	800a492 <USBD_CtlError>
            err++;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3301      	adds	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]
          break;
 800a006:	e007      	b.n	800a018 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa41 	bl	800a492 <USBD_CtlError>
          err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a016:	bf00      	nop
      }
      break;
 800a018:	e037      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7c1b      	ldrb	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02a:	f107 0208 	add.w	r2, r7, #8
 800a02e:	4610      	mov	r0, r2
 800a030:	4798      	blx	r3
 800a032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a034:	e029      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa2a 	bl	800a492 <USBD_CtlError>
        err++;
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3301      	adds	r3, #1
 800a042:	72fb      	strb	r3, [r7, #11]
      break;
 800a044:	e021      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7c1b      	ldrb	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10d      	bne.n	800a06a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	2207      	movs	r2, #7
 800a066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a068:	e00f      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa10 	bl	800a492 <USBD_CtlError>
        err++;
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	3301      	adds	r3, #1
 800a076:	72fb      	strb	r3, [r7, #11]
      break;
 800a078:	e007      	b.n	800a08a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa08 	bl	800a492 <USBD_CtlError>
      err++;
 800a082:	7afb      	ldrb	r3, [r7, #11]
 800a084:	3301      	adds	r3, #1
 800a086:	72fb      	strb	r3, [r7, #11]
      break;
 800a088:	bf00      	nop
  }

  if (err != 0U)
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11e      	bne.n	800a0ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d016      	beq.n	800a0c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a098:	893b      	ldrh	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	88da      	ldrh	r2, [r3, #6]
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bf28      	it	cs
 800a0a8:	4613      	movcs	r3, r2
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ae:	893b      	ldrh	r3, [r7, #8]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fa5d 	bl	800a574 <USBD_CtlSendData>
 800a0ba:	e009      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9e7 	bl	800a492 <USBD_CtlError>
 800a0c4:	e004      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 faae 	bl	800a628 <USBD_CtlSendStatus>
 800a0cc:	e000      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    return;
 800a0ce:	bf00      	nop
  }
}
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	889b      	ldrh	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d131      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	88db      	ldrh	r3, [r3, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d12d      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0f8:	d829      	bhi.n	800a14e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d104      	bne.n	800a11c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9bc 	bl	800a492 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11a:	e01d      	b.n	800a158 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7bfa      	ldrb	r2, [r7, #15]
 800a120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f003 fe47 	bl	800ddbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa7a 	bl	800a628 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	e009      	b.n	800a158 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14c:	e004      	b.n	800a158 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f99e 	bl	800a492 <USBD_CtlError>
  }
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	885b      	ldrh	r3, [r3, #2]
 800a172:	b2da      	uxtb	r2, r3
 800a174:	4b4e      	ldr	r3, [pc, #312]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a178:	4b4d      	ldr	r3, [pc, #308]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d905      	bls.n	800a18c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f985 	bl	800a492 <USBD_CtlError>
    return USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	e08c      	b.n	800a2a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d002      	beq.n	800a19e <USBD_SetConfig+0x3e>
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d029      	beq.n	800a1f0 <USBD_SetConfig+0x90>
 800a19c:	e075      	b.n	800a28a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a19e:	4b44      	ldr	r3, [pc, #272]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d020      	beq.n	800a1e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1a6:	4b42      	ldr	r3, [pc, #264]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b0:	4b3f      	ldr	r3, [pc, #252]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7fe ffe7 	bl	800918a <USBD_SetClassConfig>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f962 	bl	800a492 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1d6:	e065      	b.n	800a2a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa25 	bl	800a628 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1e6:	e05d      	b.n	800a2a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa1d 	bl	800a628 <USBD_CtlSendStatus>
      break;
 800a1ee:	e059      	b.n	800a2a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1f0:	4b2f      	ldr	r3, [pc, #188]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d112      	bne.n	800a21e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a200:	4b2b      	ldr	r3, [pc, #172]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a20a:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7fe ffd6 	bl	80091c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa06 	bl	800a628 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a21c:	e042      	b.n	800a2a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a21e:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d02a      	beq.n	800a282 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7fe ffc4 	bl	80091c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a244:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe ff9d 	bl	800918a <USBD_SetClassConfig>
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00f      	beq.n	800a27a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f918 	bl	800a492 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7fe ffa9 	bl	80091c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a278:	e014      	b.n	800a2a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9d4 	bl	800a628 <USBD_CtlSendStatus>
      break;
 800a280:	e010      	b.n	800a2a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f9d0 	bl	800a628 <USBD_CtlSendStatus>
      break;
 800a288:	e00c      	b.n	800a2a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f900 	bl	800a492 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <USBD_SetConfig+0x150>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7fe ff92 	bl	80091c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a2:	bf00      	nop
  }

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000858 	.word	0x20000858

0800a2b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f8e2 	bl	800a492 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ce:	e023      	b.n	800a318 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	dc02      	bgt.n	800a2e2 <USBD_GetConfig+0x2e>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dc03      	bgt.n	800a2e8 <USBD_GetConfig+0x34>
 800a2e0:	e015      	b.n	800a30e <USBD_GetConfig+0x5a>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d00b      	beq.n	800a2fe <USBD_GetConfig+0x4a>
 800a2e6:	e012      	b.n	800a30e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f93c 	bl	800a574 <USBD_CtlSendData>
        break;
 800a2fc:	e00c      	b.n	800a318 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3304      	adds	r3, #4
 800a302:	2201      	movs	r2, #1
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f934 	bl	800a574 <USBD_CtlSendData>
        break;
 800a30c:	e004      	b.n	800a318 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f8be 	bl	800a492 <USBD_CtlError>
        break;
 800a316:	bf00      	nop
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	b2db      	uxtb	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	2b02      	cmp	r3, #2
 800a336:	d81e      	bhi.n	800a376 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	88db      	ldrh	r3, [r3, #6]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d004      	beq.n	800a34a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f8a5 	bl	800a492 <USBD_CtlError>
        break;
 800a348:	e01a      	b.n	800a380 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f043 0202 	orr.w	r2, r3, #2
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	330c      	adds	r3, #12
 800a36a:	2202      	movs	r2, #2
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f900 	bl	800a574 <USBD_CtlSendData>
      break;
 800a374:	e004      	b.n	800a380 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f88a 	bl	800a492 <USBD_CtlError>
      break;
 800a37e:	bf00      	nop
  }
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	885b      	ldrh	r3, [r3, #2]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f940 	bl	800a628 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3a8:	e013      	b.n	800a3d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d10b      	bne.n	800a3ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	889b      	ldrh	r3, [r3, #4]
 800a3b6:	0a1b      	lsrs	r3, r3, #8
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f930 	bl	800a628 <USBD_CtlSendStatus>
}
 800a3c8:	e003      	b.n	800a3d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f860 	bl	800a492 <USBD_CtlError>
}
 800a3d2:	bf00      	nop
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d80b      	bhi.n	800a40a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	885b      	ldrh	r3, [r3, #2]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d10c      	bne.n	800a414 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f910 	bl	800a628 <USBD_CtlSendStatus>
      }
      break;
 800a408:	e004      	b.n	800a414 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f840 	bl	800a492 <USBD_CtlError>
      break;
 800a412:	e000      	b.n	800a416 <USBD_ClrFeature+0x3c>
      break;
 800a414:	bf00      	nop
  }
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3301      	adds	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7ff fa41 	bl	80098d0 <SWAPBYTE>
 800a44e:	4603      	mov	r3, r0
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3301      	adds	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff fa34 	bl	80098d0 <SWAPBYTE>
 800a468:	4603      	mov	r3, r0
 800a46a:	461a      	mov	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7ff fa27 	bl	80098d0 <SWAPBYTE>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	80da      	strh	r2, [r3, #6]
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a49c:	2180      	movs	r1, #128	; 0x80
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f003 fc22 	bl	800dce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f003 fc1e 	bl	800dce8 <USBD_LL_StallEP>
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d036      	beq.n	800a538 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4ce:	6938      	ldr	r0, [r7, #16]
 800a4d0:	f000 f836 	bl	800a540 <USBD_GetLen>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	005b      	lsls	r3, r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	7812      	ldrb	r2, [r2, #0]
 800a4ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	3301      	adds	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a504:	e013      	b.n	800a52e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	4413      	add	r3, r2
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	3301      	adds	r3, #1
 800a516:	613b      	str	r3, [r7, #16]
    idx++;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	3301      	adds	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	4413      	add	r3, r2
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
    idx++;
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	3301      	adds	r3, #1
 800a52c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e7      	bne.n	800a506 <USBD_GetString+0x52>
 800a536:	e000      	b.n	800a53a <USBD_GetString+0x86>
    return;
 800a538:	bf00      	nop
  }
}
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a550:	e005      	b.n	800a55e <USBD_GetLen+0x1e>
  {
    len++;
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	3301      	adds	r3, #1
 800a556:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1f5      	bne.n	800a552 <USBD_GetLen+0x12>
  }

  return len;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2202      	movs	r2, #2
 800a584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f003 fc2d 	bl	800ddfa <USBD_LL_Transmit>

  return USBD_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f003 fc1c 	bl	800ddfa <USBD_LL_Transmit>

  return USBD_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2203      	movs	r2, #3
 800a5dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f003 fc20 	bl	800de3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	2100      	movs	r1, #0
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f003 fc0f 	bl	800de3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2204      	movs	r2, #4
 800a634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a638:	2300      	movs	r3, #0
 800a63a:	2200      	movs	r2, #0
 800a63c:	2100      	movs	r1, #0
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f003 fbdb 	bl	800ddfa <USBD_LL_Transmit>

  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2205      	movs	r2, #5
 800a65a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65e:	2300      	movs	r3, #0
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f003 fbe9 	bl	800de3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <__NVIC_SetPriority>:
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	6039      	str	r1, [r7, #0]
 800a67e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a684:	2b00      	cmp	r3, #0
 800a686:	db0a      	blt.n	800a69e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	490c      	ldr	r1, [pc, #48]	; (800a6c0 <__NVIC_SetPriority+0x4c>)
 800a68e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a692:	0112      	lsls	r2, r2, #4
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	440b      	add	r3, r1
 800a698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a69c:	e00a      	b.n	800a6b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	4908      	ldr	r1, [pc, #32]	; (800a6c4 <__NVIC_SetPriority+0x50>)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	3b04      	subs	r3, #4
 800a6ac:	0112      	lsls	r2, r2, #4
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	761a      	strb	r2, [r3, #24]
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	e000e100 	.word	0xe000e100
 800a6c4:	e000ed00 	.word	0xe000ed00

0800a6c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <SysTick_Handler+0x1c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6d0:	f001 feb2 	bl	800c438 <xTaskGetSchedulerState>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d001      	beq.n	800a6de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6da:	f002 fc9d 	bl	800d018 <xPortSysTickHandler>
  }
}
 800a6de:	bf00      	nop
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	e000e010 	.word	0xe000e010

0800a6e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	f06f 0004 	mvn.w	r0, #4
 800a6f2:	f7ff ffbf 	bl	800a674 <__NVIC_SetPriority>
#endif
}
 800a6f6:	bf00      	nop
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a702:	f3ef 8305 	mrs	r3, IPSR
 800a706:	603b      	str	r3, [r7, #0]
  return(result);
 800a708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a70e:	f06f 0305 	mvn.w	r3, #5
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	e00c      	b.n	800a730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a716:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <osKernelInitialize+0x44>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d105      	bne.n	800a72a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <osKernelInitialize+0x44>)
 800a720:	2201      	movs	r2, #1
 800a722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a724:	2300      	movs	r3, #0
 800a726:	607b      	str	r3, [r7, #4]
 800a728:	e002      	b.n	800a730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a72a:	f04f 33ff 	mov.w	r3, #4294967295
 800a72e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a730:	687b      	ldr	r3, [r7, #4]
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	2000085c 	.word	0x2000085c

0800a744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a74a:	f3ef 8305 	mrs	r3, IPSR
 800a74e:	603b      	str	r3, [r7, #0]
  return(result);
 800a750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a756:	f06f 0305 	mvn.w	r3, #5
 800a75a:	607b      	str	r3, [r7, #4]
 800a75c:	e010      	b.n	800a780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <osKernelStart+0x48>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d109      	bne.n	800a77a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a766:	f7ff ffbf 	bl	800a6e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a76a:	4b08      	ldr	r3, [pc, #32]	; (800a78c <osKernelStart+0x48>)
 800a76c:	2202      	movs	r2, #2
 800a76e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a770:	f001 fa1a 	bl	800bba8 <vTaskStartScheduler>
      stat = osOK;
 800a774:	2300      	movs	r3, #0
 800a776:	607b      	str	r3, [r7, #4]
 800a778:	e002      	b.n	800a780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295
 800a77e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a780:	687b      	ldr	r3, [r7, #4]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	2000085c 	.word	0x2000085c

0800a790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a790:	b580      	push	{r7, lr}
 800a792:	b08e      	sub	sp, #56	; 0x38
 800a794:	af04      	add	r7, sp, #16
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a0:	f3ef 8305 	mrs	r3, IPSR
 800a7a4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d17f      	bne.n	800a8ac <osThreadNew+0x11c>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d07c      	beq.n	800a8ac <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a7b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7b6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7b8:	2318      	movs	r3, #24
 800a7ba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d045      	beq.n	800a858 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <osThreadNew+0x4a>
        name = attr->name;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d008      	beq.n	800a800 <osThreadNew+0x70>
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	2b38      	cmp	r3, #56	; 0x38
 800a7f2:	d805      	bhi.n	800a800 <osThreadNew+0x70>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <osThreadNew+0x74>
        return (NULL);
 800a800:	2300      	movs	r3, #0
 800a802:	e054      	b.n	800a8ae <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	089b      	lsrs	r3, r3, #2
 800a812:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00e      	beq.n	800a83a <osThreadNew+0xaa>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	2b6b      	cmp	r3, #107	; 0x6b
 800a822:	d90a      	bls.n	800a83a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d006      	beq.n	800a83a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <osThreadNew+0xaa>
        mem = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	e010      	b.n	800a85c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10c      	bne.n	800a85c <osThreadNew+0xcc>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d108      	bne.n	800a85c <osThreadNew+0xcc>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d104      	bne.n	800a85c <osThreadNew+0xcc>
          mem = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	e001      	b.n	800a85c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d110      	bne.n	800a884 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a86a:	9202      	str	r2, [sp, #8]
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6a3a      	ldr	r2, [r7, #32]
 800a876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 feb9 	bl	800b5f0 <xTaskCreateStatic>
 800a87e:	4603      	mov	r3, r0
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	e013      	b.n	800a8ac <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d110      	bne.n	800a8ac <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	f107 0310 	add.w	r3, r7, #16
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 ff04 	bl	800b6aa <xTaskCreate>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d001      	beq.n	800a8ac <osThreadNew+0x11c>
            hTask = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8ac:	693b      	ldr	r3, [r7, #16]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8be:	f3ef 8305 	mrs	r3, IPSR
 800a8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <osDelay+0x1c>
    stat = osErrorISR;
 800a8ca:	f06f 0305 	mvn.w	r3, #5
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e007      	b.n	800a8e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f829 	bl	800b934 <vTaskDelay>
    }
  }

  return (stat);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fc:	f3ef 8305 	mrs	r3, IPSR
 800a900:	613b      	str	r3, [r7, #16]
  return(result);
 800a902:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a904:	2b00      	cmp	r3, #0
 800a906:	d15f      	bne.n	800a9c8 <osMessageQueueNew+0xdc>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d05c      	beq.n	800a9c8 <osMessageQueueNew+0xdc>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d059      	beq.n	800a9c8 <osMessageQueueNew+0xdc>
    mem = -1;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d029      	beq.n	800a974 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <osMessageQueueNew+0x62>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b4f      	cmp	r3, #79	; 0x4f
 800a92e:	d90e      	bls.n	800a94e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	fb01 f303 	mul.w	r3, r1, r3
 800a944:	429a      	cmp	r2, r3
 800a946:	d302      	bcc.n	800a94e <osMessageQueueNew+0x62>
        mem = 1;
 800a948:	2301      	movs	r3, #1
 800a94a:	61bb      	str	r3, [r7, #24]
 800a94c:	e014      	b.n	800a978 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d110      	bne.n	800a978 <osMessageQueueNew+0x8c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10c      	bne.n	800a978 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a962:	2b00      	cmp	r3, #0
 800a964:	d108      	bne.n	800a978 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <osMessageQueueNew+0x8c>
          mem = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	61bb      	str	r3, [r7, #24]
 800a972:	e001      	b.n	800a978 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d10b      	bne.n	800a996 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691a      	ldr	r2, [r3, #16]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2100      	movs	r1, #0
 800a988:	9100      	str	r1, [sp, #0]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 f971 	bl	800ac74 <xQueueGenericCreateStatic>
 800a992:	61f8      	str	r0, [r7, #28]
 800a994:	e008      	b.n	800a9a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d105      	bne.n	800a9a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a99c:	2200      	movs	r2, #0
 800a99e:	68b9      	ldr	r1, [r7, #8]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f9df 	bl	800ad64 <xQueueGenericCreate>
 800a9a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <osMessageQueueNew+0xd0>
        name = attr->name;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	e001      	b.n	800a9c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a9c0:	6979      	ldr	r1, [r7, #20]
 800a9c2:	69f8      	ldr	r0, [r7, #28]
 800a9c4:	f000 fdb6 	bl	800b534 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a9c8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3720      	adds	r7, #32
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a07      	ldr	r2, [pc, #28]	; (800aa00 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4a06      	ldr	r2, [pc, #24]	; (800aa04 <vApplicationGetIdleTaskMemory+0x30>)
 800a9ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9f2:	601a      	str	r2, [r3, #0]
}
 800a9f4:	bf00      	nop
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	20000860 	.word	0x20000860
 800aa04:	200008cc 	.word	0x200008cc

0800aa08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a07      	ldr	r2, [pc, #28]	; (800aa34 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4a06      	ldr	r2, [pc, #24]	; (800aa38 <vApplicationGetTimerTaskMemory+0x30>)
 800aa1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa26:	601a      	str	r2, [r3, #0]
}
 800aa28:	bf00      	nop
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	20000ccc 	.word	0x20000ccc
 800aa38:	20000d38 	.word	0x20000d38

0800aa3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f103 0208 	add.w	r2, r3, #8
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f04f 32ff 	mov.w	r2, #4294967295
 800aa54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f103 0208 	add.w	r2, r3, #8
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f103 0208 	add.w	r2, r3, #8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	601a      	str	r2, [r3, #0]
}
 800aad2:	bf00      	nop
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d103      	bne.n	800aafe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	e00c      	b.n	800ab18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3308      	adds	r3, #8
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e002      	b.n	800ab0c <vListInsert+0x2e>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d2f6      	bcs.n	800ab06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	601a      	str	r2, [r3, #0]
}
 800ab44:	bf00      	nop
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6892      	ldr	r2, [r2, #8]
 800ab66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	6852      	ldr	r2, [r2, #4]
 800ab70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d103      	bne.n	800ab84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	1e5a      	subs	r2, r3, #1
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abce:	f002 f991 	bl	800cef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abda:	68f9      	ldr	r1, [r7, #12]
 800abdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abde:	fb01 f303 	mul.w	r3, r1, r3
 800abe2:	441a      	add	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfe:	3b01      	subs	r3, #1
 800ac00:	68f9      	ldr	r1, [r7, #12]
 800ac02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac04:	fb01 f303 	mul.w	r3, r1, r3
 800ac08:	441a      	add	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	22ff      	movs	r2, #255	; 0xff
 800ac12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	22ff      	movs	r2, #255	; 0xff
 800ac1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d114      	bne.n	800ac4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01a      	beq.n	800ac62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3310      	adds	r3, #16
 800ac30:	4618      	mov	r0, r3
 800ac32:	f001 fa43 	bl	800c0bc <xTaskRemoveFromEventList>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d012      	beq.n	800ac62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <xQueueGenericReset+0xcc>)
 800ac3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	e009      	b.n	800ac62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3310      	adds	r3, #16
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fef2 	bl	800aa3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3324      	adds	r3, #36	; 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff feed 	bl	800aa3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac62:	f002 f977 	bl	800cf54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac66:	2301      	movs	r3, #1
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	e000ed04 	.word	0xe000ed04

0800ac74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08e      	sub	sp, #56	; 0x38
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <xQueueGenericCreateStatic+0x52>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <xQueueGenericCreateStatic+0x56>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <xQueueGenericCreateStatic+0x58>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	623b      	str	r3, [r7, #32]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d102      	bne.n	800acf2 <xQueueGenericCreateStatic+0x7e>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <xQueueGenericCreateStatic+0x82>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xQueueGenericCreateStatic+0x84>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	61fb      	str	r3, [r7, #28]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad12:	2350      	movs	r3, #80	; 0x50
 800ad14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b50      	cmp	r3, #80	; 0x50
 800ad1a:	d00a      	beq.n	800ad32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	61bb      	str	r3, [r7, #24]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f83f 	bl	800add8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3730      	adds	r7, #48	; 0x30
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08a      	sub	sp, #40	; 0x28
 800ad68:	af02      	add	r7, sp, #8
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	613b      	str	r3, [r7, #16]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	3350      	adds	r3, #80	; 0x50
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 f9cb 	bl	800d138 <pvPortMalloc>
 800ada2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d011      	beq.n	800adce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	3350      	adds	r3, #80	; 0x50
 800adb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adbc:	79fa      	ldrb	r2, [r7, #7]
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f805 	bl	800add8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adce:	69bb      	ldr	r3, [r7, #24]
	}
 800add0:	4618      	mov	r0, r3
 800add2:	3720      	adds	r7, #32
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	e002      	b.n	800adfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae06:	2101      	movs	r1, #1
 800ae08:	69b8      	ldr	r0, [r7, #24]
 800ae0a:	f7ff fecb 	bl	800aba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	78fa      	ldrb	r2, [r7, #3]
 800ae12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10a      	bne.n	800ae52 <xQueueGenericSend+0x32>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d103      	bne.n	800ae60 <xQueueGenericSend+0x40>
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <xQueueGenericSend+0x44>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <xQueueGenericSend+0x46>
 800ae64:	2300      	movs	r3, #0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <xQueueGenericSend+0x60>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d103      	bne.n	800ae8e <xQueueGenericSend+0x6e>
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <xQueueGenericSend+0x72>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e000      	b.n	800ae94 <xQueueGenericSend+0x74>
 800ae92:	2300      	movs	r3, #0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueGenericSend+0x8e>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	623b      	str	r3, [r7, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeae:	f001 fac3 	bl	800c438 <xTaskGetSchedulerState>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <xQueueGenericSend+0x9e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <xQueueGenericSend+0xa2>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <xQueueGenericSend+0xa4>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueGenericSend+0xbe>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61fb      	str	r3, [r7, #28]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aede:	f002 f809 	bl	800cef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d302      	bcc.n	800aef4 <xQueueGenericSend+0xd4>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d129      	bne.n	800af48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	68b9      	ldr	r1, [r7, #8]
 800aef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefa:	f000 fa0b 	bl	800b314 <prvCopyDataToQueue>
 800aefe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	d010      	beq.n	800af2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	3324      	adds	r3, #36	; 0x24
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f8d5 	bl	800c0bc <xTaskRemoveFromEventList>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d013      	beq.n	800af40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af18:	4b3f      	ldr	r3, [pc, #252]	; (800b018 <xQueueGenericSend+0x1f8>)
 800af1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	e00a      	b.n	800af40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af30:	4b39      	ldr	r3, [pc, #228]	; (800b018 <xQueueGenericSend+0x1f8>)
 800af32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af40:	f002 f808 	bl	800cf54 <vPortExitCritical>
				return pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	e063      	b.n	800b010 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af4e:	f002 f801 	bl	800cf54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af52:	2300      	movs	r3, #0
 800af54:	e05c      	b.n	800b010 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d106      	bne.n	800af6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af5c:	f107 0314 	add.w	r3, r7, #20
 800af60:	4618      	mov	r0, r3
 800af62:	f001 f90f 	bl	800c184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af66:	2301      	movs	r3, #1
 800af68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af6a:	f001 fff3 	bl	800cf54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af6e:	f000 fe81 	bl	800bc74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af72:	f001 ffbf 	bl	800cef4 <vPortEnterCritical>
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af82:	d103      	bne.n	800af8c <xQueueGenericSend+0x16c>
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af92:	b25b      	sxtb	r3, r3
 800af94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af98:	d103      	bne.n	800afa2 <xQueueGenericSend+0x182>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa2:	f001 ffd7 	bl	800cf54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afa6:	1d3a      	adds	r2, r7, #4
 800afa8:	f107 0314 	add.w	r3, r7, #20
 800afac:	4611      	mov	r1, r2
 800afae:	4618      	mov	r0, r3
 800afb0:	f001 f8fe 	bl	800c1b0 <xTaskCheckForTimeOut>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d124      	bne.n	800b004 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbc:	f000 faa2 	bl	800b504 <prvIsQueueFull>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d018      	beq.n	800aff8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	3310      	adds	r3, #16
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 f824 	bl	800c01c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd6:	f000 fa2d 	bl	800b434 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afda:	f000 fe59 	bl	800bc90 <xTaskResumeAll>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f47f af7c 	bne.w	800aede <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <xQueueGenericSend+0x1f8>)
 800afe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	e772      	b.n	800aede <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affa:	f000 fa1b 	bl	800b434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800affe:	f000 fe47 	bl	800bc90 <xTaskResumeAll>
 800b002:	e76c      	b.n	800aede <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b006:	f000 fa15 	bl	800b434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b00a:	f000 fe41 	bl	800bc90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b00e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b010:	4618      	mov	r0, r3
 800b012:	3738      	adds	r7, #56	; 0x38
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b090      	sub	sp, #64	; 0x40
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d103      	bne.n	800b058 <xQueueGenericSendFromISR+0x3c>
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <xQueueGenericSendFromISR+0x40>
 800b058:	2301      	movs	r3, #1
 800b05a:	e000      	b.n	800b05e <xQueueGenericSendFromISR+0x42>
 800b05c:	2300      	movs	r3, #0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d103      	bne.n	800b086 <xQueueGenericSendFromISR+0x6a>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b082:	2b01      	cmp	r3, #1
 800b084:	d101      	bne.n	800b08a <xQueueGenericSendFromISR+0x6e>
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <xQueueGenericSendFromISR+0x70>
 800b08a:	2300      	movs	r3, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10a      	bne.n	800b0a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	623b      	str	r3, [r7, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0a6:	f002 f807 	bl	800d0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0aa:	f3ef 8211 	mrs	r2, BASEPRI
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	61fa      	str	r2, [r7, #28]
 800b0c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d302      	bcc.n	800b0d8 <xQueueGenericSendFromISR+0xbc>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d12f      	bne.n	800b138 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ee:	f000 f911 	bl	800b314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d112      	bne.n	800b122 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d016      	beq.n	800b132 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 ffd7 	bl	800c0bc <xTaskRemoveFromEventList>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00e      	beq.n	800b132 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e007      	b.n	800b132 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b126:	3301      	adds	r3, #1
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	b25a      	sxtb	r2, r3
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b132:	2301      	movs	r3, #1
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b136:	e001      	b.n	800b13c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b146:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3740      	adds	r7, #64	; 0x40
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08c      	sub	sp, #48	; 0x30
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <xQueueReceive+0x30>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	623b      	str	r3, [r7, #32]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d103      	bne.n	800b192 <xQueueReceive+0x3e>
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <xQueueReceive+0x42>
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <xQueueReceive+0x44>
 800b196:	2300      	movs	r3, #0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10a      	bne.n	800b1b2 <xQueueReceive+0x5e>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	61fb      	str	r3, [r7, #28]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1b2:	f001 f941 	bl	800c438 <xTaskGetSchedulerState>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <xQueueReceive+0x6e>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <xQueueReceive+0x72>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <xQueueReceive+0x74>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <xQueueReceive+0x8e>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	61bb      	str	r3, [r7, #24]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1e2:	f001 fe87 	bl	800cef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d01f      	beq.n	800b232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1f2:	68b9      	ldr	r1, [r7, #8]
 800b1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f6:	f000 f8f7 	bl	800b3e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00f      	beq.n	800b22a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20c:	3310      	adds	r3, #16
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 ff54 	bl	800c0bc <xTaskRemoveFromEventList>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d007      	beq.n	800b22a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b21a:	4b3d      	ldr	r3, [pc, #244]	; (800b310 <xQueueReceive+0x1bc>)
 800b21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b22a:	f001 fe93 	bl	800cf54 <vPortExitCritical>
				return pdPASS;
 800b22e:	2301      	movs	r3, #1
 800b230:	e069      	b.n	800b306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d103      	bne.n	800b240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b238:	f001 fe8c 	bl	800cf54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e062      	b.n	800b306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b246:	f107 0310 	add.w	r3, r7, #16
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 ff9a 	bl	800c184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b254:	f001 fe7e 	bl	800cf54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b258:	f000 fd0c 	bl	800bc74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b25c:	f001 fe4a 	bl	800cef4 <vPortEnterCritical>
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b266:	b25b      	sxtb	r3, r3
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d103      	bne.n	800b276 <xQueueReceive+0x122>
 800b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27c:	b25b      	sxtb	r3, r3
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d103      	bne.n	800b28c <xQueueReceive+0x138>
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b28c:	f001 fe62 	bl	800cf54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b290:	1d3a      	adds	r2, r7, #4
 800b292:	f107 0310 	add.w	r3, r7, #16
 800b296:	4611      	mov	r1, r2
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 ff89 	bl	800c1b0 <xTaskCheckForTimeOut>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d123      	bne.n	800b2ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a6:	f000 f917 	bl	800b4d8 <prvIsQueueEmpty>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d017      	beq.n	800b2e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	3324      	adds	r3, #36	; 0x24
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 feaf 	bl	800c01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c0:	f000 f8b8 	bl	800b434 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2c4:	f000 fce4 	bl	800bc90 <xTaskResumeAll>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d189      	bne.n	800b1e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2ce:	4b10      	ldr	r3, [pc, #64]	; (800b310 <xQueueReceive+0x1bc>)
 800b2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	e780      	b.n	800b1e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e2:	f000 f8a7 	bl	800b434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2e6:	f000 fcd3 	bl	800bc90 <xTaskResumeAll>
 800b2ea:	e77a      	b.n	800b1e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ee:	f000 f8a1 	bl	800b434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f2:	f000 fccd 	bl	800bc90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f8:	f000 f8ee 	bl	800b4d8 <prvIsQueueEmpty>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f43f af6f 	beq.w	800b1e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b306:	4618      	mov	r0, r3
 800b308:	3730      	adds	r7, #48	; 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	e000ed04 	.word	0xe000ed04

0800b314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10d      	bne.n	800b34e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d14d      	bne.n	800b3d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	4618      	mov	r0, r3
 800b340:	f001 f898 	bl	800c474 <xTaskPriorityDisinherit>
 800b344:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	609a      	str	r2, [r3, #8]
 800b34c:	e043      	b.n	800b3d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d119      	bne.n	800b388 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6858      	ldr	r0, [r3, #4]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	461a      	mov	r2, r3
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	f002 fe16 	bl	800df90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36c:	441a      	add	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d32b      	bcc.n	800b3d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	e026      	b.n	800b3d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68d8      	ldr	r0, [r3, #12]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b390:	461a      	mov	r2, r3
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	f002 fdfc 	bl	800df90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	425b      	negs	r3, r3
 800b3a2:	441a      	add	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d207      	bcs.n	800b3c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3bc:	425b      	negs	r3, r3
 800b3be:	441a      	add	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d105      	bne.n	800b3d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3de:	697b      	ldr	r3, [r7, #20]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d018      	beq.n	800b42c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68da      	ldr	r2, [r3, #12]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	441a      	add	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68da      	ldr	r2, [r3, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	429a      	cmp	r2, r3
 800b412:	d303      	bcc.n	800b41c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68d9      	ldr	r1, [r3, #12]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b424:	461a      	mov	r2, r3
 800b426:	6838      	ldr	r0, [r7, #0]
 800b428:	f002 fdb2 	bl	800df90 <memcpy>
	}
}
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b43c:	f001 fd5a 	bl	800cef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b446:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b448:	e011      	b.n	800b46e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d012      	beq.n	800b478 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3324      	adds	r3, #36	; 0x24
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fe30 	bl	800c0bc <xTaskRemoveFromEventList>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b462:	f000 ff07 	bl	800c274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	3b01      	subs	r3, #1
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b472:	2b00      	cmp	r3, #0
 800b474:	dce9      	bgt.n	800b44a <prvUnlockQueue+0x16>
 800b476:	e000      	b.n	800b47a <prvUnlockQueue+0x46>
					break;
 800b478:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b482:	f001 fd67 	bl	800cf54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b486:	f001 fd35 	bl	800cef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b490:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b492:	e011      	b.n	800b4b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d012      	beq.n	800b4c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3310      	adds	r3, #16
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fe0b 	bl	800c0bc <xTaskRemoveFromEventList>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4ac:	f000 fee2 	bl	800c274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dce9      	bgt.n	800b494 <prvUnlockQueue+0x60>
 800b4c0:	e000      	b.n	800b4c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	22ff      	movs	r2, #255	; 0xff
 800b4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4cc:	f001 fd42 	bl	800cf54 <vPortExitCritical>
}
 800b4d0:	bf00      	nop
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4e0:	f001 fd08 	bl	800cef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e001      	b.n	800b4f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4f6:	f001 fd2d 	bl	800cf54 <vPortExitCritical>

	return xReturn;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b50c:	f001 fcf2 	bl	800cef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d102      	bne.n	800b522 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	e001      	b.n	800b526 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b526:	f001 fd15 	bl	800cf54 <vPortExitCritical>

	return xReturn;
 800b52a:	68fb      	ldr	r3, [r7, #12]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e014      	b.n	800b56e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b544:	4a0f      	ldr	r2, [pc, #60]	; (800b584 <vQueueAddToRegistry+0x50>)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10b      	bne.n	800b568 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b550:	490c      	ldr	r1, [pc, #48]	; (800b584 <vQueueAddToRegistry+0x50>)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b55a:	4a0a      	ldr	r2, [pc, #40]	; (800b584 <vQueueAddToRegistry+0x50>)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	00db      	lsls	r3, r3, #3
 800b560:	4413      	add	r3, r2
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b566:	e006      	b.n	800b576 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3301      	adds	r3, #1
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b07      	cmp	r3, #7
 800b572:	d9e7      	bls.n	800b544 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b574:	bf00      	nop
 800b576:	bf00      	nop
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20001538 	.word	0x20001538

0800b588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b598:	f001 fcac 	bl	800cef4 <vPortEnterCritical>
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a8:	d103      	bne.n	800b5b2 <vQueueWaitForMessageRestricted+0x2a>
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5be:	d103      	bne.n	800b5c8 <vQueueWaitForMessageRestricted+0x40>
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5c8:	f001 fcc4 	bl	800cf54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	3324      	adds	r3, #36	; 0x24
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fd41 	bl	800c064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5e2:	6978      	ldr	r0, [r7, #20]
 800b5e4:	f7ff ff26 	bl	800b434 <prvUnlockQueue>
	}
 800b5e8:	bf00      	nop
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08e      	sub	sp, #56	; 0x38
 800b5f4:	af04      	add	r7, sp, #16
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	623b      	str	r3, [r7, #32]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10a      	bne.n	800b636 <xTaskCreateStatic+0x46>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	61fb      	str	r3, [r7, #28]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b636:	236c      	movs	r3, #108	; 0x6c
 800b638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b6c      	cmp	r3, #108	; 0x6c
 800b63e:	d00a      	beq.n	800b656 <xTaskCreateStatic+0x66>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	61bb      	str	r3, [r7, #24]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b656:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01e      	beq.n	800b69c <xTaskCreateStatic+0xac>
 800b65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01b      	beq.n	800b69c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b66c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	2202      	movs	r2, #2
 800b672:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b676:	2300      	movs	r3, #0
 800b678:	9303      	str	r3, [sp, #12]
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	9302      	str	r3, [sp, #8]
 800b67e:	f107 0314 	add.w	r3, r7, #20
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 f850 	bl	800b734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b696:	f000 f8dd 	bl	800b854 <prvAddNewTaskToReadyList>
 800b69a:	e001      	b.n	800b6a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6a0:	697b      	ldr	r3, [r7, #20]
	}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3728      	adds	r7, #40	; 0x28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b08c      	sub	sp, #48	; 0x30
 800b6ae:	af04      	add	r7, sp, #16
 800b6b0:	60f8      	str	r0, [r7, #12]
 800b6b2:	60b9      	str	r1, [r7, #8]
 800b6b4:	603b      	str	r3, [r7, #0]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 fd3a 	bl	800d138 <pvPortMalloc>
 800b6c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00e      	beq.n	800b6ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6cc:	206c      	movs	r0, #108	; 0x6c
 800b6ce:	f001 fd33 	bl	800d138 <pvPortMalloc>
 800b6d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
 800b6e0:	e005      	b.n	800b6ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6e2:	6978      	ldr	r0, [r7, #20]
 800b6e4:	f001 fdf4 	bl	800d2d0 <vPortFree>
 800b6e8:	e001      	b.n	800b6ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d017      	beq.n	800b724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6fc:	88fa      	ldrh	r2, [r7, #6]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9303      	str	r3, [sp, #12]
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	9302      	str	r3, [sp, #8]
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 f80e 	bl	800b734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b718:	69f8      	ldr	r0, [r7, #28]
 800b71a:	f000 f89b 	bl	800b854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b71e:	2301      	movs	r3, #1
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	e002      	b.n	800b72a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b724:	f04f 33ff 	mov.w	r3, #4294967295
 800b728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b72a:	69bb      	ldr	r3, [r7, #24]
	}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	461a      	mov	r2, r3
 800b74c:	21a5      	movs	r1, #165	; 0xa5
 800b74e:	f002 fc2d 	bl	800dfac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b75c:	3b01      	subs	r3, #1
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f023 0307 	bic.w	r3, r3, #7
 800b76a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	617b      	str	r3, [r7, #20]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01f      	beq.n	800b7d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b792:	2300      	movs	r3, #0
 800b794:	61fb      	str	r3, [r7, #28]
 800b796:	e012      	b.n	800b7be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	7819      	ldrb	r1, [r3, #0]
 800b7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	3334      	adds	r3, #52	; 0x34
 800b7a8:	460a      	mov	r2, r1
 800b7aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	61fb      	str	r3, [r7, #28]
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2b1d      	cmp	r3, #29
 800b7c2:	d9e9      	bls.n	800b798 <prvInitialiseNewTask+0x64>
 800b7c4:	e000      	b.n	800b7c8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b7c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b7d0:	e003      	b.n	800b7da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	2b37      	cmp	r3, #55	; 0x37
 800b7de:	d901      	bls.n	800b7e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7e0:	2337      	movs	r3, #55	; 0x37
 800b7e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ee:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff f93e 	bl	800aa7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	3318      	adds	r3, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff f939 	bl	800aa7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b81e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	2200      	movs	r2, #0
 800b824:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	68f9      	ldr	r1, [r7, #12]
 800b832:	69b8      	ldr	r0, [r7, #24]
 800b834:	f001 fa2e 	bl	800cc94 <pxPortInitialiseStack>
 800b838:	4602      	mov	r2, r0
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b84a:	bf00      	nop
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b85c:	f001 fb4a 	bl	800cef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b860:	4b2d      	ldr	r3, [pc, #180]	; (800b918 <prvAddNewTaskToReadyList+0xc4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3301      	adds	r3, #1
 800b866:	4a2c      	ldr	r2, [pc, #176]	; (800b918 <prvAddNewTaskToReadyList+0xc4>)
 800b868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b86a:	4b2c      	ldr	r3, [pc, #176]	; (800b91c <prvAddNewTaskToReadyList+0xc8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d109      	bne.n	800b886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b872:	4a2a      	ldr	r2, [pc, #168]	; (800b91c <prvAddNewTaskToReadyList+0xc8>)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b878:	4b27      	ldr	r3, [pc, #156]	; (800b918 <prvAddNewTaskToReadyList+0xc4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d110      	bne.n	800b8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b880:	f000 fd1c 	bl	800c2bc <prvInitialiseTaskLists>
 800b884:	e00d      	b.n	800b8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b886:	4b26      	ldr	r3, [pc, #152]	; (800b920 <prvAddNewTaskToReadyList+0xcc>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d109      	bne.n	800b8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b88e:	4b23      	ldr	r3, [pc, #140]	; (800b91c <prvAddNewTaskToReadyList+0xc8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	429a      	cmp	r2, r3
 800b89a:	d802      	bhi.n	800b8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b89c:	4a1f      	ldr	r2, [pc, #124]	; (800b91c <prvAddNewTaskToReadyList+0xc8>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8a2:	4b20      	ldr	r3, [pc, #128]	; (800b924 <prvAddNewTaskToReadyList+0xd0>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <prvAddNewTaskToReadyList+0xd0>)
 800b8aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b8ac:	4b1d      	ldr	r3, [pc, #116]	; (800b924 <prvAddNewTaskToReadyList+0xd0>)
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b8:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <prvAddNewTaskToReadyList+0xd4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d903      	bls.n	800b8c8 <prvAddNewTaskToReadyList+0x74>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	4a18      	ldr	r2, [pc, #96]	; (800b928 <prvAddNewTaskToReadyList+0xd4>)
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4a15      	ldr	r2, [pc, #84]	; (800b92c <prvAddNewTaskToReadyList+0xd8>)
 800b8d6:	441a      	add	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4610      	mov	r0, r2
 800b8e0:	f7ff f8d9 	bl	800aa96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8e4:	f001 fb36 	bl	800cf54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8e8:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <prvAddNewTaskToReadyList+0xcc>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <prvAddNewTaskToReadyList+0xc8>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d207      	bcs.n	800b90e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <prvAddNewTaskToReadyList+0xdc>)
 800b900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b90e:	bf00      	nop
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20001a4c 	.word	0x20001a4c
 800b91c:	20001578 	.word	0x20001578
 800b920:	20001a58 	.word	0x20001a58
 800b924:	20001a68 	.word	0x20001a68
 800b928:	20001a54 	.word	0x20001a54
 800b92c:	2000157c 	.word	0x2000157c
 800b930:	e000ed04 	.word	0xe000ed04

0800b934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d017      	beq.n	800b976 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b946:	4b13      	ldr	r3, [pc, #76]	; (800b994 <vTaskDelay+0x60>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <vTaskDelay+0x30>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60bb      	str	r3, [r7, #8]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b964:	f000 f986 	bl	800bc74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b968:	2100      	movs	r1, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fdf0 	bl	800c550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b970:	f000 f98e 	bl	800bc90 <xTaskResumeAll>
 800b974:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d107      	bne.n	800b98c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b97c:	4b06      	ldr	r3, [pc, #24]	; (800b998 <vTaskDelay+0x64>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20001a74 	.word	0x20001a74
 800b998:	e000ed04 	.word	0xe000ed04

0800b99c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b9a4:	f001 faa6 	bl	800cef4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d102      	bne.n	800b9b4 <vTaskSuspend+0x18>
 800b9ae:	4b30      	ldr	r3, [pc, #192]	; (800ba70 <vTaskSuspend+0xd4>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	e000      	b.n	800b9b6 <vTaskSuspend+0x1a>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff f8c7 	bl	800ab50 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d004      	beq.n	800b9d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3318      	adds	r3, #24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff f8be 	bl	800ab50 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4826      	ldr	r0, [pc, #152]	; (800ba74 <vTaskSuspend+0xd8>)
 800b9dc:	f7ff f85b 	bl	800aa96 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d103      	bne.n	800b9f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b9f4:	f001 faae 	bl	800cf54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b9f8:	4b1f      	ldr	r3, [pc, #124]	; (800ba78 <vTaskSuspend+0xdc>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d005      	beq.n	800ba0c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ba00:	f001 fa78 	bl	800cef4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ba04:	f000 fcf8 	bl	800c3f8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ba08:	f001 faa4 	bl	800cf54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ba0c:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <vTaskSuspend+0xd4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d127      	bne.n	800ba66 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ba16:	4b18      	ldr	r3, [pc, #96]	; (800ba78 <vTaskSuspend+0xdc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d017      	beq.n	800ba4e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ba1e:	4b17      	ldr	r3, [pc, #92]	; (800ba7c <vTaskSuspend+0xe0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00a      	beq.n	800ba3c <vTaskSuspend+0xa0>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ba3c:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <vTaskSuspend+0xe4>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba4c:	e00b      	b.n	800ba66 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <vTaskSuspend+0xd8>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b0c      	ldr	r3, [pc, #48]	; (800ba84 <vTaskSuspend+0xe8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d103      	bne.n	800ba62 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ba5a:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <vTaskSuspend+0xd4>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]
	}
 800ba60:	e001      	b.n	800ba66 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ba62:	f000 fa7d 	bl	800bf60 <vTaskSwitchContext>
	}
 800ba66:	bf00      	nop
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20001578 	.word	0x20001578
 800ba74:	20001a38 	.word	0x20001a38
 800ba78:	20001a58 	.word	0x20001a58
 800ba7c:	20001a74 	.word	0x20001a74
 800ba80:	e000ed04 	.word	0xe000ed04
 800ba84:	20001a4c 	.word	0x20001a4c

0800ba88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ba88:	b480      	push	{r7}
 800ba8a:	b087      	sub	sp, #28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60fb      	str	r3, [r7, #12]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	4a0a      	ldr	r2, [pc, #40]	; (800bae4 <prvTaskIsTaskSuspended+0x5c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d10a      	bne.n	800bad4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	4a09      	ldr	r2, [pc, #36]	; (800bae8 <prvTaskIsTaskSuspended+0x60>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d005      	beq.n	800bad4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bad6:	4618      	mov	r0, r3
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	20001a38 	.word	0x20001a38
 800bae8:	20001a0c 	.word	0x20001a0c

0800baec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <vTaskResume+0x28>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	60bb      	str	r3, [r7, #8]
}
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800bb14:	4b20      	ldr	r3, [pc, #128]	; (800bb98 <vTaskResume+0xac>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d038      	beq.n	800bb90 <vTaskResume+0xa4>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d035      	beq.n	800bb90 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800bb24:	f001 f9e6 	bl	800cef4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7ff ffad 	bl	800ba88 <prvTaskIsTaskSuspended>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d02b      	beq.n	800bb8c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff f809 	bl	800ab50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	4b16      	ldr	r3, [pc, #88]	; (800bb9c <vTaskResume+0xb0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d903      	bls.n	800bb52 <vTaskResume+0x66>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4e:	4a13      	ldr	r2, [pc, #76]	; (800bb9c <vTaskResume+0xb0>)
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4a10      	ldr	r2, [pc, #64]	; (800bba0 <vTaskResume+0xb4>)
 800bb60:	441a      	add	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f7fe ff94 	bl	800aa96 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb72:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <vTaskResume+0xac>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d307      	bcc.n	800bb8c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bb7c:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <vTaskResume+0xb8>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bb8c:	f001 f9e2 	bl	800cf54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20001578 	.word	0x20001578
 800bb9c:	20001a54 	.word	0x20001a54
 800bba0:	2000157c 	.word	0x2000157c
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	; 0x28
 800bbac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbb6:	463a      	mov	r2, r7
 800bbb8:	1d39      	adds	r1, r7, #4
 800bbba:	f107 0308 	add.w	r3, r7, #8
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe ff08 	bl	800a9d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	9202      	str	r2, [sp, #8]
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	460a      	mov	r2, r1
 800bbd6:	4921      	ldr	r1, [pc, #132]	; (800bc5c <vTaskStartScheduler+0xb4>)
 800bbd8:	4821      	ldr	r0, [pc, #132]	; (800bc60 <vTaskStartScheduler+0xb8>)
 800bbda:	f7ff fd09 	bl	800b5f0 <xTaskCreateStatic>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4a20      	ldr	r2, [pc, #128]	; (800bc64 <vTaskStartScheduler+0xbc>)
 800bbe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbe4:	4b1f      	ldr	r3, [pc, #124]	; (800bc64 <vTaskStartScheduler+0xbc>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	e001      	b.n	800bbf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d102      	bne.n	800bc02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bbfc:	f000 fcfc 	bl	800c5f8 <xTimerCreateTimerTask>
 800bc00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d116      	bne.n	800bc36 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	613b      	str	r3, [r7, #16]
}
 800bc1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <vTaskStartScheduler+0xc0>)
 800bc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc24:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <vTaskStartScheduler+0xc4>)
 800bc26:	2201      	movs	r2, #1
 800bc28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <vTaskStartScheduler+0xc8>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc30:	f001 f8be 	bl	800cdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc34:	e00e      	b.n	800bc54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3c:	d10a      	bne.n	800bc54 <vTaskStartScheduler+0xac>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60fb      	str	r3, [r7, #12]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <vTaskStartScheduler+0xaa>
}
 800bc54:	bf00      	nop
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0800ec1c 	.word	0x0800ec1c
 800bc60:	0800c28d 	.word	0x0800c28d
 800bc64:	20001a70 	.word	0x20001a70
 800bc68:	20001a6c 	.word	0x20001a6c
 800bc6c:	20001a58 	.word	0x20001a58
 800bc70:	20001a50 	.word	0x20001a50

0800bc74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc78:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <vTaskSuspendAll+0x18>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	4a03      	ldr	r2, [pc, #12]	; (800bc8c <vTaskSuspendAll+0x18>)
 800bc80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc82:	bf00      	nop
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20001a74 	.word	0x20001a74

0800bc90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc9e:	4b42      	ldr	r3, [pc, #264]	; (800bda8 <xTaskResumeAll+0x118>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <xTaskResumeAll+0x2c>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	603b      	str	r3, [r7, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcbc:	f001 f91a 	bl	800cef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcc0:	4b39      	ldr	r3, [pc, #228]	; (800bda8 <xTaskResumeAll+0x118>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	4a38      	ldr	r2, [pc, #224]	; (800bda8 <xTaskResumeAll+0x118>)
 800bcc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcca:	4b37      	ldr	r3, [pc, #220]	; (800bda8 <xTaskResumeAll+0x118>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d162      	bne.n	800bd98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcd2:	4b36      	ldr	r3, [pc, #216]	; (800bdac <xTaskResumeAll+0x11c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d05e      	beq.n	800bd98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcda:	e02f      	b.n	800bd3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcdc:	4b34      	ldr	r3, [pc, #208]	; (800bdb0 <xTaskResumeAll+0x120>)
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3318      	adds	r3, #24
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe ff31 	bl	800ab50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fe ff2c 	bl	800ab50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfc:	4b2d      	ldr	r3, [pc, #180]	; (800bdb4 <xTaskResumeAll+0x124>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d903      	bls.n	800bd0c <xTaskResumeAll+0x7c>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	4a2a      	ldr	r2, [pc, #168]	; (800bdb4 <xTaskResumeAll+0x124>)
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4a27      	ldr	r2, [pc, #156]	; (800bdb8 <xTaskResumeAll+0x128>)
 800bd1a:	441a      	add	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4619      	mov	r1, r3
 800bd22:	4610      	mov	r0, r2
 800bd24:	f7fe feb7 	bl	800aa96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2c:	4b23      	ldr	r3, [pc, #140]	; (800bdbc <xTaskResumeAll+0x12c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d302      	bcc.n	800bd3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd36:	4b22      	ldr	r3, [pc, #136]	; (800bdc0 <xTaskResumeAll+0x130>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd3c:	4b1c      	ldr	r3, [pc, #112]	; (800bdb0 <xTaskResumeAll+0x120>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1cb      	bne.n	800bcdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd4a:	f000 fb55 	bl	800c3f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd4e:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <xTaskResumeAll+0x134>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d010      	beq.n	800bd7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd5a:	f000 f847 	bl	800bdec <xTaskIncrementTick>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd64:	4b16      	ldr	r3, [pc, #88]	; (800bdc0 <xTaskResumeAll+0x130>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f1      	bne.n	800bd5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd76:	4b13      	ldr	r3, [pc, #76]	; (800bdc4 <xTaskResumeAll+0x134>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd7c:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <xTaskResumeAll+0x130>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd84:	2301      	movs	r3, #1
 800bd86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd88:	4b0f      	ldr	r3, [pc, #60]	; (800bdc8 <xTaskResumeAll+0x138>)
 800bd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd98:	f001 f8dc 	bl	800cf54 <vPortExitCritical>

	return xAlreadyYielded;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20001a74 	.word	0x20001a74
 800bdac:	20001a4c 	.word	0x20001a4c
 800bdb0:	20001a0c 	.word	0x20001a0c
 800bdb4:	20001a54 	.word	0x20001a54
 800bdb8:	2000157c 	.word	0x2000157c
 800bdbc:	20001578 	.word	0x20001578
 800bdc0:	20001a60 	.word	0x20001a60
 800bdc4:	20001a5c 	.word	0x20001a5c
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdd2:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <xTaskGetTickCount+0x1c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bdd8:	687b      	ldr	r3, [r7, #4]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	20001a50 	.word	0x20001a50

0800bdec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdf6:	4b4f      	ldr	r3, [pc, #316]	; (800bf34 <xTaskIncrementTick+0x148>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f040 808f 	bne.w	800bf1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be00:	4b4d      	ldr	r3, [pc, #308]	; (800bf38 <xTaskIncrementTick+0x14c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3301      	adds	r3, #1
 800be06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be08:	4a4b      	ldr	r2, [pc, #300]	; (800bf38 <xTaskIncrementTick+0x14c>)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d120      	bne.n	800be56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be14:	4b49      	ldr	r3, [pc, #292]	; (800bf3c <xTaskIncrementTick+0x150>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <xTaskIncrementTick+0x48>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	603b      	str	r3, [r7, #0]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <xTaskIncrementTick+0x46>
 800be34:	4b41      	ldr	r3, [pc, #260]	; (800bf3c <xTaskIncrementTick+0x150>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	4b41      	ldr	r3, [pc, #260]	; (800bf40 <xTaskIncrementTick+0x154>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a3f      	ldr	r2, [pc, #252]	; (800bf3c <xTaskIncrementTick+0x150>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	4a3f      	ldr	r2, [pc, #252]	; (800bf40 <xTaskIncrementTick+0x154>)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	4b3e      	ldr	r3, [pc, #248]	; (800bf44 <xTaskIncrementTick+0x158>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	4a3d      	ldr	r2, [pc, #244]	; (800bf44 <xTaskIncrementTick+0x158>)
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	f000 fad1 	bl	800c3f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be56:	4b3c      	ldr	r3, [pc, #240]	; (800bf48 <xTaskIncrementTick+0x15c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	693a      	ldr	r2, [r7, #16]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d349      	bcc.n	800bef4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be60:	4b36      	ldr	r3, [pc, #216]	; (800bf3c <xTaskIncrementTick+0x150>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d104      	bne.n	800be74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be6a:	4b37      	ldr	r3, [pc, #220]	; (800bf48 <xTaskIncrementTick+0x15c>)
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	601a      	str	r2, [r3, #0]
					break;
 800be72:	e03f      	b.n	800bef4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be74:	4b31      	ldr	r3, [pc, #196]	; (800bf3c <xTaskIncrementTick+0x150>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d203      	bcs.n	800be94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be8c:	4a2e      	ldr	r2, [pc, #184]	; (800bf48 <xTaskIncrementTick+0x15c>)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be92:	e02f      	b.n	800bef4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	3304      	adds	r3, #4
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe fe59 	bl	800ab50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d004      	beq.n	800beb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	3318      	adds	r3, #24
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fe50 	bl	800ab50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb4:	4b25      	ldr	r3, [pc, #148]	; (800bf4c <xTaskIncrementTick+0x160>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d903      	bls.n	800bec4 <xTaskIncrementTick+0xd8>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	4a22      	ldr	r2, [pc, #136]	; (800bf4c <xTaskIncrementTick+0x160>)
 800bec2:	6013      	str	r3, [r2, #0]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4a1f      	ldr	r2, [pc, #124]	; (800bf50 <xTaskIncrementTick+0x164>)
 800bed2:	441a      	add	r2, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7fe fddb 	bl	800aa96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee4:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <xTaskIncrementTick+0x168>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	429a      	cmp	r2, r3
 800beec:	d3b8      	bcc.n	800be60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800beee:	2301      	movs	r3, #1
 800bef0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bef2:	e7b5      	b.n	800be60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bef4:	4b17      	ldr	r3, [pc, #92]	; (800bf54 <xTaskIncrementTick+0x168>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befa:	4915      	ldr	r1, [pc, #84]	; (800bf50 <xTaskIncrementTick+0x164>)
 800befc:	4613      	mov	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	440b      	add	r3, r1
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d901      	bls.n	800bf10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf10:	4b11      	ldr	r3, [pc, #68]	; (800bf58 <xTaskIncrementTick+0x16c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d007      	beq.n	800bf28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	e004      	b.n	800bf28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <xTaskIncrementTick+0x170>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	4a0d      	ldr	r2, [pc, #52]	; (800bf5c <xTaskIncrementTick+0x170>)
 800bf26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf28:	697b      	ldr	r3, [r7, #20]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20001a74 	.word	0x20001a74
 800bf38:	20001a50 	.word	0x20001a50
 800bf3c:	20001a04 	.word	0x20001a04
 800bf40:	20001a08 	.word	0x20001a08
 800bf44:	20001a64 	.word	0x20001a64
 800bf48:	20001a6c 	.word	0x20001a6c
 800bf4c:	20001a54 	.word	0x20001a54
 800bf50:	2000157c 	.word	0x2000157c
 800bf54:	20001578 	.word	0x20001578
 800bf58:	20001a60 	.word	0x20001a60
 800bf5c:	20001a5c 	.word	0x20001a5c

0800bf60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf66:	4b28      	ldr	r3, [pc, #160]	; (800c008 <vTaskSwitchContext+0xa8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf6e:	4b27      	ldr	r3, [pc, #156]	; (800c00c <vTaskSwitchContext+0xac>)
 800bf70:	2201      	movs	r2, #1
 800bf72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf74:	e041      	b.n	800bffa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bf76:	4b25      	ldr	r3, [pc, #148]	; (800c00c <vTaskSwitchContext+0xac>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7c:	4b24      	ldr	r3, [pc, #144]	; (800c010 <vTaskSwitchContext+0xb0>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e010      	b.n	800bfa6 <vTaskSwitchContext+0x46>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <vTaskSwitchContext+0x40>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	607b      	str	r3, [r7, #4]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <vTaskSwitchContext+0x3e>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]
 800bfa6:	491b      	ldr	r1, [pc, #108]	; (800c014 <vTaskSwitchContext+0xb4>)
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	440b      	add	r3, r1
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d0e4      	beq.n	800bf84 <vTaskSwitchContext+0x24>
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4a13      	ldr	r2, [pc, #76]	; (800c014 <vTaskSwitchContext+0xb4>)
 800bfc6:	4413      	add	r3, r2
 800bfc8:	60bb      	str	r3, [r7, #8]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d104      	bne.n	800bfea <vTaskSwitchContext+0x8a>
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	605a      	str	r2, [r3, #4]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	4a09      	ldr	r2, [pc, #36]	; (800c018 <vTaskSwitchContext+0xb8>)
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	4a06      	ldr	r2, [pc, #24]	; (800c010 <vTaskSwitchContext+0xb0>)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6013      	str	r3, [r2, #0]
}
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	20001a74 	.word	0x20001a74
 800c00c:	20001a60 	.word	0x20001a60
 800c010:	20001a54 	.word	0x20001a54
 800c014:	2000157c 	.word	0x2000157c
 800c018:	20001578 	.word	0x20001578

0800c01c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c042:	4b07      	ldr	r3, [pc, #28]	; (800c060 <vTaskPlaceOnEventList+0x44>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3318      	adds	r3, #24
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7fe fd47 	bl	800aade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c050:	2101      	movs	r1, #1
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f000 fa7c 	bl	800c550 <prvAddCurrentTaskToDelayedList>
}
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20001578 	.word	0x20001578

0800c064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	617b      	str	r3, [r7, #20]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c08c:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3318      	adds	r3, #24
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7fe fcfe 	bl	800aa96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	68b8      	ldr	r0, [r7, #8]
 800c0aa:	f000 fa51 	bl	800c550 <prvAddCurrentTaskToDelayedList>
	}
 800c0ae:	bf00      	nop
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20001578 	.word	0x20001578

0800c0bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10a      	bne.n	800c0e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	60fb      	str	r3, [r7, #12]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	3318      	adds	r3, #24
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fd2f 	bl	800ab50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f2:	4b1e      	ldr	r3, [pc, #120]	; (800c16c <xTaskRemoveFromEventList+0xb0>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d11d      	bne.n	800c136 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fd26 	bl	800ab50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c108:	4b19      	ldr	r3, [pc, #100]	; (800c170 <xTaskRemoveFromEventList+0xb4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d903      	bls.n	800c118 <xTaskRemoveFromEventList+0x5c>
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c114:	4a16      	ldr	r2, [pc, #88]	; (800c170 <xTaskRemoveFromEventList+0xb4>)
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4613      	mov	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4a13      	ldr	r2, [pc, #76]	; (800c174 <xTaskRemoveFromEventList+0xb8>)
 800c126:	441a      	add	r2, r3
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4619      	mov	r1, r3
 800c12e:	4610      	mov	r0, r2
 800c130:	f7fe fcb1 	bl	800aa96 <vListInsertEnd>
 800c134:	e005      	b.n	800c142 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3318      	adds	r3, #24
 800c13a:	4619      	mov	r1, r3
 800c13c:	480e      	ldr	r0, [pc, #56]	; (800c178 <xTaskRemoveFromEventList+0xbc>)
 800c13e:	f7fe fcaa 	bl	800aa96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c146:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <xTaskRemoveFromEventList+0xc0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d905      	bls.n	800c15c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c150:	2301      	movs	r3, #1
 800c152:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c154:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <xTaskRemoveFromEventList+0xc4>)
 800c156:	2201      	movs	r2, #1
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	e001      	b.n	800c160 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c15c:	2300      	movs	r3, #0
 800c15e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c160:	697b      	ldr	r3, [r7, #20]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20001a74 	.word	0x20001a74
 800c170:	20001a54 	.word	0x20001a54
 800c174:	2000157c 	.word	0x2000157c
 800c178:	20001a0c 	.word	0x20001a0c
 800c17c:	20001578 	.word	0x20001578
 800c180:	20001a60 	.word	0x20001a60

0800c184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <vTaskInternalSetTimeOutState+0x24>)
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <vTaskInternalSetTimeOutState+0x28>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	20001a64 	.word	0x20001a64
 800c1ac:	20001a50 	.word	0x20001a50

0800c1b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10a      	bne.n	800c1d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	60fb      	str	r3, [r7, #12]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c1f2:	f000 fe7f 	bl	800cef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1f6:	4b1d      	ldr	r3, [pc, #116]	; (800c26c <xTaskCheckForTimeOut+0xbc>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d102      	bne.n	800c216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c210:	2300      	movs	r3, #0
 800c212:	61fb      	str	r3, [r7, #28]
 800c214:	e023      	b.n	800c25e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	4b15      	ldr	r3, [pc, #84]	; (800c270 <xTaskCheckForTimeOut+0xc0>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d007      	beq.n	800c232 <xTaskCheckForTimeOut+0x82>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	69ba      	ldr	r2, [r7, #24]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d302      	bcc.n	800c232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c22c:	2301      	movs	r3, #1
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e015      	b.n	800c25e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d20b      	bcs.n	800c254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	1ad2      	subs	r2, r2, r3
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff ff9b 	bl	800c184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c24e:	2300      	movs	r3, #0
 800c250:	61fb      	str	r3, [r7, #28]
 800c252:	e004      	b.n	800c25e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c25a:	2301      	movs	r3, #1
 800c25c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c25e:	f000 fe79 	bl	800cf54 <vPortExitCritical>

	return xReturn;
 800c262:	69fb      	ldr	r3, [r7, #28]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3720      	adds	r7, #32
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20001a50 	.word	0x20001a50
 800c270:	20001a64 	.word	0x20001a64

0800c274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c278:	4b03      	ldr	r3, [pc, #12]	; (800c288 <vTaskMissedYield+0x14>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
}
 800c27e:	bf00      	nop
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	20001a60 	.word	0x20001a60

0800c28c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c294:	f000 f852 	bl	800c33c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <prvIdleTask+0x28>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d9f9      	bls.n	800c294 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <prvIdleTask+0x2c>)
 800c2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2b0:	e7f0      	b.n	800c294 <prvIdleTask+0x8>
 800c2b2:	bf00      	nop
 800c2b4:	2000157c 	.word	0x2000157c
 800c2b8:	e000ed04 	.word	0xe000ed04

0800c2bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	607b      	str	r3, [r7, #4]
 800c2c6:	e00c      	b.n	800c2e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4a12      	ldr	r2, [pc, #72]	; (800c31c <prvInitialiseTaskLists+0x60>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fbb0 	bl	800aa3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	607b      	str	r3, [r7, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b37      	cmp	r3, #55	; 0x37
 800c2e6:	d9ef      	bls.n	800c2c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2e8:	480d      	ldr	r0, [pc, #52]	; (800c320 <prvInitialiseTaskLists+0x64>)
 800c2ea:	f7fe fba7 	bl	800aa3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2ee:	480d      	ldr	r0, [pc, #52]	; (800c324 <prvInitialiseTaskLists+0x68>)
 800c2f0:	f7fe fba4 	bl	800aa3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2f4:	480c      	ldr	r0, [pc, #48]	; (800c328 <prvInitialiseTaskLists+0x6c>)
 800c2f6:	f7fe fba1 	bl	800aa3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2fa:	480c      	ldr	r0, [pc, #48]	; (800c32c <prvInitialiseTaskLists+0x70>)
 800c2fc:	f7fe fb9e 	bl	800aa3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c300:	480b      	ldr	r0, [pc, #44]	; (800c330 <prvInitialiseTaskLists+0x74>)
 800c302:	f7fe fb9b 	bl	800aa3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c306:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <prvInitialiseTaskLists+0x78>)
 800c308:	4a05      	ldr	r2, [pc, #20]	; (800c320 <prvInitialiseTaskLists+0x64>)
 800c30a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvInitialiseTaskLists+0x7c>)
 800c30e:	4a05      	ldr	r2, [pc, #20]	; (800c324 <prvInitialiseTaskLists+0x68>)
 800c310:	601a      	str	r2, [r3, #0]
}
 800c312:	bf00      	nop
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000157c 	.word	0x2000157c
 800c320:	200019dc 	.word	0x200019dc
 800c324:	200019f0 	.word	0x200019f0
 800c328:	20001a0c 	.word	0x20001a0c
 800c32c:	20001a20 	.word	0x20001a20
 800c330:	20001a38 	.word	0x20001a38
 800c334:	20001a04 	.word	0x20001a04
 800c338:	20001a08 	.word	0x20001a08

0800c33c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c342:	e019      	b.n	800c378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c344:	f000 fdd6 	bl	800cef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c348:	4b10      	ldr	r3, [pc, #64]	; (800c38c <prvCheckTasksWaitingTermination+0x50>)
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3304      	adds	r3, #4
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe fbfb 	bl	800ab50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c35a:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <prvCheckTasksWaitingTermination+0x54>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	4a0b      	ldr	r2, [pc, #44]	; (800c390 <prvCheckTasksWaitingTermination+0x54>)
 800c362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <prvCheckTasksWaitingTermination+0x58>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3b01      	subs	r3, #1
 800c36a:	4a0a      	ldr	r2, [pc, #40]	; (800c394 <prvCheckTasksWaitingTermination+0x58>)
 800c36c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c36e:	f000 fdf1 	bl	800cf54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f810 	bl	800c398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <prvCheckTasksWaitingTermination+0x58>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e1      	bne.n	800c344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20001a20 	.word	0x20001a20
 800c390:	20001a4c 	.word	0x20001a4c
 800c394:	20001a34 	.word	0x20001a34

0800c398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d108      	bne.n	800c3bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 ff8e 	bl	800d2d0 <vPortFree>
				vPortFree( pxTCB );
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 ff8b 	bl	800d2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3ba:	e018      	b.n	800c3ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d103      	bne.n	800c3ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 ff82 	bl	800d2d0 <vPortFree>
	}
 800c3cc:	e00f      	b.n	800c3ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d00a      	beq.n	800c3ee <prvDeleteTCB+0x56>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	60fb      	str	r3, [r7, #12]
}
 800c3ea:	bf00      	nop
 800c3ec:	e7fe      	b.n	800c3ec <prvDeleteTCB+0x54>
	}
 800c3ee:	bf00      	nop
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fe:	4b0c      	ldr	r3, [pc, #48]	; (800c430 <prvResetNextTaskUnblockTime+0x38>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d104      	bne.n	800c412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c408:	4b0a      	ldr	r3, [pc, #40]	; (800c434 <prvResetNextTaskUnblockTime+0x3c>)
 800c40a:	f04f 32ff 	mov.w	r2, #4294967295
 800c40e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c410:	e008      	b.n	800c424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c412:	4b07      	ldr	r3, [pc, #28]	; (800c430 <prvResetNextTaskUnblockTime+0x38>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	4a04      	ldr	r2, [pc, #16]	; (800c434 <prvResetNextTaskUnblockTime+0x3c>)
 800c422:	6013      	str	r3, [r2, #0]
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	20001a04 	.word	0x20001a04
 800c434:	20001a6c 	.word	0x20001a6c

0800c438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c43e:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <xTaskGetSchedulerState+0x34>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d102      	bne.n	800c44c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c446:	2301      	movs	r3, #1
 800c448:	607b      	str	r3, [r7, #4]
 800c44a:	e008      	b.n	800c45e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c44c:	4b08      	ldr	r3, [pc, #32]	; (800c470 <xTaskGetSchedulerState+0x38>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c454:	2302      	movs	r3, #2
 800c456:	607b      	str	r3, [r7, #4]
 800c458:	e001      	b.n	800c45e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c45a:	2300      	movs	r3, #0
 800c45c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c45e:	687b      	ldr	r3, [r7, #4]
	}
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	20001a58 	.word	0x20001a58
 800c470:	20001a74 	.word	0x20001a74

0800c474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d056      	beq.n	800c538 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c48a:	4b2e      	ldr	r3, [pc, #184]	; (800c544 <xTaskPriorityDisinherit+0xd0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	429a      	cmp	r2, r3
 800c492:	d00a      	beq.n	800c4aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	60fb      	str	r3, [r7, #12]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10a      	bne.n	800c4c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	60bb      	str	r3, [r7, #8]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4cc:	1e5a      	subs	r2, r3, #1
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d02c      	beq.n	800c538 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d128      	bne.n	800c538 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fb30 	bl	800ab50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c508:	4b0f      	ldr	r3, [pc, #60]	; (800c548 <xTaskPriorityDisinherit+0xd4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d903      	bls.n	800c518 <xTaskPriorityDisinherit+0xa4>
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	4a0c      	ldr	r2, [pc, #48]	; (800c548 <xTaskPriorityDisinherit+0xd4>)
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51c:	4613      	mov	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4a09      	ldr	r2, [pc, #36]	; (800c54c <xTaskPriorityDisinherit+0xd8>)
 800c526:	441a      	add	r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	3304      	adds	r3, #4
 800c52c:	4619      	mov	r1, r3
 800c52e:	4610      	mov	r0, r2
 800c530:	f7fe fab1 	bl	800aa96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c538:	697b      	ldr	r3, [r7, #20]
	}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20001578 	.word	0x20001578
 800c548:	20001a54 	.word	0x20001a54
 800c54c:	2000157c 	.word	0x2000157c

0800c550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c55a:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c560:	4b20      	ldr	r3, [pc, #128]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3304      	adds	r3, #4
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe faf2 	bl	800ab50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d10a      	bne.n	800c58a <prvAddCurrentTaskToDelayedList+0x3a>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d007      	beq.n	800c58a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c57a:	4b1a      	ldr	r3, [pc, #104]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	3304      	adds	r3, #4
 800c580:	4619      	mov	r1, r3
 800c582:	4819      	ldr	r0, [pc, #100]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c584:	f7fe fa87 	bl	800aa96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c588:	e026      	b.n	800c5d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4413      	add	r3, r2
 800c590:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c592:	4b14      	ldr	r3, [pc, #80]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d209      	bcs.n	800c5b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f7fe fa95 	bl	800aade <vListInsert>
}
 800c5b4:	e010      	b.n	800c5d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b6:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3304      	adds	r3, #4
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	f7fe fa8b 	bl	800aade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d202      	bcs.n	800c5d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5d2:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	6013      	str	r3, [r2, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001a50 	.word	0x20001a50
 800c5e4:	20001578 	.word	0x20001578
 800c5e8:	20001a38 	.word	0x20001a38
 800c5ec:	20001a08 	.word	0x20001a08
 800c5f0:	20001a04 	.word	0x20001a04
 800c5f4:	20001a6c 	.word	0x20001a6c

0800c5f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08a      	sub	sp, #40	; 0x28
 800c5fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c602:	f000 fb07 	bl	800cc14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c606:	4b1c      	ldr	r3, [pc, #112]	; (800c678 <xTimerCreateTimerTask+0x80>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d021      	beq.n	800c652 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c616:	1d3a      	adds	r2, r7, #4
 800c618:	f107 0108 	add.w	r1, r7, #8
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe f9f1 	bl	800aa08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	9202      	str	r2, [sp, #8]
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	2302      	movs	r3, #2
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	460a      	mov	r2, r1
 800c638:	4910      	ldr	r1, [pc, #64]	; (800c67c <xTimerCreateTimerTask+0x84>)
 800c63a:	4811      	ldr	r0, [pc, #68]	; (800c680 <xTimerCreateTimerTask+0x88>)
 800c63c:	f7fe ffd8 	bl	800b5f0 <xTaskCreateStatic>
 800c640:	4603      	mov	r3, r0
 800c642:	4a10      	ldr	r2, [pc, #64]	; (800c684 <xTimerCreateTimerTask+0x8c>)
 800c644:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c646:	4b0f      	ldr	r3, [pc, #60]	; (800c684 <xTimerCreateTimerTask+0x8c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c64e:	2301      	movs	r3, #1
 800c650:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10a      	bne.n	800c66e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	613b      	str	r3, [r7, #16]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c66e:	697b      	ldr	r3, [r7, #20]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20001aa8 	.word	0x20001aa8
 800c67c:	0800ec24 	.word	0x0800ec24
 800c680:	0800c7bd 	.word	0x0800c7bd
 800c684:	20001aac 	.word	0x20001aac

0800c688 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c696:	2300      	movs	r3, #0
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	623b      	str	r3, [r7, #32]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	; (800c720 <xTimerGenericCommand+0x98>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d02a      	beq.n	800c714 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b05      	cmp	r3, #5
 800c6ce:	dc18      	bgt.n	800c702 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6d0:	f7ff feb2 	bl	800c438 <xTaskGetSchedulerState>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d109      	bne.n	800c6ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <xTimerGenericCommand+0x98>)
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	f107 0110 	add.w	r1, r7, #16
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e6:	f7fe fb9b 	bl	800ae20 <xQueueGenericSend>
 800c6ea:	6278      	str	r0, [r7, #36]	; 0x24
 800c6ec:	e012      	b.n	800c714 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6ee:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <xTimerGenericCommand+0x98>)
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	f107 0110 	add.w	r1, r7, #16
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f7fe fb91 	bl	800ae20 <xQueueGenericSend>
 800c6fe:	6278      	str	r0, [r7, #36]	; 0x24
 800c700:	e008      	b.n	800c714 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c702:	4b07      	ldr	r3, [pc, #28]	; (800c720 <xTimerGenericCommand+0x98>)
 800c704:	6818      	ldr	r0, [r3, #0]
 800c706:	f107 0110 	add.w	r1, r7, #16
 800c70a:	2300      	movs	r3, #0
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	f7fe fc85 	bl	800b01c <xQueueGenericSendFromISR>
 800c712:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c716:	4618      	mov	r0, r3
 800c718:	3728      	adds	r7, #40	; 0x28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20001aa8 	.word	0x20001aa8

0800c724 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af02      	add	r7, sp, #8
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c72e:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <prvProcessExpiredTimer+0x94>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fa07 	bl	800ab50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d022      	beq.n	800c796 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	699a      	ldr	r2, [r3, #24]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	18d1      	adds	r1, r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	6978      	ldr	r0, [r7, #20]
 800c75e:	f000 f8d1 	bl	800c904 <prvInsertTimerInActiveList>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01f      	beq.n	800c7a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c768:	2300      	movs	r3, #0
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2300      	movs	r3, #0
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	2100      	movs	r1, #0
 800c772:	6978      	ldr	r0, [r7, #20]
 800c774:	f7ff ff88 	bl	800c688 <xTimerGenericCommand>
 800c778:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d113      	bne.n	800c7a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	60fb      	str	r3, [r7, #12]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c79c:	f023 0301 	bic.w	r3, r3, #1
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	6a1b      	ldr	r3, [r3, #32]
 800c7ac:	6978      	ldr	r0, [r7, #20]
 800c7ae:	4798      	blx	r3
}
 800c7b0:	bf00      	nop
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	20001aa0 	.word	0x20001aa0

0800c7bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7c4:	f107 0308 	add.w	r3, r7, #8
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f857 	bl	800c87c <prvGetNextExpireTime>
 800c7ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f000 f803 	bl	800c7e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7da:	f000 f8d5 	bl	800c988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7de:	e7f1      	b.n	800c7c4 <prvTimerTask+0x8>

0800c7e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7ea:	f7ff fa43 	bl	800bc74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ee:	f107 0308 	add.w	r3, r7, #8
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 f866 	bl	800c8c4 <prvSampleTimeNow>
 800c7f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d130      	bne.n	800c862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10a      	bne.n	800c81c <prvProcessTimerOrBlockTask+0x3c>
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d806      	bhi.n	800c81c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c80e:	f7ff fa3f 	bl	800bc90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c812:	68f9      	ldr	r1, [r7, #12]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff ff85 	bl	800c724 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c81a:	e024      	b.n	800c866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d008      	beq.n	800c834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c822:	4b13      	ldr	r3, [pc, #76]	; (800c870 <prvProcessTimerOrBlockTask+0x90>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d101      	bne.n	800c830 <prvProcessTimerOrBlockTask+0x50>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e000      	b.n	800c832 <prvProcessTimerOrBlockTask+0x52>
 800c830:	2300      	movs	r3, #0
 800c832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <prvProcessTimerOrBlockTask+0x94>)
 800c836:	6818      	ldr	r0, [r3, #0]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	4619      	mov	r1, r3
 800c842:	f7fe fea1 	bl	800b588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c846:	f7ff fa23 	bl	800bc90 <xTaskResumeAll>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10a      	bne.n	800c866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c850:	4b09      	ldr	r3, [pc, #36]	; (800c878 <prvProcessTimerOrBlockTask+0x98>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
}
 800c860:	e001      	b.n	800c866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c862:	f7ff fa15 	bl	800bc90 <xTaskResumeAll>
}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	20001aa4 	.word	0x20001aa4
 800c874:	20001aa8 	.word	0x20001aa8
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c884:	4b0e      	ldr	r3, [pc, #56]	; (800c8c0 <prvGetNextExpireTime+0x44>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <prvGetNextExpireTime+0x16>
 800c88e:	2201      	movs	r2, #1
 800c890:	e000      	b.n	800c894 <prvGetNextExpireTime+0x18>
 800c892:	2200      	movs	r2, #0
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d105      	bne.n	800c8ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <prvGetNextExpireTime+0x44>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e001      	b.n	800c8b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	20001aa0 	.word	0x20001aa0

0800c8c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8cc:	f7ff fa7e 	bl	800bdcc <xTaskGetTickCount>
 800c8d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8d2:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <prvSampleTimeNow+0x3c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d205      	bcs.n	800c8e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8dc:	f000 f936 	bl	800cb4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8ee:	4a04      	ldr	r2, [pc, #16]	; (800c900 <prvSampleTimeNow+0x3c>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20001ab0 	.word	0x20001ab0

0800c904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
 800c910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	429a      	cmp	r2, r3
 800c928:	d812      	bhi.n	800c950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	429a      	cmp	r2, r3
 800c936:	d302      	bcc.n	800c93e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c938:	2301      	movs	r3, #1
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	e01b      	b.n	800c976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c93e:	4b10      	ldr	r3, [pc, #64]	; (800c980 <prvInsertTimerInActiveList+0x7c>)
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3304      	adds	r3, #4
 800c946:	4619      	mov	r1, r3
 800c948:	4610      	mov	r0, r2
 800c94a:	f7fe f8c8 	bl	800aade <vListInsert>
 800c94e:	e012      	b.n	800c976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	429a      	cmp	r2, r3
 800c956:	d206      	bcs.n	800c966 <prvInsertTimerInActiveList+0x62>
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d302      	bcc.n	800c966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e007      	b.n	800c976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c966:	4b07      	ldr	r3, [pc, #28]	; (800c984 <prvInsertTimerInActiveList+0x80>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	f7fe f8b4 	bl	800aade <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c976:	697b      	ldr	r3, [r7, #20]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20001aa4 	.word	0x20001aa4
 800c984:	20001aa0 	.word	0x20001aa0

0800c988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08e      	sub	sp, #56	; 0x38
 800c98c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c98e:	e0ca      	b.n	800cb26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	da18      	bge.n	800c9c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c996:	1d3b      	adds	r3, r7, #4
 800c998:	3304      	adds	r3, #4
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10a      	bne.n	800c9b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	61fb      	str	r3, [r7, #28]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9be:	6850      	ldr	r0, [r2, #4]
 800c9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9c2:	6892      	ldr	r2, [r2, #8]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f2c0 80aa 	blt.w	800cb24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	695b      	ldr	r3, [r3, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d004      	beq.n	800c9e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe f8b5 	bl	800ab50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff ff6b 	bl	800c8c4 <prvSampleTimeNow>
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b09      	cmp	r3, #9
 800c9f4:	f200 8097 	bhi.w	800cb26 <prvProcessReceivedCommands+0x19e>
 800c9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <prvProcessReceivedCommands+0x78>)
 800c9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fe:	bf00      	nop
 800ca00:	0800ca29 	.word	0x0800ca29
 800ca04:	0800ca29 	.word	0x0800ca29
 800ca08:	0800ca29 	.word	0x0800ca29
 800ca0c:	0800ca9d 	.word	0x0800ca9d
 800ca10:	0800cab1 	.word	0x0800cab1
 800ca14:	0800cafb 	.word	0x0800cafb
 800ca18:	0800ca29 	.word	0x0800ca29
 800ca1c:	0800ca29 	.word	0x0800ca29
 800ca20:	0800ca9d 	.word	0x0800ca9d
 800ca24:	0800cab1 	.word	0x0800cab1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca2e:	f043 0301 	orr.w	r3, r3, #1
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	18d1      	adds	r1, r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca48:	f7ff ff5c 	bl	800c904 <prvInsertTimerInActiveList>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d069      	beq.n	800cb26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d05e      	beq.n	800cb26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	441a      	add	r2, r3
 800ca70:	2300      	movs	r3, #0
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	2300      	movs	r3, #0
 800ca76:	2100      	movs	r1, #0
 800ca78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca7a:	f7ff fe05 	bl	800c688 <xTimerGenericCommand>
 800ca7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d14f      	bne.n	800cb26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	61bb      	str	r3, [r7, #24]
}
 800ca98:	bf00      	nop
 800ca9a:	e7fe      	b.n	800ca9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800caae:	e03a      	b.n	800cb26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab6:	f043 0301 	orr.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10a      	bne.n	800cae6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	617b      	str	r3, [r7, #20]
}
 800cae2:	bf00      	nop
 800cae4:	e7fe      	b.n	800cae4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	699a      	ldr	r2, [r3, #24]
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	18d1      	adds	r1, r2, r3
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caf4:	f7ff ff06 	bl	800c904 <prvInsertTimerInActiveList>
					break;
 800caf8:	e015      	b.n	800cb26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb00:	f003 0302 	and.w	r3, r3, #2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d103      	bne.n	800cb10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb0a:	f000 fbe1 	bl	800d2d0 <vPortFree>
 800cb0e:	e00a      	b.n	800cb26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb16:	f023 0301 	bic.w	r3, r3, #1
 800cb1a:	b2da      	uxtb	r2, r3
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb22:	e000      	b.n	800cb26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb26:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <prvProcessReceivedCommands+0x1c0>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	1d39      	adds	r1, r7, #4
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fb10 	bl	800b154 <xQueueReceive>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f47f af2a 	bne.w	800c990 <prvProcessReceivedCommands+0x8>
	}
}
 800cb3c:	bf00      	nop
 800cb3e:	bf00      	nop
 800cb40:	3730      	adds	r7, #48	; 0x30
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20001aa8 	.word	0x20001aa8

0800cb4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb52:	e048      	b.n	800cbe6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb54:	4b2d      	ldr	r3, [pc, #180]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb5e:	4b2b      	ldr	r3, [pc, #172]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fd ffef 	bl	800ab50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d02e      	beq.n	800cbe6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	4413      	add	r3, r2
 800cb90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d90e      	bls.n	800cbb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cba6:	4b19      	ldr	r3, [pc, #100]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3304      	adds	r3, #4
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	f7fd ff94 	bl	800aade <vListInsert>
 800cbb6:	e016      	b.n	800cbe6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbb8:	2300      	movs	r3, #0
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f7ff fd60 	bl	800c688 <xTimerGenericCommand>
 800cbc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	603b      	str	r3, [r7, #0]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbe6:	4b09      	ldr	r3, [pc, #36]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1b1      	bne.n	800cb54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbf0:	4b06      	ldr	r3, [pc, #24]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbf6:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <prvSwitchTimerLists+0xc4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a04      	ldr	r2, [pc, #16]	; (800cc0c <prvSwitchTimerLists+0xc0>)
 800cbfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbfe:	4a04      	ldr	r2, [pc, #16]	; (800cc10 <prvSwitchTimerLists+0xc4>)
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	6013      	str	r3, [r2, #0]
}
 800cc04:	bf00      	nop
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	20001aa0 	.word	0x20001aa0
 800cc10:	20001aa4 	.word	0x20001aa4

0800cc14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc1a:	f000 f96b 	bl	800cef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc1e:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <prvCheckForValidListAndQueue+0x60>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d120      	bne.n	800cc68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc26:	4814      	ldr	r0, [pc, #80]	; (800cc78 <prvCheckForValidListAndQueue+0x64>)
 800cc28:	f7fd ff08 	bl	800aa3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc2c:	4813      	ldr	r0, [pc, #76]	; (800cc7c <prvCheckForValidListAndQueue+0x68>)
 800cc2e:	f7fd ff05 	bl	800aa3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc32:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <prvCheckForValidListAndQueue+0x6c>)
 800cc34:	4a10      	ldr	r2, [pc, #64]	; (800cc78 <prvCheckForValidListAndQueue+0x64>)
 800cc36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc38:	4b12      	ldr	r3, [pc, #72]	; (800cc84 <prvCheckForValidListAndQueue+0x70>)
 800cc3a:	4a10      	ldr	r2, [pc, #64]	; (800cc7c <prvCheckForValidListAndQueue+0x68>)
 800cc3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc3e:	2300      	movs	r3, #0
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <prvCheckForValidListAndQueue+0x74>)
 800cc44:	4a11      	ldr	r2, [pc, #68]	; (800cc8c <prvCheckForValidListAndQueue+0x78>)
 800cc46:	2110      	movs	r1, #16
 800cc48:	200a      	movs	r0, #10
 800cc4a:	f7fe f813 	bl	800ac74 <xQueueGenericCreateStatic>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4a08      	ldr	r2, [pc, #32]	; (800cc74 <prvCheckForValidListAndQueue+0x60>)
 800cc52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <prvCheckForValidListAndQueue+0x60>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <prvCheckForValidListAndQueue+0x60>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	490b      	ldr	r1, [pc, #44]	; (800cc90 <prvCheckForValidListAndQueue+0x7c>)
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fc66 	bl	800b534 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc68:	f000 f974 	bl	800cf54 <vPortExitCritical>
}
 800cc6c:	bf00      	nop
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20001aa8 	.word	0x20001aa8
 800cc78:	20001a78 	.word	0x20001a78
 800cc7c:	20001a8c 	.word	0x20001a8c
 800cc80:	20001aa0 	.word	0x20001aa0
 800cc84:	20001aa4 	.word	0x20001aa4
 800cc88:	20001b54 	.word	0x20001b54
 800cc8c:	20001ab4 	.word	0x20001ab4
 800cc90:	0800ec2c 	.word	0x0800ec2c

0800cc94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	3b04      	subs	r3, #4
 800cca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3b04      	subs	r3, #4
 800ccb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f023 0201 	bic.w	r2, r3, #1
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3b04      	subs	r3, #4
 800ccc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccc4:	4a0c      	ldr	r2, [pc, #48]	; (800ccf8 <pxPortInitialiseStack+0x64>)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3b14      	subs	r3, #20
 800ccce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3b04      	subs	r3, #4
 800ccda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f06f 0202 	mvn.w	r2, #2
 800cce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3b20      	subs	r3, #32
 800cce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccea:	68fb      	ldr	r3, [r7, #12]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	0800ccfd 	.word	0x0800ccfd

0800ccfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd06:	4b12      	ldr	r3, [pc, #72]	; (800cd50 <prvTaskExitError+0x54>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d00a      	beq.n	800cd26 <prvTaskExitError+0x2a>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60fb      	str	r3, [r7, #12]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <prvTaskExitError+0x28>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	60bb      	str	r3, [r7, #8]
}
 800cd38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd3a:	bf00      	nop
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0fc      	beq.n	800cd3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	20000570 	.word	0x20000570
	...

0800cd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd60:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <pxCurrentTCBConst2>)
 800cd62:	6819      	ldr	r1, [r3, #0]
 800cd64:	6808      	ldr	r0, [r1, #0]
 800cd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6a:	f380 8809 	msr	PSP, r0
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f04f 0000 	mov.w	r0, #0
 800cd76:	f380 8811 	msr	BASEPRI, r0
 800cd7a:	4770      	bx	lr
 800cd7c:	f3af 8000 	nop.w

0800cd80 <pxCurrentTCBConst2>:
 800cd80:	20001578 	.word	0x20001578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd88:	4808      	ldr	r0, [pc, #32]	; (800cdac <prvPortStartFirstTask+0x24>)
 800cd8a:	6800      	ldr	r0, [r0, #0]
 800cd8c:	6800      	ldr	r0, [r0, #0]
 800cd8e:	f380 8808 	msr	MSP, r0
 800cd92:	f04f 0000 	mov.w	r0, #0
 800cd96:	f380 8814 	msr	CONTROL, r0
 800cd9a:	b662      	cpsie	i
 800cd9c:	b661      	cpsie	f
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	df00      	svc	0
 800cda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdaa:	bf00      	nop
 800cdac:	e000ed08 	.word	0xe000ed08

0800cdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdb6:	4b46      	ldr	r3, [pc, #280]	; (800ced0 <xPortStartScheduler+0x120>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a46      	ldr	r2, [pc, #280]	; (800ced4 <xPortStartScheduler+0x124>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d10a      	bne.n	800cdd6 <xPortStartScheduler+0x26>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	613b      	str	r3, [r7, #16]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdd6:	4b3e      	ldr	r3, [pc, #248]	; (800ced0 <xPortStartScheduler+0x120>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a3f      	ldr	r2, [pc, #252]	; (800ced8 <xPortStartScheduler+0x128>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d10a      	bne.n	800cdf6 <xPortStartScheduler+0x46>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdf6:	4b39      	ldr	r3, [pc, #228]	; (800cedc <xPortStartScheduler+0x12c>)
 800cdf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	22ff      	movs	r2, #255	; 0xff
 800ce06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce10:	78fb      	ldrb	r3, [r7, #3]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	4b31      	ldr	r3, [pc, #196]	; (800cee0 <xPortStartScheduler+0x130>)
 800ce1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce1e:	4b31      	ldr	r3, [pc, #196]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce20:	2207      	movs	r2, #7
 800ce22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce24:	e009      	b.n	800ce3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce26:	4b2f      	ldr	r3, [pc, #188]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	4a2d      	ldr	r2, [pc, #180]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce3a:	78fb      	ldrb	r3, [r7, #3]
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce42:	2b80      	cmp	r3, #128	; 0x80
 800ce44:	d0ef      	beq.n	800ce26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce46:	4b27      	ldr	r3, [pc, #156]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f1c3 0307 	rsb	r3, r3, #7
 800ce4e:	2b04      	cmp	r3, #4
 800ce50:	d00a      	beq.n	800ce68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	60bb      	str	r3, [r7, #8]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce68:	4b1e      	ldr	r3, [pc, #120]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	021b      	lsls	r3, r3, #8
 800ce6e:	4a1d      	ldr	r2, [pc, #116]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce7a:	4a1a      	ldr	r2, [pc, #104]	; (800cee4 <xPortStartScheduler+0x134>)
 800ce7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce86:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <xPortStartScheduler+0x138>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a17      	ldr	r2, [pc, #92]	; (800cee8 <xPortStartScheduler+0x138>)
 800ce8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce92:	4b15      	ldr	r3, [pc, #84]	; (800cee8 <xPortStartScheduler+0x138>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a14      	ldr	r2, [pc, #80]	; (800cee8 <xPortStartScheduler+0x138>)
 800ce98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce9e:	f000 f8dd 	bl	800d05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cea2:	4b12      	ldr	r3, [pc, #72]	; (800ceec <xPortStartScheduler+0x13c>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cea8:	f000 f8fc 	bl	800d0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <xPortStartScheduler+0x140>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a0f      	ldr	r2, [pc, #60]	; (800cef0 <xPortStartScheduler+0x140>)
 800ceb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ceb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ceb8:	f7ff ff66 	bl	800cd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cebc:	f7ff f850 	bl	800bf60 <vTaskSwitchContext>
	prvTaskExitError();
 800cec0:	f7ff ff1c 	bl	800ccfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3718      	adds	r7, #24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	e000ed00 	.word	0xe000ed00
 800ced4:	410fc271 	.word	0x410fc271
 800ced8:	410fc270 	.word	0x410fc270
 800cedc:	e000e400 	.word	0xe000e400
 800cee0:	20001ba4 	.word	0x20001ba4
 800cee4:	20001ba8 	.word	0x20001ba8
 800cee8:	e000ed20 	.word	0xe000ed20
 800ceec:	20000570 	.word	0x20000570
 800cef0:	e000ef34 	.word	0xe000ef34

0800cef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	607b      	str	r3, [r7, #4]
}
 800cf0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf0e:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <vPortEnterCritical+0x58>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	4a0d      	ldr	r2, [pc, #52]	; (800cf4c <vPortEnterCritical+0x58>)
 800cf16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <vPortEnterCritical+0x58>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d10f      	bne.n	800cf40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf20:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <vPortEnterCritical+0x5c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	603b      	str	r3, [r7, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <vPortEnterCritical+0x4a>
	}
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	20000570 	.word	0x20000570
 800cf50:	e000ed04 	.word	0xe000ed04

0800cf54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf5a:	4b12      	ldr	r3, [pc, #72]	; (800cfa4 <vPortExitCritical+0x50>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10a      	bne.n	800cf78 <vPortExitCritical+0x24>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	607b      	str	r3, [r7, #4]
}
 800cf74:	bf00      	nop
 800cf76:	e7fe      	b.n	800cf76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf78:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <vPortExitCritical+0x50>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	4a09      	ldr	r2, [pc, #36]	; (800cfa4 <vPortExitCritical+0x50>)
 800cf80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf82:	4b08      	ldr	r3, [pc, #32]	; (800cfa4 <vPortExitCritical+0x50>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <vPortExitCritical+0x42>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	f383 8811 	msr	BASEPRI, r3
}
 800cf94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf96:	bf00      	nop
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20000570 	.word	0x20000570
	...

0800cfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfb0:	f3ef 8009 	mrs	r0, PSP
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	4b15      	ldr	r3, [pc, #84]	; (800d010 <pxCurrentTCBConst>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	f01e 0f10 	tst.w	lr, #16
 800cfc0:	bf08      	it	eq
 800cfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfca:	6010      	str	r0, [r2, #0]
 800cfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cfd4:	f380 8811 	msr	BASEPRI, r0
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f7fe ffbe 	bl	800bf60 <vTaskSwitchContext>
 800cfe4:	f04f 0000 	mov.w	r0, #0
 800cfe8:	f380 8811 	msr	BASEPRI, r0
 800cfec:	bc09      	pop	{r0, r3}
 800cfee:	6819      	ldr	r1, [r3, #0]
 800cff0:	6808      	ldr	r0, [r1, #0]
 800cff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff6:	f01e 0f10 	tst.w	lr, #16
 800cffa:	bf08      	it	eq
 800cffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d000:	f380 8809 	msr	PSP, r0
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	f3af 8000 	nop.w

0800d010 <pxCurrentTCBConst>:
 800d010:	20001578 	.word	0x20001578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop

0800d018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	607b      	str	r3, [r7, #4]
}
 800d030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d032:	f7fe fedb 	bl	800bdec <xTaskIncrementTick>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <xPortSysTickHandler+0x40>)
 800d03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	2300      	movs	r3, #0
 800d046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	f383 8811 	msr	BASEPRI, r3
}
 800d04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d060:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <vPortSetupTimerInterrupt+0x34>)
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d066:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <vPortSetupTimerInterrupt+0x38>)
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d06c:	4b0a      	ldr	r3, [pc, #40]	; (800d098 <vPortSetupTimerInterrupt+0x3c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a0a      	ldr	r2, [pc, #40]	; (800d09c <vPortSetupTimerInterrupt+0x40>)
 800d072:	fba2 2303 	umull	r2, r3, r2, r3
 800d076:	099b      	lsrs	r3, r3, #6
 800d078:	4a09      	ldr	r2, [pc, #36]	; (800d0a0 <vPortSetupTimerInterrupt+0x44>)
 800d07a:	3b01      	subs	r3, #1
 800d07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d07e:	4b04      	ldr	r3, [pc, #16]	; (800d090 <vPortSetupTimerInterrupt+0x34>)
 800d080:	2207      	movs	r2, #7
 800d082:	601a      	str	r2, [r3, #0]
}
 800d084:	bf00      	nop
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	e000e010 	.word	0xe000e010
 800d094:	e000e018 	.word	0xe000e018
 800d098:	200004d8 	.word	0x200004d8
 800d09c:	10624dd3 	.word	0x10624dd3
 800d0a0:	e000e014 	.word	0xe000e014

0800d0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d0b4 <vPortEnableVFP+0x10>
 800d0a8:	6801      	ldr	r1, [r0, #0]
 800d0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d0ae:	6001      	str	r1, [r0, #0]
 800d0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0b2:	bf00      	nop
 800d0b4:	e000ed88 	.word	0xe000ed88

0800d0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0be:	f3ef 8305 	mrs	r3, IPSR
 800d0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b0f      	cmp	r3, #15
 800d0c8:	d914      	bls.n	800d0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0ca:	4a17      	ldr	r2, [pc, #92]	; (800d128 <vPortValidateInterruptPriority+0x70>)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0d4:	4b15      	ldr	r3, [pc, #84]	; (800d12c <vPortValidateInterruptPriority+0x74>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	7afa      	ldrb	r2, [r7, #11]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d20a      	bcs.n	800d0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	607b      	str	r3, [r7, #4]
}
 800d0f0:	bf00      	nop
 800d0f2:	e7fe      	b.n	800d0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	; (800d130 <vPortValidateInterruptPriority+0x78>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <vPortValidateInterruptPriority+0x7c>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	d90a      	bls.n	800d11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	603b      	str	r3, [r7, #0]
}
 800d116:	bf00      	nop
 800d118:	e7fe      	b.n	800d118 <vPortValidateInterruptPriority+0x60>
	}
 800d11a:	bf00      	nop
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	e000e3f0 	.word	0xe000e3f0
 800d12c:	20001ba4 	.word	0x20001ba4
 800d130:	e000ed0c 	.word	0xe000ed0c
 800d134:	20001ba8 	.word	0x20001ba8

0800d138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08a      	sub	sp, #40	; 0x28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d144:	f7fe fd96 	bl	800bc74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d148:	4b5b      	ldr	r3, [pc, #364]	; (800d2b8 <pvPortMalloc+0x180>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d150:	f000 f920 	bl	800d394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d154:	4b59      	ldr	r3, [pc, #356]	; (800d2bc <pvPortMalloc+0x184>)
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f040 8093 	bne.w	800d288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d01d      	beq.n	800d1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d168:	2208      	movs	r2, #8
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	2b00      	cmp	r3, #0
 800d178:	d014      	beq.n	800d1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	617b      	str	r3, [r7, #20]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d06e      	beq.n	800d288 <pvPortMalloc+0x150>
 800d1aa:	4b45      	ldr	r3, [pc, #276]	; (800d2c0 <pvPortMalloc+0x188>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d869      	bhi.n	800d288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1b4:	4b43      	ldr	r3, [pc, #268]	; (800d2c4 <pvPortMalloc+0x18c>)
 800d1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1b8:	4b42      	ldr	r3, [pc, #264]	; (800d2c4 <pvPortMalloc+0x18c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1be:	e004      	b.n	800d1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d903      	bls.n	800d1dc <pvPortMalloc+0xa4>
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1f1      	bne.n	800d1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1dc:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <pvPortMalloc+0x180>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d050      	beq.n	800d288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2208      	movs	r2, #8
 800d1ec:	4413      	add	r3, r2
 800d1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	685a      	ldr	r2, [r3, #4]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	1ad2      	subs	r2, r2, r3
 800d200:	2308      	movs	r3, #8
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	429a      	cmp	r2, r3
 800d206:	d91f      	bls.n	800d248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <pvPortMalloc+0xf8>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	613b      	str	r3, [r7, #16]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	1ad2      	subs	r2, r2, r3
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d242:	69b8      	ldr	r0, [r7, #24]
 800d244:	f000 f908 	bl	800d458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d248:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <pvPortMalloc+0x188>)
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	4a1b      	ldr	r2, [pc, #108]	; (800d2c0 <pvPortMalloc+0x188>)
 800d254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d256:	4b1a      	ldr	r3, [pc, #104]	; (800d2c0 <pvPortMalloc+0x188>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	4b1b      	ldr	r3, [pc, #108]	; (800d2c8 <pvPortMalloc+0x190>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d203      	bcs.n	800d26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d262:	4b17      	ldr	r3, [pc, #92]	; (800d2c0 <pvPortMalloc+0x188>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a18      	ldr	r2, [pc, #96]	; (800d2c8 <pvPortMalloc+0x190>)
 800d268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <pvPortMalloc+0x184>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	431a      	orrs	r2, r3
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d27e:	4b13      	ldr	r3, [pc, #76]	; (800d2cc <pvPortMalloc+0x194>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3301      	adds	r3, #1
 800d284:	4a11      	ldr	r2, [pc, #68]	; (800d2cc <pvPortMalloc+0x194>)
 800d286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d288:	f7fe fd02 	bl	800bc90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	f003 0307 	and.w	r3, r3, #7
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <pvPortMalloc+0x174>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	60fb      	str	r3, [r7, #12]
}
 800d2a8:	bf00      	nop
 800d2aa:	e7fe      	b.n	800d2aa <pvPortMalloc+0x172>
	return pvReturn;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3728      	adds	r7, #40	; 0x28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200057b4 	.word	0x200057b4
 800d2bc:	200057c8 	.word	0x200057c8
 800d2c0:	200057b8 	.word	0x200057b8
 800d2c4:	200057ac 	.word	0x200057ac
 800d2c8:	200057bc 	.word	0x200057bc
 800d2cc:	200057c0 	.word	0x200057c0

0800d2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b086      	sub	sp, #24
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d04d      	beq.n	800d37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2e2:	2308      	movs	r3, #8
 800d2e4:	425b      	negs	r3, r3
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	685a      	ldr	r2, [r3, #4]
 800d2f4:	4b24      	ldr	r3, [pc, #144]	; (800d388 <vPortFree+0xb8>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10a      	bne.n	800d314 <vPortFree+0x44>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	60fb      	str	r3, [r7, #12]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00a      	beq.n	800d332 <vPortFree+0x62>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	60bb      	str	r3, [r7, #8]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	4b14      	ldr	r3, [pc, #80]	; (800d388 <vPortFree+0xb8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4013      	ands	r3, r2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01e      	beq.n	800d37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d11a      	bne.n	800d37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	4b0e      	ldr	r3, [pc, #56]	; (800d388 <vPortFree+0xb8>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	43db      	mvns	r3, r3
 800d352:	401a      	ands	r2, r3
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d358:	f7fe fc8c 	bl	800bc74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <vPortFree+0xbc>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4413      	add	r3, r2
 800d366:	4a09      	ldr	r2, [pc, #36]	; (800d38c <vPortFree+0xbc>)
 800d368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d36a:	6938      	ldr	r0, [r7, #16]
 800d36c:	f000 f874 	bl	800d458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d370:	4b07      	ldr	r3, [pc, #28]	; (800d390 <vPortFree+0xc0>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	4a06      	ldr	r2, [pc, #24]	; (800d390 <vPortFree+0xc0>)
 800d378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d37a:	f7fe fc89 	bl	800bc90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d37e:	bf00      	nop
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	200057c8 	.word	0x200057c8
 800d38c:	200057b8 	.word	0x200057b8
 800d390:	200057c4 	.word	0x200057c4

0800d394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d39a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3a0:	4b27      	ldr	r3, [pc, #156]	; (800d440 <prvHeapInit+0xac>)
 800d3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00c      	beq.n	800d3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3307      	adds	r3, #7
 800d3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f023 0307 	bic.w	r3, r3, #7
 800d3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	4a1f      	ldr	r2, [pc, #124]	; (800d440 <prvHeapInit+0xac>)
 800d3c4:	4413      	add	r3, r2
 800d3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3cc:	4a1d      	ldr	r2, [pc, #116]	; (800d444 <prvHeapInit+0xb0>)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3d2:	4b1c      	ldr	r3, [pc, #112]	; (800d444 <prvHeapInit+0xb0>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	4413      	add	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3e0:	2208      	movs	r2, #8
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	1a9b      	subs	r3, r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f023 0307 	bic.w	r3, r3, #7
 800d3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	4a15      	ldr	r2, [pc, #84]	; (800d448 <prvHeapInit+0xb4>)
 800d3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3f6:	4b14      	ldr	r3, [pc, #80]	; (800d448 <prvHeapInit+0xb4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <prvHeapInit+0xb4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	1ad2      	subs	r2, r2, r3
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d414:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <prvHeapInit+0xb4>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <prvHeapInit+0xb8>)
 800d422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	4a09      	ldr	r2, [pc, #36]	; (800d450 <prvHeapInit+0xbc>)
 800d42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d42c:	4b09      	ldr	r3, [pc, #36]	; (800d454 <prvHeapInit+0xc0>)
 800d42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	20001bac 	.word	0x20001bac
 800d444:	200057ac 	.word	0x200057ac
 800d448:	200057b4 	.word	0x200057b4
 800d44c:	200057bc 	.word	0x200057bc
 800d450:	200057b8 	.word	0x200057b8
 800d454:	200057c8 	.word	0x200057c8

0800d458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d460:	4b28      	ldr	r3, [pc, #160]	; (800d504 <prvInsertBlockIntoFreeList+0xac>)
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	e002      	b.n	800d46c <prvInsertBlockIntoFreeList+0x14>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	429a      	cmp	r2, r3
 800d474:	d8f7      	bhi.n	800d466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	4413      	add	r3, r2
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	429a      	cmp	r2, r3
 800d486:	d108      	bne.n	800d49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	441a      	add	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d118      	bne.n	800d4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	4b15      	ldr	r3, [pc, #84]	; (800d508 <prvInsertBlockIntoFreeList+0xb0>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d00d      	beq.n	800d4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	441a      	add	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e008      	b.n	800d4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4d6:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	e003      	b.n	800d4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d002      	beq.n	800d4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4f6:	bf00      	nop
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	200057ac 	.word	0x200057ac
 800d508:	200057b4 	.word	0x200057b4

0800d50c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d510:	2200      	movs	r2, #0
 800d512:	4912      	ldr	r1, [pc, #72]	; (800d55c <MX_USB_DEVICE_Init+0x50>)
 800d514:	4812      	ldr	r0, [pc, #72]	; (800d560 <MX_USB_DEVICE_Init+0x54>)
 800d516:	f7fb fdbb 	bl	8009090 <USBD_Init>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d520:	f7f4 fcec 	bl	8001efc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d524:	490f      	ldr	r1, [pc, #60]	; (800d564 <MX_USB_DEVICE_Init+0x58>)
 800d526:	480e      	ldr	r0, [pc, #56]	; (800d560 <MX_USB_DEVICE_Init+0x54>)
 800d528:	f7fb fde2 	bl	80090f0 <USBD_RegisterClass>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d532:	f7f4 fce3 	bl	8001efc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d536:	490c      	ldr	r1, [pc, #48]	; (800d568 <MX_USB_DEVICE_Init+0x5c>)
 800d538:	4809      	ldr	r0, [pc, #36]	; (800d560 <MX_USB_DEVICE_Init+0x54>)
 800d53a:	f7fb fcd3 	bl	8008ee4 <USBD_CDC_RegisterInterface>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d001      	beq.n	800d548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d544:	f7f4 fcda 	bl	8001efc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d548:	4805      	ldr	r0, [pc, #20]	; (800d560 <MX_USB_DEVICE_Init+0x54>)
 800d54a:	f7fb fe07 	bl	800915c <USBD_Start>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d554:	f7f4 fcd2 	bl	8001efc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d558:	bf00      	nop
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000588 	.word	0x20000588
 800d560:	200057cc 	.word	0x200057cc
 800d564:	200004f0 	.word	0x200004f0
 800d568:	20000574 	.word	0x20000574

0800d56c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d570:	2200      	movs	r2, #0
 800d572:	4905      	ldr	r1, [pc, #20]	; (800d588 <CDC_Init_FS+0x1c>)
 800d574:	4805      	ldr	r0, [pc, #20]	; (800d58c <CDC_Init_FS+0x20>)
 800d576:	f7fb fccf 	bl	8008f18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d57a:	4905      	ldr	r1, [pc, #20]	; (800d590 <CDC_Init_FS+0x24>)
 800d57c:	4803      	ldr	r0, [pc, #12]	; (800d58c <CDC_Init_FS+0x20>)
 800d57e:	f7fb fced 	bl	8008f5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d584:	4618      	mov	r0, r3
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20005ea8 	.word	0x20005ea8
 800d58c:	200057cc 	.word	0x200057cc
 800d590:	20005aa8 	.word	0x20005aa8

0800d594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d594:	b480      	push	{r7}
 800d596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	6039      	str	r1, [r7, #0]
 800d5ae:	71fb      	strb	r3, [r7, #7]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	2b23      	cmp	r3, #35	; 0x23
 800d5b8:	d84a      	bhi.n	800d650 <CDC_Control_FS+0xac>
 800d5ba:	a201      	add	r2, pc, #4	; (adr r2, 800d5c0 <CDC_Control_FS+0x1c>)
 800d5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c0:	0800d651 	.word	0x0800d651
 800d5c4:	0800d651 	.word	0x0800d651
 800d5c8:	0800d651 	.word	0x0800d651
 800d5cc:	0800d651 	.word	0x0800d651
 800d5d0:	0800d651 	.word	0x0800d651
 800d5d4:	0800d651 	.word	0x0800d651
 800d5d8:	0800d651 	.word	0x0800d651
 800d5dc:	0800d651 	.word	0x0800d651
 800d5e0:	0800d651 	.word	0x0800d651
 800d5e4:	0800d651 	.word	0x0800d651
 800d5e8:	0800d651 	.word	0x0800d651
 800d5ec:	0800d651 	.word	0x0800d651
 800d5f0:	0800d651 	.word	0x0800d651
 800d5f4:	0800d651 	.word	0x0800d651
 800d5f8:	0800d651 	.word	0x0800d651
 800d5fc:	0800d651 	.word	0x0800d651
 800d600:	0800d651 	.word	0x0800d651
 800d604:	0800d651 	.word	0x0800d651
 800d608:	0800d651 	.word	0x0800d651
 800d60c:	0800d651 	.word	0x0800d651
 800d610:	0800d651 	.word	0x0800d651
 800d614:	0800d651 	.word	0x0800d651
 800d618:	0800d651 	.word	0x0800d651
 800d61c:	0800d651 	.word	0x0800d651
 800d620:	0800d651 	.word	0x0800d651
 800d624:	0800d651 	.word	0x0800d651
 800d628:	0800d651 	.word	0x0800d651
 800d62c:	0800d651 	.word	0x0800d651
 800d630:	0800d651 	.word	0x0800d651
 800d634:	0800d651 	.word	0x0800d651
 800d638:	0800d651 	.word	0x0800d651
 800d63c:	0800d651 	.word	0x0800d651
 800d640:	0800d651 	.word	0x0800d651
 800d644:	0800d651 	.word	0x0800d651
 800d648:	0800d651 	.word	0x0800d651
 800d64c:	0800d651 	.word	0x0800d651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d650:	bf00      	nop
  }

  return (USBD_OK);
 800d652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	4805      	ldr	r0, [pc, #20]	; (800d684 <CDC_Receive_FS+0x24>)
 800d66e:	f7fb fc75 	bl	8008f5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d672:	4804      	ldr	r0, [pc, #16]	; (800d684 <CDC_Receive_FS+0x24>)
 800d674:	f7fb fcd6 	bl	8009024 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	200057cc 	.word	0x200057cc

0800d688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d698:	4b0d      	ldr	r3, [pc, #52]	; (800d6d0 <CDC_Transmit_FS+0x48>)
 800d69a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d69e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e00b      	b.n	800d6c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6ae:	887b      	ldrh	r3, [r7, #2]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	4806      	ldr	r0, [pc, #24]	; (800d6d0 <CDC_Transmit_FS+0x48>)
 800d6b6:	f7fb fc2f 	bl	8008f18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d6ba:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <CDC_Transmit_FS+0x48>)
 800d6bc:	f7fb fc6c 	bl	8008f98 <USBD_CDC_TransmitPacket>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	200057cc 	.word	0x200057cc

0800d6d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d6e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	6039      	str	r1, [r7, #0]
 800d702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	2212      	movs	r2, #18
 800d708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d70a:	4b03      	ldr	r3, [pc, #12]	; (800d718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	200005a4 	.word	0x200005a4

0800d71c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	6039      	str	r1, [r7, #0]
 800d726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	2204      	movs	r2, #4
 800d72c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d72e:	4b03      	ldr	r3, [pc, #12]	; (800d73c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	200005b8 	.word	0x200005b8

0800d740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d105      	bne.n	800d75e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	4907      	ldr	r1, [pc, #28]	; (800d774 <USBD_FS_ProductStrDescriptor+0x34>)
 800d756:	4808      	ldr	r0, [pc, #32]	; (800d778 <USBD_FS_ProductStrDescriptor+0x38>)
 800d758:	f7fc feac 	bl	800a4b4 <USBD_GetString>
 800d75c:	e004      	b.n	800d768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4904      	ldr	r1, [pc, #16]	; (800d774 <USBD_FS_ProductStrDescriptor+0x34>)
 800d762:	4805      	ldr	r0, [pc, #20]	; (800d778 <USBD_FS_ProductStrDescriptor+0x38>)
 800d764:	f7fc fea6 	bl	800a4b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d768:	4b02      	ldr	r3, [pc, #8]	; (800d774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	200062a8 	.word	0x200062a8
 800d778:	0800ec34 	.word	0x0800ec34

0800d77c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	4904      	ldr	r1, [pc, #16]	; (800d79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d78c:	4804      	ldr	r0, [pc, #16]	; (800d7a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d78e:	f7fc fe91 	bl	800a4b4 <USBD_GetString>
  return USBD_StrDesc;
 800d792:	4b02      	ldr	r3, [pc, #8]	; (800d79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d794:	4618      	mov	r0, r3
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	200062a8 	.word	0x200062a8
 800d7a0:	0800ec4c 	.word	0x0800ec4c

0800d7a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	6039      	str	r1, [r7, #0]
 800d7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	221a      	movs	r2, #26
 800d7b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d7b6:	f000 f843 	bl	800d840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d7ba:	4b02      	ldr	r3, [pc, #8]	; (800d7c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	200005bc 	.word	0x200005bc

0800d7c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	4907      	ldr	r1, [pc, #28]	; (800d7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7de:	4808      	ldr	r0, [pc, #32]	; (800d800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7e0:	f7fc fe68 	bl	800a4b4 <USBD_GetString>
 800d7e4:	e004      	b.n	800d7f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4904      	ldr	r1, [pc, #16]	; (800d7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7ea:	4805      	ldr	r0, [pc, #20]	; (800d800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7ec:	f7fc fe62 	bl	800a4b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	200062a8 	.word	0x200062a8
 800d800:	0800ec60 	.word	0x0800ec60

0800d804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	6039      	str	r1, [r7, #0]
 800d80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d810:	79fb      	ldrb	r3, [r7, #7]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d105      	bne.n	800d822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	4907      	ldr	r1, [pc, #28]	; (800d838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d81a:	4808      	ldr	r0, [pc, #32]	; (800d83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d81c:	f7fc fe4a 	bl	800a4b4 <USBD_GetString>
 800d820:	e004      	b.n	800d82c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	4904      	ldr	r1, [pc, #16]	; (800d838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d826:	4805      	ldr	r0, [pc, #20]	; (800d83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d828:	f7fc fe44 	bl	800a4b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d82c:	4b02      	ldr	r3, [pc, #8]	; (800d838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	200062a8 	.word	0x200062a8
 800d83c:	0800ec6c 	.word	0x0800ec6c

0800d840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d846:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <Get_SerialNum+0x44>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d84c:	4b0e      	ldr	r3, [pc, #56]	; (800d888 <Get_SerialNum+0x48>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d852:	4b0e      	ldr	r3, [pc, #56]	; (800d88c <Get_SerialNum+0x4c>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4413      	add	r3, r2
 800d85e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d009      	beq.n	800d87a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d866:	2208      	movs	r2, #8
 800d868:	4909      	ldr	r1, [pc, #36]	; (800d890 <Get_SerialNum+0x50>)
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 f814 	bl	800d898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d870:	2204      	movs	r2, #4
 800d872:	4908      	ldr	r1, [pc, #32]	; (800d894 <Get_SerialNum+0x54>)
 800d874:	68b8      	ldr	r0, [r7, #8]
 800d876:	f000 f80f 	bl	800d898 <IntToUnicode>
  }
}
 800d87a:	bf00      	nop
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	1fff7a10 	.word	0x1fff7a10
 800d888:	1fff7a14 	.word	0x1fff7a14
 800d88c:	1fff7a18 	.word	0x1fff7a18
 800d890:	200005be 	.word	0x200005be
 800d894:	200005ce 	.word	0x200005ce

0800d898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d898:	b480      	push	{r7}
 800d89a:	b087      	sub	sp, #28
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	75fb      	strb	r3, [r7, #23]
 800d8ae:	e027      	b.n	800d900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	0f1b      	lsrs	r3, r3, #28
 800d8b4:	2b09      	cmp	r3, #9
 800d8b6:	d80b      	bhi.n	800d8d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	0f1b      	lsrs	r3, r3, #28
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	7dfb      	ldrb	r3, [r7, #23]
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	440b      	add	r3, r1
 800d8c8:	3230      	adds	r2, #48	; 0x30
 800d8ca:	b2d2      	uxtb	r2, r2
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	e00a      	b.n	800d8e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	0f1b      	lsrs	r3, r3, #28
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	7dfb      	ldrb	r3, [r7, #23]
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	4619      	mov	r1, r3
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	440b      	add	r3, r1
 800d8e0:	3237      	adds	r2, #55	; 0x37
 800d8e2:	b2d2      	uxtb	r2, r2
 800d8e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	011b      	lsls	r3, r3, #4
 800d8ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	75fb      	strb	r3, [r7, #23]
 800d900:	7dfa      	ldrb	r2, [r7, #23]
 800d902:	79fb      	ldrb	r3, [r7, #7]
 800d904:	429a      	cmp	r2, r3
 800d906:	d3d3      	bcc.n	800d8b0 <IntToUnicode+0x18>
  }
}
 800d908:	bf00      	nop
 800d90a:	bf00      	nop
 800d90c:	371c      	adds	r7, #28
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
	...

0800d918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	; 0x28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d920:	f107 0314 	add.w	r3, r7, #20
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	605a      	str	r2, [r3, #4]
 800d92a:	609a      	str	r2, [r3, #8]
 800d92c:	60da      	str	r2, [r3, #12]
 800d92e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d938:	d13a      	bne.n	800d9b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d93a:	2300      	movs	r3, #0
 800d93c:	613b      	str	r3, [r7, #16]
 800d93e:	4b1e      	ldr	r3, [pc, #120]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d942:	4a1d      	ldr	r2, [pc, #116]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d944:	f043 0301 	orr.w	r3, r3, #1
 800d948:	6313      	str	r3, [r2, #48]	; 0x30
 800d94a:	4b1b      	ldr	r3, [pc, #108]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	613b      	str	r3, [r7, #16]
 800d954:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d95a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d95c:	2302      	movs	r3, #2
 800d95e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d960:	2300      	movs	r3, #0
 800d962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d964:	2303      	movs	r3, #3
 800d966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d968:	230a      	movs	r3, #10
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d96c:	f107 0314 	add.w	r3, r7, #20
 800d970:	4619      	mov	r1, r3
 800d972:	4812      	ldr	r0, [pc, #72]	; (800d9bc <HAL_PCD_MspInit+0xa4>)
 800d974:	f7f4 fe88 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d978:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97c:	4a0e      	ldr	r2, [pc, #56]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d97e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d982:	6353      	str	r3, [r2, #52]	; 0x34
 800d984:	2300      	movs	r3, #0
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d98c:	4a0a      	ldr	r2, [pc, #40]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d98e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d992:	6453      	str	r3, [r2, #68]	; 0x44
 800d994:	4b08      	ldr	r3, [pc, #32]	; (800d9b8 <HAL_PCD_MspInit+0xa0>)
 800d996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2105      	movs	r1, #5
 800d9a4:	2043      	movs	r0, #67	; 0x43
 800d9a6:	f7f4 fe45 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9aa:	2043      	movs	r0, #67	; 0x43
 800d9ac:	f7f4 fe5e 	bl	800266c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9b0:	bf00      	nop
 800d9b2:	3728      	adds	r7, #40	; 0x28
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	40023800 	.word	0x40023800
 800d9bc:	40020000 	.word	0x40020000

0800d9c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7fb fc0d 	bl	80091f6 <USBD_LL_SetupStage>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d9f6:	78fa      	ldrb	r2, [r7, #3]
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	4413      	add	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	440b      	add	r3, r1
 800da04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	78fb      	ldrb	r3, [r7, #3]
 800da0c:	4619      	mov	r1, r3
 800da0e:	f7fb fc47 	bl	80092a0 <USBD_LL_DataOutStage>
}
 800da12:	bf00      	nop
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800da2c:	78fa      	ldrb	r2, [r7, #3]
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	4613      	mov	r3, r2
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	440b      	add	r3, r1
 800da3a:	334c      	adds	r3, #76	; 0x4c
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	4619      	mov	r1, r3
 800da42:	f7fb fce0 	bl	8009406 <USBD_LL_DataInStage>
}
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fb fe14 	bl	800968a <USBD_LL_SOF>
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da72:	2301      	movs	r3, #1
 800da74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d001      	beq.n	800da82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800da7e:	f7f4 fa3d 	bl	8001efc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da88:	7bfa      	ldrb	r2, [r7, #15]
 800da8a:	4611      	mov	r1, r2
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fb fdbe 	bl	800960e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fb fd66 	bl	800956a <USBD_LL_Reset>
}
 800da9e:	bf00      	nop
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fb fdb9 	bl	800962e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	6812      	ldr	r2, [r2, #0]
 800daca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d005      	beq.n	800dae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dadc:	4b04      	ldr	r3, [pc, #16]	; (800daf0 <HAL_PCD_SuspendCallback+0x48>)
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	4a03      	ldr	r2, [pc, #12]	; (800daf0 <HAL_PCD_SuspendCallback+0x48>)
 800dae2:	f043 0306 	orr.w	r3, r3, #6
 800dae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	e000ed00 	.word	0xe000ed00

0800daf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db02:	4618      	mov	r0, r3
 800db04:	f7fb fda9 	bl	800965a <USBD_LL_Resume>
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db22:	78fa      	ldrb	r2, [r7, #3]
 800db24:	4611      	mov	r1, r2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fb fe01 	bl	800972e <USBD_LL_IsoOUTIncomplete>
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db46:	78fa      	ldrb	r2, [r7, #3]
 800db48:	4611      	mov	r1, r2
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fb fdbd 	bl	80096ca <USBD_LL_IsoINIncomplete>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db66:	4618      	mov	r0, r3
 800db68:	f7fb fe13 	bl	8009792 <USBD_LL_DevConnected>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db82:	4618      	mov	r0, r3
 800db84:	f7fb fe10 	bl	80097a8 <USBD_LL_DevDisconnected>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d13c      	bne.n	800dc1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dba0:	4a20      	ldr	r2, [pc, #128]	; (800dc24 <USBD_LL_Init+0x94>)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a1e      	ldr	r2, [pc, #120]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbb0:	4b1c      	ldr	r3, [pc, #112]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dbb8:	4b1a      	ldr	r3, [pc, #104]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbba:	2204      	movs	r2, #4
 800dbbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dbbe:	4b19      	ldr	r3, [pc, #100]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dbc4:	4b17      	ldr	r3, [pc, #92]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dbca:	4b16      	ldr	r3, [pc, #88]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbcc:	2202      	movs	r2, #2
 800dbce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dbd0:	4b14      	ldr	r3, [pc, #80]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dbd6:	4b13      	ldr	r3, [pc, #76]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dbdc:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dbe2:	4b10      	ldr	r3, [pc, #64]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dbe8:	4b0e      	ldr	r3, [pc, #56]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dbee:	480d      	ldr	r0, [pc, #52]	; (800dc24 <USBD_LL_Init+0x94>)
 800dbf0:	f7f5 febf 	bl	8003972 <HAL_PCD_Init>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dbfa:	f7f4 f97f 	bl	8001efc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dbfe:	2180      	movs	r1, #128	; 0x80
 800dc00:	4808      	ldr	r0, [pc, #32]	; (800dc24 <USBD_LL_Init+0x94>)
 800dc02:	f7f7 f916 	bl	8004e32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc06:	2240      	movs	r2, #64	; 0x40
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4806      	ldr	r0, [pc, #24]	; (800dc24 <USBD_LL_Init+0x94>)
 800dc0c:	f7f7 f8ca 	bl	8004da4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc10:	2280      	movs	r2, #128	; 0x80
 800dc12:	2101      	movs	r1, #1
 800dc14:	4803      	ldr	r0, [pc, #12]	; (800dc24 <USBD_LL_Init+0x94>)
 800dc16:	f7f7 f8c5 	bl	8004da4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	200064a8 	.word	0x200064a8

0800dc28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f5 ffb4 	bl	8003bac <HAL_PCD_Start>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f942 	bl	800ded4 <USBD_Get_USB_Status>
 800dc50:	4603      	mov	r3, r0
 800dc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	4608      	mov	r0, r1
 800dc68:	4611      	mov	r1, r2
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	70fb      	strb	r3, [r7, #3]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70bb      	strb	r3, [r7, #2]
 800dc74:	4613      	mov	r3, r2
 800dc76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc86:	78bb      	ldrb	r3, [r7, #2]
 800dc88:	883a      	ldrh	r2, [r7, #0]
 800dc8a:	78f9      	ldrb	r1, [r7, #3]
 800dc8c:	f7f6 fc85 	bl	800459a <HAL_PCD_EP_Open>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f91c 	bl	800ded4 <USBD_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcc4:	78fa      	ldrb	r2, [r7, #3]
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7f6 fcce 	bl	800466a <HAL_PCD_EP_Close>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd2:	7bfb      	ldrb	r3, [r7, #15]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 f8fd 	bl	800ded4 <USBD_Get_USB_Status>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcde:	7bbb      	ldrb	r3, [r7, #14]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd02:	78fa      	ldrb	r2, [r7, #3]
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f6 fda6 	bl	8004858 <HAL_PCD_EP_SetStall>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 f8de 	bl	800ded4 <USBD_Get_USB_Status>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd40:	78fa      	ldrb	r2, [r7, #3]
 800dd42:	4611      	mov	r1, r2
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f6 fdeb 	bl	8004920 <HAL_PCD_EP_ClrStall>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 f8bf 	bl	800ded4 <USBD_Get_USB_Status>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da0b      	bge.n	800dd98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd86:	68f9      	ldr	r1, [r7, #12]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	4413      	add	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	440b      	add	r3, r1
 800dd92:	333e      	adds	r3, #62	; 0x3e
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	e00b      	b.n	800ddb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd98:	78fb      	ldrb	r3, [r7, #3]
 800dd9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd9e:	68f9      	ldr	r1, [r7, #12]
 800dda0:	4613      	mov	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	440b      	add	r3, r1
 800ddaa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ddae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddd6:	78fa      	ldrb	r2, [r7, #3]
 800ddd8:	4611      	mov	r1, r2
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7f6 fbb8 	bl	8004550 <HAL_PCD_SetAddress>
 800dde0:	4603      	mov	r3, r0
 800dde2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde4:	7bfb      	ldrb	r3, [r7, #15]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 f874 	bl	800ded4 <USBD_Get_USB_Status>
 800ddec:	4603      	mov	r3, r0
 800ddee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b086      	sub	sp, #24
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	60f8      	str	r0, [r7, #12]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
 800de06:	460b      	mov	r3, r1
 800de08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de18:	7af9      	ldrb	r1, [r7, #11]
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	f7f6 fcd1 	bl	80047c4 <HAL_PCD_EP_Transmit>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 f853 	bl	800ded4 <USBD_Get_USB_Status>
 800de2e:	4603      	mov	r3, r0
 800de30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de32:	7dbb      	ldrb	r3, [r7, #22]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3718      	adds	r7, #24
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	460b      	mov	r3, r1
 800de4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de5a:	7af9      	ldrb	r1, [r7, #11]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	f7f6 fc4d 	bl	80046fe <HAL_PCD_EP_Receive>
 800de64:	4603      	mov	r3, r0
 800de66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 f832 	bl	800ded4 <USBD_Get_USB_Status>
 800de70:	4603      	mov	r3, r0
 800de72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de74:	7dbb      	ldrb	r3, [r7, #22]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b082      	sub	sp, #8
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	460b      	mov	r3, r1
 800de88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de90:	78fa      	ldrb	r2, [r7, #3]
 800de92:	4611      	mov	r1, r2
 800de94:	4618      	mov	r0, r3
 800de96:	f7f6 fc7d 	bl	8004794 <HAL_PCD_EP_GetRxCount>
 800de9a:	4603      	mov	r3, r0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800deac:	4b03      	ldr	r3, [pc, #12]	; (800debc <USBD_static_malloc+0x18>)
}
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	200069b4 	.word	0x200069b4

0800dec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]

}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	4603      	mov	r3, r0
 800dedc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	2b03      	cmp	r3, #3
 800dee6:	d817      	bhi.n	800df18 <USBD_Get_USB_Status+0x44>
 800dee8:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <USBD_Get_USB_Status+0x1c>)
 800deea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deee:	bf00      	nop
 800def0:	0800df01 	.word	0x0800df01
 800def4:	0800df07 	.word	0x0800df07
 800def8:	0800df0d 	.word	0x0800df0d
 800defc:	0800df13 	.word	0x0800df13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df00:	2300      	movs	r3, #0
 800df02:	73fb      	strb	r3, [r7, #15]
    break;
 800df04:	e00b      	b.n	800df1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df06:	2303      	movs	r3, #3
 800df08:	73fb      	strb	r3, [r7, #15]
    break;
 800df0a:	e008      	b.n	800df1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df0c:	2301      	movs	r3, #1
 800df0e:	73fb      	strb	r3, [r7, #15]
    break;
 800df10:	e005      	b.n	800df1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df12:	2303      	movs	r3, #3
 800df14:	73fb      	strb	r3, [r7, #15]
    break;
 800df16:	e002      	b.n	800df1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df18:	2303      	movs	r3, #3
 800df1a:	73fb      	strb	r3, [r7, #15]
    break;
 800df1c:	bf00      	nop
  }
  return usb_status;
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df20:	4618      	mov	r0, r3
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <__errno>:
 800df2c:	4b01      	ldr	r3, [pc, #4]	; (800df34 <__errno+0x8>)
 800df2e:	6818      	ldr	r0, [r3, #0]
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	200005d8 	.word	0x200005d8

0800df38 <__libc_init_array>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	4d0d      	ldr	r5, [pc, #52]	; (800df70 <__libc_init_array+0x38>)
 800df3c:	4c0d      	ldr	r4, [pc, #52]	; (800df74 <__libc_init_array+0x3c>)
 800df3e:	1b64      	subs	r4, r4, r5
 800df40:	10a4      	asrs	r4, r4, #2
 800df42:	2600      	movs	r6, #0
 800df44:	42a6      	cmp	r6, r4
 800df46:	d109      	bne.n	800df5c <__libc_init_array+0x24>
 800df48:	4d0b      	ldr	r5, [pc, #44]	; (800df78 <__libc_init_array+0x40>)
 800df4a:	4c0c      	ldr	r4, [pc, #48]	; (800df7c <__libc_init_array+0x44>)
 800df4c:	f000 fcb2 	bl	800e8b4 <_init>
 800df50:	1b64      	subs	r4, r4, r5
 800df52:	10a4      	asrs	r4, r4, #2
 800df54:	2600      	movs	r6, #0
 800df56:	42a6      	cmp	r6, r4
 800df58:	d105      	bne.n	800df66 <__libc_init_array+0x2e>
 800df5a:	bd70      	pop	{r4, r5, r6, pc}
 800df5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df60:	4798      	blx	r3
 800df62:	3601      	adds	r6, #1
 800df64:	e7ee      	b.n	800df44 <__libc_init_array+0xc>
 800df66:	f855 3b04 	ldr.w	r3, [r5], #4
 800df6a:	4798      	blx	r3
 800df6c:	3601      	adds	r6, #1
 800df6e:	e7f2      	b.n	800df56 <__libc_init_array+0x1e>
 800df70:	0800efb4 	.word	0x0800efb4
 800df74:	0800efb4 	.word	0x0800efb4
 800df78:	0800efb4 	.word	0x0800efb4
 800df7c:	0800efb8 	.word	0x0800efb8

0800df80 <malloc>:
 800df80:	4b02      	ldr	r3, [pc, #8]	; (800df8c <malloc+0xc>)
 800df82:	4601      	mov	r1, r0
 800df84:	6818      	ldr	r0, [r3, #0]
 800df86:	f000 b885 	b.w	800e094 <_malloc_r>
 800df8a:	bf00      	nop
 800df8c:	200005d8 	.word	0x200005d8

0800df90 <memcpy>:
 800df90:	440a      	add	r2, r1
 800df92:	4291      	cmp	r1, r2
 800df94:	f100 33ff 	add.w	r3, r0, #4294967295
 800df98:	d100      	bne.n	800df9c <memcpy+0xc>
 800df9a:	4770      	bx	lr
 800df9c:	b510      	push	{r4, lr}
 800df9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfa6:	4291      	cmp	r1, r2
 800dfa8:	d1f9      	bne.n	800df9e <memcpy+0xe>
 800dfaa:	bd10      	pop	{r4, pc}

0800dfac <memset>:
 800dfac:	4402      	add	r2, r0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d100      	bne.n	800dfb6 <memset+0xa>
 800dfb4:	4770      	bx	lr
 800dfb6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfba:	e7f9      	b.n	800dfb0 <memset+0x4>

0800dfbc <_free_r>:
 800dfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfbe:	2900      	cmp	r1, #0
 800dfc0:	d044      	beq.n	800e04c <_free_r+0x90>
 800dfc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfc6:	9001      	str	r0, [sp, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f1a1 0404 	sub.w	r4, r1, #4
 800dfce:	bfb8      	it	lt
 800dfd0:	18e4      	addlt	r4, r4, r3
 800dfd2:	f000 f91f 	bl	800e214 <__malloc_lock>
 800dfd6:	4a1e      	ldr	r2, [pc, #120]	; (800e050 <_free_r+0x94>)
 800dfd8:	9801      	ldr	r0, [sp, #4]
 800dfda:	6813      	ldr	r3, [r2, #0]
 800dfdc:	b933      	cbnz	r3, 800dfec <_free_r+0x30>
 800dfde:	6063      	str	r3, [r4, #4]
 800dfe0:	6014      	str	r4, [r2, #0]
 800dfe2:	b003      	add	sp, #12
 800dfe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfe8:	f000 b91a 	b.w	800e220 <__malloc_unlock>
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	d908      	bls.n	800e002 <_free_r+0x46>
 800dff0:	6825      	ldr	r5, [r4, #0]
 800dff2:	1961      	adds	r1, r4, r5
 800dff4:	428b      	cmp	r3, r1
 800dff6:	bf01      	itttt	eq
 800dff8:	6819      	ldreq	r1, [r3, #0]
 800dffa:	685b      	ldreq	r3, [r3, #4]
 800dffc:	1949      	addeq	r1, r1, r5
 800dffe:	6021      	streq	r1, [r4, #0]
 800e000:	e7ed      	b.n	800dfde <_free_r+0x22>
 800e002:	461a      	mov	r2, r3
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	b10b      	cbz	r3, 800e00c <_free_r+0x50>
 800e008:	42a3      	cmp	r3, r4
 800e00a:	d9fa      	bls.n	800e002 <_free_r+0x46>
 800e00c:	6811      	ldr	r1, [r2, #0]
 800e00e:	1855      	adds	r5, r2, r1
 800e010:	42a5      	cmp	r5, r4
 800e012:	d10b      	bne.n	800e02c <_free_r+0x70>
 800e014:	6824      	ldr	r4, [r4, #0]
 800e016:	4421      	add	r1, r4
 800e018:	1854      	adds	r4, r2, r1
 800e01a:	42a3      	cmp	r3, r4
 800e01c:	6011      	str	r1, [r2, #0]
 800e01e:	d1e0      	bne.n	800dfe2 <_free_r+0x26>
 800e020:	681c      	ldr	r4, [r3, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	6053      	str	r3, [r2, #4]
 800e026:	4421      	add	r1, r4
 800e028:	6011      	str	r1, [r2, #0]
 800e02a:	e7da      	b.n	800dfe2 <_free_r+0x26>
 800e02c:	d902      	bls.n	800e034 <_free_r+0x78>
 800e02e:	230c      	movs	r3, #12
 800e030:	6003      	str	r3, [r0, #0]
 800e032:	e7d6      	b.n	800dfe2 <_free_r+0x26>
 800e034:	6825      	ldr	r5, [r4, #0]
 800e036:	1961      	adds	r1, r4, r5
 800e038:	428b      	cmp	r3, r1
 800e03a:	bf04      	itt	eq
 800e03c:	6819      	ldreq	r1, [r3, #0]
 800e03e:	685b      	ldreq	r3, [r3, #4]
 800e040:	6063      	str	r3, [r4, #4]
 800e042:	bf04      	itt	eq
 800e044:	1949      	addeq	r1, r1, r5
 800e046:	6021      	streq	r1, [r4, #0]
 800e048:	6054      	str	r4, [r2, #4]
 800e04a:	e7ca      	b.n	800dfe2 <_free_r+0x26>
 800e04c:	b003      	add	sp, #12
 800e04e:	bd30      	pop	{r4, r5, pc}
 800e050:	20006bd4 	.word	0x20006bd4

0800e054 <sbrk_aligned>:
 800e054:	b570      	push	{r4, r5, r6, lr}
 800e056:	4e0e      	ldr	r6, [pc, #56]	; (800e090 <sbrk_aligned+0x3c>)
 800e058:	460c      	mov	r4, r1
 800e05a:	6831      	ldr	r1, [r6, #0]
 800e05c:	4605      	mov	r5, r0
 800e05e:	b911      	cbnz	r1, 800e066 <sbrk_aligned+0x12>
 800e060:	f000 f88c 	bl	800e17c <_sbrk_r>
 800e064:	6030      	str	r0, [r6, #0]
 800e066:	4621      	mov	r1, r4
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 f887 	bl	800e17c <_sbrk_r>
 800e06e:	1c43      	adds	r3, r0, #1
 800e070:	d00a      	beq.n	800e088 <sbrk_aligned+0x34>
 800e072:	1cc4      	adds	r4, r0, #3
 800e074:	f024 0403 	bic.w	r4, r4, #3
 800e078:	42a0      	cmp	r0, r4
 800e07a:	d007      	beq.n	800e08c <sbrk_aligned+0x38>
 800e07c:	1a21      	subs	r1, r4, r0
 800e07e:	4628      	mov	r0, r5
 800e080:	f000 f87c 	bl	800e17c <_sbrk_r>
 800e084:	3001      	adds	r0, #1
 800e086:	d101      	bne.n	800e08c <sbrk_aligned+0x38>
 800e088:	f04f 34ff 	mov.w	r4, #4294967295
 800e08c:	4620      	mov	r0, r4
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	20006bd8 	.word	0x20006bd8

0800e094 <_malloc_r>:
 800e094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e098:	1ccd      	adds	r5, r1, #3
 800e09a:	f025 0503 	bic.w	r5, r5, #3
 800e09e:	3508      	adds	r5, #8
 800e0a0:	2d0c      	cmp	r5, #12
 800e0a2:	bf38      	it	cc
 800e0a4:	250c      	movcc	r5, #12
 800e0a6:	2d00      	cmp	r5, #0
 800e0a8:	4607      	mov	r7, r0
 800e0aa:	db01      	blt.n	800e0b0 <_malloc_r+0x1c>
 800e0ac:	42a9      	cmp	r1, r5
 800e0ae:	d905      	bls.n	800e0bc <_malloc_r+0x28>
 800e0b0:	230c      	movs	r3, #12
 800e0b2:	603b      	str	r3, [r7, #0]
 800e0b4:	2600      	movs	r6, #0
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0bc:	4e2e      	ldr	r6, [pc, #184]	; (800e178 <_malloc_r+0xe4>)
 800e0be:	f000 f8a9 	bl	800e214 <__malloc_lock>
 800e0c2:	6833      	ldr	r3, [r6, #0]
 800e0c4:	461c      	mov	r4, r3
 800e0c6:	bb34      	cbnz	r4, 800e116 <_malloc_r+0x82>
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	f7ff ffc2 	bl	800e054 <sbrk_aligned>
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	d14d      	bne.n	800e172 <_malloc_r+0xde>
 800e0d6:	6834      	ldr	r4, [r6, #0]
 800e0d8:	4626      	mov	r6, r4
 800e0da:	2e00      	cmp	r6, #0
 800e0dc:	d140      	bne.n	800e160 <_malloc_r+0xcc>
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	eb04 0803 	add.w	r8, r4, r3
 800e0e8:	f000 f848 	bl	800e17c <_sbrk_r>
 800e0ec:	4580      	cmp	r8, r0
 800e0ee:	d13a      	bne.n	800e166 <_malloc_r+0xd2>
 800e0f0:	6821      	ldr	r1, [r4, #0]
 800e0f2:	3503      	adds	r5, #3
 800e0f4:	1a6d      	subs	r5, r5, r1
 800e0f6:	f025 0503 	bic.w	r5, r5, #3
 800e0fa:	3508      	adds	r5, #8
 800e0fc:	2d0c      	cmp	r5, #12
 800e0fe:	bf38      	it	cc
 800e100:	250c      	movcc	r5, #12
 800e102:	4629      	mov	r1, r5
 800e104:	4638      	mov	r0, r7
 800e106:	f7ff ffa5 	bl	800e054 <sbrk_aligned>
 800e10a:	3001      	adds	r0, #1
 800e10c:	d02b      	beq.n	800e166 <_malloc_r+0xd2>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	442b      	add	r3, r5
 800e112:	6023      	str	r3, [r4, #0]
 800e114:	e00e      	b.n	800e134 <_malloc_r+0xa0>
 800e116:	6822      	ldr	r2, [r4, #0]
 800e118:	1b52      	subs	r2, r2, r5
 800e11a:	d41e      	bmi.n	800e15a <_malloc_r+0xc6>
 800e11c:	2a0b      	cmp	r2, #11
 800e11e:	d916      	bls.n	800e14e <_malloc_r+0xba>
 800e120:	1961      	adds	r1, r4, r5
 800e122:	42a3      	cmp	r3, r4
 800e124:	6025      	str	r5, [r4, #0]
 800e126:	bf18      	it	ne
 800e128:	6059      	strne	r1, [r3, #4]
 800e12a:	6863      	ldr	r3, [r4, #4]
 800e12c:	bf08      	it	eq
 800e12e:	6031      	streq	r1, [r6, #0]
 800e130:	5162      	str	r2, [r4, r5]
 800e132:	604b      	str	r3, [r1, #4]
 800e134:	4638      	mov	r0, r7
 800e136:	f104 060b 	add.w	r6, r4, #11
 800e13a:	f000 f871 	bl	800e220 <__malloc_unlock>
 800e13e:	f026 0607 	bic.w	r6, r6, #7
 800e142:	1d23      	adds	r3, r4, #4
 800e144:	1af2      	subs	r2, r6, r3
 800e146:	d0b6      	beq.n	800e0b6 <_malloc_r+0x22>
 800e148:	1b9b      	subs	r3, r3, r6
 800e14a:	50a3      	str	r3, [r4, r2]
 800e14c:	e7b3      	b.n	800e0b6 <_malloc_r+0x22>
 800e14e:	6862      	ldr	r2, [r4, #4]
 800e150:	42a3      	cmp	r3, r4
 800e152:	bf0c      	ite	eq
 800e154:	6032      	streq	r2, [r6, #0]
 800e156:	605a      	strne	r2, [r3, #4]
 800e158:	e7ec      	b.n	800e134 <_malloc_r+0xa0>
 800e15a:	4623      	mov	r3, r4
 800e15c:	6864      	ldr	r4, [r4, #4]
 800e15e:	e7b2      	b.n	800e0c6 <_malloc_r+0x32>
 800e160:	4634      	mov	r4, r6
 800e162:	6876      	ldr	r6, [r6, #4]
 800e164:	e7b9      	b.n	800e0da <_malloc_r+0x46>
 800e166:	230c      	movs	r3, #12
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	4638      	mov	r0, r7
 800e16c:	f000 f858 	bl	800e220 <__malloc_unlock>
 800e170:	e7a1      	b.n	800e0b6 <_malloc_r+0x22>
 800e172:	6025      	str	r5, [r4, #0]
 800e174:	e7de      	b.n	800e134 <_malloc_r+0xa0>
 800e176:	bf00      	nop
 800e178:	20006bd4 	.word	0x20006bd4

0800e17c <_sbrk_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4d06      	ldr	r5, [pc, #24]	; (800e198 <_sbrk_r+0x1c>)
 800e180:	2300      	movs	r3, #0
 800e182:	4604      	mov	r4, r0
 800e184:	4608      	mov	r0, r1
 800e186:	602b      	str	r3, [r5, #0]
 800e188:	f7f4 f8c4 	bl	8002314 <_sbrk>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	d102      	bne.n	800e196 <_sbrk_r+0x1a>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	b103      	cbz	r3, 800e196 <_sbrk_r+0x1a>
 800e194:	6023      	str	r3, [r4, #0]
 800e196:	bd38      	pop	{r3, r4, r5, pc}
 800e198:	20006bdc 	.word	0x20006bdc

0800e19c <siprintf>:
 800e19c:	b40e      	push	{r1, r2, r3}
 800e19e:	b500      	push	{lr}
 800e1a0:	b09c      	sub	sp, #112	; 0x70
 800e1a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1a4:	9002      	str	r0, [sp, #8]
 800e1a6:	9006      	str	r0, [sp, #24]
 800e1a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1ac:	4809      	ldr	r0, [pc, #36]	; (800e1d4 <siprintf+0x38>)
 800e1ae:	9107      	str	r1, [sp, #28]
 800e1b0:	9104      	str	r1, [sp, #16]
 800e1b2:	4909      	ldr	r1, [pc, #36]	; (800e1d8 <siprintf+0x3c>)
 800e1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b8:	9105      	str	r1, [sp, #20]
 800e1ba:	6800      	ldr	r0, [r0, #0]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	a902      	add	r1, sp, #8
 800e1c0:	f000 f890 	bl	800e2e4 <_svfiprintf_r>
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	b01c      	add	sp, #112	; 0x70
 800e1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1d0:	b003      	add	sp, #12
 800e1d2:	4770      	bx	lr
 800e1d4:	200005d8 	.word	0x200005d8
 800e1d8:	ffff0208 	.word	0xffff0208

0800e1dc <strcpy>:
 800e1dc:	4603      	mov	r3, r0
 800e1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1e2:	f803 2b01 	strb.w	r2, [r3], #1
 800e1e6:	2a00      	cmp	r2, #0
 800e1e8:	d1f9      	bne.n	800e1de <strcpy+0x2>
 800e1ea:	4770      	bx	lr

0800e1ec <strncpy>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	3901      	subs	r1, #1
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	b132      	cbz	r2, 800e202 <strncpy+0x16>
 800e1f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e1f8:	f803 4b01 	strb.w	r4, [r3], #1
 800e1fc:	3a01      	subs	r2, #1
 800e1fe:	2c00      	cmp	r4, #0
 800e200:	d1f7      	bne.n	800e1f2 <strncpy+0x6>
 800e202:	441a      	add	r2, r3
 800e204:	2100      	movs	r1, #0
 800e206:	4293      	cmp	r3, r2
 800e208:	d100      	bne.n	800e20c <strncpy+0x20>
 800e20a:	bd10      	pop	{r4, pc}
 800e20c:	f803 1b01 	strb.w	r1, [r3], #1
 800e210:	e7f9      	b.n	800e206 <strncpy+0x1a>
	...

0800e214 <__malloc_lock>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__malloc_lock+0x8>)
 800e216:	f000 baf9 	b.w	800e80c <__retarget_lock_acquire_recursive>
 800e21a:	bf00      	nop
 800e21c:	20006be0 	.word	0x20006be0

0800e220 <__malloc_unlock>:
 800e220:	4801      	ldr	r0, [pc, #4]	; (800e228 <__malloc_unlock+0x8>)
 800e222:	f000 baf4 	b.w	800e80e <__retarget_lock_release_recursive>
 800e226:	bf00      	nop
 800e228:	20006be0 	.word	0x20006be0

0800e22c <__ssputs_r>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	688e      	ldr	r6, [r1, #8]
 800e232:	429e      	cmp	r6, r3
 800e234:	4682      	mov	sl, r0
 800e236:	460c      	mov	r4, r1
 800e238:	4690      	mov	r8, r2
 800e23a:	461f      	mov	r7, r3
 800e23c:	d838      	bhi.n	800e2b0 <__ssputs_r+0x84>
 800e23e:	898a      	ldrh	r2, [r1, #12]
 800e240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e244:	d032      	beq.n	800e2ac <__ssputs_r+0x80>
 800e246:	6825      	ldr	r5, [r4, #0]
 800e248:	6909      	ldr	r1, [r1, #16]
 800e24a:	eba5 0901 	sub.w	r9, r5, r1
 800e24e:	6965      	ldr	r5, [r4, #20]
 800e250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e258:	3301      	adds	r3, #1
 800e25a:	444b      	add	r3, r9
 800e25c:	106d      	asrs	r5, r5, #1
 800e25e:	429d      	cmp	r5, r3
 800e260:	bf38      	it	cc
 800e262:	461d      	movcc	r5, r3
 800e264:	0553      	lsls	r3, r2, #21
 800e266:	d531      	bpl.n	800e2cc <__ssputs_r+0xa0>
 800e268:	4629      	mov	r1, r5
 800e26a:	f7ff ff13 	bl	800e094 <_malloc_r>
 800e26e:	4606      	mov	r6, r0
 800e270:	b950      	cbnz	r0, 800e288 <__ssputs_r+0x5c>
 800e272:	230c      	movs	r3, #12
 800e274:	f8ca 3000 	str.w	r3, [sl]
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e27e:	81a3      	strh	r3, [r4, #12]
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
 800e284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e288:	6921      	ldr	r1, [r4, #16]
 800e28a:	464a      	mov	r2, r9
 800e28c:	f7ff fe80 	bl	800df90 <memcpy>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	6126      	str	r6, [r4, #16]
 800e29e:	6165      	str	r5, [r4, #20]
 800e2a0:	444e      	add	r6, r9
 800e2a2:	eba5 0509 	sub.w	r5, r5, r9
 800e2a6:	6026      	str	r6, [r4, #0]
 800e2a8:	60a5      	str	r5, [r4, #8]
 800e2aa:	463e      	mov	r6, r7
 800e2ac:	42be      	cmp	r6, r7
 800e2ae:	d900      	bls.n	800e2b2 <__ssputs_r+0x86>
 800e2b0:	463e      	mov	r6, r7
 800e2b2:	6820      	ldr	r0, [r4, #0]
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	4641      	mov	r1, r8
 800e2b8:	f000 faaa 	bl	800e810 <memmove>
 800e2bc:	68a3      	ldr	r3, [r4, #8]
 800e2be:	1b9b      	subs	r3, r3, r6
 800e2c0:	60a3      	str	r3, [r4, #8]
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	4433      	add	r3, r6
 800e2c6:	6023      	str	r3, [r4, #0]
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	e7db      	b.n	800e284 <__ssputs_r+0x58>
 800e2cc:	462a      	mov	r2, r5
 800e2ce:	f000 fab9 	bl	800e844 <_realloc_r>
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d1e1      	bne.n	800e29c <__ssputs_r+0x70>
 800e2d8:	6921      	ldr	r1, [r4, #16]
 800e2da:	4650      	mov	r0, sl
 800e2dc:	f7ff fe6e 	bl	800dfbc <_free_r>
 800e2e0:	e7c7      	b.n	800e272 <__ssputs_r+0x46>
	...

0800e2e4 <_svfiprintf_r>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	4698      	mov	r8, r3
 800e2ea:	898b      	ldrh	r3, [r1, #12]
 800e2ec:	061b      	lsls	r3, r3, #24
 800e2ee:	b09d      	sub	sp, #116	; 0x74
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	4614      	mov	r4, r2
 800e2f6:	d50e      	bpl.n	800e316 <_svfiprintf_r+0x32>
 800e2f8:	690b      	ldr	r3, [r1, #16]
 800e2fa:	b963      	cbnz	r3, 800e316 <_svfiprintf_r+0x32>
 800e2fc:	2140      	movs	r1, #64	; 0x40
 800e2fe:	f7ff fec9 	bl	800e094 <_malloc_r>
 800e302:	6028      	str	r0, [r5, #0]
 800e304:	6128      	str	r0, [r5, #16]
 800e306:	b920      	cbnz	r0, 800e312 <_svfiprintf_r+0x2e>
 800e308:	230c      	movs	r3, #12
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	f04f 30ff 	mov.w	r0, #4294967295
 800e310:	e0d1      	b.n	800e4b6 <_svfiprintf_r+0x1d2>
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	616b      	str	r3, [r5, #20]
 800e316:	2300      	movs	r3, #0
 800e318:	9309      	str	r3, [sp, #36]	; 0x24
 800e31a:	2320      	movs	r3, #32
 800e31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e320:	f8cd 800c 	str.w	r8, [sp, #12]
 800e324:	2330      	movs	r3, #48	; 0x30
 800e326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4d0 <_svfiprintf_r+0x1ec>
 800e32a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e32e:	f04f 0901 	mov.w	r9, #1
 800e332:	4623      	mov	r3, r4
 800e334:	469a      	mov	sl, r3
 800e336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e33a:	b10a      	cbz	r2, 800e340 <_svfiprintf_r+0x5c>
 800e33c:	2a25      	cmp	r2, #37	; 0x25
 800e33e:	d1f9      	bne.n	800e334 <_svfiprintf_r+0x50>
 800e340:	ebba 0b04 	subs.w	fp, sl, r4
 800e344:	d00b      	beq.n	800e35e <_svfiprintf_r+0x7a>
 800e346:	465b      	mov	r3, fp
 800e348:	4622      	mov	r2, r4
 800e34a:	4629      	mov	r1, r5
 800e34c:	4638      	mov	r0, r7
 800e34e:	f7ff ff6d 	bl	800e22c <__ssputs_r>
 800e352:	3001      	adds	r0, #1
 800e354:	f000 80aa 	beq.w	800e4ac <_svfiprintf_r+0x1c8>
 800e358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e35a:	445a      	add	r2, fp
 800e35c:	9209      	str	r2, [sp, #36]	; 0x24
 800e35e:	f89a 3000 	ldrb.w	r3, [sl]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 80a2 	beq.w	800e4ac <_svfiprintf_r+0x1c8>
 800e368:	2300      	movs	r3, #0
 800e36a:	f04f 32ff 	mov.w	r2, #4294967295
 800e36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e372:	f10a 0a01 	add.w	sl, sl, #1
 800e376:	9304      	str	r3, [sp, #16]
 800e378:	9307      	str	r3, [sp, #28]
 800e37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e37e:	931a      	str	r3, [sp, #104]	; 0x68
 800e380:	4654      	mov	r4, sl
 800e382:	2205      	movs	r2, #5
 800e384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e388:	4851      	ldr	r0, [pc, #324]	; (800e4d0 <_svfiprintf_r+0x1ec>)
 800e38a:	f7f1 ff31 	bl	80001f0 <memchr>
 800e38e:	9a04      	ldr	r2, [sp, #16]
 800e390:	b9d8      	cbnz	r0, 800e3ca <_svfiprintf_r+0xe6>
 800e392:	06d0      	lsls	r0, r2, #27
 800e394:	bf44      	itt	mi
 800e396:	2320      	movmi	r3, #32
 800e398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e39c:	0711      	lsls	r1, r2, #28
 800e39e:	bf44      	itt	mi
 800e3a0:	232b      	movmi	r3, #43	; 0x2b
 800e3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ac:	d015      	beq.n	800e3da <_svfiprintf_r+0xf6>
 800e3ae:	9a07      	ldr	r2, [sp, #28]
 800e3b0:	4654      	mov	r4, sl
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	f04f 0c0a 	mov.w	ip, #10
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3be:	3b30      	subs	r3, #48	; 0x30
 800e3c0:	2b09      	cmp	r3, #9
 800e3c2:	d94e      	bls.n	800e462 <_svfiprintf_r+0x17e>
 800e3c4:	b1b0      	cbz	r0, 800e3f4 <_svfiprintf_r+0x110>
 800e3c6:	9207      	str	r2, [sp, #28]
 800e3c8:	e014      	b.n	800e3f4 <_svfiprintf_r+0x110>
 800e3ca:	eba0 0308 	sub.w	r3, r0, r8
 800e3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	9304      	str	r3, [sp, #16]
 800e3d6:	46a2      	mov	sl, r4
 800e3d8:	e7d2      	b.n	800e380 <_svfiprintf_r+0x9c>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	1d19      	adds	r1, r3, #4
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	9103      	str	r1, [sp, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfbb      	ittet	lt
 800e3e6:	425b      	neglt	r3, r3
 800e3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ec:	9307      	strge	r3, [sp, #28]
 800e3ee:	9307      	strlt	r3, [sp, #28]
 800e3f0:	bfb8      	it	lt
 800e3f2:	9204      	strlt	r2, [sp, #16]
 800e3f4:	7823      	ldrb	r3, [r4, #0]
 800e3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f8:	d10c      	bne.n	800e414 <_svfiprintf_r+0x130>
 800e3fa:	7863      	ldrb	r3, [r4, #1]
 800e3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3fe:	d135      	bne.n	800e46c <_svfiprintf_r+0x188>
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	1d1a      	adds	r2, r3, #4
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	9203      	str	r2, [sp, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfb8      	it	lt
 800e40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e410:	3402      	adds	r4, #2
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4e0 <_svfiprintf_r+0x1fc>
 800e418:	7821      	ldrb	r1, [r4, #0]
 800e41a:	2203      	movs	r2, #3
 800e41c:	4650      	mov	r0, sl
 800e41e:	f7f1 fee7 	bl	80001f0 <memchr>
 800e422:	b140      	cbz	r0, 800e436 <_svfiprintf_r+0x152>
 800e424:	2340      	movs	r3, #64	; 0x40
 800e426:	eba0 000a 	sub.w	r0, r0, sl
 800e42a:	fa03 f000 	lsl.w	r0, r3, r0
 800e42e:	9b04      	ldr	r3, [sp, #16]
 800e430:	4303      	orrs	r3, r0
 800e432:	3401      	adds	r4, #1
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43a:	4826      	ldr	r0, [pc, #152]	; (800e4d4 <_svfiprintf_r+0x1f0>)
 800e43c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e440:	2206      	movs	r2, #6
 800e442:	f7f1 fed5 	bl	80001f0 <memchr>
 800e446:	2800      	cmp	r0, #0
 800e448:	d038      	beq.n	800e4bc <_svfiprintf_r+0x1d8>
 800e44a:	4b23      	ldr	r3, [pc, #140]	; (800e4d8 <_svfiprintf_r+0x1f4>)
 800e44c:	bb1b      	cbnz	r3, 800e496 <_svfiprintf_r+0x1b2>
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	3307      	adds	r3, #7
 800e452:	f023 0307 	bic.w	r3, r3, #7
 800e456:	3308      	adds	r3, #8
 800e458:	9303      	str	r3, [sp, #12]
 800e45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45c:	4433      	add	r3, r6
 800e45e:	9309      	str	r3, [sp, #36]	; 0x24
 800e460:	e767      	b.n	800e332 <_svfiprintf_r+0x4e>
 800e462:	fb0c 3202 	mla	r2, ip, r2, r3
 800e466:	460c      	mov	r4, r1
 800e468:	2001      	movs	r0, #1
 800e46a:	e7a5      	b.n	800e3b8 <_svfiprintf_r+0xd4>
 800e46c:	2300      	movs	r3, #0
 800e46e:	3401      	adds	r4, #1
 800e470:	9305      	str	r3, [sp, #20]
 800e472:	4619      	mov	r1, r3
 800e474:	f04f 0c0a 	mov.w	ip, #10
 800e478:	4620      	mov	r0, r4
 800e47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e47e:	3a30      	subs	r2, #48	; 0x30
 800e480:	2a09      	cmp	r2, #9
 800e482:	d903      	bls.n	800e48c <_svfiprintf_r+0x1a8>
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0c5      	beq.n	800e414 <_svfiprintf_r+0x130>
 800e488:	9105      	str	r1, [sp, #20]
 800e48a:	e7c3      	b.n	800e414 <_svfiprintf_r+0x130>
 800e48c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e490:	4604      	mov	r4, r0
 800e492:	2301      	movs	r3, #1
 800e494:	e7f0      	b.n	800e478 <_svfiprintf_r+0x194>
 800e496:	ab03      	add	r3, sp, #12
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	462a      	mov	r2, r5
 800e49c:	4b0f      	ldr	r3, [pc, #60]	; (800e4dc <_svfiprintf_r+0x1f8>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f3af 8000 	nop.w
 800e4a6:	1c42      	adds	r2, r0, #1
 800e4a8:	4606      	mov	r6, r0
 800e4aa:	d1d6      	bne.n	800e45a <_svfiprintf_r+0x176>
 800e4ac:	89ab      	ldrh	r3, [r5, #12]
 800e4ae:	065b      	lsls	r3, r3, #25
 800e4b0:	f53f af2c 	bmi.w	800e30c <_svfiprintf_r+0x28>
 800e4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b6:	b01d      	add	sp, #116	; 0x74
 800e4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4bc:	ab03      	add	r3, sp, #12
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <_svfiprintf_r+0x1f8>)
 800e4c4:	a904      	add	r1, sp, #16
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	f000 f87a 	bl	800e5c0 <_printf_i>
 800e4cc:	e7eb      	b.n	800e4a6 <_svfiprintf_r+0x1c2>
 800e4ce:	bf00      	nop
 800e4d0:	0800ef78 	.word	0x0800ef78
 800e4d4:	0800ef82 	.word	0x0800ef82
 800e4d8:	00000000 	.word	0x00000000
 800e4dc:	0800e22d 	.word	0x0800e22d
 800e4e0:	0800ef7e 	.word	0x0800ef7e

0800e4e4 <_printf_common>:
 800e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	4699      	mov	r9, r3
 800e4ec:	688a      	ldr	r2, [r1, #8]
 800e4ee:	690b      	ldr	r3, [r1, #16]
 800e4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	bfb8      	it	lt
 800e4f8:	4613      	movlt	r3, r2
 800e4fa:	6033      	str	r3, [r6, #0]
 800e4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e500:	4607      	mov	r7, r0
 800e502:	460c      	mov	r4, r1
 800e504:	b10a      	cbz	r2, 800e50a <_printf_common+0x26>
 800e506:	3301      	adds	r3, #1
 800e508:	6033      	str	r3, [r6, #0]
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	0699      	lsls	r1, r3, #26
 800e50e:	bf42      	ittt	mi
 800e510:	6833      	ldrmi	r3, [r6, #0]
 800e512:	3302      	addmi	r3, #2
 800e514:	6033      	strmi	r3, [r6, #0]
 800e516:	6825      	ldr	r5, [r4, #0]
 800e518:	f015 0506 	ands.w	r5, r5, #6
 800e51c:	d106      	bne.n	800e52c <_printf_common+0x48>
 800e51e:	f104 0a19 	add.w	sl, r4, #25
 800e522:	68e3      	ldr	r3, [r4, #12]
 800e524:	6832      	ldr	r2, [r6, #0]
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	42ab      	cmp	r3, r5
 800e52a:	dc26      	bgt.n	800e57a <_printf_common+0x96>
 800e52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e530:	1e13      	subs	r3, r2, #0
 800e532:	6822      	ldr	r2, [r4, #0]
 800e534:	bf18      	it	ne
 800e536:	2301      	movne	r3, #1
 800e538:	0692      	lsls	r2, r2, #26
 800e53a:	d42b      	bmi.n	800e594 <_printf_common+0xb0>
 800e53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e540:	4649      	mov	r1, r9
 800e542:	4638      	mov	r0, r7
 800e544:	47c0      	blx	r8
 800e546:	3001      	adds	r0, #1
 800e548:	d01e      	beq.n	800e588 <_printf_common+0xa4>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	68e5      	ldr	r5, [r4, #12]
 800e54e:	6832      	ldr	r2, [r6, #0]
 800e550:	f003 0306 	and.w	r3, r3, #6
 800e554:	2b04      	cmp	r3, #4
 800e556:	bf08      	it	eq
 800e558:	1aad      	subeq	r5, r5, r2
 800e55a:	68a3      	ldr	r3, [r4, #8]
 800e55c:	6922      	ldr	r2, [r4, #16]
 800e55e:	bf0c      	ite	eq
 800e560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e564:	2500      	movne	r5, #0
 800e566:	4293      	cmp	r3, r2
 800e568:	bfc4      	itt	gt
 800e56a:	1a9b      	subgt	r3, r3, r2
 800e56c:	18ed      	addgt	r5, r5, r3
 800e56e:	2600      	movs	r6, #0
 800e570:	341a      	adds	r4, #26
 800e572:	42b5      	cmp	r5, r6
 800e574:	d11a      	bne.n	800e5ac <_printf_common+0xc8>
 800e576:	2000      	movs	r0, #0
 800e578:	e008      	b.n	800e58c <_printf_common+0xa8>
 800e57a:	2301      	movs	r3, #1
 800e57c:	4652      	mov	r2, sl
 800e57e:	4649      	mov	r1, r9
 800e580:	4638      	mov	r0, r7
 800e582:	47c0      	blx	r8
 800e584:	3001      	adds	r0, #1
 800e586:	d103      	bne.n	800e590 <_printf_common+0xac>
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e590:	3501      	adds	r5, #1
 800e592:	e7c6      	b.n	800e522 <_printf_common+0x3e>
 800e594:	18e1      	adds	r1, r4, r3
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	2030      	movs	r0, #48	; 0x30
 800e59a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e59e:	4422      	add	r2, r4
 800e5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5a8:	3302      	adds	r3, #2
 800e5aa:	e7c7      	b.n	800e53c <_printf_common+0x58>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	47c0      	blx	r8
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d0e6      	beq.n	800e588 <_printf_common+0xa4>
 800e5ba:	3601      	adds	r6, #1
 800e5bc:	e7d9      	b.n	800e572 <_printf_common+0x8e>
	...

0800e5c0 <_printf_i>:
 800e5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c4:	7e0f      	ldrb	r7, [r1, #24]
 800e5c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5c8:	2f78      	cmp	r7, #120	; 0x78
 800e5ca:	4691      	mov	r9, r2
 800e5cc:	4680      	mov	r8, r0
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	469a      	mov	sl, r3
 800e5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5d6:	d807      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5d8:	2f62      	cmp	r7, #98	; 0x62
 800e5da:	d80a      	bhi.n	800e5f2 <_printf_i+0x32>
 800e5dc:	2f00      	cmp	r7, #0
 800e5de:	f000 80d8 	beq.w	800e792 <_printf_i+0x1d2>
 800e5e2:	2f58      	cmp	r7, #88	; 0x58
 800e5e4:	f000 80a3 	beq.w	800e72e <_printf_i+0x16e>
 800e5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5f0:	e03a      	b.n	800e668 <_printf_i+0xa8>
 800e5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5f6:	2b15      	cmp	r3, #21
 800e5f8:	d8f6      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5fa:	a101      	add	r1, pc, #4	; (adr r1, 800e600 <_printf_i+0x40>)
 800e5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e600:	0800e659 	.word	0x0800e659
 800e604:	0800e66d 	.word	0x0800e66d
 800e608:	0800e5e9 	.word	0x0800e5e9
 800e60c:	0800e5e9 	.word	0x0800e5e9
 800e610:	0800e5e9 	.word	0x0800e5e9
 800e614:	0800e5e9 	.word	0x0800e5e9
 800e618:	0800e66d 	.word	0x0800e66d
 800e61c:	0800e5e9 	.word	0x0800e5e9
 800e620:	0800e5e9 	.word	0x0800e5e9
 800e624:	0800e5e9 	.word	0x0800e5e9
 800e628:	0800e5e9 	.word	0x0800e5e9
 800e62c:	0800e779 	.word	0x0800e779
 800e630:	0800e69d 	.word	0x0800e69d
 800e634:	0800e75b 	.word	0x0800e75b
 800e638:	0800e5e9 	.word	0x0800e5e9
 800e63c:	0800e5e9 	.word	0x0800e5e9
 800e640:	0800e79b 	.word	0x0800e79b
 800e644:	0800e5e9 	.word	0x0800e5e9
 800e648:	0800e69d 	.word	0x0800e69d
 800e64c:	0800e5e9 	.word	0x0800e5e9
 800e650:	0800e5e9 	.word	0x0800e5e9
 800e654:	0800e763 	.word	0x0800e763
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	602a      	str	r2, [r5, #0]
 800e660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e668:	2301      	movs	r3, #1
 800e66a:	e0a3      	b.n	800e7b4 <_printf_i+0x1f4>
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	6829      	ldr	r1, [r5, #0]
 800e670:	0606      	lsls	r6, r0, #24
 800e672:	f101 0304 	add.w	r3, r1, #4
 800e676:	d50a      	bpl.n	800e68e <_printf_i+0xce>
 800e678:	680e      	ldr	r6, [r1, #0]
 800e67a:	602b      	str	r3, [r5, #0]
 800e67c:	2e00      	cmp	r6, #0
 800e67e:	da03      	bge.n	800e688 <_printf_i+0xc8>
 800e680:	232d      	movs	r3, #45	; 0x2d
 800e682:	4276      	negs	r6, r6
 800e684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e688:	485e      	ldr	r0, [pc, #376]	; (800e804 <_printf_i+0x244>)
 800e68a:	230a      	movs	r3, #10
 800e68c:	e019      	b.n	800e6c2 <_printf_i+0x102>
 800e68e:	680e      	ldr	r6, [r1, #0]
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e696:	bf18      	it	ne
 800e698:	b236      	sxthne	r6, r6
 800e69a:	e7ef      	b.n	800e67c <_printf_i+0xbc>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	6820      	ldr	r0, [r4, #0]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	6029      	str	r1, [r5, #0]
 800e6a4:	0601      	lsls	r1, r0, #24
 800e6a6:	d501      	bpl.n	800e6ac <_printf_i+0xec>
 800e6a8:	681e      	ldr	r6, [r3, #0]
 800e6aa:	e002      	b.n	800e6b2 <_printf_i+0xf2>
 800e6ac:	0646      	lsls	r6, r0, #25
 800e6ae:	d5fb      	bpl.n	800e6a8 <_printf_i+0xe8>
 800e6b0:	881e      	ldrh	r6, [r3, #0]
 800e6b2:	4854      	ldr	r0, [pc, #336]	; (800e804 <_printf_i+0x244>)
 800e6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6b6:	bf0c      	ite	eq
 800e6b8:	2308      	moveq	r3, #8
 800e6ba:	230a      	movne	r3, #10
 800e6bc:	2100      	movs	r1, #0
 800e6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6c2:	6865      	ldr	r5, [r4, #4]
 800e6c4:	60a5      	str	r5, [r4, #8]
 800e6c6:	2d00      	cmp	r5, #0
 800e6c8:	bfa2      	ittt	ge
 800e6ca:	6821      	ldrge	r1, [r4, #0]
 800e6cc:	f021 0104 	bicge.w	r1, r1, #4
 800e6d0:	6021      	strge	r1, [r4, #0]
 800e6d2:	b90e      	cbnz	r6, 800e6d8 <_printf_i+0x118>
 800e6d4:	2d00      	cmp	r5, #0
 800e6d6:	d04d      	beq.n	800e774 <_printf_i+0x1b4>
 800e6d8:	4615      	mov	r5, r2
 800e6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6de:	fb03 6711 	mls	r7, r3, r1, r6
 800e6e2:	5dc7      	ldrb	r7, [r0, r7]
 800e6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6e8:	4637      	mov	r7, r6
 800e6ea:	42bb      	cmp	r3, r7
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	d9f4      	bls.n	800e6da <_printf_i+0x11a>
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d10b      	bne.n	800e70c <_printf_i+0x14c>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	07de      	lsls	r6, r3, #31
 800e6f8:	d508      	bpl.n	800e70c <_printf_i+0x14c>
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	6861      	ldr	r1, [r4, #4]
 800e6fe:	4299      	cmp	r1, r3
 800e700:	bfde      	ittt	le
 800e702:	2330      	movle	r3, #48	; 0x30
 800e704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e70c:	1b52      	subs	r2, r2, r5
 800e70e:	6122      	str	r2, [r4, #16]
 800e710:	f8cd a000 	str.w	sl, [sp]
 800e714:	464b      	mov	r3, r9
 800e716:	aa03      	add	r2, sp, #12
 800e718:	4621      	mov	r1, r4
 800e71a:	4640      	mov	r0, r8
 800e71c:	f7ff fee2 	bl	800e4e4 <_printf_common>
 800e720:	3001      	adds	r0, #1
 800e722:	d14c      	bne.n	800e7be <_printf_i+0x1fe>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b004      	add	sp, #16
 800e72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72e:	4835      	ldr	r0, [pc, #212]	; (800e804 <_printf_i+0x244>)
 800e730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e734:	6829      	ldr	r1, [r5, #0]
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	f851 6b04 	ldr.w	r6, [r1], #4
 800e73c:	6029      	str	r1, [r5, #0]
 800e73e:	061d      	lsls	r5, r3, #24
 800e740:	d514      	bpl.n	800e76c <_printf_i+0x1ac>
 800e742:	07df      	lsls	r7, r3, #31
 800e744:	bf44      	itt	mi
 800e746:	f043 0320 	orrmi.w	r3, r3, #32
 800e74a:	6023      	strmi	r3, [r4, #0]
 800e74c:	b91e      	cbnz	r6, 800e756 <_printf_i+0x196>
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	f023 0320 	bic.w	r3, r3, #32
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	2310      	movs	r3, #16
 800e758:	e7b0      	b.n	800e6bc <_printf_i+0xfc>
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	f043 0320 	orr.w	r3, r3, #32
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	2378      	movs	r3, #120	; 0x78
 800e764:	4828      	ldr	r0, [pc, #160]	; (800e808 <_printf_i+0x248>)
 800e766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e76a:	e7e3      	b.n	800e734 <_printf_i+0x174>
 800e76c:	0659      	lsls	r1, r3, #25
 800e76e:	bf48      	it	mi
 800e770:	b2b6      	uxthmi	r6, r6
 800e772:	e7e6      	b.n	800e742 <_printf_i+0x182>
 800e774:	4615      	mov	r5, r2
 800e776:	e7bb      	b.n	800e6f0 <_printf_i+0x130>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	6826      	ldr	r6, [r4, #0]
 800e77c:	6961      	ldr	r1, [r4, #20]
 800e77e:	1d18      	adds	r0, r3, #4
 800e780:	6028      	str	r0, [r5, #0]
 800e782:	0635      	lsls	r5, r6, #24
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	d501      	bpl.n	800e78c <_printf_i+0x1cc>
 800e788:	6019      	str	r1, [r3, #0]
 800e78a:	e002      	b.n	800e792 <_printf_i+0x1d2>
 800e78c:	0670      	lsls	r0, r6, #25
 800e78e:	d5fb      	bpl.n	800e788 <_printf_i+0x1c8>
 800e790:	8019      	strh	r1, [r3, #0]
 800e792:	2300      	movs	r3, #0
 800e794:	6123      	str	r3, [r4, #16]
 800e796:	4615      	mov	r5, r2
 800e798:	e7ba      	b.n	800e710 <_printf_i+0x150>
 800e79a:	682b      	ldr	r3, [r5, #0]
 800e79c:	1d1a      	adds	r2, r3, #4
 800e79e:	602a      	str	r2, [r5, #0]
 800e7a0:	681d      	ldr	r5, [r3, #0]
 800e7a2:	6862      	ldr	r2, [r4, #4]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f7f1 fd22 	bl	80001f0 <memchr>
 800e7ac:	b108      	cbz	r0, 800e7b2 <_printf_i+0x1f2>
 800e7ae:	1b40      	subs	r0, r0, r5
 800e7b0:	6060      	str	r0, [r4, #4]
 800e7b2:	6863      	ldr	r3, [r4, #4]
 800e7b4:	6123      	str	r3, [r4, #16]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7bc:	e7a8      	b.n	800e710 <_printf_i+0x150>
 800e7be:	6923      	ldr	r3, [r4, #16]
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	47d0      	blx	sl
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d0ab      	beq.n	800e724 <_printf_i+0x164>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	079b      	lsls	r3, r3, #30
 800e7d0:	d413      	bmi.n	800e7fa <_printf_i+0x23a>
 800e7d2:	68e0      	ldr	r0, [r4, #12]
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	4298      	cmp	r0, r3
 800e7d8:	bfb8      	it	lt
 800e7da:	4618      	movlt	r0, r3
 800e7dc:	e7a4      	b.n	800e728 <_printf_i+0x168>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	4649      	mov	r1, r9
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	47d0      	blx	sl
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	d09b      	beq.n	800e724 <_printf_i+0x164>
 800e7ec:	3501      	adds	r5, #1
 800e7ee:	68e3      	ldr	r3, [r4, #12]
 800e7f0:	9903      	ldr	r1, [sp, #12]
 800e7f2:	1a5b      	subs	r3, r3, r1
 800e7f4:	42ab      	cmp	r3, r5
 800e7f6:	dcf2      	bgt.n	800e7de <_printf_i+0x21e>
 800e7f8:	e7eb      	b.n	800e7d2 <_printf_i+0x212>
 800e7fa:	2500      	movs	r5, #0
 800e7fc:	f104 0619 	add.w	r6, r4, #25
 800e800:	e7f5      	b.n	800e7ee <_printf_i+0x22e>
 800e802:	bf00      	nop
 800e804:	0800ef89 	.word	0x0800ef89
 800e808:	0800ef9a 	.word	0x0800ef9a

0800e80c <__retarget_lock_acquire_recursive>:
 800e80c:	4770      	bx	lr

0800e80e <__retarget_lock_release_recursive>:
 800e80e:	4770      	bx	lr

0800e810 <memmove>:
 800e810:	4288      	cmp	r0, r1
 800e812:	b510      	push	{r4, lr}
 800e814:	eb01 0402 	add.w	r4, r1, r2
 800e818:	d902      	bls.n	800e820 <memmove+0x10>
 800e81a:	4284      	cmp	r4, r0
 800e81c:	4623      	mov	r3, r4
 800e81e:	d807      	bhi.n	800e830 <memmove+0x20>
 800e820:	1e43      	subs	r3, r0, #1
 800e822:	42a1      	cmp	r1, r4
 800e824:	d008      	beq.n	800e838 <memmove+0x28>
 800e826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e82e:	e7f8      	b.n	800e822 <memmove+0x12>
 800e830:	4402      	add	r2, r0
 800e832:	4601      	mov	r1, r0
 800e834:	428a      	cmp	r2, r1
 800e836:	d100      	bne.n	800e83a <memmove+0x2a>
 800e838:	bd10      	pop	{r4, pc}
 800e83a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e83e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e842:	e7f7      	b.n	800e834 <memmove+0x24>

0800e844 <_realloc_r>:
 800e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e848:	4680      	mov	r8, r0
 800e84a:	4614      	mov	r4, r2
 800e84c:	460e      	mov	r6, r1
 800e84e:	b921      	cbnz	r1, 800e85a <_realloc_r+0x16>
 800e850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e854:	4611      	mov	r1, r2
 800e856:	f7ff bc1d 	b.w	800e094 <_malloc_r>
 800e85a:	b92a      	cbnz	r2, 800e868 <_realloc_r+0x24>
 800e85c:	f7ff fbae 	bl	800dfbc <_free_r>
 800e860:	4625      	mov	r5, r4
 800e862:	4628      	mov	r0, r5
 800e864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e868:	f000 f81b 	bl	800e8a2 <_malloc_usable_size_r>
 800e86c:	4284      	cmp	r4, r0
 800e86e:	4607      	mov	r7, r0
 800e870:	d802      	bhi.n	800e878 <_realloc_r+0x34>
 800e872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e876:	d812      	bhi.n	800e89e <_realloc_r+0x5a>
 800e878:	4621      	mov	r1, r4
 800e87a:	4640      	mov	r0, r8
 800e87c:	f7ff fc0a 	bl	800e094 <_malloc_r>
 800e880:	4605      	mov	r5, r0
 800e882:	2800      	cmp	r0, #0
 800e884:	d0ed      	beq.n	800e862 <_realloc_r+0x1e>
 800e886:	42bc      	cmp	r4, r7
 800e888:	4622      	mov	r2, r4
 800e88a:	4631      	mov	r1, r6
 800e88c:	bf28      	it	cs
 800e88e:	463a      	movcs	r2, r7
 800e890:	f7ff fb7e 	bl	800df90 <memcpy>
 800e894:	4631      	mov	r1, r6
 800e896:	4640      	mov	r0, r8
 800e898:	f7ff fb90 	bl	800dfbc <_free_r>
 800e89c:	e7e1      	b.n	800e862 <_realloc_r+0x1e>
 800e89e:	4635      	mov	r5, r6
 800e8a0:	e7df      	b.n	800e862 <_realloc_r+0x1e>

0800e8a2 <_malloc_usable_size_r>:
 800e8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a6:	1f18      	subs	r0, r3, #4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bfbc      	itt	lt
 800e8ac:	580b      	ldrlt	r3, [r1, r0]
 800e8ae:	18c0      	addlt	r0, r0, r3
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <_init>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	bf00      	nop
 800e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ba:	bc08      	pop	{r3}
 800e8bc:	469e      	mov	lr, r3
 800e8be:	4770      	bx	lr

0800e8c0 <_fini>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr
