
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013bc  08012898  08012898  00022898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c54  08013c54  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  08013c54  08013c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c5c  08013c5c  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c5c  08013c5c  00023c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c60  08013c60  00023c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  08013c64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f00  20000740  080143a4  00030740  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a640  080143a4  0003a640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa40  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000605c  00000000  00000000  0005b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00061210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020f8  00000000  00000000  00063578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec5b  00000000  00000000  00065670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a0e8  00000000  00000000  000842cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13e2  00000000  00000000  000ae3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0b8  00000000  00000000  0014f7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000740 	.word	0x20000740
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012880 	.word	0x08012880

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000744 	.word	0x20000744
 80001dc:	08012880 	.word	0x08012880

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b974 	b.w	8000bbc <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468e      	mov	lr, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d14d      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008fa:	428a      	cmp	r2, r1
 80008fc:	4694      	mov	ip, r2
 80008fe:	d969      	bls.n	80009d4 <__udivmoddi4+0xe8>
 8000900:	fab2 f282 	clz	r2, r2
 8000904:	b152      	cbz	r2, 800091c <__udivmoddi4+0x30>
 8000906:	fa01 f302 	lsl.w	r3, r1, r2
 800090a:	f1c2 0120 	rsb	r1, r2, #32
 800090e:	fa20 f101 	lsr.w	r1, r0, r1
 8000912:	fa0c fc02 	lsl.w	ip, ip, r2
 8000916:	ea41 0e03 	orr.w	lr, r1, r3
 800091a:	4094      	lsls	r4, r2
 800091c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000920:	0c21      	lsrs	r1, r4, #16
 8000922:	fbbe f6f8 	udiv	r6, lr, r8
 8000926:	fa1f f78c 	uxth.w	r7, ip
 800092a:	fb08 e316 	mls	r3, r8, r6, lr
 800092e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000932:	fb06 f107 	mul.w	r1, r6, r7
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000942:	f080 811f 	bcs.w	8000b84 <__udivmoddi4+0x298>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 811c 	bls.w	8000b84 <__udivmoddi4+0x298>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a5b      	subs	r3, r3, r1
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb3 f0f8 	udiv	r0, r3, r8
 8000958:	fb08 3310 	mls	r3, r8, r0, r3
 800095c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000960:	fb00 f707 	mul.w	r7, r0, r7
 8000964:	42a7      	cmp	r7, r4
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x92>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000970:	f080 810a 	bcs.w	8000b88 <__udivmoddi4+0x29c>
 8000974:	42a7      	cmp	r7, r4
 8000976:	f240 8107 	bls.w	8000b88 <__udivmoddi4+0x29c>
 800097a:	4464      	add	r4, ip
 800097c:	3802      	subs	r0, #2
 800097e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000982:	1be4      	subs	r4, r4, r7
 8000984:	2600      	movs	r6, #0
 8000986:	b11d      	cbz	r5, 8000990 <__udivmoddi4+0xa4>
 8000988:	40d4      	lsrs	r4, r2
 800098a:	2300      	movs	r3, #0
 800098c:	e9c5 4300 	strd	r4, r3, [r5]
 8000990:	4631      	mov	r1, r6
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d909      	bls.n	80009ae <__udivmoddi4+0xc2>
 800099a:	2d00      	cmp	r5, #0
 800099c:	f000 80ef 	beq.w	8000b7e <__udivmoddi4+0x292>
 80009a0:	2600      	movs	r6, #0
 80009a2:	e9c5 0100 	strd	r0, r1, [r5]
 80009a6:	4630      	mov	r0, r6
 80009a8:	4631      	mov	r1, r6
 80009aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ae:	fab3 f683 	clz	r6, r3
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d14a      	bne.n	8000a4c <__udivmoddi4+0x160>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d302      	bcc.n	80009c0 <__udivmoddi4+0xd4>
 80009ba:	4282      	cmp	r2, r0
 80009bc:	f200 80f9 	bhi.w	8000bb2 <__udivmoddi4+0x2c6>
 80009c0:	1a84      	subs	r4, r0, r2
 80009c2:	eb61 0303 	sbc.w	r3, r1, r3
 80009c6:	2001      	movs	r0, #1
 80009c8:	469e      	mov	lr, r3
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d0e0      	beq.n	8000990 <__udivmoddi4+0xa4>
 80009ce:	e9c5 4e00 	strd	r4, lr, [r5]
 80009d2:	e7dd      	b.n	8000990 <__udivmoddi4+0xa4>
 80009d4:	b902      	cbnz	r2, 80009d8 <__udivmoddi4+0xec>
 80009d6:	deff      	udf	#255	; 0xff
 80009d8:	fab2 f282 	clz	r2, r2
 80009dc:	2a00      	cmp	r2, #0
 80009de:	f040 8092 	bne.w	8000b06 <__udivmoddi4+0x21a>
 80009e2:	eba1 010c 	sub.w	r1, r1, ip
 80009e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ea:	fa1f fe8c 	uxth.w	lr, ip
 80009ee:	2601      	movs	r6, #1
 80009f0:	0c20      	lsrs	r0, r4, #16
 80009f2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009f6:	fb07 1113 	mls	r1, r7, r3, r1
 80009fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009fe:	fb0e f003 	mul.w	r0, lr, r3
 8000a02:	4288      	cmp	r0, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x12c>
 8000a06:	eb1c 0101 	adds.w	r1, ip, r1
 8000a0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x12a>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f200 80cb 	bhi.w	8000bac <__udivmoddi4+0x2c0>
 8000a16:	4643      	mov	r3, r8
 8000a18:	1a09      	subs	r1, r1, r0
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a20:	fb07 1110 	mls	r1, r7, r0, r1
 8000a24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a28:	fb0e fe00 	mul.w	lr, lr, r0
 8000a2c:	45a6      	cmp	lr, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x156>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a38:	d202      	bcs.n	8000a40 <__udivmoddi4+0x154>
 8000a3a:	45a6      	cmp	lr, r4
 8000a3c:	f200 80bb 	bhi.w	8000bb6 <__udivmoddi4+0x2ca>
 8000a40:	4608      	mov	r0, r1
 8000a42:	eba4 040e 	sub.w	r4, r4, lr
 8000a46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a4a:	e79c      	b.n	8000986 <__udivmoddi4+0x9a>
 8000a4c:	f1c6 0720 	rsb	r7, r6, #32
 8000a50:	40b3      	lsls	r3, r6
 8000a52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a62:	431c      	orrs	r4, r3
 8000a64:	40f9      	lsrs	r1, r7
 8000a66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a72:	0c20      	lsrs	r0, r4, #16
 8000a74:	fa1f fe8c 	uxth.w	lr, ip
 8000a78:	fb09 1118 	mls	r1, r9, r8, r1
 8000a7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a80:	fb08 f00e 	mul.w	r0, r8, lr
 8000a84:	4288      	cmp	r0, r1
 8000a86:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8a:	d90b      	bls.n	8000aa4 <__udivmoddi4+0x1b8>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a94:	f080 8088 	bcs.w	8000ba8 <__udivmoddi4+0x2bc>
 8000a98:	4288      	cmp	r0, r1
 8000a9a:	f240 8085 	bls.w	8000ba8 <__udivmoddi4+0x2bc>
 8000a9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000aa2:	4461      	add	r1, ip
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aac:	fb09 1110 	mls	r1, r9, r0, r1
 8000ab0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	458e      	cmp	lr, r1
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x1e2>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ac4:	d26c      	bcs.n	8000ba0 <__udivmoddi4+0x2b4>
 8000ac6:	458e      	cmp	lr, r1
 8000ac8:	d96a      	bls.n	8000ba0 <__udivmoddi4+0x2b4>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4461      	add	r1, ip
 8000ace:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ad2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ad6:	eba1 010e 	sub.w	r1, r1, lr
 8000ada:	42a1      	cmp	r1, r4
 8000adc:	46c8      	mov	r8, r9
 8000ade:	46a6      	mov	lr, r4
 8000ae0:	d356      	bcc.n	8000b90 <__udivmoddi4+0x2a4>
 8000ae2:	d053      	beq.n	8000b8c <__udivmoddi4+0x2a0>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x212>
 8000ae6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aea:	eb61 010e 	sbc.w	r1, r1, lr
 8000aee:	fa01 f707 	lsl.w	r7, r1, r7
 8000af2:	fa22 f306 	lsr.w	r3, r2, r6
 8000af6:	40f1      	lsrs	r1, r6
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e9c5 7100 	strd	r7, r1, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	40d8      	lsrs	r0, r3
 8000b0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b10:	fa21 f303 	lsr.w	r3, r1, r3
 8000b14:	4091      	lsls	r1, r2
 8000b16:	4301      	orrs	r1, r0
 8000b18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1c:	fa1f fe8c 	uxth.w	lr, ip
 8000b20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b24:	fb07 3610 	mls	r6, r7, r0, r3
 8000b28:	0c0b      	lsrs	r3, r1, #16
 8000b2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b32:	429e      	cmp	r6, r3
 8000b34:	fa04 f402 	lsl.w	r4, r4, r2
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x260>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b42:	d22f      	bcs.n	8000ba4 <__udivmoddi4+0x2b8>
 8000b44:	429e      	cmp	r6, r3
 8000b46:	d92d      	bls.n	8000ba4 <__udivmoddi4+0x2b8>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	4463      	add	r3, ip
 8000b4c:	1b9b      	subs	r3, r3, r6
 8000b4e:	b289      	uxth	r1, r1
 8000b50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b54:	fb07 3316 	mls	r3, r7, r6, r3
 8000b58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x28a>
 8000b64:	eb1c 0101 	adds.w	r1, ip, r1
 8000b68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b6c:	d216      	bcs.n	8000b9c <__udivmoddi4+0x2b0>
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d914      	bls.n	8000b9c <__udivmoddi4+0x2b0>
 8000b72:	3e02      	subs	r6, #2
 8000b74:	4461      	add	r1, ip
 8000b76:	1ac9      	subs	r1, r1, r3
 8000b78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b7c:	e738      	b.n	80009f0 <__udivmoddi4+0x104>
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e705      	b.n	8000990 <__udivmoddi4+0xa4>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e3      	b.n	8000950 <__udivmoddi4+0x64>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6f8      	b.n	800097e <__udivmoddi4+0x92>
 8000b8c:	454b      	cmp	r3, r9
 8000b8e:	d2a9      	bcs.n	8000ae4 <__udivmoddi4+0x1f8>
 8000b90:	ebb9 0802 	subs.w	r8, r9, r2
 8000b94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7a3      	b.n	8000ae4 <__udivmoddi4+0x1f8>
 8000b9c:	4646      	mov	r6, r8
 8000b9e:	e7ea      	b.n	8000b76 <__udivmoddi4+0x28a>
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	e794      	b.n	8000ace <__udivmoddi4+0x1e2>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	e7d1      	b.n	8000b4c <__udivmoddi4+0x260>
 8000ba8:	46d0      	mov	r8, sl
 8000baa:	e77b      	b.n	8000aa4 <__udivmoddi4+0x1b8>
 8000bac:	3b02      	subs	r3, #2
 8000bae:	4461      	add	r1, ip
 8000bb0:	e732      	b.n	8000a18 <__udivmoddi4+0x12c>
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	e709      	b.n	80009ca <__udivmoddi4+0xde>
 8000bb6:	4464      	add	r4, ip
 8000bb8:	3802      	subs	r0, #2
 8000bba:	e742      	b.n	8000a42 <__udivmoddi4+0x156>

08000bbc <__aeabi_idiv0>:
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af04      	add	r7, sp, #16
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f107 030f 	add.w	r3, r7, #15
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2150      	movs	r1, #80	; 0x50
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MFRC_REGW+0x44>)
 8000bec:	f004 ff82 	bl	8005af4 <HAL_I2C_Mem_Write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bf6:	23bb      	movs	r3, #187	; 0xbb
 8000bf8:	e000      	b.n	8000bfc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bfa:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000075c 	.word	0x2000075c

08000c08 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	2150      	movs	r1, #80	; 0x50
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MFRC_REGR+0x3c>)
 8000c2a:	f005 f85d 	bl	8005ce8 <HAL_I2C_Mem_Read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c34:	23bb      	movs	r3, #187	; 0xbb
 8000c36:	e000      	b.n	8000c3a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c38:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000075c 	.word	0x2000075c

08000c48 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e018      	b.n	8000c8c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2264      	movs	r2, #100	; 0x64
 8000c62:	9202      	str	r2, [sp, #8]
 8000c64:	2201      	movs	r2, #1
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2209      	movs	r2, #9
 8000c6e:	2150      	movs	r1, #80	; 0x50
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <MFRC_FIFOW+0x58>)
 8000c72:	f004 ff3f 	bl	8005af4 <HAL_I2C_Mem_Write>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c7c:	23bb      	movs	r3, #187	; 0xbb
 8000c7e:	e00a      	b.n	8000c96 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f004 fb1f 	bl	80052c4 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbe2      	blt.n	8000c5a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c94:	23cc      	movs	r3, #204	; 0xcc
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000075c 	.word	0x2000075c

08000ca4 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e018      	b.n	8000ce8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2209      	movs	r2, #9
 8000cca:	2150      	movs	r1, #80	; 0x50
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MFRC_FIFOR+0x58>)
 8000cce:	f005 f80b 	bl	8005ce8 <HAL_I2C_Mem_Read>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cd8:	23bb      	movs	r3, #187	; 0xbb
 8000cda:	e00a      	b.n	8000cf2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f004 faf1 	bl	80052c4 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbe2      	blt.n	8000cb6 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cf0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000075c 	.word	0x2000075c

08000d00 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2014      	movs	r0, #20
 8000d0c:	f7ff ff7c 	bl	8000c08 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d007      	beq.n	8000d2a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f043 0303 	orr.w	r3, r3, #3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2014      	movs	r0, #20
 8000d26:	f7ff ff4b 	bl	8000bc0 <MFRC_REGW>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d42:	f107 020f 	add.w	r2, r7, #15
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff5c 	bl	8000c08 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff2a 	bl	8000bc0 <MFRC_REGW>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d78:	2103      	movs	r1, #3
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f7ff ffd9 	bl	8000d32 <ClearBitMask>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ff13 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f7ff ff0f 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff ff0b 	bl	8000bc0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	4619      	mov	r1, r3
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff ff4a 	bl	8000c48 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000db4:	2103      	movs	r1, #3
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff ff02 	bl	8000bc0 <MFRC_REGW>
	HAL_Delay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f004 fa81 	bl	80052c4 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000dc2:	f107 0317 	add.w	r3, r7, #23
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f7ff ff1d 	bl	8000c08 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000dd8:	23ee      	movs	r3, #238	; 0xee
 8000dda:	e00e      	b.n	8000dfa <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff feee 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	2022      	movs	r0, #34	; 0x22
 8000de8:	f7ff ff0e 	bl	8000c08 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	2021      	movs	r0, #33	; 0x21
 8000df4:	f7ff ff08 	bl	8000c08 <MFRC_REGR>
	return(PCD_OK);
 8000df8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4815      	ldr	r0, [pc, #84]	; (8000e64 <MFRC_INIT+0x60>)
 8000e0e:	f004 fcfb 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MFRC_INIT+0x60>)
 8000e18:	f004 fcf6 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f004 fa51 	bl	80052c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2120      	movs	r1, #32
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <MFRC_INIT+0x60>)
 8000e28:	f004 fcee 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f004 fa49 	bl	80052c4 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2012      	movs	r0, #18
 8000e36:	f7ff fec3 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2013      	movs	r0, #19
 8000e3e:	f7ff febf 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e42:	2126      	movs	r1, #38	; 0x26
 8000e44:	2024      	movs	r0, #36	; 0x24
 8000e46:	f7ff febb 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f7ff feb7 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e52:	213d      	movs	r1, #61	; 0x3d
 8000e54:	2011      	movs	r0, #17
 8000e56:	f7ff feb3 	bl	8000bc0 <MFRC_REGW>
	MFRC_ANTON();
 8000e5a:	f7ff ff51 	bl	8000d00 <MFRC_ANTON>
	return(PCD_OK);
 8000e5e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020400 	.word	0x40020400

08000e68 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e84:	2100      	movs	r1, #0
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fe9a 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e8c:	217f      	movs	r1, #127	; 0x7f
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff fe96 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	200a      	movs	r0, #10
 8000e98:	f7ff fe92 	bl	8000bc0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fed1 	bl	8000c48 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	200d      	movs	r0, #13
 8000eae:	f7ff fe87 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fe83 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000eba:	f107 0316 	add.w	r3, r7, #22
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	200d      	movs	r0, #13
 8000ec2:	f7ff fea1 	bl	8000c08 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	200d      	movs	r0, #13
 8000ed2:	f7ff fe75 	bl	8000bc0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000ed6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f004 f9f3 	bl	80052c4 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ede:	7abb      	ldrb	r3, [r7, #10]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fede 	bl	8000ca4 <MFRC_FIFOR>


	return(PCD_OK);
 8000ee8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af02      	add	r7, sp, #8
 8000ef8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000efa:	2352      	movs	r3, #82	; 0x52
 8000efc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	200e      	movs	r0, #14
 8000f02:	f7ff ff16 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000f06:	f107 000f 	add.w	r0, r7, #15
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	2101      	movs	r1, #1
 8000f14:	f7ff ffa8 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f1c:	d001      	beq.n	8000f22 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000f1e:	23aa      	movs	r3, #170	; 0xaa
 8000f20:	e000      	b.n	8000f24 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f22:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f32:	2350      	movs	r3, #80	; 0x50
 8000f34:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2102      	movs	r1, #2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff1f 	bl	8000d84 <CALC_CRC>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2bcc      	cmp	r3, #204	; 0xcc
 8000f4a:	d001      	beq.n	8000f50 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f4c:	23ee      	movs	r3, #238	; 0xee
 8000f4e:	e013      	b.n	8000f78 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	3302      	adds	r3, #2
 8000f56:	893a      	ldrh	r2, [r7, #8]
 8000f58:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	f107 000c 	add.w	r0, r7, #12
 8000f60:	2300      	movs	r3, #0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	f7ff ff7e 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f70:	d001      	beq.n	8000f76 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f72:	23aa      	movs	r3, #170	; 0xaa
 8000f74:	e000      	b.n	8000f78 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f76:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f88:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f8c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	200e      	movs	r0, #14
 8000f92:	f7ff fece 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f96:	f107 000c 	add.w	r0, r7, #12
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	f7ff ff60 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2bcc      	cmp	r3, #204	; 0xcc
 8000fac:	d001      	beq.n	8000fb2 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000fae:	23aa      	movs	r3, #170	; 0xaa
 8000fb0:	e000      	b.n	8000fb4 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000fb2:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fc6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3302      	adds	r3, #2
 8000fdc:	2205      	movs	r2, #5
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f010 f8d3 	bl	801118c <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fe6:	f107 0208 	add.w	r2, r7, #8
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fec7 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	3307      	adds	r3, #7
 8000ffc:	893a      	ldrh	r2, [r7, #8]
 8000ffe:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001000:	f107 000c 	add.w	r0, r7, #12
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2303      	movs	r3, #3
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	2109      	movs	r1, #9
 800100e:	f7ff ff2b 	bl	8000e68 <MFRC_TRANSCEIVE>
 8001012:	4603      	mov	r3, r0
 8001014:	2bcc      	cmp	r3, #204	; 0xcc
 8001016:	d001      	beq.n	800101c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8001018:	23aa      	movs	r3, #170	; 0xaa
 800101a:	e000      	b.n	800101e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800101c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af02      	add	r7, sp, #8
 800102c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800102e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001032:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	200e      	movs	r0, #14
 8001038:	f7ff fe7b 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800103c:	f107 000c 	add.w	r0, r7, #12
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2305      	movs	r3, #5
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	2102      	movs	r1, #2
 800104a:	f7ff ff0d 	bl	8000e68 <MFRC_TRANSCEIVE>
 800104e:	4603      	mov	r3, r0
 8001050:	2bcc      	cmp	r3, #204	; 0xcc
 8001052:	d001      	beq.n	8001058 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001054:	23aa      	movs	r3, #170	; 0xaa
 8001056:	e000      	b.n	800105a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001058:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001062:	b580      	push	{r7, lr}
 8001064:	b088      	sub	sp, #32
 8001066:	af02      	add	r7, sp, #8
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800106c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3302      	adds	r3, #2
 8001082:	2205      	movs	r2, #5
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f010 f880 	bl	801118c <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800108c:	f107 0208 	add.w	r2, r7, #8
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2107      	movs	r1, #7
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe74 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	3307      	adds	r3, #7
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 80010a6:	f107 000c 	add.w	r0, r7, #12
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	2109      	movs	r1, #9
 80010b4:	f7ff fed8 	bl	8000e68 <MFRC_TRANSCEIVE>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2bcc      	cmp	r3, #204	; 0xcc
 80010bc:	d001      	beq.n	80010c2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 80010be:	23aa      	movs	r3, #170	; 0xaa
 80010c0:	e000      	b.n	80010c4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010c2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010d2:	f000 f839 	bl	8001148 <PICC_CHECK>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2bcc      	cmp	r3, #204	; 0xcc
 80010da:	d001      	beq.n	80010e0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010dc:	23aa      	movs	r3, #170	; 0xaa
 80010de:	e02f      	b.n	8001140 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff05 	bl	8000ef2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff47 	bl	8000f80 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010f2:	7e3b      	ldrb	r3, [r7, #24]
 80010f4:	2b88      	cmp	r3, #136	; 0x88
 80010f6:	d001      	beq.n	80010fc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010f8:	23aa      	movs	r3, #170	; 0xaa
 80010fa:	e021      	b.n	8001140 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f004 f8e1 	bl	80052c4 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8001102:	f107 0214 	add.w	r2, r7, #20
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff55 	bl	8000fbc <MFRC_SEL1>
	  HAL_Delay(10);
 8001112:	200a      	movs	r0, #10
 8001114:	f004 f8d6 	bl	80052c4 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff82 	bl	8001026 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f004 f8ce 	bl	80052c4 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff95 	bl	8001062 <MFRC_SEL2>
	  HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f004 f8c3 	bl	80052c4 <HAL_Delay>
	  return(PCD_OK);
 800113e:	23cc      	movs	r3, #204	; 0xcc
}
 8001140:	4618      	mov	r0, r3
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fece 	bl	8000ef2 <MFRC_WUPA>
 8001156:	4603      	mov	r3, r0
 8001158:	2bcc      	cmp	r3, #204	; 0xcc
 800115a:	d001      	beq.n	8001160 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800115c:	23aa      	movs	r3, #170	; 0xaa
 800115e:	e00a      	b.n	8001176 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001160:	793b      	ldrb	r3, [r7, #4]
 8001162:	2b44      	cmp	r3, #68	; 0x44
 8001164:	d102      	bne.n	800116c <PICC_CHECK+0x24>
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800116c:	23aa      	movs	r3, #170	; 0xaa
 800116e:	e002      	b.n	8001176 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001170:	f7ff fedc 	bl	8000f2c <MFRC_HALTA>
			return(PCD_OK);
 8001174:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af02      	add	r7, sp, #8
 8001184:	4603      	mov	r3, r0
 8001186:	6039      	str	r1, [r7, #0]
 8001188:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2330      	movs	r3, #48	; 0x30
 8001190:	733b      	strb	r3, [r7, #12]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2102      	movs	r1, #2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fdef 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	3302      	adds	r3, #2
 80011ac:	893a      	ldrh	r2, [r7, #8]
 80011ae:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 80011b0:	f107 000c 	add.w	r0, r7, #12
 80011b4:	2300      	movs	r3, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2310      	movs	r3, #16
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	2104      	movs	r1, #4
 80011be:	f7ff fe53 	bl	8000e68 <MFRC_TRANSCEIVE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2bcc      	cmp	r3, #204	; 0xcc
 80011c6:	d001      	beq.n	80011cc <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011c8:	23aa      	movs	r3, #170	; 0xaa
 80011ca:	e000      	b.n	80011ce <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011cc:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af02      	add	r7, sp, #8
 80011dc:	4603      	mov	r3, r0
 80011de:	6039      	str	r1, [r7, #0]
 80011e0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	23a2      	movs	r3, #162	; 0xa2
 80011ee:	743b      	strb	r3, [r7, #16]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d801      	bhi.n	80011fe <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e022      	b.n	8001244 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	3302      	adds	r3, #2
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2106      	movs	r1, #6
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fdb5 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	3306      	adds	r3, #6
 8001220:	89ba      	ldrh	r2, [r7, #12]
 8001222:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001224:	f107 020f 	add.w	r2, r7, #15
 8001228:	f107 0010 	add.w	r0, r7, #16
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	2108      	movs	r1, #8
 8001234:	f7ff fe18 	bl	8000e68 <MFRC_TRANSCEIVE>
 8001238:	4603      	mov	r3, r0
 800123a:	2bcc      	cmp	r3, #204	; 0xcc
 800123c:	d001      	beq.n	8001242 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800123e:	23aa      	movs	r3, #170	; 0xaa
 8001240:	e000      	b.n	8001244 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001242:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ff8f 	bl	800117e <UL_READ>
 8001260:	4603      	mov	r3, r0
 8001262:	2bcc      	cmp	r3, #204	; 0xcc
 8001264:	d001      	beq.n	800126a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001266:	23aa      	movs	r3, #170	; 0xaa
 8001268:	e00e      	b.n	8001288 <UL_getuid+0x3c>
	}

	memcpy(uid, read, UL_UIDPART1);
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2203      	movs	r2, #3
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f00f ff8a 	bl	801118c <memcpy>
	memcpy(uid + UL_UIDPART1, read + UL_UIDPART2, UL_UIDPART2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	1cda      	adds	r2, r3, #3
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6013      	str	r3, [r2, #0]
	return PCD_OK;
 8001286:	23cc      	movs	r3, #204	; 0xcc
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e010      	b.n	80012c0 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff6a 	bl	800117e <UL_READ>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2bcc      	cmp	r3, #204	; 0xcc
 80012ae:	d001      	beq.n	80012b4 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 80012b0:	23aa      	movs	r3, #170	; 0xaa
 80012b2:	e009      	b.n	80012c8 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3310      	adds	r3, #16
 80012b8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b0e      	cmp	r3, #14
 80012c4:	ddeb      	ble.n	800129e <UL_getalldata+0xe>
	}

	return PCD_OK;
 80012c6:	23cc      	movs	r3, #204	; 0xcc
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <UL_readcard>:
 * !!Name of card is set by user after being read!!
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <UL_readcard+0x5c>)
 80012dc:	60da      	str	r2, [r3, #12]
	result->uidsize = UL_UIDSIZE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2207      	movs	r2, #7
 80012e2:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012f0:	f7ff feec 	bl	80010cc <PICC_Select>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2bcc      	cmp	r3, #204	; 0xcc
 80012f8:	d001      	beq.n	80012fe <UL_readcard+0x2e>
		return PCD_NO_PICC;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e012      	b.n	8001324 <UL_readcard+0x54>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffa2 	bl	800124c <UL_getuid>
 8001308:	4603      	mov	r3, r0
 800130a:	2bcc      	cmp	r3, #204	; 0xcc
 800130c:	d107      	bne.n	800131e <UL_readcard+0x4e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffbc 	bl	8001290 <UL_getalldata>
 8001318:	4603      	mov	r3, r0
 800131a:	2bcc      	cmp	r3, #204	; 0xcc
 800131c:	d001      	beq.n	8001322 <UL_readcard+0x52>
		return PCD_COMM_ERR;
 800131e:	23aa      	movs	r3, #170	; 0xaa
 8001320:	e000      	b.n	8001324 <UL_readcard+0x54>
	}
	return PCD_OK;
 8001322:	23cc      	movs	r3, #204	; 0xcc
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	080128a8 	.word	0x080128a8

08001330 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8001338:	2030      	movs	r0, #48	; 0x30
 800133a:	f00f ff17 	bl	801116c <malloc>
 800133e:	4603      	mov	r3, r0
 8001340:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	3310      	adds	r3, #16
 8001348:	2230      	movs	r2, #48	; 0x30
 800134a:	4619      	mov	r1, r3
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f00f ff1d 	bl	801118c <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001352:	f7ff febb 	bl	80010cc <PICC_Select>
 8001356:	4603      	mov	r3, r0
 8001358:	2bcc      	cmp	r3, #204	; 0xcc
 800135a:	d004      	beq.n	8001366 <UL_writecard+0x36>
		free(data_to_write);
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f00f ff0d 	bl	801117c <free>
		return PCD_NO_PICC;
 8001362:	2301      	movs	r3, #1
 8001364:	e020      	b.n	80013a8 <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001366:	2304      	movs	r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e016      	b.n	800139a <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b04      	subs	r3, #4
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4619      	mov	r1, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	440b      	add	r3, r1
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f7ff ff29 	bl	80011d6 <UL_WRITE>
 8001384:	4603      	mov	r3, r0
 8001386:	2bcc      	cmp	r3, #204	; 0xcc
 8001388:	d004      	beq.n	8001394 <UL_writecard+0x64>
			free(data_to_write);
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f00f fef6 	bl	801117c <free>
			return PCD_COMM_ERR;
 8001390:	23aa      	movs	r3, #170	; 0xaa
 8001392:	e009      	b.n	80013a8 <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	dde5      	ble.n	800136c <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f00f feeb 	bl	801117c <free>
	return PCD_OK;
 80013a6:	23cc      	movs	r3, #204	; 0xcc
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3301      	adds	r3, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00f fed2 	bl	801116c <malloc>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e023      	b.n	800141a <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d80d      	bhi.n	80013fa <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	461a      	mov	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1898      	adds	r0, r3, r2
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4912      	ldr	r1, [pc, #72]	; (800143c <uid_tostring+0x8c>)
 80013f4:	f010 f94a 	bl	801168c <siprintf>
 80013f8:	e00c      	b.n	8001414 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	461a      	mov	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1898      	adds	r0, r3, r2
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	490c      	ldr	r1, [pc, #48]	; (8001440 <uid_tostring+0x90>)
 8001410:	f010 f93c 	bl	801168c <siprintf>
	for (int i = 0; i < size; i++) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbd7      	blt.n	80013d2 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
	return result;
 8001430:	68bb      	ldr	r3, [r7, #8]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	080128bc 	.word	0x080128bc
 8001440:	080128c0 	.word	0x080128c0

08001444 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 800144c:	201c      	movs	r0, #28
 800144e:	f00f fe8d 	bl	801116c <malloc>
 8001452:	4603      	mov	r3, r0
 8001454:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8001456:	2040      	movs	r0, #64	; 0x40
 8001458:	f00f fe88 	bl	801116c <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001464:	2007      	movs	r0, #7
 8001466:	f00f fe81 	bl	801116c <malloc>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f7ff ff2c 	bl	80012d0 <UL_readcard>
 8001478:	4603      	mov	r3, r0
 800147a:	2bcc      	cmp	r3, #204	; 0xcc
 800147c:	d001      	beq.n	8001482 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 800147e:	23aa      	movs	r3, #170	; 0xaa
 8001480:	e031      	b.n	80014e6 <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e01d      	b.n	80014c4 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6959      	ldr	r1, [r3, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d00e      	beq.n	80014be <UL_verify+0x7a>
			free(read->contents);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00f fe69 	bl	801117c <free>
			free(read->uid);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00f fe64 	bl	801117c <free>
			free(read);
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f00f fe61 	bl	801117c <free>
			return PCD_VERIFY_ERR;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e013      	b.n	80014e6 <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b3f      	cmp	r3, #63	; 0x3f
 80014c8:	ddde      	ble.n	8001488 <UL_verify+0x44>
		}
	}
	free(read->contents);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00f fe54 	bl	801117c <free>
	free(read->uid);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f00f fe4f 	bl	801117c <free>
	free(read);
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f00f fe4c 	bl	801117c <free>
	return PCD_OK;
 80014e4:	23cc      	movs	r3, #204	; 0xcc
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <dump_card_serial>:
 * Print relevant info of card to terminal over USB
 * @param card - Card to print details of
 * @param pagesize - Number of bytes in each page of memory for given card
 * @return PCD_OK if card details were successfully printed
 * */
PCD_StatusTypeDef dump_card_serial (Card* card, uint8_t pagesize) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
	char* uid = uid_tostring(card->uid, card->uidsize);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff ff52 	bl	80013b0 <uid_tostring>
 800150c:	60b8      	str	r0, [r7, #8]

	printf("Type: %s\r\n", card->type);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	4619      	mov	r1, r3
 8001514:	4837      	ldr	r0, [pc, #220]	; (80015f4 <dump_card_serial+0x104>)
 8001516:	f00f ff45 	bl	80113a4 <iprintf>
	printf("UID: %s\r\n", uid);
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <dump_card_serial+0x108>)
 800151e:	f00f ff41 	bl	80113a4 <iprintf>
	printf("Page    Byte\r\n");
 8001522:	4836      	ldr	r0, [pc, #216]	; (80015fc <dump_card_serial+0x10c>)
 8001524:	f00f ffc4 	bl	80114b0 <puts>
	free(uid);
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f00f fe27 	bl	801117c <free>

	printf("     "); //filler
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <dump_card_serial+0x110>)
 8001530:	f00f ff38 	bl	80113a4 <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e006      	b.n	8001548 <dump_card_serial+0x58>
		printf("%i  ", i);
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <dump_card_serial+0x114>)
 800153e:	f00f ff31 	bl	80113a4 <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf4      	blt.n	800153a <dump_card_serial+0x4a>
	}
	printf("\r\n");
 8001550:	482d      	ldr	r0, [pc, #180]	; (8001608 <dump_card_serial+0x118>)
 8001552:	f00f ffad 	bl	80114b0 <puts>

	for (int i = 0; i < card->contents_size/pagesize; i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e03c      	b.n	80015d6 <dump_card_serial+0xe6>
		printf("%i    ", i);
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	482b      	ldr	r0, [pc, #172]	; (800160c <dump_card_serial+0x11c>)
 8001560:	f00f ff20 	bl	80113a4 <iprintf>
		for (int j = 0; j < pagesize; j++) {
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e02b      	b.n	80015c2 <dump_card_serial+0xd2>
			if (card->contents[(i * pagesize) + j] <= 0xF) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	fb02 f101 	mul.w	r1, r2, r1
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	440a      	add	r2, r1
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d80e      	bhi.n	80015a0 <dump_card_serial+0xb0>
				printf("0%X ", card->contents[(i * pagesize) + j]);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	fb02 f101 	mul.w	r1, r2, r1
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	440a      	add	r2, r1
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <dump_card_serial+0x120>)
 800159a:	f00f ff03 	bl	80113a4 <iprintf>
 800159e:	e00d      	b.n	80015bc <dump_card_serial+0xcc>
			} else {
				printf("%X ", card->contents[(i * pagesize) + j]);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	fb02 f101 	mul.w	r1, r2, r1
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	440a      	add	r2, r1
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <dump_card_serial+0x124>)
 80015b8:	f00f fef4 	bl	80113a4 <iprintf>
		for (int j = 0; j < pagesize; j++) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbcf      	blt.n	800156a <dump_card_serial+0x7a>
			}

		}
		printf("\r\n");
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <dump_card_serial+0x118>)
 80015cc:	f00f ff70 	bl	80114b0 <puts>
	for (int i = 0; i < card->contents_size/pagesize; i++) {
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	3301      	adds	r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8b1b      	ldrh	r3, [r3, #24]
 80015da:	461a      	mov	r2, r3
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbb9      	blt.n	800155c <dump_card_serial+0x6c>
	}
	return PCD_OK;
 80015e8:	23cc      	movs	r3, #204	; 0xcc
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	080128c4 	.word	0x080128c4
 80015f8:	080128d0 	.word	0x080128d0
 80015fc:	080128dc 	.word	0x080128dc
 8001600:	080128ec 	.word	0x080128ec
 8001604:	080128f4 	.word	0x080128f4
 8001608:	080128fc 	.word	0x080128fc
 800160c:	08012900 	.word	0x08012900
 8001610:	08012908 	.word	0x08012908
 8001614:	08012910 	.word	0x08012910

08001618 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800161e:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8001620:	463b      	mov	r3, r7
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00f fdbd 	bl	80111a8 <memset>
	OLED_FLUSH(zeros);
 800162e:	463b      	mov	r3, r7
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f87b 	bl	800172c <OLED_FLUSH>

}
 8001636:	bf00      	nop
 8001638:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2110      	movs	r1, #16
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <OLED_cmd+0x68>)
 8001654:	f004 f8d8 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <OLED_cmd+0x6c>)
 800165e:	f004 f8d3 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8001662:	f107 010f 	add.w	r1, r7, #15
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	2201      	movs	r2, #1
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <OLED_cmd+0x70>)
 800166e:	f007 f876 	bl	800875e <HAL_SPI_Transmit>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <OLED_cmd+0x68>)
 800167e:	f004 f8c3 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f003 fe1e 	bl	80052c4 <HAL_Delay>
		return(HAL_ERROR);
 8001688:	2301      	movs	r3, #1
 800168a:	e008      	b.n	800169e <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <OLED_cmd+0x68>)
 8001692:	f004 f8b9 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f003 fe14 	bl	80052c4 <HAL_Delay>
		return(HAL_OK);
 800169c:	2300      	movs	r3, #0
	}

}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	200007b0 	.word	0x200007b0

080016b4 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2110      	movs	r1, #16
 80016c4:	4816      	ldr	r0, [pc, #88]	; (8001720 <OLED_data+0x6c>)
 80016c6:	f004 f89f 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2102      	movs	r1, #2
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <OLED_data+0x70>)
 80016d0:	f004 f89a 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <OLED_data+0x74>)
 80016e0:	f007 f83d 	bl	800875e <HAL_SPI_Transmit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <OLED_data+0x70>)
 80016f0:	f004 f88a 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2110      	movs	r1, #16
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <OLED_data+0x6c>)
 80016fa:	f004 f885 	bl	8005808 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80016fe:	2301      	movs	r3, #1
 8001700:	e00a      	b.n	8001718 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <OLED_data+0x70>)
 8001708:	f004 f87e 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800170c:	2201      	movs	r2, #1
 800170e:	2110      	movs	r1, #16
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <OLED_data+0x6c>)
 8001712:	f004 f879 	bl	8005808 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8001716:	2300      	movs	r3, #0
	}



}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	200007b0 	.word	0x200007b0

0800172c <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e023      	b.n	8001782 <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b50      	subs	r3, #80	; 0x50
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff7c 	bl	8001640 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8001748:	2002      	movs	r0, #2
 800174a:	f7ff ff79 	bl	8001640 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 800174e:	2010      	movs	r0, #16
 8001750:	f7ff ff76 	bl	8001640 <OLED_cmd>
		for(int i=0;i<128;i++){
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	e00d      	b.n	8001776 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	01da      	lsls	r2, r3, #7
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffa2 	bl	80016b4 <OLED_data>
		for(int i=0;i<128;i++){
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3301      	adds	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b7f      	cmp	r3, #127	; 0x7f
 800177a:	ddee      	ble.n	800175a <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b07      	cmp	r3, #7
 8001786:	ddd8      	ble.n	800173a <OLED_FLUSH+0xe>
		}


	}
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2110      	movs	r1, #16
 800179e:	482f      	ldr	r0, [pc, #188]	; (800185c <OLED_INIT+0xc8>)
 80017a0:	f004 f832 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2108      	movs	r1, #8
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <OLED_INIT+0xc8>)
 80017aa:	f004 f82d 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2102      	movs	r1, #2
 80017b2:	482b      	ldr	r0, [pc, #172]	; (8001860 <OLED_INIT+0xcc>)
 80017b4:	f004 f828 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f003 fd83 	bl	80052c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2108      	movs	r1, #8
 80017c2:	4826      	ldr	r0, [pc, #152]	; (800185c <OLED_INIT+0xc8>)
 80017c4:	f004 f820 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f003 fd7b 	bl	80052c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2108      	movs	r1, #8
 80017d2:	4822      	ldr	r0, [pc, #136]	; (800185c <OLED_INIT+0xc8>)
 80017d4:	f004 f818 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f003 fd73 	bl	80052c4 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <OLED_INIT+0xd0>)
 80017e0:	463c      	mov	r4, r7
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ec:	c403      	stmia	r4!, {r0, r1}
 80017ee:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e00c      	b.n	8001810 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80017f6:	463a      	mov	r2, r7
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff1e 	bl	8001640 <OLED_cmd>
		HAL_Delay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f003 fd5d 	bl	80052c4 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b18      	cmp	r3, #24
 8001814:	ddef      	ble.n	80017f6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8001816:	20a7      	movs	r0, #167	; 0xa7
 8001818:	f7ff ff12 	bl	8001640 <OLED_cmd>
	OLED_FLUSH(HVE);
 800181c:	4812      	ldr	r0, [pc, #72]	; (8001868 <OLED_INIT+0xd4>)
 800181e:	f7ff ff85 	bl	800172c <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8001822:	20af      	movs	r0, #175	; 0xaf
 8001824:	f7ff ff0c 	bl	8001640 <OLED_cmd>
	HAL_Delay(1000);
 8001828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182c:	f003 fd4a 	bl	80052c4 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001830:	20ae      	movs	r0, #174	; 0xae
 8001832:	f7ff ff05 	bl	8001640 <OLED_cmd>
	HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f003 fd44 	bl	80052c4 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 800183c:	20a6      	movs	r0, #166	; 0xa6
 800183e:	f7ff feff 	bl	8001640 <OLED_cmd>
	HAL_Delay(10);
 8001842:	200a      	movs	r0, #10
 8001844:	f003 fd3e 	bl	80052c4 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001848:	20af      	movs	r0, #175	; 0xaf
 800184a:	f7ff fef9 	bl	8001640 <OLED_cmd>
	OLED_Clear();
 800184e:	f7ff fee3 	bl	8001618 <OLED_Clear>
	return HAL_OK;
 8001852:	2300      	movs	r3, #0

}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	08012914 	.word	0x08012914
 8001868:	20000000 	.word	0x20000000

0800186c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e015      	b.n	80018aa <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f1a3 0220 	sub.w	r2, r3, #32
 8001884:	4911      	ldr	r1, [pc, #68]	; (80018cc <OLED_InvChar+0x60>)
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	18ca      	adds	r2, r1, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	43db      	mvns	r3, r3
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	f107 020c 	add.w	r2, r7, #12
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	dde6      	ble.n	800187e <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	6010      	str	r0, [r2, #0]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	7113      	strb	r3, [r2, #4]
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	080134c0 	.word	0x080134c0

080018d0 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	4603      	mov	r3, r0
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	717b      	strb	r3, [r7, #5]
 80018ea:	4613      	mov	r3, r2
 80018ec:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3b50      	subs	r3, #80	; 0x50
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fea3 	bl	8001640 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe9c 	bl	8001640 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe93 	bl	8001640 <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d110      	bne.n	8001942 <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	f1a3 0220 	sub.w	r2, r3, #32
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <OLED_drawChar+0x9c>)
 800192e:	1899      	adds	r1, r3, r2
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2205      	movs	r2, #5
 8001936:	4618      	mov	r0, r3
 8001938:	f00f fc28 	bl	801118c <memcpy>
		data[5]=0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	737b      	strb	r3, [r7, #13]
 8001940:	e009      	b.n	8001956 <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 8001942:	23ff      	movs	r3, #255	; 0xff
 8001944:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	3301      	adds	r3, #1
 800194c:	797a      	ldrb	r2, [r7, #5]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff ff8b 	bl	800186c <OLED_InvChar>

	}

	OLED_data(data, 6);
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2106      	movs	r1, #6
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fea9 	bl	80016b4 <OLED_data>

	}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	080134c0 	.word	0x080134c0

08001970 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	603a      	str	r2, [r7, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	460b      	mov	r3, r1
 8001980:	71bb      	strb	r3, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e014      	b.n	80019b6 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	0052      	lsls	r2, r2, #1
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	4413      	add	r3, r2
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	797b      	ldrb	r3, [r7, #5]
 80019aa:	79f8      	ldrb	r0, [r7, #7]
 80019ac:	f7ff ff90 	bl	80018d0 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	f7fe fc1c 	bl	80001f4 <strlen>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8e3      	bhi.n	800198c <OLED_Printlin+0x1c>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	6039      	str	r1, [r7, #0]
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4613      	mov	r3, r2
 80019dc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f7fe fc08 	bl	80001f4 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	0fda      	lsrs	r2, r3, #31
 80019ec:	4413      	add	r3, r2
 80019ee:	105b      	asrs	r3, r3, #1
 80019f0:	425b      	negs	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3340      	adds	r3, #64	; 0x40
 80019fe:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	79f8      	ldrb	r0, [r7, #7]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f7ff ffb1 	bl	8001970 <OLED_Printlin>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b094      	sub	sp, #80	; 0x50
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 8001a1e:	2320      	movs	r3, #32
 8001a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
 8001a38:	e018      	b.n	8001a6c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 8001a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3e:	4413      	add	r3, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d10b      	bne.n	8001a64 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	b2d9      	uxtb	r1, r3
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a56:	4413      	add	r3, r2
 8001a58:	460a      	mov	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
	                i++;
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5e:	3301      	adds	r3, #1
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a62:	e000      	b.n	8001a66 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001a64:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	3301      	adds	r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a6e:	2b15      	cmp	r3, #21
 8001a70:	dde3      	ble.n	8001a3a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d102      	bne.n	8001a84 <OLED_Print+0x6e>
	            last_ind++;
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	3301      	adds	r3, #1
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fbb2 	bl	80001f4 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b15      	cmp	r3, #21
 8001a94:	d828      	bhi.n	8001ae8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fba9 	bl	80001f4 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	18d1      	adds	r1, r2, r3
 8001aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00f fe12 	bl	80116dc <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	f107 0220 	add.w	r2, r7, #32
 8001abe:	18d0      	adds	r0, r2, r3
 8001ac0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac6:	f1c3 0315 	rsb	r3, r3, #21
 8001aca:	461a      	mov	r2, r3
 8001acc:	f00f fb6c 	bl	80111a8 <memset>
	            thisline[21]=' ';
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad8:	b2d8      	uxtb	r0, r3
 8001ada:	f107 0220 	add.w	r2, r7, #32
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	f7ff ff45 	bl	8001970 <OLED_Printlin>




	    }
}
 8001ae6:	e05e      	b.n	8001ba6 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aea:	3314      	adds	r3, #20
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d03a      	beq.n	8001b6c <OLED_Print+0x156>
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af8:	3315      	adds	r3, #21
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d033      	beq.n	8001b6c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	18d1      	adds	r1, r2, r3
 8001b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	3350      	adds	r3, #80	; 0x50
 8001b10:	443b      	add	r3, r7
 8001b12:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00f fddd 	bl	80116dc <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b24:	3b01      	subs	r3, #1
 8001b26:	3350      	adds	r3, #80	; 0x50
 8001b28:	443b      	add	r3, r7
 8001b2a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	1898      	adds	r0, r3, r2
 8001b36:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	3350      	adds	r3, #80	; 0x50
 8001b40:	443b      	add	r3, r7
 8001b42:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b46:	f1c3 0315 	rsb	r3, r3, #21
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f00f fb2c 	bl	80111a8 <memset>
	            thisline[21]=' ';
 8001b50:	2320      	movs	r3, #32
 8001b52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	3350      	adds	r3, #80	; 0x50
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b66:	4413      	add	r3, r2
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b6a:	e00e      	b.n	8001b8a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	18d1      	adds	r1, r2, r3
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2215      	movs	r2, #21
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00f fdaf 	bl	80116dc <strncpy>
	            thisline[21]=' ';
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b86:	3315      	adds	r3, #21
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b90:	b2d8      	uxtb	r0, r3
 8001b92:	f107 0220 	add.w	r2, r7, #32
 8001b96:	2300      	movs	r3, #0
 8001b98:	2102      	movs	r1, #2
 8001b9a:	f7ff fee9 	bl	8001970 <OLED_Printlin>
	        line++;
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001ba4:	e746      	b.n	8001a34 <OLED_Print+0x1e>
}
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001bb8:	f7ff fd2e 	bl	8001618 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff ff01 	bl	80019ce <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e01a      	b.n	8001c08 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	7818      	ldrb	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	7859      	ldrb	r1, [r3, #1]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f7ff feb7 	bl	8001970 <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbde      	blt.n	8001bd2 <OLED_SCREEN+0x26>
	}
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	460b      	mov	r3, r1
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fadb 	bl	80001f4 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	440b      	add	r3, r1
 8001c5c:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	7818      	ldrb	r0, [r3, #0]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	b2d9      	uxtb	r1, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	f7ff fe7d 	bl	8001970 <OLED_Printlin>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	72fb      	strb	r3, [r7, #11]

	char arrow[] = "->";
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <OLED_SELECT+0xf8>)
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
 8001c98:	8019      	strh	r1, [r3, #0]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	0c12      	lsrs	r2, r2, #16
 8001c9e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest = "  ";
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <OLED_SELECT+0xfc>)
 8001ca2:	61bb      	str	r3, [r7, #24]

	if(selopt == 0){
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <OLED_SELECT+0x36>
	    index = screen->selsize - 1;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
 8001cb4:	e002      	b.n	8001cbc <OLED_SELECT+0x3c>
	} else {
		index = selopt - 1;
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	77fb      	strb	r3, [r7, #31]
	}

	prevpage = screen->seldata[index][0];
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	75fb      	strb	r3, [r7, #23]
	prevcol  = screen->seldata[index][1];
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	75bb      	strb	r3, [r7, #22]
	thispage = screen->seldata[selopt][0];
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	757b      	strb	r3, [r7, #21]
	thiscol  = screen->seldata[selopt][1];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12d      	bne.n	8001d56 <OLED_SELECT+0xd6>
	    if (selopt == 0) {
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11c      	bne.n	8001d3a <OLED_SELECT+0xba>
	    	if (find_restore_string(screen, screen->selsize - 1) != 0) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f92b 	bl	8001f68 <find_restore_string>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01e      	beq.n	8001d56 <OLED_SELECT+0xd6>
	    		rest = (char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689c      	ldr	r4, [r3, #8]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f91d 	bl	8001f68 <find_restore_string>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4423      	add	r3, r4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e00d      	b.n	8001d56 <OLED_SELECT+0xd6>
	    	}
	    } else {
	    	rest = (char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689c      	ldr	r4, [r3, #8]
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f90e 	bl	8001f68 <find_restore_string>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4423      	add	r3, r4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
	    }
	}

	OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001d56:	7db9      	ldrb	r1, [r7, #22]
 8001d58:	7df8      	ldrb	r0, [r7, #23]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f7ff fe07 	bl	8001970 <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001d62:	f107 0210 	add.w	r2, r7, #16
 8001d66:	7d39      	ldrb	r1, [r7, #20]
 8001d68:	7d78      	ldrb	r0, [r7, #21]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f7ff fe00 	bl	8001970 <OLED_Printlin>

}
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	08012934 	.word	0x08012934
 8001d7c:	08012930 	.word	0x08012930

08001d80 <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	75fb      	strb	r3, [r7, #23]
 8001d9c:	e002      	b.n	8001da4 <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d110      	bne.n	8001e04 <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689c      	ldr	r4, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8b8 	bl	8001f68 <find_restore_string>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4423      	add	r3, r4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e00d      	b.n	8001e20 <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689c      	ldr	r4, [r3, #8]
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8a9 	bl	8001f68 <find_restore_string>
 8001e16:	4603      	mov	r3, r0
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4423      	add	r3, r4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001e20:	7bb9      	ldrb	r1, [r7, #14]
 8001e22:	7bf8      	ldrb	r0, [r7, #15]
 8001e24:	2300      	movs	r3, #0
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f7ff fda2 	bl	8001970 <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[find_restore_string(screen, selopt)], INVERT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689c      	ldr	r4, [r3, #8]
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f897 	bl	8001f68 <find_restore_string>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4423      	add	r3, r4
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	7b39      	ldrb	r1, [r7, #12]
 8001e44:	7b78      	ldrb	r0, [r7, #13]
 8001e46:	2301      	movs	r3, #1
 8001e48:	f7ff fd92 	bl	8001970 <OLED_Printlin>
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}

08001e54 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
	if (get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN) == 0) {
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fc05 	bl	800467e <get_number_files_section>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <OLED_display_files+0x2a>
		return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06e      	b.n	8001f5c <OLED_display_files+0x108>
	}
	uint32_t file_count = get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN);
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fbf6 	bl	800467e <get_number_files_section>
 8001e92:	61f8      	str	r0, [r7, #28]

	char** file_names = malloc(file_count * sizeof(char*));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00f f967 	bl	801116c <malloc>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
	char used[5];
	char free[5];
	uint32_t file_index = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t location_index = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]

	get_free_size_str(free);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fdde 	bl	8004a70 <get_free_size_str>
	get_used_size_str(used);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fdc7 	bl	8004a4c <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	4827      	ldr	r0, [pc, #156]	; (8001f64 <OLED_display_files+0x110>)
 8001ec8:	f7ff fea9 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2105      	movs	r1, #5
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <OLED_display_files+0x110>)
 8001ed6:	f7ff fea2 	bl	8001c1e <OLED_SCRNREF>

	if (get_files_section(file_names, FILES_PERSCREEN * page, file_count) != RFS_OK) {
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	0052      	lsls	r2, r2, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	69b8      	ldr	r0, [r7, #24]
 8001eec:	f002 fbf5 	bl	80046da <get_files_section>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d029      	beq.n	8001f4a <OLED_display_files+0xf6>
		free_filenames(file_names, file_count);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	69b8      	ldr	r0, [r7, #24]
 8001efc:	f002 fcd8 	bl	80048b0 <free_filenames>
		return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e02b      	b.n	8001f5c <OLED_display_files+0x108>
	}

	while(location_index < FILES_PERSCREEN) {
		if (entry_present(location_index + (page * FILES_PERSCREEN)) == RFS_OK) {
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fc4b 	bl	80047b4 <entry_present>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <OLED_display_files+0xf0>
			OLED_SCRNREF(&SCRN_ShowFiles, location_index + 1, file_names[file_index]);
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4413      	add	r3, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <OLED_display_files+0x110>)
 8001f3a:	f7ff fe70 	bl	8001c1e <OLED_SCRNREF>
			file_index++;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
		}
		location_index++;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	3301      	adds	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
	while(location_index < FILES_PERSCREEN) {
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d9d9      	bls.n	8001f04 <OLED_display_files+0xb0>
	}

	free_filenames(file_names, file_count);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4619      	mov	r1, r3
 8001f54:	69b8      	ldr	r0, [r7, #24]
 8001f56:	f002 fcab 	bl	80048b0 <free_filenames>
	return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08013a28 	.word	0x08013a28

08001f68 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001f74:	2301      	movs	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	e021      	b.n	8001fbe <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d110      	bne.n	8001fb8 <find_restore_string+0x50>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	785a      	ldrb	r2, [r3, #1]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	440b      	add	r3, r1
 8001fac:	785b      	ldrb	r3, [r3, #1]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d102      	bne.n	8001fb8 <find_restore_string+0x50>
			index_of_string = i;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	73fb      	strb	r3, [r7, #15]
			break;
 8001fb6:	e007      	b.n	8001fc8 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbd8      	blt.n	8001f7a <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fbe5 	bl	80047b4 <entry_present>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d12d      	bne.n	800204c <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 f9cb 	bl	800438e <read_card_entry>
 8001ff8:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4815      	ldr	r0, [pc, #84]	; (8002054 <oled_show_file+0x7c>)
 8001ffe:	f7ff fdd5 	bl	8001bac <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	461a      	mov	r2, r3
 8002008:	2100      	movs	r1, #0
 800200a:	4812      	ldr	r0, [pc, #72]	; (8002054 <oled_show_file+0x7c>)
 800200c:	f7ff fe07 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	480e      	ldr	r0, [pc, #56]	; (8002054 <oled_show_file+0x7c>)
 800201a:	f7ff fe00 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7ff f9c1 	bl	80013b0 <uid_tostring>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	2102      	movs	r1, #2
 8002034:	4807      	ldr	r0, [pc, #28]	; (8002054 <oled_show_file+0x7c>)
 8002036:	f7ff fdf2 	bl	8001c1e <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <oled_show_file+0x7c>)
 8002040:	f7ff fe1e 	bl	8001c80 <OLED_SELECT>

	free(work);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f00f f899 	bl	801117c <free>
 800204a:	e000      	b.n	800204e <oled_show_file+0x76>
		return; //No card entry present
 800204c:	bf00      	nop
}
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08013a3c 	.word	0x08013a3c

08002058 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	3b01      	subs	r3, #1
 8002076:	429a      	cmp	r2, r3
 8002078:	db03      	blt.n	8002082 <oled_move_selection+0x2a>
		*arrow_index = 0;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	4619      	mov	r1, r3
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fdf2 	bl	8001c80 <OLED_SELECT>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3b01      	subs	r3, #1
 80020be:	429a      	cmp	r2, r3
 80020c0:	db03      	blt.n	80020ca <oled_move_selection_inv+0x26>
		*select_index = 0;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e005      	b.n	80020d6 <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff fe4f 	bl	8001d80 <OLED_select_inv>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <oled_keyboard_insertChar>:
 * Update string displayed displayed in keyboard task as it's being written
 * @param char_index - Index of selected character on keyboard
 * @param curr_name - Pointer to pointer that stores the current name which has been created by the user.
 * 					  This name will grow as the user continues to write characters
 * */
void oled_keyboard_insertChar (uint8_t char_index, char** curr_name) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (*curr_name == NULL) {
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <oled_keyboard_insertChar+0x1a>
		length = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e006      	b.n	8002114 <oled_keyboard_insertChar+0x28>
	} else {
		length = strlen(*curr_name);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f872 	bl	80001f4 <strlen>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
	}

	*curr_name = realloc(*curr_name, (length + 2) * sizeof(char)); //Increment by 2 since we want to store a new character as well as null
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3302      	adds	r3, #2
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f00f f9ce 	bl	80114c0 <realloc>
 8002124:	4602      	mov	r2, r0
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	601a      	str	r2, [r3, #0]
	(*curr_name)[length] = KEYBOARD_LUT[char_index];
 800212a:	79fa      	ldrb	r2, [r7, #7]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	440b      	add	r3, r1
 8002134:	490a      	ldr	r1, [pc, #40]	; (8002160 <oled_keyboard_insertChar+0x74>)
 8002136:	5c8a      	ldrb	r2, [r1, r2]
 8002138:	701a      	strb	r2, [r3, #0]
	(*curr_name)[length + 1] = '\0';
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <oled_keyboard_insertChar+0x78>)
 8002152:	f7ff fd64 	bl	8001c1e <OLED_SCRNREF>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	080134a4 	.word	0x080134a4
 8002164:	08013a64 	.word	0x08013a64

08002168 <oled_keyboard_removeChar>:

/**
 * Remove character from user inputted string
 * @param curr_name - Current state of user string
 * */
void oled_keyboard_removeChar (char** curr_name) {
 8002168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800216c:	b087      	sub	sp, #28
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	466b      	mov	r3, sp
 8002174:	461e      	mov	r6, r3
	uint8_t length;

	if (*curr_name == NULL) {
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <oled_keyboard_removeChar+0x1a>
 800217e:	46b5      	mov	sp, r6
 8002180:	e055      	b.n	800222e <oled_keyboard_removeChar+0xc6>
		return; //No name, don't do anything
	}

	length = strlen(*curr_name);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f834 	bl	80001f4 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	75fb      	strb	r3, [r7, #23]

	*curr_name = realloc(*curr_name, length * sizeof(char));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	7dfa      	ldrb	r2, [r7, #23]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f00f f991 	bl	80114c0 <realloc>
 800219e:	4602      	mov	r2, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	601a      	str	r2, [r3, #0]
	(*curr_name)[length - 1] = '\0';
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

	char clear[length + 1];
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	1e4b      	subs	r3, r1, #1
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	460a      	mov	r2, r1
 80021bc:	2300      	movs	r3, #0
 80021be:	4690      	mov	r8, r2
 80021c0:	4699      	mov	r9, r3
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021d6:	460a      	mov	r2, r1
 80021d8:	2300      	movs	r3, #0
 80021da:	4614      	mov	r4, r2
 80021dc:	461d      	mov	r5, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	00eb      	lsls	r3, r5, #3
 80021e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ec:	00e2      	lsls	r2, r4, #3
 80021ee:	460b      	mov	r3, r1
 80021f0:	3307      	adds	r3, #7
 80021f2:	08db      	lsrs	r3, r3, #3
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	ebad 0d03 	sub.w	sp, sp, r3
 80021fa:	466b      	mov	r3, sp
 80021fc:	3300      	adds	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
	memset(clear, ' ', length);
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	461a      	mov	r2, r3
 8002204:	2120      	movs	r1, #32
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f00e ffce 	bl	80111a8 <memset>
	clear[length] = '\0';
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	2100      	movs	r1, #0
 8002212:	54d1      	strb	r1, [r2, r3]

	OLED_SCRNREF(&SCRN_Keyboard, 0 ,clear);
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	2100      	movs	r1, #0
 8002218:	4807      	ldr	r0, [pc, #28]	; (8002238 <oled_keyboard_removeChar+0xd0>)
 800221a:	f7ff fd00 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <oled_keyboard_removeChar+0xd0>)
 8002228:	f7ff fcf9 	bl	8001c1e <OLED_SCRNREF>
 800222c:	46b5      	mov	sp, r6
}
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002236:	bf00      	nop
 8002238:	08013a64 	.word	0x08013a64

0800223c <oled_set_contrast>:

/**
 * Set the constrast of oled display
 * @param value - 8 bit value to set contrast to
 * */
void oled_set_contrast (uint8_t value) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
	OLED_cmd(CNTRST_SET);
 8002246:	2081      	movs	r0, #129	; 0x81
 8002248:	f7ff f9fa 	bl	8001640 <OLED_cmd>
	HAL_Delay(1);
 800224c:	2001      	movs	r0, #1
 800224e:	f003 f839 	bl	80052c4 <HAL_Delay>
	OLED_cmd(value);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f9f3 	bl	8001640 <OLED_cmd>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <oled_show_stats>:

/**
 * Display the statistics for stats task (total writes and reads)
 * */
void oled_show_stats(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	char* reads = get_total_reads_str();
 800226a:	f002 fcb7 	bl	8004bdc <get_total_reads_str>
 800226e:	6078      	str	r0, [r7, #4]
	char* writes = get_total_writes_str();
 8002270:	f002 fc9c 	bl	8004bac <get_total_writes_str>
 8002274:	6038      	str	r0, [r7, #0]

	OLED_SCRNREF(&SCRN_Stats, 1, writes);
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <oled_show_stats+0x3c>)
 800227c:	f7ff fccf 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Stats, 2, reads);
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	2102      	movs	r1, #2
 8002284:	4806      	ldr	r0, [pc, #24]	; (80022a0 <oled_show_stats+0x3c>)
 8002286:	f7ff fcca 	bl	8001c1e <OLED_SCRNREF>

	free(reads);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00e ff76 	bl	801117c <free>
	free(writes);
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f00e ff73 	bl	801117c <free>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	08013a8c 	.word	0x08013a8c

080022a4 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 80022ae:	230f      	movs	r3, #15
 80022b0:	733b      	strb	r3, [r7, #12]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	737b      	strb	r3, [r7, #13]
 80022b6:	2300      	movs	r3, #0
 80022b8:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <STAT_READ+0x54>)
 80022c2:	f003 faa1 	bl	8005808 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 80022c6:	bf00      	nop
 80022c8:	f107 0208 	add.w	r2, r7, #8
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2303      	movs	r3, #3
 80022d6:	4809      	ldr	r0, [pc, #36]	; (80022fc <STAT_READ+0x58>)
 80022d8:	f006 fb7d 	bl	80089d6 <HAL_SPI_TransmitReceive>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <STAT_READ+0x54>)
 80022ea:	f003 fa8d 	bl	8005808 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80022ee:	7abb      	ldrb	r3, [r7, #10]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40020000 	.word	0x40020000
 80022fc:	20000808 	.word	0x20000808

08002300 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	460a      	mov	r2, r1
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	4613      	mov	r3, r2
 800230e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8002310:	231f      	movs	r3, #31
 8002312:	733b      	strb	r3, [r7, #12]
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	737b      	strb	r3, [r7, #13]
 8002318:	79bb      	ldrb	r3, [r7, #6]
 800231a:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <STAT_WRITE+0x4c>)
 8002324:	f003 fa70 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8002328:	f107 010c 	add.w	r1, r7, #12
 800232c:	2364      	movs	r3, #100	; 0x64
 800232e:	2203      	movs	r2, #3
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <STAT_WRITE+0x50>)
 8002332:	f006 fa14 	bl	800875e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <STAT_WRITE+0x4c>)
 800233e:	f003 fa63 	bl	8005808 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40020000 	.word	0x40020000
 8002350:	20000808 	.word	0x20000808

08002354 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800235a:	2306      	movs	r3, #6
 800235c:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 800235e:	f000 f825 	bl	80023ac <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002362:	e011      	b.n	8002388 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <WRIT_EN+0x50>)
 800236c:	f003 fa4c 	bl	8005808 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8002370:	1df9      	adds	r1, r7, #7
 8002372:	2364      	movs	r3, #100	; 0x64
 8002374:	2201      	movs	r2, #1
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <WRIT_EN+0x54>)
 8002378:	f006 f9f1 	bl	800875e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002382:	4808      	ldr	r0, [pc, #32]	; (80023a4 <WRIT_EN+0x50>)
 8002384:	f003 fa40 	bl	8005808 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002388:	20c0      	movs	r0, #192	; 0xc0
 800238a:	f7ff ff8b 	bl	80022a4 <STAT_READ>
 800238e:	4603      	mov	r3, r0
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b02      	cmp	r3, #2
 8002396:	d1e5      	bne.n	8002364 <WRIT_EN+0x10>
	}


}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40020000 	.word	0x40020000
 80023a8:	20000808 	.word	0x20000808

080023ac <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 80023b2:	2304      	movs	r3, #4
 80023b4:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80023b6:	e011      	b.n	80023dc <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023be:	480e      	ldr	r0, [pc, #56]	; (80023f8 <WRITE_DIS+0x4c>)
 80023c0:	f003 fa22 	bl	8005808 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 80023c4:	1df9      	adds	r1, r7, #7
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	2201      	movs	r2, #1
 80023ca:	480c      	ldr	r0, [pc, #48]	; (80023fc <WRITE_DIS+0x50>)
 80023cc:	f006 f9c7 	bl	800875e <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	4808      	ldr	r0, [pc, #32]	; (80023f8 <WRITE_DIS+0x4c>)
 80023d8:	f003 fa16 	bl	8005808 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80023dc:	20c0      	movs	r0, #192	; 0xc0
 80023de:	f7ff ff61 	bl	80022a4 <STAT_READ>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d0e5      	beq.n	80023b8 <WRITE_DIS+0xc>
		}
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020000 	.word	0x40020000
 80023fc:	20000808 	.word	0x20000808

08002400 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8002410:	23d8      	movs	r3, #216	; 0xd8
 8002412:	723b      	strb	r3, [r7, #8]
 8002414:	2300      	movs	r3, #0
 8002416:	727b      	strb	r3, [r7, #9]
 8002418:	89fb      	ldrh	r3, [r7, #14]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b29b      	uxth	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	72bb      	strb	r3, [r7, #10]
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 8002428:	f7ff ff94 	bl	8002354 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002432:	480f      	ldr	r0, [pc, #60]	; (8002470 <block_erase+0x70>)
 8002434:	f003 f9e8 	bl	8005808 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 8002438:	f107 0108 	add.w	r1, r7, #8
 800243c:	2364      	movs	r3, #100	; 0x64
 800243e:	2204      	movs	r2, #4
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <block_erase+0x74>)
 8002442:	f006 f98c 	bl	800875e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002446:	2201      	movs	r2, #1
 8002448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <block_erase+0x70>)
 800244e:	f003 f9db 	bl	8005808 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002452:	bf00      	nop
 8002454:	20c0      	movs	r0, #192	; 0xc0
 8002456:	f7ff ff25 	bl	80022a4 <STAT_READ>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d0f7      	beq.n	8002454 <block_erase+0x54>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020000 	.word	0x40020000
 8002474:	20000808 	.word	0x20000808

08002478 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002482:	480a      	ldr	r0, [pc, #40]	; (80024ac <MEM_INIT+0x34>)
 8002484:	f003 f9c0 	bl	8005808 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8002488:	2100      	movs	r1, #0
 800248a:	20a0      	movs	r0, #160	; 0xa0
 800248c:	f7ff ff38 	bl	8002300 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8002490:	20a0      	movs	r0, #160	; 0xa0
 8002492:	f7ff ff07 	bl	80022a4 <STAT_READ>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MEM_INIT+0x28>
		return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e002      	b.n	80024a6 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80024a0:	f7ff ff84 	bl	80023ac <WRITE_DIS>
	return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40020000 	.word	0x40020000

080024b0 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60ba      	str	r2, [r7, #8]
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4603      	mov	r3, r0
 80024bc:	81fb      	strh	r3, [r7, #14]
 80024be:	460b      	mov	r3, r1
 80024c0:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3303      	adds	r3, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00e fe50 	bl	801116c <malloc>
 80024cc:	4603      	mov	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 80024d0:	2310      	movs	r3, #16
 80024d2:	743b      	strb	r3, [r7, #16]
 80024d4:	2300      	movs	r3, #0
 80024d6:	747b      	strb	r3, [r7, #17]
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 80024ee:	89bb      	ldrh	r3, [r7, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3302      	adds	r3, #2
 8002500:	89ba      	ldrh	r2, [r7, #12]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3303      	adds	r3, #3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f00e fe3c 	bl	801118c <memcpy>

	WRIT_EN();
 8002514:	f7ff ff1e 	bl	8002354 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251e:	482d      	ldr	r0, [pc, #180]	; (80025d4 <MEM_WRITE+0x124>)
 8002520:	f003 f972 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	b29b      	uxth	r3, r3
 8002528:	3303      	adds	r3, #3
 800252a:	b29a      	uxth	r2, r3
 800252c:	2364      	movs	r3, #100	; 0x64
 800252e:	6979      	ldr	r1, [r7, #20]
 8002530:	4829      	ldr	r0, [pc, #164]	; (80025d8 <MEM_WRITE+0x128>)
 8002532:	f006 f914 	bl	800875e <HAL_SPI_Transmit>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800253c:	2201      	movs	r2, #1
 800253e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002542:	4824      	ldr	r0, [pc, #144]	; (80025d4 <MEM_WRITE+0x124>)
 8002544:	f003 f960 	bl	8005808 <HAL_GPIO_WritePin>
		free(setup);
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f00e fe17 	bl	801117c <free>
		return(HAL_ERROR);
 800254e:	2301      	movs	r3, #1
 8002550:	e03c      	b.n	80025cc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002558:	481e      	ldr	r0, [pc, #120]	; (80025d4 <MEM_WRITE+0x124>)
 800255a:	f003 f955 	bl	8005808 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800255e:	bf00      	nop
 8002560:	20c0      	movs	r0, #192	; 0xc0
 8002562:	f7ff fe9f 	bl	80022a4 <STAT_READ>
 8002566:	4603      	mov	r3, r0
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d0f7      	beq.n	8002560 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002576:	4817      	ldr	r0, [pc, #92]	; (80025d4 <MEM_WRITE+0x124>)
 8002578:	f003 f946 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 800257c:	f107 0110 	add.w	r1, r7, #16
 8002580:	2364      	movs	r3, #100	; 0x64
 8002582:	2204      	movs	r2, #4
 8002584:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MEM_WRITE+0x128>)
 8002586:	f006 f8ea 	bl	800875e <HAL_SPI_Transmit>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002596:	480f      	ldr	r0, [pc, #60]	; (80025d4 <MEM_WRITE+0x124>)
 8002598:	f003 f936 	bl	8005808 <HAL_GPIO_WritePin>
		free(setup);
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f00e fded 	bl	801117c <free>
		return(HAL_ERROR);
 80025a2:	2301      	movs	r3, #1
 80025a4:	e012      	b.n	80025cc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ac:	4809      	ldr	r0, [pc, #36]	; (80025d4 <MEM_WRITE+0x124>)
 80025ae:	f003 f92b 	bl	8005808 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80025b2:	bf00      	nop
 80025b4:	20c0      	movs	r0, #192	; 0xc0
 80025b6:	f7ff fe75 	bl	80022a4 <STAT_READ>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d0f7      	beq.n	80025b4 <MEM_WRITE+0x104>
	free(setup);
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f00e fdd9 	bl	801117c <free>
	return(HAL_OK);
 80025ca:	2300      	movs	r3, #0

}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40020000 	.word	0x40020000
 80025d8:	20000808 	.word	0x20000808

080025dc <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60ba      	str	r2, [r7, #8]
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4603      	mov	r3, r0
 80025e8:	81fb      	strh	r3, [r7, #14]
 80025ea:	460b      	mov	r3, r1
 80025ec:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr >> 8, page_addr};
 80025ee:	2313      	movs	r3, #19
 80025f0:	753b      	strb	r3, [r7, #20]
 80025f2:	2300      	movs	r3, #0
 80025f4:	757b      	strb	r3, [r7, #21]
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	75bb      	strb	r3, [r7, #22]
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8002606:	2304      	movs	r3, #4
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 800260c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f00e fda9 	bl	801116c <malloc>
 800261a:	4603      	mov	r3, r0
 800261c:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 800261e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f00e fda0 	bl	801116c <malloc>
 800262c:	4603      	mov	r3, r0
 800262e:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8002630:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	461a      	mov	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	69f8      	ldr	r0, [r7, #28]
 800263e:	f00e fdb3 	bl	80111a8 <memset>
	read_command[0]=READ_BUF;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8002648:	89bb      	ldrh	r3, [r7, #12]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29a      	uxth	r2, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3302      	adds	r3, #2
 800265a:	89ba      	ldrh	r2, [r7, #12]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3303      	adds	r3, #3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266e:	4842      	ldr	r0, [pc, #264]	; (8002778 <MEM_READPAGE+0x19c>)
 8002670:	f003 f8ca 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8002674:	f107 0114 	add.w	r1, r7, #20
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	2204      	movs	r2, #4
 800267c:	483f      	ldr	r0, [pc, #252]	; (800277c <MEM_READPAGE+0x1a0>)
 800267e:	f006 f86e 	bl	800875e <HAL_SPI_Transmit>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268e:	483a      	ldr	r0, [pc, #232]	; (8002778 <MEM_READPAGE+0x19c>)
 8002690:	f003 f8ba 	bl	8005808 <HAL_GPIO_WritePin>
		free(read_command);
 8002694:	69f8      	ldr	r0, [r7, #28]
 8002696:	f00e fd71 	bl	801117c <free>
		free(rec_data);
 800269a:	69b8      	ldr	r0, [r7, #24]
 800269c:	f00e fd6e 	bl	801117c <free>
		return(HAL_ERROR);
 80026a0:	2301      	movs	r3, #1
 80026a2:	e064      	b.n	800276e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026aa:	4833      	ldr	r0, [pc, #204]	; (8002778 <MEM_READPAGE+0x19c>)
 80026ac:	f003 f8ac 	bl	8005808 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80026b0:	bf00      	nop
 80026b2:	20c0      	movs	r0, #192	; 0xc0
 80026b4:	f7ff fdf6 	bl	80022a4 <STAT_READ>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d0f7      	beq.n	80026b2 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c8:	482b      	ldr	r0, [pc, #172]	; (8002778 <MEM_READPAGE+0x19c>)
 80026ca:	f003 f89d 	bl	8005808 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 80026ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2264      	movs	r2, #100	; 0x64
 80026de:	9200      	str	r2, [sp, #0]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	69f9      	ldr	r1, [r7, #28]
 80026e4:	4825      	ldr	r0, [pc, #148]	; (800277c <MEM_READPAGE+0x1a0>)
 80026e6:	f006 f976 	bl	80089d6 <HAL_SPI_TransmitReceive>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80026f0:	2201      	movs	r2, #1
 80026f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f6:	4820      	ldr	r0, [pc, #128]	; (8002778 <MEM_READPAGE+0x19c>)
 80026f8:	f003 f886 	bl	8005808 <HAL_GPIO_WritePin>
		free(read_command);
 80026fc:	69f8      	ldr	r0, [r7, #28]
 80026fe:	f00e fd3d 	bl	801117c <free>
		free(rec_data);
 8002702:	69b8      	ldr	r0, [r7, #24]
 8002704:	f00e fd3a 	bl	801117c <free>
		return(HAL_ERROR);
 8002708:	2301      	movs	r3, #1
 800270a:	e030      	b.n	800276e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002712:	4819      	ldr	r0, [pc, #100]	; (8002778 <MEM_READPAGE+0x19c>)
 8002714:	f003 f878 	bl	8005808 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002718:	bf00      	nop
 800271a:	20c0      	movs	r0, #192	; 0xc0
 800271c:	f7ff fdc2 	bl	80022a4 <STAT_READ>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d0f7      	beq.n	800271a <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d104      	bne.n	800273a <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	791a      	ldrb	r2, [r3, #4]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e012      	b.n	8002760 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e00b      	b.n	8002758 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	3304      	adds	r3, #4
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	441a      	add	r2, r3
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	440b      	add	r3, r1
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8ef      	bhi.n	8002740 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8002760:	69f8      	ldr	r0, [r7, #28]
 8002762:	f00e fd0b 	bl	801117c <free>
	free(rec_data);
 8002766:	69b8      	ldr	r0, [r7, #24]
 8002768:	f00e fd08 	bl	801117c <free>
	return(HAL_OK);
 800276c:	2300      	movs	r3, #0

}
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40020000 	.word	0x40020000
 800277c:	20000808 	.word	0x20000808

08002780 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e016      	b.n	80027ba <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	b29b      	uxth	r3, r3
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	b298      	uxth	r0, r3
 8002794:	1cfa      	adds	r2, r7, #3
 8002796:	2301      	movs	r3, #1
 8002798:	2100      	movs	r1, #0
 800279a:	f7ff ff1f 	bl	80025dc <MEM_READPAGE>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <mem_find_free_block+0x2a>
			return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	e00d      	b.n	80027c6 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	2bff      	cmp	r3, #255	; 0xff
 80027ae:	d101      	bne.n	80027b4 <mem_find_free_block+0x34>
			return i;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	e008      	b.n	80027c6 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c0:	dbe4      	blt.n	800278c <mem_find_free_block+0xc>
		}
	}
	return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_GPIO_EXTI_Callback+0x78>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 80027e2:	2300      	movs	r3, #0
 80027e4:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 80027e6:	2102      	movs	r1, #2
 80027e8:	4818      	ldr	r0, [pc, #96]	; (800284c <HAL_GPIO_EXTI_Callback+0x7c>)
 80027ea:	f002 fff5 	bl	80057d8 <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d11b      	bne.n	800282c <HAL_GPIO_EXTI_Callback+0x5c>
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 80027fa:	4813      	ldr	r0, [pc, #76]	; (8002848 <HAL_GPIO_EXTI_Callback+0x78>)
 80027fc:	f006 fc02 	bl	8009004 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_GPIO_EXTI_Callback+0x78>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8002808:	89fb      	ldrh	r3, [r7, #14]
 800280a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280e:	d902      	bls.n	8002816 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8002810:	2301      	movs	r3, #1
 8002812:	737b      	strb	r3, [r7, #13]
 8002814:	e001      	b.n	800281a <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8002816:	2302      	movs	r3, #2
 8002818:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_GPIO_EXTI_Callback+0x80>)
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	f107 010d 	add.w	r1, r7, #13
 8002822:	2300      	movs	r3, #0
 8002824:	2200      	movs	r2, #0
 8002826:	f00b fcd7 	bl	800e1d8 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 800282a:	e009      	b.n	8002840 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 800282c:	2102      	movs	r1, #2
 800282e:	4807      	ldr	r0, [pc, #28]	; (800284c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002830:	f002 ffd2 	bl	80057d8 <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 800283a:	4803      	ldr	r0, [pc, #12]	; (8002848 <HAL_GPIO_EXTI_Callback+0x78>)
 800283c:	f006 fb88 	bl	8008f50 <HAL_TIM_Base_Start>
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200008a8 	.word	0x200008a8
 800284c:	40020000 	.word	0x40020000
 8002850:	20000924 	.word	0x20000924

08002854 <cmd_ls>:

/**
 * List all files currently stored on device
 * @return CMD_OK if command was successfully executed
 * */
CMD_StatusTypeDef cmd_ls () {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
	uint32_t file_count = get_number_files_all();
 800285a:	f001 ff34 	bl	80046c6 <get_number_files_all>
 800285e:	60b8      	str	r0, [r7, #8]
	char** file_names = malloc(file_count * sizeof(char*));
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4618      	mov	r0, r3
 8002866:	f00e fc81 	bl	801116c <malloc>
 800286a:	4603      	mov	r3, r0
 800286c:	607b      	str	r3, [r7, #4]
	if (get_all_files(file_names) != RFS_OK) {
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f001 ff91 	bl	8004796 <get_all_files>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <cmd_ls+0x2a>
		return CMD_LS_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e018      	b.n	80028b0 <cmd_ls+0x5c>
	}

	for (int i = 0; i < file_count; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e00b      	b.n	800289c <cmd_ls+0x48>
		printf("\n\r%s.rfid", file_names[i]);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <cmd_ls+0x64>)
 8002892:	f00e fd87 	bl	80113a4 <iprintf>
	for (int i = 0; i < file_count; i++) {
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3301      	adds	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8ef      	bhi.n	8002884 <cmd_ls+0x30>
	}
	free_filenames(file_names, file_count);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f002 f801 	bl	80048b0 <free_filenames>
	return CMD_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	08012ae4 	.word	0x08012ae4

080028bc <cmd_rm>:
/**
 * Remove a file
 * @param arg - File name to remove
 * @return CMD_OK if file was successfully removed
 * */
CMD_StatusTypeDef cmd_rm(char* arg) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	char** file_name_split = cmd_split(arg, '.'); //Split into name and extension
 80028c4:	212e      	movs	r1, #46	; 0x2e
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fac7 	bl	8002e5a <cmd_split>
 80028cc:	60f8      	str	r0, [r7, #12]

	if ((strcmp(file_name_split[1], "rfid") != 0)) {
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3304      	adds	r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4915      	ldr	r1, [pc, #84]	; (800292c <cmd_rm+0x70>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fc82 	bl	80001e0 <strcmp>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <cmd_rm+0x3a>
		printf("\n\rfile not found: %s", arg);
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4812      	ldr	r0, [pc, #72]	; (8002930 <cmd_rm+0x74>)
 80028e6:	f00e fd5d 	bl	80113a4 <iprintf>
		free_tokens(file_name_split, 2);
 80028ea:	2102      	movs	r1, #2
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fb65 	bl	8002fbc <free_tokens>
		return CMD_RM_ERROR;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e016      	b.n	8002924 <cmd_rm+0x68>
	}
	if (remove_card_byname(file_name_split[0]) != RFS_OK) {
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 f803 	bl	8004906 <remove_card_byname>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <cmd_rm+0x5e>
		printf("\n\rfile not found: %s", arg);
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <cmd_rm+0x74>)
 800290a:	f00e fd4b 	bl	80113a4 <iprintf>
		free_tokens(file_name_split, 2);
 800290e:	2102      	movs	r1, #2
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fb53 	bl	8002fbc <free_tokens>
		return CMD_RM_ERROR;
 8002916:	2302      	movs	r3, #2
 8002918:	e004      	b.n	8002924 <cmd_rm+0x68>
	}
	free_tokens(file_name_split, 2);
 800291a:	2102      	movs	r1, #2
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fb4d 	bl	8002fbc <free_tokens>
	return CMD_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	08012af0 	.word	0x08012af0
 8002930:	08012af8 	.word	0x08012af8

08002934 <cmd_pg>:
/**
 * Upload/program a file into the device
 * @param tokens - Arguments from user
 * @return CMD_OK if file was successfully uploaded
 * */
CMD_StatusTypeDef cmd_pg(char** args, uint8_t size) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
	Card to_program;
	char* name;

	if (strcmp(args[1], "--help") == 0) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	494b      	ldr	r1, [pc, #300]	; (8002a74 <cmd_pg+0x140>)
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fc49 	bl	80001e0 <strcmp>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <cmd_pg+0x28>
		pg_show_help();
 8002954:	f000 fb50 	bl	8002ff8 <pg_show_help>
		return CMD_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e087      	b.n	8002a6c <cmd_pg+0x138>
	}

	for (int i = 1; i < size; i++) {
 800295c:	2301      	movs	r3, #1
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	e073      	b.n	8002a4a <cmd_pg+0x116>

		if (strcmp(args[i], "-name") == 0) {
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4942      	ldr	r1, [pc, #264]	; (8002a78 <cmd_pg+0x144>)
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fc36 	bl	80001e0 <strcmp>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <cmd_pg+0x54>
			name = args[i + 1];
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	3301      	adds	r3, #1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		if (strcmp(args[i], "-uid") == 0) {
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	493a      	ldr	r1, [pc, #232]	; (8002a7c <cmd_pg+0x148>)
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fc23 	bl	80001e0 <strcmp>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <cmd_pg+0x9e>
			pg_parse_str(&to_program.uid, args[i + 1]);
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	3301      	adds	r3, #1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fb4c 	bl	8003050 <pg_parse_str>
			to_program.uidsize = get_token_count(args[i + 1], ',');
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	3301      	adds	r3, #1
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa89 	bl	8002ede <get_token_count>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	743b      	strb	r3, [r7, #16]
		}

		if (strcmp(args[i], "-mem") == 0) {
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4928      	ldr	r1, [pc, #160]	; (8002a80 <cmd_pg+0x14c>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fbfe 	bl	80001e0 <strcmp>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <cmd_pg+0xea>
			pg_parse_str(&to_program.contents, args[i + 1]);
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	3301      	adds	r3, #1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	3314      	adds	r3, #20
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fb26 	bl	8003050 <pg_parse_str>
			to_program.contents_size = get_token_count(args[i + 1], ',');
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	3301      	adds	r3, #1
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa63 	bl	8002ede <get_token_count>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		if (strcmp(args[i], "-type") == 0) {
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <cmd_pg+0x150>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fbd8 	bl	80001e0 <strcmp>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <cmd_pg+0x110>
			to_program.type = args[i + 1];
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	3301      	adds	r3, #1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < size; i++) {
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	3301      	adds	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	db87      	blt.n	8002962 <cmd_pg+0x2e>
		}

	}
	to_program.read_protected = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	773b      	strb	r3, [r7, #28]
	enter_card(&to_program, mem_find_free_block(), name);
 8002a56:	f7ff fe93 	bl	8002780 <mem_find_free_block>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b299      	uxth	r1, r3
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fbda 	bl	800421e <enter_card>
	return CMD_OK;
 8002a6a:	2300      	movs	r3, #0

}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	08012b10 	.word	0x08012b10
 8002a78:	08012b18 	.word	0x08012b18
 8002a7c:	08012b20 	.word	0x08012b20
 8002a80:	08012b28 	.word	0x08012b28
 8002a84:	08012b30 	.word	0x08012b30

08002a88 <cmd_cat>:
/**
 * Print contents of file (cat)
 * @param file - File name input from user
 * @return CMD_OK if file was successfully printed to terminal
 * */
CMD_StatusTypeDef cmd_cat(char* file) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	char** file_no_ext = cmd_split(file, '.');
 8002a90:	212e      	movs	r1, #46	; 0x2e
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9e1 	bl	8002e5a <cmd_split>
 8002a98:	6178      	str	r0, [r7, #20]
	int block_num = get_file_entry(file_no_ext[0]);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fed2 	bl	8004848 <get_file_entry>
 8002aa4:	6138      	str	r0, [r7, #16]
	Card* toprint = read_card_entry(block_num);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fc6f 	bl	800438e <read_card_entry>
 8002ab0:	60f8      	str	r0, [r7, #12]

	if (toprint == NULL) {
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <cmd_cat+0x3c>
		free_tokens(file_no_ext, 2);
 8002ab8:	2102      	movs	r1, #2
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f000 fa7e 	bl	8002fbc <free_tokens>
		return CMD_CAT_ERROR;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e00e      	b.n	8002ae2 <cmd_cat+0x5a>
	}

	printf("\n\r"); //setup new line
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <cmd_cat+0x64>)
 8002ac6:	f00e fc6d 	bl	80113a4 <iprintf>
	dump_card_serial(toprint, UL_PAGESIZE);
 8002aca:	2104      	movs	r1, #4
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fe fd0f 	bl	80014f0 <dump_card_serial>
	free_tokens(file_no_ext, 2);
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f000 fa71 	bl	8002fbc <free_tokens>
	free_card(toprint);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f001 fdb0 	bl	8004640 <free_card>
	return CMD_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	08012b38 	.word	0x08012b38

08002af0 <cmd_mod>:
 * Modify command (Modify contents of exist file)
 * @param args - Arguments passed by user
 * @param size - Number of arguments
 * @return CMD_OK if file was successfully modified
 * */
CMD_StatusTypeDef cmd_mod(char** args, uint32_t size) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
	int page_to_modify = -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	61fb      	str	r3, [r7, #28]
	uint8_t* data = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
	char* new_name = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]


	if (strcmp(args[1], "--help") == 0) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	494c      	ldr	r1, [pc, #304]	; (8002c40 <cmd_mod+0x150>)
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fb65 	bl	80001e0 <strcmp>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <cmd_mod+0x34>
		mod_show_help();
 8002b1c:	f000 fa84 	bl	8003028 <mod_show_help>
		return CMD_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e088      	b.n	8002c36 <cmd_mod+0x146>
	}

	char** file_and_ext = cmd_split(args[1], '.');
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	212e      	movs	r1, #46	; 0x2e
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f994 	bl	8002e5a <cmd_split>
 8002b32:	6138      	str	r0, [r7, #16]

	for (int i = 1; i < size; i++) {
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e04c      	b.n	8002bd4 <cmd_mod+0xe4>

		if(strcmp(args[i], "-page") == 0) {
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	493f      	ldr	r1, [pc, #252]	; (8002c44 <cmd_mod+0x154>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fb4a 	bl	80001e0 <strcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <cmd_mod+0x76>
			page_to_modify = atoi(args[i + 1]);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00e face 	bl	8011100 <atoi>
 8002b64:	61f8      	str	r0, [r7, #28]
		}

		if (strcmp(args[i], "-data") == 0) {
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <cmd_mod+0x158>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fb34 	bl	80001e0 <strcmp>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <cmd_mod+0xa6>
			pg_parse_str(&data, args[i + 1]);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa5d 	bl	8003050 <pg_parse_str>
		}

		if (strcmp(args[i], "-name") == 0) {
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	492a      	ldr	r1, [pc, #168]	; (8002c4c <cmd_mod+0x15c>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fb1c 	bl	80001e0 <strcmp>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <cmd_mod+0xde>
			str_toupper(args[i + 1]);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f84c 	bl	8002c58 <str_toupper>
			new_name = args[i + 1];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < size; i++) {
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8ae      	bhi.n	8002b3a <cmd_mod+0x4a>
		}
	}

	if ((data != NULL) && (page_to_modify == -1)) {
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <cmd_mod+0x10c>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d108      	bne.n	8002bfc <cmd_mod+0x10c>
		printf("\n\rplease specify the page you wish to modify");
 8002bea:	4819      	ldr	r0, [pc, #100]	; (8002c50 <cmd_mod+0x160>)
 8002bec:	f00e fbda 	bl	80113a4 <iprintf>
		free_filenames(file_and_ext, 2);
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	6938      	ldr	r0, [r7, #16]
 8002bf4:	f001 fe5c 	bl	80048b0 <free_filenames>
		return CMD_MOD_ERROR;
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	e01c      	b.n	8002c36 <cmd_mod+0x146>
	}

	if ((data == NULL) && (page_to_modify != -1)) {
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <cmd_mod+0x12c>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d008      	beq.n	8002c1c <cmd_mod+0x12c>
		printf("\n\rplease specify the data you wish to input");
 8002c0a:	4812      	ldr	r0, [pc, #72]	; (8002c54 <cmd_mod+0x164>)
 8002c0c:	f00e fbca 	bl	80113a4 <iprintf>
		free_filenames(file_and_ext, 2);
 8002c10:	2102      	movs	r1, #2
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	f001 fe4c 	bl	80048b0 <free_filenames>
		return CMD_MOD_ERROR;
 8002c18:	2305      	movs	r3, #5
 8002c1a:	e00c      	b.n	8002c36 <cmd_mod+0x146>
	}

	if(modify_card(file_and_ext[0], page_to_modify, data, new_name) != RFS_OK) { //args[1] will be file name
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	f001 fea5 	bl	8004974 <modify_card>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <cmd_mod+0x144>
		return CMD_MOD_ERROR;
 8002c30:	2305      	movs	r3, #5
 8002c32:	e000      	b.n	8002c36 <cmd_mod+0x146>
	}
	return CMD_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	08012b10 	.word	0x08012b10
 8002c44:	08012b3c 	.word	0x08012b3c
 8002c48:	08012b44 	.word	0x08012b44
 8002c4c:	08012b18 	.word	0x08012b18
 8002c50:	08012b4c 	.word	0x08012b4c
 8002c54:	08012b7c 	.word	0x08012b7c

08002c58 <str_toupper>:

/**
 * Convert string to upper case
 * @param str - String to convert
 * */
void str_toupper(char* str) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++) {
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e019      	b.n	8002c9a <str_toupper+0x42>
		str[i] = toupper(str[i]);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	72fb      	strb	r3, [r7, #11]
 8002c70:	7afb      	ldrb	r3, [r7, #11]
 8002c72:	3301      	adds	r3, #1
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <str_toupper+0x5c>)
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d102      	bne.n	8002c88 <str_toupper+0x30>
 8002c82:	7afb      	ldrb	r3, [r7, #11]
 8002c84:	3b20      	subs	r3, #32
 8002c86:	e000      	b.n	8002c8a <str_toupper+0x32>
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	440a      	add	r2, r1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < strlen(str); i++) {
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd faaa 	bl	80001f4 <strlen>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8de      	bhi.n	8002c66 <str_toupper+0xe>
	}
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	08013ab8 	.word	0x08013ab8

08002cb8 <cmd_parse>:
/**
 * Parse a string representation of command
 * @param cmd - String representation of command e.g. ls
 * @return CMD_OK if command was successfully parsed and executed
 * */
CMD_StatusTypeDef cmd_parse(char* cmd) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	char** tokens = cmd_split(cmd, ' ');
 8002cc0:	2120      	movs	r1, #32
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8c9 	bl	8002e5a <cmd_split>
 8002cc8:	60f8      	str	r0, [r7, #12]
	uint32_t count = get_token_count(cmd, ' ');
 8002cca:	2120      	movs	r1, #32
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f906 	bl	8002ede <get_token_count>
 8002cd2:	60b8      	str	r0, [r7, #8]

	if (strcmp(tokens[0], "ls") == 0) {
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4934      	ldr	r1, [pc, #208]	; (8002dac <cmd_parse+0xf4>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa80 	bl	80001e0 <strcmp>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <cmd_parse+0x34>

		cmd_ls();
 8002ce6:	f7ff fdb5 	bl	8002854 <cmd_ls>
 8002cea:	e051      	b.n	8002d90 <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "clear") == 0) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	492f      	ldr	r1, [pc, #188]	; (8002db0 <cmd_parse+0xf8>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fa74 	bl	80001e0 <strcmp>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <cmd_parse+0x54>

		clear_terminal();
 8002cfe:	f002 fa5b 	bl	80051b8 <clear_terminal>
		move_terminal_cursor(0, 0);
 8002d02:	2100      	movs	r1, #0
 8002d04:	2000      	movs	r0, #0
 8002d06:	f002 fa47 	bl	8005198 <move_terminal_cursor>
 8002d0a:	e041      	b.n	8002d90 <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "rm") == 0) {
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4928      	ldr	r1, [pc, #160]	; (8002db4 <cmd_parse+0xfc>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fa64 	bl	80001e0 <strcmp>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <cmd_parse+0x74>

		cmd_rm(tokens[1]);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fdc9 	bl	80028bc <cmd_rm>
 8002d2a:	e031      	b.n	8002d90 <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "pg") == 0) {
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4921      	ldr	r1, [pc, #132]	; (8002db8 <cmd_parse+0x100>)
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fa54 	bl	80001e0 <strcmp>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <cmd_parse+0x94>

		cmd_pg(tokens, count);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fdf5 	bl	8002934 <cmd_pg>
 8002d4a:	e021      	b.n	8002d90 <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "cat") == 0) {
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	491a      	ldr	r1, [pc, #104]	; (8002dbc <cmd_parse+0x104>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fa44 	bl	80001e0 <strcmp>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <cmd_parse+0xb4>

		cmd_cat(tokens[1]);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3304      	adds	r3, #4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fe8f 	bl	8002a88 <cmd_cat>
 8002d6a:	e011      	b.n	8002d90 <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "mod") == 0) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4913      	ldr	r1, [pc, #76]	; (8002dc0 <cmd_parse+0x108>)
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fa34 	bl	80001e0 <strcmp>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <cmd_parse+0xd0>

		cmd_mod(tokens, count);
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff feb5 	bl	8002af0 <cmd_mod>
 8002d86:	e003      	b.n	8002d90 <cmd_parse+0xd8>

	} else {
		printf("\n\rcommand not found: %s", cmd);
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	480e      	ldr	r0, [pc, #56]	; (8002dc4 <cmd_parse+0x10c>)
 8002d8c:	f00e fb0a 	bl	80113a4 <iprintf>
	}

	free_tokens(tokens, get_token_count(cmd, ' '));
 8002d90:	2120      	movs	r1, #32
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8a3 	bl	8002ede <get_token_count>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f90d 	bl	8002fbc <free_tokens>
	return CMD_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	08012ba8 	.word	0x08012ba8
 8002db0:	08012bac 	.word	0x08012bac
 8002db4:	08012bb4 	.word	0x08012bb4
 8002db8:	08012bb8 	.word	0x08012bb8
 8002dbc:	08012bbc 	.word	0x08012bbc
 8002dc0:	08012bc0 	.word	0x08012bc0
 8002dc4:	08012bc4 	.word	0x08012bc4

08002dc8 <cmd_build>:
/**
 * Build a string from user input characters
 * @param currnet - Current state of string
 * @param input - User input character to be concatenated
 * */
void cmd_build(char** current, char input) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t length;

	if (*current == NULL) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <cmd_build+0x1a>
		length = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e006      	b.n	8002df0 <cmd_build+0x28>
	} else {
		length = strlen(*current);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fa04 	bl	80001f4 <strlen>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
	}

	if ((((uint8_t) input == 0x7F)) && (length > 0)) { //Backspace
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	2b7f      	cmp	r3, #127	; 0x7f
 8002df4:	d114      	bne.n	8002e20 <cmd_build+0x58>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d011      	beq.n	8002e20 <cmd_build+0x58>
		*current = realloc(*current, length);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00e fb5b 	bl	80114c0 <realloc>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
		(*current)[length - 1] = '\0';
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e018      	b.n	8002e52 <cmd_build+0x8a>
	} else {
		*current = realloc(*current, length + 2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	3302      	adds	r3, #2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f00e fb48 	bl	80114c0 <realloc>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
		(*current)[length] = input;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	701a      	strb	r2, [r3, #0]
		(*current)[length + 1] = '\0';
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
	}

}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <cmd_split>:
 * Split a command into tokens
 * @param cmd - Command to split
 * @param split - Character to split on
 * @return pointer to tokens
 * */
char** cmd_split(char* cmd, char split) {
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
	uint32_t token_count = get_token_count(cmd, split);
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f837 	bl	8002ede <get_token_count>
 8002e70:	60f8      	str	r0, [r7, #12]
	uint32_t string_index = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]

	char** tokens = calloc(token_count, sizeof(char*));
 8002e76:	2104      	movs	r1, #4
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f00e f945 	bl	8011108 <calloc>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < token_count; i++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	e021      	b.n	8002ecc <cmd_split+0x72>
		while ((cmd[string_index] != split) && (string_index < strlen(cmd))) {
			cmd_build(&(tokens[i]), cmd[string_index]);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	18d0      	adds	r0, r2, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7ff ff95 	bl	8002dc8 <cmd_build>
			string_index++;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
		while ((cmd[string_index] != split) && (string_index < strlen(cmd))) {
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d006      	beq.n	8002ec0 <cmd_split+0x66>
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd f99e 	bl	80001f4 <strlen>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d3e3      	bcc.n	8002e88 <cmd_split+0x2e>
		}
		string_index++;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < token_count; i++) {
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8e7      	bhi.n	8002ea4 <cmd_split+0x4a>
	}

	return tokens;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <get_token_count>:
 * Get number of tokens in given command
 * @param cmd - Command
 * @param split - Character to split on
 * @return number of tokens within command
 * */
uint32_t get_token_count(char* cmd, char split) {
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	70fb      	strb	r3, [r7, #3]
	uint32_t count = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
	char* cmd_stripped = cmd_strip(cmd);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f821 	bl	8002f36 <cmd_strip>
 8002ef4:	60f8      	str	r0, [r7, #12]


	for(int i = 0; i <= strlen(cmd); i++) {
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e00c      	b.n	8002f16 <get_token_count+0x38>
		if (cmd_stripped[i] == split) {
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d102      	bne.n	8002f10 <get_token_count+0x32>
			count++;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i <= strlen(cmd); i++) {
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3301      	adds	r3, #1
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd f96c 	bl	80001f4 <strlen>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d2eb      	bcs.n	8002efc <get_token_count+0x1e>
		}
	}
	free(cmd_stripped);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f00e f929 	bl	801117c <free>
	return count + 1;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <cmd_strip>:
/**
 * Strip command of leading and trailing whitespace
 * @param cmd - Command
 * @return stripped command
 * */
char* cmd_strip(char* cmd) {
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	uint32_t start_index = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
	uint32_t end_index = strlen(cmd);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd f956 	bl	80001f4 <strlen>
 8002f48:	6138      	str	r0, [r7, #16]

	while (cmd[start_index] == ' ') {
 8002f4a:	e002      	b.n	8002f52 <cmd_strip+0x1c>
		start_index++;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
	while (cmd[start_index] == ' ') {
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d0f6      	beq.n	8002f4c <cmd_strip+0x16>
	}

	while (cmd[end_index] == ' ') {
 8002f5e:	e002      	b.n	8002f66 <cmd_strip+0x30>
		end_index--;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
	while (cmd[end_index] == ' ') {
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d0f6      	beq.n	8002f60 <cmd_strip+0x2a>
	}

	char* result = malloc((end_index - start_index + 1) * sizeof(char));
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00e f8f6 	bl	801116c <malloc>
 8002f80:	4603      	mov	r3, r0
 8002f82:	60bb      	str	r3, [r7, #8]

	for (int i = start_index; i < end_index; i++) {
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e00a      	b.n	8002fa0 <cmd_strip+0x6a>
		result[i] = cmd[i];
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	440b      	add	r3, r1
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	701a      	strb	r2, [r3, #0]
	for (int i = start_index; i < end_index; i++) {
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f0      	bhi.n	8002f8a <cmd_strip+0x54>
	}

	result[end_index] = '\0';
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
	return result;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <free_tokens>:
/**
 * Free token array
 * @param tokens - Tokens
 * @param size - Number of tokens
 * */
void free_tokens(char** tokens, uint32_t size) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e00a      	b.n	8002fe2 <free_tokens+0x26>
		free(tokens[i]);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f00e f8d0 	bl	801117c <free>
	for (int i = 0; i < size; i++) {
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d8f0      	bhi.n	8002fcc <free_tokens+0x10>
	}
	free(tokens);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f00e f8c6 	bl	801117c <free>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <pg_show_help>:

/**
 * Show help options for pg command (Shown using pg --help)
 * */
void pg_show_help() {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	printf("\n\r-name - Specifies file name");
 8002ffc:	4806      	ldr	r0, [pc, #24]	; (8003018 <pg_show_help+0x20>)
 8002ffe:	f00e f9d1 	bl	80113a4 <iprintf>
	printf("\n\r-type - Specifies card IC type");
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <pg_show_help+0x24>)
 8003004:	f00e f9ce 	bl	80113a4 <iprintf>
	printf("\n\r-mem - Specifies contents of card (comma separated, hexadecimal)");
 8003008:	4805      	ldr	r0, [pc, #20]	; (8003020 <pg_show_help+0x28>)
 800300a:	f00e f9cb 	bl	80113a4 <iprintf>
	printf("\n\r-uid - Specifies card UID (comma separated, hexadecimal)");
 800300e:	4805      	ldr	r0, [pc, #20]	; (8003024 <pg_show_help+0x2c>)
 8003010:	f00e f9c8 	bl	80113a4 <iprintf>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08012bdc 	.word	0x08012bdc
 800301c:	08012bfc 	.word	0x08012bfc
 8003020:	08012c20 	.word	0x08012c20
 8003024:	08012c64 	.word	0x08012c64

08003028 <mod_show_help>:

/**
 * Show help options for mod command (Shown using mod --help)
 * */
void mod_show_help() {
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	printf("\n\r-page - Specifies page number to modify (Decimal)");
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <mod_show_help+0x1c>)
 800302e:	f00e f9b9 	bl	80113a4 <iprintf>
	printf("\n\r-data - Speicifes data to place in page (Comma separated, hexadecimal)");
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <mod_show_help+0x20>)
 8003034:	f00e f9b6 	bl	80113a4 <iprintf>
	printf("\n\r-name - Specifies a new name for file (optional)");
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <mod_show_help+0x24>)
 800303a:	f00e f9b3 	bl	80113a4 <iprintf>
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	08012ca0 	.word	0x08012ca0
 8003048:	08012cd4 	.word	0x08012cd4
 800304c:	08012d20 	.word	0x08012d20

08003050 <pg_parse_str>:
 * Parse a comma separated string of hex values to byte array
 * @param dest - Destination array
 * @param data_str - String input of data
 * @return CMD_OK if data was successfully parsed
 * */
CMD_StatusTypeDef pg_parse_str(uint8_t** dest, char* data_str) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	char** nums = cmd_split(data_str, ',');
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	f7ff fefc 	bl	8002e5a <cmd_split>
 8003062:	6138      	str	r0, [r7, #16]
	uint32_t count = get_token_count(data_str, ',');
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	f7ff ff39 	bl	8002ede <get_token_count>
 800306c:	60f8      	str	r0, [r7, #12]
	*dest = malloc(count * sizeof(uint8_t));
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f00e f87c 	bl	801116c <malloc>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < count; i++) {
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e013      	b.n	80030aa <pg_parse_str+0x5a>
		(*dest)[i] = strtol(nums[i], NULL, 16);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f00e fbb9 	bl	8011808 <strtol>
 8003096:	4601      	mov	r1, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4413      	add	r3, r2
 80030a0:	b2ca      	uxtb	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count; i++) {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d8e7      	bhi.n	8003082 <pg_parse_str+0x32>
	}

	return CMD_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80030c0:	2108      	movs	r1, #8
 80030c2:	4806      	ldr	r0, [pc, #24]	; (80030dc <BUZZ+0x20>)
 80030c4:	f006 f882 	bl	80091cc <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80030c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030cc:	f002 f8fa 	bl	80052c4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80030d0:	2108      	movs	r1, #8
 80030d2:	4802      	ldr	r0, [pc, #8]	; (80030dc <BUZZ+0x20>)
 80030d4:	f006 f92a 	bl	800932c <HAL_TIM_PWM_Stop>
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000860 	.word	0x20000860

080030e0 <write_card>:

void write_card(Card* towrite) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 80030e8:	f7fe fa96 	bl	8001618 <OLED_Clear>
	MFRC_ANTON();
 80030ec:	f7fd fe08 	bl	8000d00 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 80030f0:	2200      	movs	r2, #0
 80030f2:	4926      	ldr	r1, [pc, #152]	; (800318c <write_card+0xac>)
 80030f4:	2002      	movs	r0, #2
 80030f6:	f7fe fc6a 	bl	80019ce <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f918 	bl	8001330 <UL_writecard>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d118      	bne.n	8003138 <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 8003106:	2200      	movs	r2, #0
 8003108:	4921      	ldr	r1, [pc, #132]	; (8003190 <write_card+0xb0>)
 800310a:	2004      	movs	r0, #4
 800310c:	f7fe fc5f 	bl	80019ce <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 8003110:	2200      	movs	r2, #0
 8003112:	4920      	ldr	r1, [pc, #128]	; (8003194 <write_card+0xb4>)
 8003114:	2006      	movs	r0, #6
 8003116:	f7fe fc5a 	bl	80019ce <OLED_PrintCent>
		MFRC_ANTOFF();
 800311a:	f7fd fe2b 	bl	8000d74 <MFRC_ANTOFF>
		osDelay(2000);
 800311e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003122:	f00a fca6 	bl	800da72 <osDelay>
		vTaskResume(HomeHandle);
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <write_card+0xb8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f00b fdbc 	bl	800eca8 <vTaskResume>
		vTaskSuspend(NULL);
 8003130:	2000      	movs	r0, #0
 8003132:	f00b fd11 	bl	800eb58 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 8003136:	e025      	b.n	8003184 <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 8003138:	f7fd fef8 	bl	8000f2c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 800313c:	2200      	movs	r2, #0
 800313e:	4917      	ldr	r1, [pc, #92]	; (800319c <write_card+0xbc>)
 8003140:	2004      	movs	r0, #4
 8003142:	f7fe fc44 	bl	80019ce <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe f97c 	bl	8001444 <UL_verify>
 800314c:	4603      	mov	r3, r0
 800314e:	2bcc      	cmp	r3, #204	; 0xcc
 8003150:	d105      	bne.n	800315e <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 8003152:	2200      	movs	r2, #0
 8003154:	4912      	ldr	r1, [pc, #72]	; (80031a0 <write_card+0xc0>)
 8003156:	2006      	movs	r0, #6
 8003158:	f7fe fc39 	bl	80019ce <OLED_PrintCent>
 800315c:	e004      	b.n	8003168 <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 800315e:	2200      	movs	r2, #0
 8003160:	4910      	ldr	r1, [pc, #64]	; (80031a4 <write_card+0xc4>)
 8003162:	2006      	movs	r0, #6
 8003164:	f7fe fc33 	bl	80019ce <OLED_PrintCent>
		MFRC_ANTOFF();
 8003168:	f7fd fe04 	bl	8000d74 <MFRC_ANTOFF>
		osDelay(1000);
 800316c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003170:	f00a fc7f 	bl	800da72 <osDelay>
		vTaskResume(HomeHandle);
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <write_card+0xb8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f00b fd95 	bl	800eca8 <vTaskResume>
		vTaskSuspend(NULL);
 800317e:	2000      	movs	r0, #0
 8003180:	f00b fcea 	bl	800eb58 <vTaskSuspend>
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	08012fc8 	.word	0x08012fc8
 8003190:	08012fd4 	.word	0x08012fd4
 8003194:	08012fec 	.word	0x08012fec
 8003198:	200008fc 	.word	0x200008fc
 800319c:	08012ff4 	.word	0x08012ff4
 80031a0:	08013004 	.word	0x08013004
 80031a4:	08013018 	.word	0x08013018

080031a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ac:	f002 f848 	bl	8005240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031b0:	f000 f8f6 	bl	80033a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b4:	f000 fabe 	bl	8003734 <MX_GPIO_Init>
  MX_I2C1_Init();
 80031b8:	f000 f95c 	bl	8003474 <MX_I2C1_Init>
  MX_SPI1_Init();
 80031bc:	f000 f988 	bl	80034d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80031c0:	f000 f9be 	bl	8003540 <MX_SPI2_Init>
  MX_TIM2_Init();
 80031c4:	f000 f9f2 	bl	80035ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80031c8:	f000 fa66 	bl	8003698 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031cc:	f00a fb74 	bl	800d8b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 80031d0:	4a45      	ldr	r2, [pc, #276]	; (80032e8 <main+0x140>)
 80031d2:	2104      	movs	r1, #4
 80031d4:	2001      	movs	r0, #1
 80031d6:	f00a fc67 	bl	800daa8 <osMessageQueueNew>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a43      	ldr	r2, [pc, #268]	; (80032ec <main+0x144>)
 80031de:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 80031e0:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <main+0x148>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2001      	movs	r0, #1
 80031e6:	f00a fc5f 	bl	800daa8 <osMessageQueueNew>
 80031ea:	4603      	mov	r3, r0
 80031ec:	4a41      	ldr	r2, [pc, #260]	; (80032f4 <main+0x14c>)
 80031ee:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 80031f0:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <main+0x150>)
 80031f2:	2102      	movs	r1, #2
 80031f4:	2001      	movs	r0, #1
 80031f6:	f00a fc57 	bl	800daa8 <osMessageQueueNew>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <main+0x154>)
 80031fe:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 8003200:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <main+0x158>)
 8003202:	2104      	movs	r1, #4
 8003204:	2001      	movs	r0, #1
 8003206:	f00a fc4f 	bl	800daa8 <osMessageQueueNew>
 800320a:	4603      	mov	r3, r0
 800320c:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <main+0x15c>)
 800320e:	6013      	str	r3, [r2, #0]

  /* creation of USBInput */
  USBInputHandle = osMessageQueueNew (1, sizeof(char), &USBInput_attributes);
 8003210:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <main+0x160>)
 8003212:	2101      	movs	r1, #1
 8003214:	2001      	movs	r0, #1
 8003216:	f00a fc47 	bl	800daa8 <osMessageQueueNew>
 800321a:	4603      	mov	r3, r0
 800321c:	4a3b      	ldr	r2, [pc, #236]	; (800330c <main+0x164>)
 800321e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <main+0x168>)
 8003222:	2100      	movs	r1, #0
 8003224:	483b      	ldr	r0, [pc, #236]	; (8003314 <main+0x16c>)
 8003226:	f00a fb91 	bl	800d94c <osThreadNew>
 800322a:	4603      	mov	r3, r0
 800322c:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <main+0x170>)
 800322e:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <main+0x174>)
 8003232:	2100      	movs	r1, #0
 8003234:	483a      	ldr	r0, [pc, #232]	; (8003320 <main+0x178>)
 8003236:	f00a fb89 	bl	800d94c <osThreadNew>
 800323a:	4603      	mov	r3, r0
 800323c:	4a39      	ldr	r2, [pc, #228]	; (8003324 <main+0x17c>)
 800323e:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8003240:	4a39      	ldr	r2, [pc, #228]	; (8003328 <main+0x180>)
 8003242:	2100      	movs	r1, #0
 8003244:	4839      	ldr	r0, [pc, #228]	; (800332c <main+0x184>)
 8003246:	f00a fb81 	bl	800d94c <osThreadNew>
 800324a:	4603      	mov	r3, r0
 800324c:	4a38      	ldr	r2, [pc, #224]	; (8003330 <main+0x188>)
 800324e:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8003250:	4a38      	ldr	r2, [pc, #224]	; (8003334 <main+0x18c>)
 8003252:	2100      	movs	r1, #0
 8003254:	4838      	ldr	r0, [pc, #224]	; (8003338 <main+0x190>)
 8003256:	f00a fb79 	bl	800d94c <osThreadNew>
 800325a:	4603      	mov	r3, r0
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <main+0x194>)
 800325e:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8003260:	4a37      	ldr	r2, [pc, #220]	; (8003340 <main+0x198>)
 8003262:	2100      	movs	r1, #0
 8003264:	4837      	ldr	r0, [pc, #220]	; (8003344 <main+0x19c>)
 8003266:	f00a fb71 	bl	800d94c <osThreadNew>
 800326a:	4603      	mov	r3, r0
 800326c:	4a36      	ldr	r2, [pc, #216]	; (8003348 <main+0x1a0>)
 800326e:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8003270:	4a36      	ldr	r2, [pc, #216]	; (800334c <main+0x1a4>)
 8003272:	2100      	movs	r1, #0
 8003274:	4836      	ldr	r0, [pc, #216]	; (8003350 <main+0x1a8>)
 8003276:	f00a fb69 	bl	800d94c <osThreadNew>
 800327a:	4603      	mov	r3, r0
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <main+0x1ac>)
 800327e:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <main+0x1b0>)
 8003282:	2100      	movs	r1, #0
 8003284:	4835      	ldr	r0, [pc, #212]	; (800335c <main+0x1b4>)
 8003286:	f00a fb61 	bl	800d94c <osThreadNew>
 800328a:	4603      	mov	r3, r0
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <main+0x1b8>)
 800328e:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 8003290:	4a34      	ldr	r2, [pc, #208]	; (8003364 <main+0x1bc>)
 8003292:	2100      	movs	r1, #0
 8003294:	4834      	ldr	r0, [pc, #208]	; (8003368 <main+0x1c0>)
 8003296:	f00a fb59 	bl	800d94c <osThreadNew>
 800329a:	4603      	mov	r3, r0
 800329c:	4a33      	ldr	r2, [pc, #204]	; (800336c <main+0x1c4>)
 800329e:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 80032a0:	4a33      	ldr	r2, [pc, #204]	; (8003370 <main+0x1c8>)
 80032a2:	2100      	movs	r1, #0
 80032a4:	4833      	ldr	r0, [pc, #204]	; (8003374 <main+0x1cc>)
 80032a6:	f00a fb51 	bl	800d94c <osThreadNew>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a32      	ldr	r2, [pc, #200]	; (8003378 <main+0x1d0>)
 80032ae:	6013      	str	r3, [r2, #0]

  /* creation of DisplaySettings */
  DisplaySettingsHandle = osThreadNew(StartDisplaySettings, NULL, &DisplaySettings_attributes);
 80032b0:	4a32      	ldr	r2, [pc, #200]	; (800337c <main+0x1d4>)
 80032b2:	2100      	movs	r1, #0
 80032b4:	4832      	ldr	r0, [pc, #200]	; (8003380 <main+0x1d8>)
 80032b6:	f00a fb49 	bl	800d94c <osThreadNew>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <main+0x1dc>)
 80032be:	6013      	str	r3, [r2, #0]

  /* creation of Stats */
  StatsHandle = osThreadNew(StartStats, NULL, &Stats_attributes);
 80032c0:	4a31      	ldr	r2, [pc, #196]	; (8003388 <main+0x1e0>)
 80032c2:	2100      	movs	r1, #0
 80032c4:	4831      	ldr	r0, [pc, #196]	; (800338c <main+0x1e4>)
 80032c6:	f00a fb41 	bl	800d94c <osThreadNew>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a30      	ldr	r2, [pc, #192]	; (8003390 <main+0x1e8>)
 80032ce:	6013      	str	r3, [r2, #0]

  /* creation of USBListen */
  USBListenHandle = osThreadNew(StartUSBListen, NULL, &USBListen_attributes);
 80032d0:	4a30      	ldr	r2, [pc, #192]	; (8003394 <main+0x1ec>)
 80032d2:	2100      	movs	r1, #0
 80032d4:	4830      	ldr	r0, [pc, #192]	; (8003398 <main+0x1f0>)
 80032d6:	f00a fb39 	bl	800d94c <osThreadNew>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <main+0x1f4>)
 80032de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80032e0:	f00a fb0e 	bl	800d900 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <main+0x13c>
 80032e6:	bf00      	nop
 80032e8:	08013850 	.word	0x08013850
 80032ec:	20000920 	.word	0x20000920
 80032f0:	08013868 	.word	0x08013868
 80032f4:	20000924 	.word	0x20000924
 80032f8:	08013880 	.word	0x08013880
 80032fc:	20000928 	.word	0x20000928
 8003300:	08013898 	.word	0x08013898
 8003304:	2000092c 	.word	0x2000092c
 8003308:	080138b0 	.word	0x080138b0
 800330c:	20000930 	.word	0x20000930
 8003310:	080136a0 	.word	0x080136a0
 8003314:	08003855 	.word	0x08003855
 8003318:	200008f0 	.word	0x200008f0
 800331c:	080136c4 	.word	0x080136c4
 8003320:	08003965 	.word	0x08003965
 8003324:	200008f4 	.word	0x200008f4
 8003328:	080136e8 	.word	0x080136e8
 800332c:	080039f9 	.word	0x080039f9
 8003330:	200008f8 	.word	0x200008f8
 8003334:	0801370c 	.word	0x0801370c
 8003338:	08003a9d 	.word	0x08003a9d
 800333c:	200008fc 	.word	0x200008fc
 8003340:	08013730 	.word	0x08013730
 8003344:	08003b99 	.word	0x08003b99
 8003348:	20000900 	.word	0x20000900
 800334c:	08013754 	.word	0x08013754
 8003350:	08003cc1 	.word	0x08003cc1
 8003354:	20000904 	.word	0x20000904
 8003358:	08013778 	.word	0x08013778
 800335c:	08003e09 	.word	0x08003e09
 8003360:	20000908 	.word	0x20000908
 8003364:	0801379c 	.word	0x0801379c
 8003368:	08003ead 	.word	0x08003ead
 800336c:	2000090c 	.word	0x2000090c
 8003370:	080137c0 	.word	0x080137c0
 8003374:	08003f55 	.word	0x08003f55
 8003378:	20000910 	.word	0x20000910
 800337c:	080137e4 	.word	0x080137e4
 8003380:	08004015 	.word	0x08004015
 8003384:	20000914 	.word	0x20000914
 8003388:	08013808 	.word	0x08013808
 800338c:	080040dd 	.word	0x080040dd
 8003390:	20000918 	.word	0x20000918
 8003394:	0801382c 	.word	0x0801382c
 8003398:	08004151 	.word	0x08004151
 800339c:	2000091c 	.word	0x2000091c

080033a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b094      	sub	sp, #80	; 0x50
 80033a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a6:	f107 0320 	add.w	r3, r7, #32
 80033aa:	2230      	movs	r2, #48	; 0x30
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f00d fefa 	bl	80111a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <SystemClock_Config+0xcc>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a27      	ldr	r2, [pc, #156]	; (800346c <SystemClock_Config+0xcc>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <SystemClock_Config+0xcc>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <SystemClock_Config+0xd0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <SystemClock_Config+0xd0>)
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <SystemClock_Config+0xd0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003400:	2301      	movs	r3, #1
 8003402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800340a:	2302      	movs	r3, #2
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800340e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003414:	2308      	movs	r3, #8
 8003416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003418:	23a8      	movs	r3, #168	; 0xa8
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800341c:	2304      	movs	r3, #4
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003420:	2307      	movs	r3, #7
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003424:	f107 0320 	add.w	r3, r7, #32
 8003428:	4618      	mov	r0, r3
 800342a:	f004 fc5b 	bl	8007ce4 <HAL_RCC_OscConfig>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003434:	f000 feee 	bl	8004214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003438:	230f      	movs	r3, #15
 800343a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343c:	2302      	movs	r3, #2
 800343e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f004 febd 	bl	80081d4 <HAL_RCC_ClockConfig>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003460:	f000 fed8 	bl	8004214 <Error_Handler>
  }
}
 8003464:	bf00      	nop
 8003466:	3750      	adds	r7, #80	; 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000

08003474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_I2C1_Init+0x50>)
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <MX_I2C1_Init+0x54>)
 800347c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <MX_I2C1_Init+0x58>)
 8003482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <MX_I2C1_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <MX_I2C1_Init+0x50>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034b2:	f002 f9db 	bl	800586c <HAL_I2C_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034bc:	f000 feaa 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	2000075c 	.word	0x2000075c
 80034c8:	40005400 	.word	0x40005400
 80034cc:	000186a0 	.word	0x000186a0

080034d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <MX_SPI1_Init+0x68>)
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <MX_SPI1_Init+0x6c>)
 80034d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <MX_SPI1_Init+0x68>)
 80034dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_SPI1_Init+0x68>)
 80034e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <MX_SPI1_Init+0x68>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_SPI1_Init+0x68>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <MX_SPI1_Init+0x68>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_SPI1_Init+0x68>)
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <MX_SPI1_Init+0x68>)
 8003506:	2218      	movs	r2, #24
 8003508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <MX_SPI1_Init+0x68>)
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <MX_SPI1_Init+0x68>)
 8003512:	2200      	movs	r2, #0
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <MX_SPI1_Init+0x68>)
 8003518:	2200      	movs	r2, #0
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_SPI1_Init+0x68>)
 800351e:	220a      	movs	r2, #10
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003522:	4805      	ldr	r0, [pc, #20]	; (8003538 <MX_SPI1_Init+0x68>)
 8003524:	f005 f892 	bl	800864c <HAL_SPI_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800352e:	f000 fe71 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200007b0 	.word	0x200007b0
 800353c:	40013000 	.word	0x40013000

08003540 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003546:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <MX_SPI2_Init+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <MX_SPI2_Init+0x64>)
 800354c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003550:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <MX_SPI2_Init+0x64>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003566:	2200      	movs	r2, #0
 8003568:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <MX_SPI2_Init+0x64>)
 800356c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003570:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003574:	2200      	movs	r2, #0
 8003576:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <MX_SPI2_Init+0x64>)
 800357a:	2200      	movs	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003580:	2200      	movs	r2, #0
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <MX_SPI2_Init+0x64>)
 800358c:	220a      	movs	r2, #10
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003590:	4804      	ldr	r0, [pc, #16]	; (80035a4 <MX_SPI2_Init+0x64>)
 8003592:	f005 f85b 	bl	800864c <HAL_SPI_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800359c:	f000 fe3a 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000808 	.word	0x20000808
 80035a8:	40003800 	.word	0x40003800

080035ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c0:	f107 0320 	add.w	r3, r7, #32
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
 80035d8:	615a      	str	r2, [r3, #20]
 80035da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <MX_TIM2_Init+0xe8>)
 80035de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <MX_TIM2_Init+0xe8>)
 80035e6:	f240 12a3 	movw	r2, #419	; 0x1a3
 80035ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ec:	4b29      	ldr	r3, [pc, #164]	; (8003694 <MX_TIM2_Init+0xe8>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <MX_TIM2_Init+0xe8>)
 80035f4:	2231      	movs	r2, #49	; 0x31
 80035f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <MX_TIM2_Init+0xe8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003604:	4823      	ldr	r0, [pc, #140]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003606:	f005 fc53 	bl	8008eb0 <HAL_TIM_Base_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003610:	f000 fe00 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800361a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361e:	4619      	mov	r1, r3
 8003620:	481c      	ldr	r0, [pc, #112]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003622:	f006 f8b1 	bl	8009788 <HAL_TIM_ConfigClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800362c:	f000 fdf2 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003630:	4818      	ldr	r0, [pc, #96]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003632:	f005 fd71 	bl	8009118 <HAL_TIM_PWM_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800363c:	f000 fdea 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	4619      	mov	r1, r3
 800364e:	4811      	ldr	r0, [pc, #68]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003650:	f006 fc56 	bl	8009f00 <HAL_TIMEx_MasterConfigSynchronization>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800365a:	f000 fddb 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800365e:	2360      	movs	r3, #96	; 0x60
 8003660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8003662:	2318      	movs	r3, #24
 8003664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2208      	movs	r2, #8
 8003672:	4619      	mov	r1, r3
 8003674:	4807      	ldr	r0, [pc, #28]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003676:	f005 ffc5 	bl	8009604 <HAL_TIM_PWM_ConfigChannel>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003680:	f000 fdc8 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003684:	4803      	ldr	r0, [pc, #12]	; (8003694 <MX_TIM2_Init+0xe8>)
 8003686:	f001 fbe9 	bl	8004e5c <HAL_TIM_MspPostInit>

}
 800368a:	bf00      	nop
 800368c:	3738      	adds	r7, #56	; 0x38
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000860 	.word	0x20000860

08003698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ac:	463b      	mov	r3, r7
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <MX_TIM3_Init+0x94>)
 80036b6:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <MX_TIM3_Init+0x98>)
 80036b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <MX_TIM3_Init+0x94>)
 80036bc:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80036c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <MX_TIM3_Init+0x94>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <MX_TIM3_Init+0x94>)
 80036ca:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80036ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <MX_TIM3_Init+0x94>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <MX_TIM3_Init+0x94>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036dc:	4813      	ldr	r0, [pc, #76]	; (800372c <MX_TIM3_Init+0x94>)
 80036de:	f005 fbe7 	bl	8008eb0 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036e8:	f000 fd94 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM3_Init+0x94>)
 80036fa:	f006 f845 	bl	8009788 <HAL_TIM_ConfigClockSource>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003704:	f000 fd86 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003710:	463b      	mov	r3, r7
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_TIM3_Init+0x94>)
 8003716:	f006 fbf3 	bl	8009f00 <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003720:	f000 fd78 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200008a8 	.word	0x200008a8
 8003730:	40000400 	.word	0x40000400

08003734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <MX_GPIO_Init+0xec>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a33      	ldr	r2, [pc, #204]	; (8003820 <MX_GPIO_Init+0xec>)
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <MX_GPIO_Init+0xec>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <MX_GPIO_Init+0xec>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <MX_GPIO_Init+0xec>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <MX_GPIO_Init+0xec>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <MX_GPIO_Init+0xec>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <MX_GPIO_Init+0xec>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <MX_GPIO_Init+0xec>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 718c 	mov.w	r1, #280	; 0x118
 80037a4:	481f      	ldr	r0, [pc, #124]	; (8003824 <MX_GPIO_Init+0xf0>)
 80037a6:	f002 f82f 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 80037aa:	2200      	movs	r2, #0
 80037ac:	2122      	movs	r1, #34	; 0x22
 80037ae:	481e      	ldr	r0, [pc, #120]	; (8003828 <MX_GPIO_Init+0xf4>)
 80037b0:	f002 f82a 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80037b4:	2302      	movs	r3, #2
 80037b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80037b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80037bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	4619      	mov	r1, r3
 80037c8:	4816      	ldr	r0, [pc, #88]	; (8003824 <MX_GPIO_Init+0xf0>)
 80037ca:	f001 fe81 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 80037ce:	f44f 738c 	mov.w	r3, #280	; 0x118
 80037d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d4:	2301      	movs	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4619      	mov	r1, r3
 80037e6:	480f      	ldr	r0, [pc, #60]	; (8003824 <MX_GPIO_Init+0xf0>)
 80037e8:	f001 fe72 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 80037ec:	2322      	movs	r3, #34	; 0x22
 80037ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f0:	2301      	movs	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	4619      	mov	r1, r3
 8003802:	4809      	ldr	r0, [pc, #36]	; (8003828 <MX_GPIO_Init+0xf4>)
 8003804:	f001 fe64 	bl	80054d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003808:	2200      	movs	r2, #0
 800380a:	2105      	movs	r1, #5
 800380c:	2007      	movs	r0, #7
 800380e:	f001 fe35 	bl	800547c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003812:	2007      	movs	r0, #7
 8003814:	f001 fe4e 	bl	80054b4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400

0800382c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
	HAL_Delay(1); //Need delay here
 8003838:	2001      	movs	r0, #1
 800383a:	f001 fd43 	bl	80052c4 <HAL_Delay>
    CDC_Transmit_FS((uint8_t*) ptr, len);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	b29b      	uxth	r3, r3
 8003842:	4619      	mov	r1, r3
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f00d f809 	bl	801085c <CDC_Transmit_FS>
    return len;
 800384a:	687b      	ldr	r3, [r7, #4]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800385c:	f00c ff2e 	bl	80106bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <Start_Init+0xd8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f00b f977 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <Start_Init+0xdc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f00b f972 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <Start_Init+0xe0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f00b f96d 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <Start_Init+0xe4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f00b f968 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <Start_Init+0xe8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f00b f963 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <Start_Init+0xec>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f00b f95e 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <Start_Init+0xf0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f00b f959 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 80038a6:	4b28      	ldr	r3, [pc, #160]	; (8003948 <Start_Init+0xf4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f00b f954 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(DisplaySettingsHandle);
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <Start_Init+0xf8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00b f94f 	bl	800eb58 <vTaskSuspend>
    vTaskSuspend(StatsHandle);
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <Start_Init+0xfc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f00b f94a 	bl	800eb58 <vTaskSuspend>

    setbuf(stdout, NULL);
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <Start_Init+0x100>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f00d fe0f 	bl	80114f0 <setbuf>

    MFRC_INIT();
 80038d2:	f7fd fa97 	bl	8000e04 <MFRC_INIT>
    MFRC_ANTOFF();
 80038d6:	f7fd fa4d 	bl	8000d74 <MFRC_ANTOFF>
    OLED_INIT();
 80038da:	f7fd ff5b 	bl	8001794 <OLED_INIT>
    OLED_Print(TC);
 80038de:	481e      	ldr	r0, [pc, #120]	; (8003958 <Start_Init+0x104>)
 80038e0:	f7fe f899 	bl	8001a16 <OLED_Print>
    MEM_INIT();
 80038e4:	f7fe fdc8 	bl	8002478 <MEM_INIT>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0) {
 80038e8:	e002      	b.n	80038f0 <Start_Init+0x9c>
    	osDelay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f00a f8c1 	bl	800da72 <osDelay>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0) {
 80038f0:	2102      	movs	r1, #2
 80038f2:	481a      	ldr	r0, [pc, #104]	; (800395c <Start_Init+0x108>)
 80038f4:	f001 ff70 	bl	80057d8 <HAL_GPIO_ReadPin>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f5      	bne.n	80038ea <Start_Init+0x96>
    }
    osDelay(10);
 80038fe:	200a      	movs	r0, #10
 8003900:	f00a f8b7 	bl	800da72 <osDelay>
    uint8_t clear = NO_PRESS;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
    xQueueSend(UserInputHandle, &clear, 0);
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <Start_Init+0x10c>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	f107 010f 	add.w	r1, r7, #15
 8003910:	2300      	movs	r3, #0
 8003912:	2200      	movs	r2, #0
 8003914:	f00a fb62 	bl	800dfdc <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <Start_Init+0xe0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f00b f9c3 	bl	800eca8 <vTaskResume>
    vTaskSuspend(NULL);
 8003922:	2000      	movs	r0, #0
 8003924:	f00b f918 	bl	800eb58 <vTaskSuspend>
  {
 8003928:	e79a      	b.n	8003860 <Start_Init+0xc>
 800392a:	bf00      	nop
 800392c:	200008f4 	.word	0x200008f4
 8003930:	200008f8 	.word	0x200008f8
 8003934:	200008fc 	.word	0x200008fc
 8003938:	20000900 	.word	0x20000900
 800393c:	20000904 	.word	0x20000904
 8003940:	20000908 	.word	0x20000908
 8003944:	2000090c 	.word	0x2000090c
 8003948:	20000910 	.word	0x20000910
 800394c:	20000914 	.word	0x20000914
 8003950:	20000918 	.word	0x20000918
 8003954:	200006dc 	.word	0x200006dc
 8003958:	20000400 	.word	0x20000400
 800395c:	40020000 	.word	0x40020000
 8003960:	20000924 	.word	0x20000924

08003964 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 800396c:	201c      	movs	r0, #28
 800396e:	f00d fbfd 	bl	801116c <malloc>
 8003972:	4603      	mov	r3, r0
 8003974:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8003976:	68bc      	ldr	r4, [r7, #8]
 8003978:	2040      	movs	r0, #64	; 0x40
 800397a:	f00d fbf7 	bl	801116c <malloc>
 800397e:	4603      	mov	r3, r0
 8003980:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8003982:	68bc      	ldr	r4, [r7, #8]
 8003984:	2007      	movs	r0, #7
 8003986:	f00d fbf1 	bl	801116c <malloc>
 800398a:	4603      	mov	r3, r0
 800398c:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8003992:	f7fd f9b5 	bl	8000d00 <MFRC_ANTON>
	if (ranonce == 0){
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 800399c:	2100      	movs	r1, #0
 800399e:	4813      	ldr	r0, [pc, #76]	; (80039ec <StartReadCard+0x88>)
 80039a0:	f7fe f904 	bl	8001bac <OLED_SCREEN>
		ranonce++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fc8f 	bl	80012d0 <UL_readcard>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2bcc      	cmp	r3, #204	; 0xcc
 80039b6:	d1ec      	bne.n	8003992 <StartReadCard+0x2e>
			BUZZ();
 80039b8:	f7ff fb80 	bl	80030bc <BUZZ>
			MFRC_ANTOFF();
 80039bc:	f7fd f9da 	bl	8000d74 <MFRC_ANTOFF>
			inc_read_count();
 80039c0:	f001 f894 	bl	8004aec <inc_read_count>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <StartReadCard+0x8c>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	f107 0108 	add.w	r1, r7, #8
 80039cc:	2300      	movs	r3, #0
 80039ce:	2200      	movs	r2, #0
 80039d0:	f00a fb04 	bl	800dfdc <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <StartReadCard+0x90>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f00b f965 	bl	800eca8 <vTaskResume>
			ranonce = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f00b f8b8 	bl	800eb58 <vTaskSuspend>
	MFRC_ANTON();
 80039e8:	e7d3      	b.n	8003992 <StartReadCard+0x2e>
 80039ea:	bf00      	nop
 80039ec:	080139ec 	.word	0x080139ec
 80039f0:	20000920 	.word	0x20000920
 80039f4:	20000900 	.word	0x20000900

080039f8 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8003a12:	2100      	movs	r1, #0
 8003a14:	481f      	ldr	r0, [pc, #124]	; (8003a94 <StartWriteCard+0x9c>)
 8003a16:	f7fe f8c9 	bl	8001bac <OLED_SCREEN>
	  	ranonce++;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003a20:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <StartWriteCard+0xa0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f107 010f 	add.w	r1, r7, #15
 8003a28:	2200      	movs	r2, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f00a fc70 	bl	800e310 <xQueueReceive>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d1ea      	bne.n	8003a0c <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d11c      	bne.n	8003a76 <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 feb7 	bl	80047b4 <entry_present>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1df      	bne.n	8003a0c <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fc9c 	bl	800438e <read_card_entry>
 8003a56:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fec6 	bl	80047ee <get_file_name>
 8003a62:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	2102      	movs	r1, #2
 8003a68:	480a      	ldr	r0, [pc, #40]	; (8003a94 <StartWriteCard+0x9c>)
 8003a6a:	f7fe f8d8 	bl	8001c1e <OLED_SCRNREF>
				  free(file_name);
 8003a6e:	6938      	ldr	r0, [r7, #16]
 8003a70:	f00d fb84 	bl	801117c <free>
 8003a74:	e7ca      	b.n	8003a0c <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d1c7      	bne.n	8003a0c <StartWriteCard+0x14>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c4      	beq.n	8003a0c <StartWriteCard+0x14>
			  	ranonce= 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
			  	inc_write_count();
 8003a86:	f001 f805 	bl	8004a94 <inc_write_count>
			  	write_card(towrite);
 8003a8a:	69b8      	ldr	r0, [r7, #24]
 8003a8c:	f7ff fb28 	bl	80030e0 <write_card>
	  if (ranonce == 0){
 8003a90:	e7bc      	b.n	8003a0c <StartWriteCard+0x14>
 8003a92:	bf00      	nop
 8003a94:	08013a14 	.word	0x08013a14
 8003a98:	20000924 	.word	0x20000924

08003a9c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10c      	bne.n	8003acc <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4830      	ldr	r0, [pc, #192]	; (8003b78 <StartHome+0xdc>)
 8003ab6:	f7fe f879 	bl	8001bac <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	2201      	movs	r2, #1
 8003abe:	4619      	mov	r1, r3
 8003ac0:	482d      	ldr	r0, [pc, #180]	; (8003b78 <StartHome+0xdc>)
 8003ac2:	f7fe f8dd 	bl	8001c80 <OLED_SELECT>
		  ranonce++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <StartHome+0xe0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f107 010a 	add.w	r1, r7, #10
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f00a fc1a 	bl	800e310 <xQueueReceive>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d1e4      	bne.n	8003aac <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 8003ae2:	7abb      	ldrb	r3, [r7, #10]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d107      	bne.n	8003af8 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8003ae8:	f107 030b 	add.w	r3, r7, #11
 8003aec:	2201      	movs	r2, #1
 8003aee:	4619      	mov	r1, r3
 8003af0:	4821      	ldr	r0, [pc, #132]	; (8003b78 <StartHome+0xdc>)
 8003af2:	f7fe fab1 	bl	8002058 <oled_move_selection>
 8003af6:	e7d9      	b.n	8003aac <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8003af8:	7abb      	ldrb	r3, [r7, #10]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d1d6      	bne.n	8003aac <StartHome+0x10>
			  switch(select_index) {
 8003afe:	7afb      	ldrb	r3, [r7, #11]
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d833      	bhi.n	8003b6c <StartHome+0xd0>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <StartHome+0x70>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b31 	.word	0x08003b31
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003b61 	.word	0x08003b61
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <StartHome+0xe4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f00b f8bd 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b2e:	e01d      	b.n	8003b6c <StartHome+0xd0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <StartHome+0xe8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f00b f8b7 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b3a:	e017      	b.n	8003b6c <StartHome+0xd0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <StartHome+0xec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00b f8b1 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b46:	e011      	b.n	8003b6c <StartHome+0xd0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <StartHome+0xf0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f00b f8ab 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b52:	e00b      	b.n	8003b6c <StartHome+0xd0>
			  	  case 4:
			  		  vTaskResume(DisplaySettingsHandle);
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <StartHome+0xf4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00b f8a5 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b5e:	e005      	b.n	8003b6c <StartHome+0xd0>
			  	  case 5:
			  		  vTaskResume(StatsHandle);
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <StartHome+0xf8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00b f89f 	bl	800eca8 <vTaskResume>
			  		  break;
 8003b6a:	bf00      	nop
			  }
			  ranonce = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8003b70:	2000      	movs	r0, #0
 8003b72:	f00a fff1 	bl	800eb58 <vTaskSuspend>
	  if (ranonce == 0) {
 8003b76:	e799      	b.n	8003aac <StartHome+0x10>
 8003b78:	080139d8 	.word	0x080139d8
 8003b7c:	20000924 	.word	0x20000924
 8003b80:	200008f4 	.word	0x200008f4
 8003b84:	200008f8 	.word	0x200008f8
 8003b88:	20000904 	.word	0x20000904
 8003b8c:	2000090c 	.word	0x2000090c
 8003b90:	20000914 	.word	0x20000914
 8003b94:	20000918 	.word	0x20000918

08003b98 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* read_card;
	char* card_name = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d130      	bne.n	8003c14 <CardFoundStart+0x7c>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8003bb2:	bf00      	nop
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <CardFoundStart+0x110>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f107 0110 	add.w	r1, r7, #16
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00a fba6 	bl	800e310 <xQueueReceive>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d1f4      	bne.n	8003bb4 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7fd fbeb 	bl	80013b0 <uid_tostring>
 8003bda:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4833      	ldr	r0, [pc, #204]	; (8003cac <CardFoundStart+0x114>)
 8003be0:	f7fd ffe4 	bl	8001bac <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	2101      	movs	r1, #1
 8003be8:	4830      	ldr	r0, [pc, #192]	; (8003cac <CardFoundStart+0x114>)
 8003bea:	f7fe f818 	bl	8001c1e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	482d      	ldr	r0, [pc, #180]	; (8003cac <CardFoundStart+0x114>)
 8003bf8:	f7fe f811 	bl	8001c1e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4619      	mov	r1, r3
 8003c02:	482a      	ldr	r0, [pc, #168]	; (8003cac <CardFoundStart+0x114>)
 8003c04:	f7fe f83c 	bl	8001c80 <OLED_SELECT>
		ranonce++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f00d fab4 	bl	801117c <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <CardFoundStart+0x118>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f107 0116 	add.w	r1, r7, #22
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00a fb76 	bl	800e310 <xQueueReceive>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d1c0      	bne.n	8003bac <CardFoundStart+0x14>
 		if (button_state == SHORT_PRESS) {
 8003c2a:	7dbb      	ldrb	r3, [r7, #22]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <CardFoundStart+0xa8>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8003c30:	f107 0317 	add.w	r3, r7, #23
 8003c34:	2200      	movs	r2, #0
 8003c36:	4619      	mov	r1, r3
 8003c38:	481c      	ldr	r0, [pc, #112]	; (8003cac <CardFoundStart+0x114>)
 8003c3a:	f7fe fa0d 	bl	8002058 <oled_move_selection>
 8003c3e:	e7b5      	b.n	8003bac <CardFoundStart+0x14>
 		} else if (button_state == LONG_PRESS) {
 8003c40:	7dbb      	ldrb	r3, [r7, #22]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d1b2      	bne.n	8003bac <CardFoundStart+0x14>
 			if (select_index == 0) {
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d121      	bne.n	8003c90 <CardFoundStart+0xf8>

 				vTaskResume(KeyboardHandle);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <CardFoundStart+0x11c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f00b f829 	bl	800eca8 <vTaskResume>

 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 8003c56:	e002      	b.n	8003c5e <CardFoundStart+0xc6>
 					osDelay(1); //wait until keyboard is finished
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f009 ff0a 	bl	800da72 <osDelay>
 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <CardFoundStart+0x120>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f107 010c 	add.w	r1, r7, #12
 8003c66:	2200      	movs	r2, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00a fb51 	bl	800e310 <xQueueReceive>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d1f1      	bne.n	8003c58 <CardFoundStart+0xc0>
 				}
 				enter_card(read_card, mem_find_free_block(), card_name);
 8003c74:	693c      	ldr	r4, [r7, #16]
 8003c76:	f7fe fd83 	bl	8002780 <mem_find_free_block>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4619      	mov	r1, r3
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 facb 	bl	800421e <enter_card>
 				free(card_name);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f00d fa76 	bl	801117c <free>
 			}
 			vTaskResume(HomeHandle);
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <CardFoundStart+0x124>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00b f807 	bl	800eca8 <vTaskResume>
 			ranonce = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 			vTaskSuspend(NULL);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f00a ff5a 	bl	800eb58 <vTaskSuspend>
	if (ranonce == 0) {
 8003ca4:	e782      	b.n	8003bac <CardFoundStart+0x14>
 8003ca6:	bf00      	nop
 8003ca8:	20000920 	.word	0x20000920
 8003cac:	08013a00 	.word	0x08013a00
 8003cb0:	20000924 	.word	0x20000924
 8003cb4:	20000910 	.word	0x20000910
 8003cb8:	2000092c 	.word	0x2000092c
 8003cbc:	200008fc 	.word	0x200008fc

08003cc0 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	747b      	strb	r3, [r7, #17]
	int ranonce = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	uint16_t current_page = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	827b      	strh	r3, [r7, #18]
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d112      	bne.n	8003d00 <StartShowFiles+0x40>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4845      	ldr	r0, [pc, #276]	; (8003df4 <StartShowFiles+0x134>)
 8003cde:	f7fd ff65 	bl	8001bac <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8003ce2:	7c7b      	ldrb	r3, [r7, #17]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4842      	ldr	r0, [pc, #264]	; (8003df4 <StartShowFiles+0x134>)
 8003cea:	f7fd ffc9 	bl	8001c80 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, current_page);
 8003cee:	8a7b      	ldrh	r3, [r7, #18]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	483f      	ldr	r0, [pc, #252]	; (8003df4 <StartShowFiles+0x134>)
 8003cf6:	f7fe f8ad 	bl	8001e54 <OLED_display_files>
		  ranonce++;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003d00:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <StartShowFiles+0x138>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f107 0110 	add.w	r1, r7, #16
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f00a fb00 	bl	800e310 <xQueueReceive>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d1de      	bne.n	8003cd4 <StartShowFiles+0x14>
		  if (button_state == SHORT_PRESS) {
 8003d16:	7c3b      	ldrb	r3, [r7, #16]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d107      	bne.n	8003d2c <StartShowFiles+0x6c>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 8003d1c:	f107 0311 	add.w	r3, r7, #17
 8003d20:	2201      	movs	r2, #1
 8003d22:	4619      	mov	r1, r3
 8003d24:	4833      	ldr	r0, [pc, #204]	; (8003df4 <StartShowFiles+0x134>)
 8003d26:	f7fe f997 	bl	8002058 <oled_move_selection>
 8003d2a:	e7d3      	b.n	8003cd4 <StartShowFiles+0x14>

		  } else if (button_state == LONG_PRESS) {
 8003d2c:	7c3b      	ldrb	r3, [r7, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d1d0      	bne.n	8003cd4 <StartShowFiles+0x14>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8003d32:	7c7b      	ldrb	r3, [r7, #17]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d10c      	bne.n	8003d52 <StartShowFiles+0x92>
				  vTaskResume(HomeHandle);
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <StartShowFiles+0x13c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f00a ffb3 	bl	800eca8 <vTaskResume>
				  ranonce = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
				  current_page = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	827b      	strh	r3, [r7, #18]
				  vTaskSuspend(NULL);
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f00a ff04 	bl	800eb58 <vTaskSuspend>
 8003d50:	e7c0      	b.n	8003cd4 <StartShowFiles+0x14>

			  } else if ((select_index == SHOWFILES_NEXT_LOC) && (get_number_files_section(FILES_PERSCREEN * (current_page + 1), FILES_PERSCREEN) != 0)) {
 8003d52:	7c7b      	ldrb	r3, [r7, #17]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d121      	bne.n	8003d9c <StartShowFiles+0xdc>
 8003d58:	8a7b      	ldrh	r3, [r7, #18]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	0052      	lsls	r2, r2, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2103      	movs	r1, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fc88 	bl	800467e <get_number_files_section>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <StartShowFiles+0xdc>
				  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8003d74:	2100      	movs	r1, #0
 8003d76:	481f      	ldr	r0, [pc, #124]	; (8003df4 <StartShowFiles+0x134>)
 8003d78:	f7fd ff18 	bl	8001bac <OLED_SCREEN>
				  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8003d7c:	7c7b      	ldrb	r3, [r7, #17]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	4619      	mov	r1, r3
 8003d82:	481c      	ldr	r0, [pc, #112]	; (8003df4 <StartShowFiles+0x134>)
 8003d84:	f7fd ff7c 	bl	8001c80 <OLED_SELECT>
				  OLED_display_files(&SCRN_ShowFiles, ++current_page);
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	827b      	strh	r3, [r7, #18]
 8003d8e:	8a7b      	ldrh	r3, [r7, #18]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	4817      	ldr	r0, [pc, #92]	; (8003df4 <StartShowFiles+0x134>)
 8003d96:	f7fe f85d 	bl	8001e54 <OLED_display_files>
 8003d9a:	e02a      	b.n	8003df2 <StartShowFiles+0x132>
			  } else if ((entry_present(select_index + (FILES_PERSCREEN * current_page)) == RFS_OK)) {
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	8a7b      	ldrh	r3, [r7, #18]
 8003da2:	4619      	mov	r1, r3
 8003da4:	0049      	lsls	r1, r1, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd00 	bl	80047b4 <entry_present>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d18c      	bne.n	8003cd4 <StartShowFiles+0x14>
				  uint16_t entry = select_index + (FILES_PERSCREEN * current_page);
 8003dba:	7c7b      	ldrb	r3, [r7, #17]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	8a7b      	ldrh	r3, [r7, #18]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	0049      	lsls	r1, r1, #1
 8003dc4:	440b      	add	r3, r1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	81fb      	strh	r3, [r7, #14]
				  xQueueSend(FileEntryHandle, &entry, 0);
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <StartShowFiles+0x140>)
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	f107 010e 	add.w	r1, r7, #14
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f00a f8ff 	bl	800dfdc <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <StartShowFiles+0x144>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f00a ff60 	bl	800eca8 <vTaskResume>
				  ranonce = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
				  vTaskSuspend(NULL);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f00a feb3 	bl	800eb58 <vTaskSuspend>
	  if (ranonce == 0) {
 8003df2:	e76f      	b.n	8003cd4 <StartShowFiles+0x14>
 8003df4:	08013a28 	.word	0x08013a28
 8003df8:	20000924 	.word	0x20000924
 8003dfc:	200008fc 	.word	0x200008fc
 8003e00:	20000928 	.word	0x20000928
 8003e04:	20000908 	.word	0x20000908

08003e08 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d112      	bne.n	8003e44 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 8003e1e:	bf00      	nop
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <StartShowFileData+0x94>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f107 0108 	add.w	r1, r7, #8
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f00a fa70 	bl	800e310 <xQueueReceive>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d1f4      	bne.n	8003e20 <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8003e36:	893b      	ldrh	r3, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f8cd 	bl	8001fd8 <oled_show_file>
    	ranonce++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3301      	adds	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <StartShowFileData+0x98>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f107 010a 	add.w	r1, r7, #10
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00a fa5e 	bl	800e310 <xQueueReceive>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d1de      	bne.n	8003e18 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003e5a:	7abb      	ldrb	r3, [r7, #10]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d107      	bne.n	8003e70 <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 8003e60:	f107 030b 	add.w	r3, r7, #11
 8003e64:	2200      	movs	r2, #0
 8003e66:	4619      	mov	r1, r3
 8003e68:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <StartShowFileData+0x9c>)
 8003e6a:	f7fe f8f5 	bl	8002058 <oled_move_selection>
 8003e6e:	e7d3      	b.n	8003e18 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 8003e70:	7abb      	ldrb	r3, [r7, #10]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d1d0      	bne.n	8003e18 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 8003e76:	7afb      	ldrb	r3, [r7, #11]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8003e7c:	893b      	ldrh	r3, [r7, #8]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fd34 	bl	80048ec <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <StartShowFileData+0xa0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f00a ff0d 	bl	800eca8 <vTaskResume>
    		ranonce = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f00a fe60 	bl	800eb58 <vTaskSuspend>
    if (ranonce == 0) {
 8003e98:	e7be      	b.n	8003e18 <StartShowFileData+0x10>
 8003e9a:	bf00      	nop
 8003e9c:	20000928 	.word	0x20000928
 8003ea0:	20000924 	.word	0x20000924
 8003ea4:	08013a3c 	.word	0x08013a3c
 8003ea8:	20000904 	.word	0x20000904

08003eac <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003eb8:	201c      	movs	r0, #28
 8003eba:	f00d f957 	bl	801116c <malloc>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8003ec2:	2040      	movs	r0, #64	; 0x40
 8003ec4:	f00d f952 	bl	801116c <malloc>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8003ed0:	2007      	movs	r0, #7
 8003ed2:	f00d f94b 	bl	801116c <malloc>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 8003ede:	f7fc ff0f 	bl	8000d00 <MFRC_ANTON>
    if (ranonce == 0) {
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4817      	ldr	r0, [pc, #92]	; (8003f48 <StartClone+0x9c>)
 8003eec:	f7fd fe5e 	bl	8001bac <OLED_SCREEN>
    	ranonce++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7fd f9ea 	bl	80012d0 <UL_readcard>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2bcc      	cmp	r3, #204	; 0xcc
 8003f00:	d1ed      	bne.n	8003ede <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 8003f02:	f7fd f813 	bl	8000f2c <MFRC_HALTA>
    	BUZZ();
 8003f06:	f7ff f8d9 	bl	80030bc <BUZZ>
    	OLED_Clear();
 8003f0a:	f7fd fb85 	bl	8001618 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <StartClone+0xa0>)
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fd fd5b 	bl	80019ce <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	490d      	ldr	r1, [pc, #52]	; (8003f50 <StartClone+0xa4>)
 8003f1c:	2004      	movs	r0, #4
 8003f1e:	f7fd fd56 	bl	80019ce <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 8003f22:	bf00      	nop
 8003f24:	f7fd f910 	bl	8001148 <PICC_CHECK>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2bcc      	cmp	r3, #204	; 0xcc
 8003f2c:	d0fa      	beq.n	8003f24 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 8003f2e:	bf00      	nop
 8003f30:	f7fd f90a 	bl	8001148 <PICC_CHECK>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2bcc      	cmp	r3, #204	; 0xcc
 8003f38:	d1fa      	bne.n	8003f30 <StartClone+0x84>
    	ranonce = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 8003f3e:	68b8      	ldr	r0, [r7, #8]
 8003f40:	f7ff f8ce 	bl	80030e0 <write_card>
	MFRC_ANTON();
 8003f44:	e7cb      	b.n	8003ede <StartClone+0x32>
 8003f46:	bf00      	nop
 8003f48:	08013a50 	.word	0x08013a50
 8003f4c:	08013028 	.word	0x08013028
 8003f50:	0801303c 	.word	0x0801303c

08003f54 <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	74fb      	strb	r3, [r7, #19]
	int ranonce = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* input = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <StartKeyboard+0x36>
    	OLED_Clear();
 8003f6e:	f7fd fb53 	bl	8001618 <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 8003f72:	2100      	movs	r1, #0
 8003f74:	4824      	ldr	r0, [pc, #144]	; (8004008 <StartKeyboard+0xb4>)
 8003f76:	f7fd fe19 	bl	8001bac <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4822      	ldr	r0, [pc, #136]	; (8004008 <StartKeyboard+0xb4>)
 8003f80:	f7fd fefe 	bl	8001d80 <OLED_select_inv>
    	ranonce++;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3301      	adds	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <StartKeyboard+0xb8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f107 0112 	add.w	r1, r7, #18
 8003f92:	2200      	movs	r2, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f00a f9bb 	bl	800e310 <xQueueReceive>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d1e3      	bne.n	8003f68 <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 8003fa0:	7cbb      	ldrb	r3, [r7, #18]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d106      	bne.n	8003fb4 <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 8003fa6:	f107 0313 	add.w	r3, r7, #19
 8003faa:	4619      	mov	r1, r3
 8003fac:	4816      	ldr	r0, [pc, #88]	; (8004008 <StartKeyboard+0xb4>)
 8003fae:	f7fe f879 	bl	80020a4 <oled_move_selection_inv>
 8003fb2:	e7d9      	b.n	8003f68 <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 8003fb4:	7cbb      	ldrb	r3, [r7, #18]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d1d6      	bne.n	8003f68 <StartKeyboard+0x14>
    		if ((select_index <= 25) && (select_index >= 0)) {
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b19      	cmp	r3, #25
 8003fbe:	d807      	bhi.n	8003fd0 <StartKeyboard+0x7c>
    			oled_keyboard_insertChar(select_index, &input);
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	f107 020c 	add.w	r2, r7, #12
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe f88f 	bl	80020ec <oled_keyboard_insertChar>
 8003fce:	e7cb      	b.n	8003f68 <StartKeyboard+0x14>
    		} else if (select_index == 26) {
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b1a      	cmp	r3, #26
 8003fd4:	d105      	bne.n	8003fe2 <StartKeyboard+0x8e>
    			oled_keyboard_removeChar(&input);
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f8c4 	bl	8002168 <oled_keyboard_removeChar>
 8003fe0:	e7c2      	b.n	8003f68 <StartKeyboard+0x14>
    		} else if (select_index == 27) {
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b1b      	cmp	r3, #27
 8003fe6:	d1bf      	bne.n	8003f68 <StartKeyboard+0x14>
    			xQueueSend(KeyboardOutHandle, &input, 0); //Send the name user has inputted to queue for other tasks to use
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <StartKeyboard+0xbc>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	f107 010c 	add.w	r1, r7, #12
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f009 fff2 	bl	800dfdc <xQueueGenericSend>
    			ranonce = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
    			input = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL); //exit task
 8004000:	2000      	movs	r0, #0
 8004002:	f00a fda9 	bl	800eb58 <vTaskSuspend>
    if (ranonce == 0) {
 8004006:	e7af      	b.n	8003f68 <StartKeyboard+0x14>
 8004008:	08013a64 	.word	0x08013a64
 800400c:	20000924 	.word	0x20000924
 8004010:	2000092c 	.word	0x2000092c

08004014 <StartDisplaySettings>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplaySettings */
void StartDisplaySettings(void *argument)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplaySettings */
	uint8_t select_index = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	727b      	strb	r3, [r7, #9]
	int ranonce = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	uint16_t current_contrast = 0xFF; //max contrast by default
 8004024:	23ff      	movs	r3, #255	; 0xff
 8004026:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <StartDisplaySettings+0x32>
    	OLED_SCREEN(&SCRN_Display, NORMAL);
 800402e:	2100      	movs	r1, #0
 8004030:	4827      	ldr	r0, [pc, #156]	; (80040d0 <StartDisplaySettings+0xbc>)
 8004032:	f7fd fdbb 	bl	8001bac <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Display, select_index);
 8004036:	7a7b      	ldrb	r3, [r7, #9]
 8004038:	4619      	mov	r1, r3
 800403a:	4825      	ldr	r0, [pc, #148]	; (80040d0 <StartDisplaySettings+0xbc>)
 800403c:	f7fd fea0 	bl	8001d80 <OLED_select_inv>
    	ranonce++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <StartDisplaySettings+0xc0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f107 0108 	add.w	r1, r7, #8
 800404e:	2200      	movs	r2, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f00a f95d 	bl	800e310 <xQueueReceive>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d1e5      	bne.n	8004028 <StartDisplaySettings+0x14>
    	if (button_state == SHORT_PRESS) {
 800405c:	7a3b      	ldrb	r3, [r7, #8]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d106      	bne.n	8004070 <StartDisplaySettings+0x5c>
    		oled_move_selection_inv(&SCRN_Display, &select_index);
 8004062:	f107 0309 	add.w	r3, r7, #9
 8004066:	4619      	mov	r1, r3
 8004068:	4819      	ldr	r0, [pc, #100]	; (80040d0 <StartDisplaySettings+0xbc>)
 800406a:	f7fe f81b 	bl	80020a4 <oled_move_selection_inv>
 800406e:	e7db      	b.n	8004028 <StartDisplaySettings+0x14>
    	} else if (button_state == LONG_PRESS) {
 8004070:	7a3b      	ldrb	r3, [r7, #8]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d1d8      	bne.n	8004028 <StartDisplaySettings+0x14>
    		if (select_index == 0) {
 8004076:	7a7b      	ldrb	r3, [r7, #9]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <StartDisplaySettings+0x80>

    			if (current_contrast + CONTRAST_STEPSIZE <= 0xFF) {
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	2bcd      	cmp	r3, #205	; 0xcd
 8004080:	d802      	bhi.n	8004088 <StartDisplaySettings+0x74>
    				current_contrast += CONTRAST_STEPSIZE;
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	817b      	strh	r3, [r7, #10]
    			}
    			oled_set_contrast(current_contrast);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe f8d5 	bl	800223c <oled_set_contrast>
 8004092:	e7c9      	b.n	8004028 <StartDisplaySettings+0x14>

    		} else if (select_index == 1) {
 8004094:	7a7b      	ldrb	r3, [r7, #9]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10b      	bne.n	80040b2 <StartDisplaySettings+0x9e>

    			if (current_contrast >= CONTRAST_STEPSIZE) {
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	2b31      	cmp	r3, #49	; 0x31
 800409e:	d902      	bls.n	80040a6 <StartDisplaySettings+0x92>
    				current_contrast -= CONTRAST_STEPSIZE;
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	3b32      	subs	r3, #50	; 0x32
 80040a4:	817b      	strh	r3, [r7, #10]
    			}
    			oled_set_contrast(current_contrast);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe f8c6 	bl	800223c <oled_set_contrast>
 80040b0:	e7ba      	b.n	8004028 <StartDisplaySettings+0x14>

    		} else if (select_index == 2) {
 80040b2:	7a7b      	ldrb	r3, [r7, #9]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d1b7      	bne.n	8004028 <StartDisplaySettings+0x14>
    			vTaskResume(HomeHandle);
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <StartDisplaySettings+0xc4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f00a fdf3 	bl	800eca8 <vTaskResume>
    			ranonce = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL);
 80040c6:	2000      	movs	r0, #0
 80040c8:	f00a fd46 	bl	800eb58 <vTaskSuspend>
    if (ranonce == 0) {
 80040cc:	e7ac      	b.n	8004028 <StartDisplaySettings+0x14>
 80040ce:	bf00      	nop
 80040d0:	08013a78 	.word	0x08013a78
 80040d4:	20000924 	.word	0x20000924
 80040d8:	200008fc 	.word	0x200008fc

080040dc <StartStats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStats */
void StartStats(void *argument)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStats */
	uint8_t select_index = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10e      	bne.n	8004110 <StartStats+0x34>
    	OLED_SCREEN(&SCRN_Stats, NORMAL);
 80040f2:	2100      	movs	r1, #0
 80040f4:	4813      	ldr	r0, [pc, #76]	; (8004144 <StartStats+0x68>)
 80040f6:	f7fd fd59 	bl	8001bac <OLED_SCREEN>
    	OLED_SELECT(&SCRN_Stats, select_index, OLED_NORESTORE);
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	2200      	movs	r2, #0
 80040fe:	4619      	mov	r1, r3
 8004100:	4810      	ldr	r0, [pc, #64]	; (8004144 <StartStats+0x68>)
 8004102:	f7fd fdbd 	bl	8001c80 <OLED_SELECT>
    	oled_show_stats();
 8004106:	f7fe f8ad 	bl	8002264 <oled_show_stats>
    	ranonce++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <StartStats+0x6c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f107 010a 	add.w	r1, r7, #10
 8004118:	2200      	movs	r2, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f00a f8f8 	bl	800e310 <xQueueReceive>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d1e2      	bne.n	80040ec <StartStats+0x10>
    	if (button_state == LONG_PRESS) {
 8004126:	7abb      	ldrb	r3, [r7, #10]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d1df      	bne.n	80040ec <StartStats+0x10>
    		vTaskResume(HomeHandle);
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <StartStats+0x70>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f00a fdb9 	bl	800eca8 <vTaskResume>
    		ranonce = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 800413a:	2000      	movs	r0, #0
 800413c:	f00a fd0c 	bl	800eb58 <vTaskSuspend>
    if (ranonce == 0) {
 8004140:	e7d4      	b.n	80040ec <StartStats+0x10>
 8004142:	bf00      	nop
 8004144:	08013a8c 	.word	0x08013a8c
 8004148:	20000924 	.word	0x20000924
 800414c:	200008fc 	.word	0x200008fc

08004150 <StartUSBListen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSBListen */
void StartUSBListen(void *argument)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSBListen */
	char* command = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
	char input;
	uint8_t initialised = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(USBInputHandle, &input, 0) == pdTRUE) {
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <StartUSBListen+0x98>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f107 010f 	add.w	r1, r7, #15
 8004168:	2200      	movs	r2, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f00a f8d0 	bl	800e310 <xQueueReceive>
 8004170:	4603      	mov	r3, r0
 8004172:	2b01      	cmp	r3, #1
 8004174:	d133      	bne.n	80041de <StartUSBListen+0x8e>
		  if (((uint8_t)input == 0x0D) && initialised) {
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b0d      	cmp	r3, #13
 800417a:	d112      	bne.n	80041a2 <StartUSBListen+0x52>
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <StartUSBListen+0x52>
		  		cmd_parse(command);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fd97 	bl	8002cb8 <cmd_parse>
		  		command = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
		  		set_colour(FG_BRIGHTGREEN);
 800418e:	205c      	movs	r0, #92	; 0x5c
 8004190:	f001 f81c 	bl	80051cc <set_colour>
		  		printf("\n\ruser@ruthless/ ");
 8004194:	4815      	ldr	r0, [pc, #84]	; (80041ec <StartUSBListen+0x9c>)
 8004196:	f00d f905 	bl	80113a4 <iprintf>
		  		set_colour(FG_WHITE);
 800419a:	2025      	movs	r0, #37	; 0x25
 800419c:	f001 f816 	bl	80051cc <set_colour>
 80041a0:	e009      	b.n	80041b6 <StartUSBListen+0x66>
		  } else if (initialised){
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <StartUSBListen+0x66>
		  		cmd_build(&command, input);
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	f107 0310 	add.w	r3, r7, #16
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe fe09 	bl	8002dc8 <cmd_build>
		  }

		  if ((input == 'i') && (initialised == 0)) {
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b69      	cmp	r3, #105	; 0x69
 80041ba:	d110      	bne.n	80041de <StartUSBListen+0x8e>
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <StartUSBListen+0x8e>
			  initialised++;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	3301      	adds	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
			  terminal_init();
 80041c8:	f000 ffc8 	bl	800515c <terminal_init>
			  set_colour(FG_BRIGHTGREEN);
 80041cc:	205c      	movs	r0, #92	; 0x5c
 80041ce:	f000 fffd 	bl	80051cc <set_colour>
			  printf("\n\ruser@ruthless/ ");
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <StartUSBListen+0x9c>)
 80041d4:	f00d f8e6 	bl	80113a4 <iprintf>
			  set_colour(FG_WHITE);
 80041d8:	2025      	movs	r0, #37	; 0x25
 80041da:	f000 fff7 	bl	80051cc <set_colour>
		  }

	  }
	  osDelay(1);
 80041de:	2001      	movs	r0, #1
 80041e0:	f009 fc47 	bl	800da72 <osDelay>
	  if (xQueueReceive(USBInputHandle, &input, 0) == pdTRUE) {
 80041e4:	e7bc      	b.n	8004160 <StartUSBListen+0x10>
 80041e6:	bf00      	nop
 80041e8:	20000930 	.word	0x20000930
 80041ec:	08013048 	.word	0x08013048

080041f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004202:	f001 f83f 	bl	8005284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40000c00 	.word	0x40000c00

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004218:	b672      	cpsid	i
}
 800421a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800421c:	e7fe      	b.n	800421c <Error_Handler+0x8>

0800421e <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry, char* name) {
 800421e:	b5b0      	push	{r4, r5, r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	460b      	mov	r3, r1
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	817b      	strh	r3, [r7, #10]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	82fb      	strh	r3, [r7, #22]
	block_erase(entry); //Erase entire block ready for new data
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe f8e3 	bl	8002400 <block_erase>
	enter_metadata(card, entry);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	4619      	mov	r1, r3
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f842 	bl	80042c8 <enter_metadata>
	card->name = name;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 800424a:	8afb      	ldrh	r3, [r7, #22]
 800424c:	3301      	adds	r3, #1
 800424e:	b29c      	uxth	r4, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689d      	ldr	r5, [r3, #8]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fb ffcb 	bl	80001f4 <strlen>
 800425e:	4603      	mov	r3, r0
 8004260:	462a      	mov	r2, r5
 8004262:	2100      	movs	r1, #0
 8004264:	4620      	mov	r0, r4
 8004266:	f7fe f923 	bl	80024b0 <MEM_WRITE>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <enter_card+0x56>
		return RFS_WRITE_ERROR;
 8004270:	2304      	movs	r3, #4
 8004272:	e025      	b.n	80042c0 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 8004274:	8afb      	ldrh	r3, [r7, #22]
 8004276:	3301      	adds	r3, #1
 8004278:	b29c      	uxth	r4, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fb ffb8 	bl	80001f4 <strlen>
 8004284:	4603      	mov	r3, r0
 8004286:	b299      	uxth	r1, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	791b      	ldrb	r3, [r3, #4]
 8004290:	4620      	mov	r0, r4
 8004292:	f7fe f90d 	bl	80024b0 <MEM_WRITE>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <enter_card+0x82>
		return RFS_WRITE_ERROR;
 800429c:	2304      	movs	r3, #4
 800429e:	e00f      	b.n	80042c0 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80042a0:	8afb      	ldrh	r3, [r7, #22]
 80042a2:	3302      	adds	r3, #2
 80042a4:	b298      	uxth	r0, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8b1b      	ldrh	r3, [r3, #24]
 80042ae:	2100      	movs	r1, #0
 80042b0:	f7fe f8fe 	bl	80024b0 <MEM_WRITE>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <enter_card+0xa0>
		return RFS_WRITE_ERROR;
 80042ba:	2304      	movs	r3, #4
 80042bc:	e000      	b.n	80042c0 <enter_card+0xa2>
	}

	return RFS_OK;
 80042be:	2300      	movs	r3, #0

}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bdb0      	pop	{r4, r5, r7, pc}

080042c8 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8b1b      	ldrh	r3, [r3, #24]
 80042d8:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7c1b      	ldrb	r3, [r3, #16]
 80042de:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	791b      	ldrb	r3, [r3, #4]
 80042e4:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fb ff82 	bl	80001f4 <strlen>
 80042f0:	4603      	mov	r3, r0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3303      	adds	r3, #3
 80042f6:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 80042f8:	7b3b      	ldrb	r3, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f00c ff36 	bl	801116c <malloc>
 8004300:	4603      	mov	r3, r0
 8004302:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68dc      	ldr	r4, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fb ff71 	bl	80001f4 <strlen>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	4621      	mov	r1, r4
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f00c ff37 	bl	801118c <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fb ff66 	bl	80001f4 <strlen>
 8004328:	4602      	mov	r2, r0
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4413      	add	r3, r2
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fb ff5c 	bl	80001f4 <strlen>
 800433c:	4603      	mov	r3, r0
 800433e:	3301      	adds	r3, #1
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	7b7a      	ldrb	r2, [r7, #13]
 8004346:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fb ff51 	bl	80001f4 <strlen>
 8004352:	4603      	mov	r3, r0
 8004354:	3302      	adds	r3, #2
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	7bba      	ldrb	r2, [r7, #14]
 800435c:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	b298      	uxth	r0, r3
 8004364:	7b3b      	ldrb	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	2100      	movs	r1, #0
 800436a:	f7fe f8a1 	bl	80024b0 <MEM_WRITE>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <enter_metadata+0xb6>
		free(metadata);
 8004374:	68b8      	ldr	r0, [r7, #8]
 8004376:	f00c ff01 	bl	801117c <free>
		return RFS_WRITE_ERROR;
 800437a:	2304      	movs	r3, #4
 800437c:	e003      	b.n	8004386 <enter_metadata+0xbe>
	}
	free(metadata);
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	f00c fefc 	bl	801117c <free>
	return RFS_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}

0800438e <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8004398:	201c      	movs	r0, #28
 800439a:	f00c fee7 	bl	801116c <malloc>
 800439e:	4603      	mov	r3, r0
 80043a0:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	4619      	mov	r1, r3
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f81e 	bl	80043e8 <read_metadata>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <read_card_entry+0x28>
		return NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e014      	b.n	80043e0 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	4619      	mov	r1, r3
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f881 	bl	80044c2 <read_nameuid>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <read_card_entry+0x3c>
		return NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e00a      	b.n	80043e0 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	4619      	mov	r1, r3
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f8e2 	bl	8004598 <read_cardcontents>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <read_card_entry+0x50>
		return NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <read_card_entry+0x52>
	}

	return result;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f8f5 	bl	80045e8 <get_datasize>
 80043fe:	4603      	mov	r3, r0
 8004400:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	4618      	mov	r0, r3
 8004406:	f00c feb1 	bl	801116c <malloc>
 800440a:	4603      	mov	r3, r0
 800440c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800440e:	8afb      	ldrh	r3, [r7, #22]
 8004410:	3b02      	subs	r3, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f00c feaa 	bl	801116c <malloc>
 8004418:	4603      	mov	r3, r0
 800441a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	b298      	uxth	r0, r3
 8004422:	8afb      	ldrh	r3, [r7, #22]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	2100      	movs	r1, #0
 8004428:	f7fe f8d8 	bl	80025dc <MEM_READPAGE>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <read_metadata+0x54>
		free(metadata);
 8004432:	6938      	ldr	r0, [r7, #16]
 8004434:	f00c fea2 	bl	801117c <free>
		return RFS_READ_ERROR;
 8004438:	2305      	movs	r3, #5
 800443a:	e03e      	b.n	80044ba <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2bff      	cmp	r3, #255	; 0xff
 8004442:	d104      	bne.n	800444e <read_metadata+0x66>
		free(metadata);
 8004444:	6938      	ldr	r0, [r7, #16]
 8004446:	f00c fe99 	bl	801117c <free>
		return RFS_NO_CARD;
 800444a:	2301      	movs	r3, #1
 800444c:	e035      	b.n	80044ba <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	3b03      	subs	r3, #3
 8004452:	461a      	mov	r2, r3
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f00c fe98 	bl	801118c <memcpy>
	type[metadata_size - 3] = '\0';
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	3b03      	subs	r3, #3
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
	result->type = type;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	3b03      	subs	r3, #3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 800447e:	8afb      	ldrh	r3, [r7, #22]
 8004480:	3b02      	subs	r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 800448c:	8afb      	ldrh	r3, [r7, #22]
 800448e:	3b01      	subs	r3, #1
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d104      	bne.n	80044a4 <read_metadata+0xbc>
		free(metadata);
 800449a:	6938      	ldr	r0, [r7, #16]
 800449c:	f00c fe6e 	bl	801117c <free>
		return RFS_CARD_PROTECTED;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e00a      	b.n	80044ba <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80044a4:	8afb      	ldrh	r3, [r7, #22]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	741a      	strb	r2, [r3, #16]
	free(metadata);
 80044b2:	6938      	ldr	r0, [r7, #16]
 80044b4:	f00c fe62 	bl	801117c <free>

	return RFS_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	2101      	movs	r1, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f888 	bl	80045e8 <get_datasize>
 80044d8:	4603      	mov	r3, r0
 80044da:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	4618      	mov	r0, r3
 80044e0:	f00c fe44 	bl	801116c <malloc>
 80044e4:	4603      	mov	r3, r0
 80044e6:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 80044e8:	8afb      	ldrh	r3, [r7, #22]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	7912      	ldrb	r2, [r2, #4]
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	3301      	adds	r3, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f00c fe3a 	bl	801116c <malloc>
 80044f8:	4603      	mov	r3, r0
 80044fa:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	791b      	ldrb	r3, [r3, #4]
 8004500:	4618      	mov	r0, r3
 8004502:	f00c fe33 	bl	801116c <malloc>
 8004506:	4603      	mov	r3, r0
 8004508:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	b29b      	uxth	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	b298      	uxth	r0, r3
 8004514:	8afb      	ldrh	r3, [r7, #22]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	2100      	movs	r1, #0
 800451a:	f7fe f85f 	bl	80025dc <MEM_READPAGE>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <read_nameuid+0x6c>
		free(raw_data);
 8004524:	6938      	ldr	r0, [r7, #16]
 8004526:	f00c fe29 	bl	801117c <free>
		return RFS_READ_ERROR;
 800452a:	2305      	movs	r3, #5
 800452c:	e030      	b.n	8004590 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2bff      	cmp	r3, #255	; 0xff
 8004534:	d104      	bne.n	8004540 <read_nameuid+0x7e>
		free(raw_data);
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f00c fe20 	bl	801117c <free>
		return RFS_NO_CARD;
 800453c:	2301      	movs	r3, #1
 800453e:	e027      	b.n	8004590 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8004540:	8afb      	ldrh	r3, [r7, #22]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	7912      	ldrb	r2, [r2, #4]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	461a      	mov	r2, r3
 800454a:	6939      	ldr	r1, [r7, #16]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f00c fe1d 	bl	801118c <memcpy>
	name[datasize - result->uidsize] = '\0';
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	7912      	ldrb	r2, [r2, #4]
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
	result->name = name;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7fb fe42 	bl	80001f4 <strlen>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1899      	adds	r1, r3, r2
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	68b8      	ldr	r0, [r7, #8]
 800457e:	f00c fe05 	bl	801118c <memcpy>
	result->uid = uid;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8004588:	6938      	ldr	r0, [r7, #16]
 800458a:	f00c fdf7 	bl	801117c <free>

	return RFS_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8b1b      	ldrh	r3, [r3, #24]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f00c fddf 	bl	801116c <malloc>
 80045ae:	4603      	mov	r3, r0
 80045b0:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3302      	adds	r3, #2
 80045ba:	b298      	uxth	r0, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8b1b      	ldrh	r3, [r3, #24]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	2100      	movs	r1, #0
 80045c4:	f7fe f80a 	bl	80025dc <MEM_READPAGE>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <read_cardcontents+0x40>
		free(contents);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f00c fdd4 	bl	801117c <free>
		return RFS_READ_ERROR;
 80045d4:	2305      	movs	r3, #5
 80045d6:	e003      	b.n	80045e0 <read_cardcontents+0x48>
	}

	result->contents = contents;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	460a      	mov	r2, r1
 80045f2:	80fb      	strh	r3, [r7, #6]
 80045f4:	4613      	mov	r3, r2
 80045f6:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 80045fc:	2300      	movs	r3, #0
 80045fe:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8004600:	e014      	b.n	800462c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	b29a      	uxth	r2, r3
 8004608:	797b      	ldrb	r3, [r7, #5]
 800460a:	b29b      	uxth	r3, r3
 800460c:	4413      	add	r3, r2
 800460e:	b298      	uxth	r0, r3
 8004610:	f107 020d 	add.w	r2, r7, #13
 8004614:	89f9      	ldrh	r1, [r7, #14]
 8004616:	2301      	movs	r3, #1
 8004618:	f7fd ffe0 	bl	80025dc <MEM_READPAGE>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8004622:	2300      	movs	r3, #0
 8004624:	e008      	b.n	8004638 <get_datasize+0x50>
		}
		size++;
 8004626:	89fb      	ldrh	r3, [r7, #14]
 8004628:	3301      	adds	r3, #1
 800462a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 800462c:	7b7b      	ldrb	r3, [r7, #13]
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d1e7      	bne.n	8004602 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8004632:	89fb      	ldrh	r3, [r7, #14]
 8004634:	3b01      	subs	r3, #1
 8004636:	b29b      	uxth	r3, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <free_card>:

/**
 * Free a card instance
 * @param card - Card to free
 * */
void free_card(Card* card) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	free(card->contents);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	4618      	mov	r0, r3
 800464e:	f00c fd95 	bl	801117c <free>
	free(card->name);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	f00c fd90 	bl	801117c <free>
	free(card->type);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	f00c fd8b 	bl	801117c <free>
	free(card->uid);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f00c fd86 	bl	801117c <free>
	free(card);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f00c fd83 	bl	801117c <free>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <get_number_files_section>:
 * Get number of files in given section of memory
 * @param start - Start block
 * @param count - Number of block to check ahead of start
 * @return number of files present in section
 * */
uint32_t get_number_files_section (uint16_t start, uint32_t count) {
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	6039      	str	r1, [r7, #0]
 8004688:	80fb      	strh	r3, [r7, #6]
	int file_count = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]

	for (int i = start; i < start + count; i++) {
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	e00d      	b.n	80046b0 <get_number_files_section+0x32>
		if (entry_present(i) == RFS_OK) {
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f88b 	bl	80047b4 <entry_present>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <get_number_files_section+0x2c>
			file_count++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
	for (int i = start; i < start + count; i++) {
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	88fa      	ldrh	r2, [r7, #6]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	441a      	add	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d8eb      	bhi.n	8004694 <get_number_files_section+0x16>
		}
	}

	return file_count;
 80046bc:	68fb      	ldr	r3, [r7, #12]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <get_number_files_all>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
uint32_t get_number_files_all(void) {
 80046c6:	b580      	push	{r7, lr}
 80046c8:	af00      	add	r7, sp, #0
	return get_number_files_section(0, BLOCK_COUNT - 2); //-2 since last two blocks are for read and write count stats
 80046ca:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff ffd5 	bl	800467e <get_number_files_section>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	bd80      	pop	{r7, pc}

080046da <get_files_section>:
 * @param start - Start block number
 * @param count - Number of files to read
 * @param result - Array to store file names
 * @return RFS_OK if files were successfully read
 * */
RFS_StatusTypeDef get_files_section (char** result, uint16_t start, uint32_t count) {
 80046da:	b5b0      	push	{r4, r5, r7, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	460b      	mov	r3, r1
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	817b      	strh	r3, [r7, #10]
	Card* work;
	uint32_t file_index = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]

	for (int i = start; i < start + count; i++) {
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e043      	b.n	800477a <get_files_section+0xa0>
		if (entry_present(i) == RFS_OK) {
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f85c 	bl	80047b4 <entry_present>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d138      	bne.n	8004774 <get_files_section+0x9a>
			work = read_card_entry(i);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fe41 	bl	800438e <read_card_entry>
 800470c:	61f8      	str	r0, [r7, #28]
			result[file_index] = malloc(strlen(work->name) + 1);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb fd6e 	bl	80001f4 <strlen>
 8004718:	4603      	mov	r3, r0
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	18d4      	adds	r4, r2, r3
 8004724:	4608      	mov	r0, r1
 8004726:	f00c fd21 	bl	801116c <malloc>
 800472a:	4603      	mov	r3, r0
 800472c:	6023      	str	r3, [r4, #0]
			memcpy(result[file_index], work->name, strlen(work->name));
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	681c      	ldr	r4, [r3, #0]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	689d      	ldr	r5, [r3, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fb fd57 	bl	80001f4 <strlen>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4629      	mov	r1, r5
 800474c:	4620      	mov	r0, r4
 800474e:	f00c fd1d 	bl	801118c <memcpy>
			result[file_index][strlen(work->name)] = '\0';
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	681c      	ldr	r4, [r3, #0]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fd47 	bl	80001f4 <strlen>
 8004766:	4603      	mov	r3, r0
 8004768:	4423      	add	r3, r4
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
			file_index++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3301      	adds	r3, #1
 8004772:	61bb      	str	r3, [r7, #24]
	for (int i = start; i < start + count; i++) {
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3301      	adds	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	897a      	ldrh	r2, [r7, #10]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	441a      	add	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	429a      	cmp	r2, r3
 8004784:	d8b5      	bhi.n	80046f2 <get_files_section+0x18>
		}
	}

	free_card(work);
 8004786:	69f8      	ldr	r0, [r7, #28]
 8004788:	f7ff ff5a 	bl	8004640 <free_card>
	return RFS_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bdb0      	pop	{r4, r5, r7, pc}

08004796 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
	return get_files_section(result, 0, BLOCK_COUNT - 2); //-2 since last two blocks are for read and write count stats
 800479e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80047a2:	2100      	movs	r1, #0
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff98 	bl	80046da <get_files_section>
 80047aa:	4603      	mov	r3, r0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	b298      	uxth	r0, r3
 80047c4:	f107 020f 	add.w	r2, r7, #15
 80047c8:	2301      	movs	r3, #1
 80047ca:	2100      	movs	r1, #0
 80047cc:	f7fd ff06 	bl	80025dc <MEM_READPAGE>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <entry_present+0x26>
		return RFS_READ_ERROR;
 80047d6:	2305      	movs	r3, #5
 80047d8:	e005      	b.n	80047e6 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2bff      	cmp	r3, #255	; 0xff
 80047de:	d101      	bne.n	80047e4 <entry_present+0x30>
		return RFS_NO_CARD;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <entry_present+0x32>
	}

	return RFS_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff ffda 	bl	80047b4 <entry_present>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <get_file_name+0x1c>
		return NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	e01a      	b.n	8004840 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fdbe 	bl	800438e <read_card_entry>
 8004812:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fb fceb 	bl	80001f4 <strlen>
 800481e:	4603      	mov	r3, r0
 8004820:	3301      	adds	r3, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f00c fca2 	bl	801116c <malloc>
 8004828:	4603      	mov	r3, r0
 800482a:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4619      	mov	r1, r3
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f00c ff4a 	bl	80116cc <strcpy>
	free_card(work);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ff01 	bl	8004640 <free_card>

	return name;
 800483e:	68bb      	ldr	r3, [r7, #8]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <get_file_entry>:
/**
 * Get entry number of file with given name
 * @param name - File name to look for
 * @return Entry number (-1 if file doesn't exist)
 * */
int get_file_entry(char* name) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT - 2; i++) {
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	e01e      	b.n	8004894 <get_file_entry+0x4c>
		if (entry_present(i) == RFS_OK) {
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	b29b      	uxth	r3, r3
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ffaa 	bl	80047b4 <entry_present>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d113      	bne.n	800488e <get_file_entry+0x46>
			work = read_card_entry(i);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fd8f 	bl	800438e <read_card_entry>
 8004870:	60f8      	str	r0, [r7, #12]
			if (strcmp(work->name, name) == 0) {
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fb fcb1 	bl	80001e0 <strcmp>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <get_file_entry+0x46>
				free_card(work);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fedb 	bl	8004640 <free_card>
				return i;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	e00c      	b.n	80048a8 <get_file_entry+0x60>
	for (int i = 0; i < BLOCK_COUNT - 2; i++) {
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800489a:	4293      	cmp	r3, r2
 800489c:	dddb      	ble.n	8004856 <get_file_entry+0xe>
			}
		}
	}
	free_card(work);
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff fece 	bl	8004640 <free_card>
	return -1; //shouldn't get here
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e00a      	b.n	80048d6 <free_filenames+0x26>
		free(file_names[i]);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f00c fc56 	bl	801117c <free>
	for (int i = 0; i < size; i++) {
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	dbf0      	blt.n	80048c0 <free_filenames+0x10>
	}
	free(file_names);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f00c fc4c 	bl	801117c <free>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fd fd81 	bl	8002400 <block_erase>
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <remove_card_byname>:
/**
 * Remove card by name
 * @param name - Name of card
 * @return RFS_OK if card was successfully removed
 * */
RFS_StatusTypeDef remove_card_byname(char* name) {
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int block = 0; block < BLOCK_COUNT; block++) {
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	e026      	b.n	8004962 <remove_card_byname+0x5c>
		if (entry_present(block) == RFS_OK) {
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	b29b      	uxth	r3, r3
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff4b 	bl	80047b4 <entry_present>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d118      	bne.n	8004956 <remove_card_byname+0x50>
			work = read_card_entry(block);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fd30 	bl	800438e <read_card_entry>
 800492e:	60f8      	str	r0, [r7, #12]
			if (strcmp(name, work->name) == 0) {
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fb fc52 	bl	80001e0 <strcmp>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <remove_card_byname+0x50>
				remove_card(block);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ffd0 	bl	80048ec <remove_card>
				free_card(work);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fe77 	bl	8004640 <free_card>
				return RFS_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e00a      	b.n	800496c <remove_card_byname+0x66>
			}
		}
		free_card(work);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fe72 	bl	8004640 <free_card>
	for (int block = 0; block < BLOCK_COUNT; block++) {
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	dbd4      	blt.n	8004914 <remove_card_byname+0xe>
	}

	return RFS_NO_CARD;
 800496a:	2301      	movs	r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <modify_card>:
 * @param page - Card page number to modify
 * @param data - New data for page
 * @param name - New name for file (Optional)
 * @return RFS_OK if file was successfully modified
 * */
RFS_StatusTypeDef modify_card(char* file_to_mod, int page, uint8_t* data, char* new_name) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
	int entry = get_file_entry(file_to_mod);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff ff60 	bl	8004848 <get_file_entry>
 8004988:	6178      	str	r0, [r7, #20]

	if (entry == -1) {
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d101      	bne.n	8004996 <modify_card+0x22>
		return RFS_READ_ERROR;
 8004992:	2305      	movs	r3, #5
 8004994:	e02b      	b.n	80049ee <modify_card+0x7a>
	}
	Card* old = read_card_entry(entry);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	b29b      	uxth	r3, r3
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fcf7 	bl	800438e <read_card_entry>
 80049a0:	6138      	str	r0, [r7, #16]

	if ((page != -1) && (data != NULL)) {
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d00a      	beq.n	80049c0 <modify_card+0x4c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <modify_card+0x4c>
		memcpy(old->contents + (UL_PAGESIZE * page), data, UL_PAGESIZE);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	0092      	lsls	r2, r2, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	601a      	str	r2, [r3, #0]
	}

	if (new_name != NULL) {
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <modify_card+0x62>
		enter_card(old, entry, new_name);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6938      	ldr	r0, [r7, #16]
 80049d0:	f7ff fc25 	bl	800421e <enter_card>
 80049d4:	e007      	b.n	80049e6 <modify_card+0x72>
	} else {
		enter_card(old, entry, old->name);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	b299      	uxth	r1, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	461a      	mov	r2, r3
 80049e0:	6938      	ldr	r0, [r7, #16]
 80049e2:	f7ff fc1c 	bl	800421e <enter_card>
	}

	free_card(old);
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f7ff fe2a 	bl	8004640 <free_card>
	return RFS_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	int file_count = get_number_files_all();
 80049fe:	f7ff fe62 	bl	80046c6 <get_number_files_all>
 8004a02:	4603      	mov	r3, r0
 8004a04:	607b      	str	r3, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fb fece 	bl	80007a8 <__aeabi_i2d>
 8004a0c:	a308      	add	r3, pc, #32	; (adr r3, 8004a30 <get_used_size+0x38>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fc4d 	bl	80002b0 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7fb ff2d 	bl	800087c <__aeabi_d2uiz>
 8004a22:	4603      	mov	r3, r0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	f3af 8000 	nop.w
 8004a30:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a34:	3fb0624d 	.word	0x3fb0624d

08004a38 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 8004a3c:	f7ff ffdc 	bl	80049f8 <get_used_size>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 8004a54:	f7ff ffd0 	bl	80049f8 <get_used_size>
 8004a58:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", used);
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <get_used_size_str+0x20>)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f00c fe14 	bl	801168c <siprintf>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08013094 	.word	0x08013094

08004a70 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 8004a78:	f7ff ffde 	bl	8004a38 <get_free_size>
 8004a7c:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <get_free_size_str+0x20>)
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f00c fe02 	bl	801168c <siprintf>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08013094 	.word	0x08013094

08004a94 <inc_write_count>:

/**
 * Increment the total write count by 1
 * @return RFS_OK if value was successfully incremented
 * */
RFS_StatusTypeDef inc_write_count(void) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
	uint32_t new_total = get_total_writes() + 1;
 8004a9a:	f000 f853 	bl	8004b44 <get_total_writes>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	607b      	str	r3, [r7, #4]
	uint8_t new_writes[sizeof(uint32_t)] = {new_total, new_total >> 8, new_total >> 16, new_total >> 24};
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	703b      	strb	r3, [r7, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	707b      	strb	r3, [r7, #1]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	70bb      	strb	r3, [r7, #2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	70fb      	strb	r3, [r7, #3]

	block_erase(WRITE_NUM_BLOCK);
 8004ac2:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8004ac6:	f7fd fc9b 	bl	8002400 <block_erase>
	if (MEM_WRITE(BLOCK_PAGECOUNT * WRITE_NUM_BLOCK, 0x0000, new_writes, sizeof(uint32_t)) != HAL_OK) {
 8004aca:	463a      	mov	r2, r7
 8004acc:	2304      	movs	r3, #4
 8004ace:	2100      	movs	r1, #0
 8004ad0:	f64f 7080 	movw	r0, #65408	; 0xff80
 8004ad4:	f7fd fcec 	bl	80024b0 <MEM_WRITE>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <inc_write_count+0x4e>
		return RFS_WRITE_ERROR;
 8004ade:	2304      	movs	r3, #4
 8004ae0:	e000      	b.n	8004ae4 <inc_write_count+0x50>
	}

	return RFS_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <inc_read_count>:

/**
 * Increment the total read count by 1
 * @return RFS_OK if value was successfully incremented
 * */
RFS_StatusTypeDef inc_read_count(void) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
	uint32_t new_total = get_total_reads() + 1;
 8004af2:	f000 f841 	bl	8004b78 <get_total_reads>
 8004af6:	4603      	mov	r3, r0
 8004af8:	3301      	adds	r3, #1
 8004afa:	607b      	str	r3, [r7, #4]
	uint8_t new_writes[sizeof(uint32_t)] = {new_total, new_total >> 8, new_total >> 16, new_total >> 24};
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	703b      	strb	r3, [r7, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	707b      	strb	r3, [r7, #1]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	70bb      	strb	r3, [r7, #2]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	70fb      	strb	r3, [r7, #3]

	block_erase(READ_NUM_BLOCK);
 8004b1a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8004b1e:	f7fd fc6f 	bl	8002400 <block_erase>
	if (MEM_WRITE(BLOCK_PAGECOUNT * READ_NUM_BLOCK, 0x0000, new_writes, sizeof(uint32_t)) != HAL_OK) {
 8004b22:	463a      	mov	r2, r7
 8004b24:	2304      	movs	r3, #4
 8004b26:	2100      	movs	r1, #0
 8004b28:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8004b2c:	f7fd fcc0 	bl	80024b0 <MEM_WRITE>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <inc_read_count+0x4e>
		return RFS_WRITE_ERROR;
 8004b36:	2304      	movs	r3, #4
 8004b38:	e000      	b.n	8004b3c <inc_read_count+0x50>
	}

	return RFS_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <get_total_writes>:

/**
 * Get total number of writes made to FS (Used in stats task)
 * @return Total number of writes made to mem (Stored at block number WRITE_NUM_BLOCK)
 * */
uint32_t get_total_writes(void) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	uint8_t writes[sizeof(uint32_t)];

	MEM_READPAGE(BLOCK_PAGECOUNT * WRITE_NUM_BLOCK, 0x0000, writes, sizeof(uint32_t));
 8004b4a:	463a      	mov	r2, r7
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	2100      	movs	r1, #0
 8004b50:	f64f 7080 	movw	r0, #65408	; 0xff80
 8004b54:	f7fd fd42 	bl	80025dc <MEM_READPAGE>

	uint32_t writes_u32 = writes[3] << 24 | writes[2] << 16 | writes[1] << 8 | writes[0];
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	061a      	lsls	r2, r3, #24
 8004b5c:	78bb      	ldrb	r3, [r7, #2]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	787b      	ldrb	r3, [r7, #1]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	4313      	orrs	r3, r2
 8004b68:	783a      	ldrb	r2, [r7, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	607b      	str	r3, [r7, #4]
	return writes_u32;
 8004b6e:	687b      	ldr	r3, [r7, #4]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <get_total_reads>:

/**
 * Get total number of reads made of phyiscaly cards (Used in stats task)
 * @return Total number of reads(Stored at block number READ_NUM_BLOCK)
 * */
uint32_t get_total_reads(void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	uint8_t reads[sizeof(uint32_t)];

	MEM_READPAGE(BLOCK_PAGECOUNT * READ_NUM_BLOCK, 0x0000, reads, sizeof(uint32_t));
 8004b7e:	463a      	mov	r2, r7
 8004b80:	2304      	movs	r3, #4
 8004b82:	2100      	movs	r1, #0
 8004b84:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8004b88:	f7fd fd28 	bl	80025dc <MEM_READPAGE>

	uint32_t reads_u32 = reads[3] << 24 | reads[2] << 16 | reads[1] << 8 | reads[0];
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	061a      	lsls	r2, r3, #24
 8004b90:	78bb      	ldrb	r3, [r7, #2]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	431a      	orrs	r2, r3
 8004b96:	787b      	ldrb	r3, [r7, #1]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	783a      	ldrb	r2, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	607b      	str	r3, [r7, #4]
	return reads_u32;
 8004ba2:	687b      	ldr	r3, [r7, #4]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <get_total_writes_str>:

/**
 * Get total writes as a string
 * @return String of total writes
 * */
char* get_total_writes_str(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	char* result = malloc(sizeof(uint32_t) * sizeof(char));
 8004bb2:	2004      	movs	r0, #4
 8004bb4:	f00c fada 	bl	801116c <malloc>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	607b      	str	r3, [r7, #4]

	sprintf(result, "%i", get_total_writes());
 8004bbc:	f7ff ffc2 	bl	8004b44 <get_total_writes>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4904      	ldr	r1, [pc, #16]	; (8004bd8 <get_total_writes_str+0x2c>)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f00c fd60 	bl	801168c <siprintf>
	return(result);
 8004bcc:	687b      	ldr	r3, [r7, #4]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08013094 	.word	0x08013094

08004bdc <get_total_reads_str>:

/**
 * Get total reads as a string
 * @return String of total reads
 * */
char* get_total_reads_str(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
	char* result = malloc(sizeof(uint32_t) * sizeof(char));
 8004be2:	2004      	movs	r0, #4
 8004be4:	f00c fac2 	bl	801116c <malloc>
 8004be8:	4603      	mov	r3, r0
 8004bea:	607b      	str	r3, [r7, #4]

	sprintf(result, "%i", get_total_reads());
 8004bec:	f7ff ffc4 	bl	8004b78 <get_total_reads>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4904      	ldr	r1, [pc, #16]	; (8004c08 <get_total_reads_str+0x2c>)
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f00c fd48 	bl	801168c <siprintf>
	return(result);
 8004bfc:	687b      	ldr	r3, [r7, #4]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08013094 	.word	0x08013094

08004c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_MspInit+0x54>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <HAL_MspInit+0x54>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c20:	6453      	str	r3, [r2, #68]	; 0x44
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <HAL_MspInit+0x54>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_MspInit+0x54>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <HAL_MspInit+0x54>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_MspInit+0x54>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	210f      	movs	r1, #15
 8004c4e:	f06f 0001 	mvn.w	r0, #1
 8004c52:	f000 fc13 	bl	800547c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800

08004c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_I2C_MspInit+0x84>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d12b      	bne.n	8004cde <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ca2:	23c0      	movs	r3, #192	; 0xc0
 8004ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca6:	2312      	movs	r3, #18
 8004ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4619      	mov	r1, r3
 8004cbc:	480c      	ldr	r0, [pc, #48]	; (8004cf0 <HAL_I2C_MspInit+0x8c>)
 8004cbe:	f000 fc07 	bl	80054d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_I2C_MspInit+0x88>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cde:	bf00      	nop
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40005400 	.word	0x40005400
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40020400 	.word	0x40020400

08004cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <HAL_SPI_MspInit+0xe8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d12c      	bne.n	8004d70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6313      	str	r3, [r2, #48]	; 0x30
 8004d42:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004d4e:	23a0      	movs	r3, #160	; 0xa0
 8004d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d52:	2302      	movs	r3, #2
 8004d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d5e:	2305      	movs	r3, #5
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d62:	f107 031c 	add.w	r3, r7, #28
 8004d66:	4619      	mov	r1, r3
 8004d68:	481e      	ldr	r0, [pc, #120]	; (8004de4 <HAL_SPI_MspInit+0xf0>)
 8004d6a:	f000 fbb1 	bl	80054d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d6e:	e031      	b.n	8004dd4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_SPI_MspInit+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d12c      	bne.n	8004dd4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	6313      	str	r3, [r2, #48]	; 0x30
 8004da6:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <HAL_SPI_MspInit+0xec>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8004db2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db8:	2302      	movs	r3, #2
 8004dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004dc4:	2305      	movs	r3, #5
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4807      	ldr	r0, [pc, #28]	; (8004dec <HAL_SPI_MspInit+0xf8>)
 8004dd0:	f000 fb7e 	bl	80054d0 <HAL_GPIO_Init>
}
 8004dd4:	bf00      	nop
 8004dd6:	3730      	adds	r7, #48	; 0x30
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40013000 	.word	0x40013000
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40020000 	.word	0x40020000
 8004de8:	40003800 	.word	0x40003800
 8004dec:	40020400 	.word	0x40020400

08004df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6413      	str	r3, [r2, #64]	; 0x40
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e1e:	e012      	b.n	8004e46 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <HAL_TIM_Base_MspInit+0x68>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10d      	bne.n	8004e46 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_TIM_Base_MspInit+0x64>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40000400 	.word	0x40000400

08004e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e64:	f107 030c 	add.w	r3, r7, #12
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d11d      	bne.n	8004eba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <HAL_TIM_MspPostInit+0x68>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a0f      	ldr	r2, [pc, #60]	; (8004ec4 <HAL_TIM_MspPostInit+0x68>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_TIM_MspPostInit+0x68>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eae:	f107 030c 	add.w	r3, r7, #12
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4804      	ldr	r0, [pc, #16]	; (8004ec8 <HAL_TIM_MspPostInit+0x6c>)
 8004eb6:	f000 fb0b 	bl	80054d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004eba:	bf00      	nop
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40020000 	.word	0x40020000

08004ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08e      	sub	sp, #56	; 0x38
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <HAL_InitTick+0xe4>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	4a32      	ldr	r2, [pc, #200]	; (8004fb0 <HAL_InitTick+0xe4>)
 8004ee6:	f043 0308 	orr.w	r3, r3, #8
 8004eea:	6413      	str	r3, [r2, #64]	; 0x40
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <HAL_InitTick+0xe4>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ef8:	f107 0210 	add.w	r2, r7, #16
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 fb70 	bl	80085e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d103      	bne.n	8004f1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004f12:	f003 fb55 	bl	80085c0 <HAL_RCC_GetPCLK1Freq>
 8004f16:	6378      	str	r0, [r7, #52]	; 0x34
 8004f18:	e004      	b.n	8004f24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004f1a:	f003 fb51 	bl	80085c0 <HAL_RCC_GetPCLK1Freq>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <HAL_InitTick+0xe8>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	0c9b      	lsrs	r3, r3, #18
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_InitTick+0xf0>)
 8004f36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004f38:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f3e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8004f58:	4817      	ldr	r0, [pc, #92]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f5a:	f003 ffa9 	bl	8008eb0 <HAL_TIM_Base_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8004f6c:	4812      	ldr	r0, [pc, #72]	; (8004fb8 <HAL_InitTick+0xec>)
 8004f6e:	f004 f871 	bl	8009054 <HAL_TIM_Base_Start_IT>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004f78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d111      	bne.n	8004fa4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f80:	2032      	movs	r0, #50	; 0x32
 8004f82:	f000 fa97 	bl	80054b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d808      	bhi.n	8004f9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	2032      	movs	r0, #50	; 0x32
 8004f92:	f000 fa73 	bl	800547c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f96:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <HAL_InitTick+0xf4>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e002      	b.n	8004fa4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3738      	adds	r7, #56	; 0x38
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	431bde83 	.word	0x431bde83
 8004fb8:	20000934 	.word	0x20000934
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	200005e0 	.word	0x200005e0

08004fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <NMI_Handler+0x4>

08004fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fce:	e7fe      	b.n	8004fce <HardFault_Handler+0x4>

08004fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fd4:	e7fe      	b.n	8004fd4 <MemManage_Handler+0x4>

08004fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fda:	e7fe      	b.n	8004fda <BusFault_Handler+0x4>

08004fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fe0:	e7fe      	b.n	8004fe0 <UsageFault_Handler+0x4>

08004fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	f000 fc21 	bl	800583c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005004:	4802      	ldr	r0, [pc, #8]	; (8005010 <TIM5_IRQHandler+0x10>)
 8005006:	f004 f9f5 	bl	80093f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000934 	.word	0x20000934

08005014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <OTG_FS_IRQHandler+0x10>)
 800501a:	f001 fd36 	bl	8006a8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20009f04 	.word	0x20009f04

08005028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e00a      	b.n	8005050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800503a:	f3af 8000 	nop.w
 800503e:	4601      	mov	r1, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	60ba      	str	r2, [r7, #8]
 8005046:	b2ca      	uxtb	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	dbf0      	blt.n	800503a <_read+0x12>
  }

  return len;
 8005058:	687b      	ldr	r3, [r7, #4]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800508a:	605a      	str	r2, [r3, #4]
  return 0;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_isatty>:

int _isatty(int file)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050a2:	2301      	movs	r3, #1
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <_sbrk+0x5c>)
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <_sbrk+0x60>)
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <_sbrk+0x64>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <_sbrk+0x64>)
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <_sbrk+0x68>)
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d207      	bcs.n	800510c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050fc:	f00c f80c 	bl	8011118 <__errno>
 8005100:	4603      	mov	r3, r0
 8005102:	220c      	movs	r2, #12
 8005104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	e009      	b.n	8005120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <_sbrk+0x64>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <_sbrk+0x64>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <_sbrk+0x64>)
 800511c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20010000 	.word	0x20010000
 800512c:	00000400 	.word	0x00000400
 8005130:	2000097c 	.word	0x2000097c
 8005134:	2000a640 	.word	0x2000a640

08005138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <SystemInit+0x20>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <SystemInit+0x20>)
 8005144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <terminal_init>:


/**
 * Initialise terminal with ASCII art
 * */
void terminal_init(void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	e00a      	b.n	800517e <terminal_init+0x22>
		printf("%s\r\n",RR_TERMINALART[i]);
 8005168:	4a09      	ldr	r2, [pc, #36]	; (8005190 <terminal_init+0x34>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005170:	4619      	mov	r1, r3
 8005172:	4808      	ldr	r0, [pc, #32]	; (8005194 <terminal_init+0x38>)
 8005174:	f00c f916 	bl	80113a4 <iprintf>
	for (int i = 0; i < 6; i++) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3301      	adds	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b05      	cmp	r3, #5
 8005182:	ddf1      	ble.n	8005168 <terminal_init+0xc>
	}
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200005c8 	.word	0x200005c8
 8005194:	0801341c 	.word	0x0801341c

08005198 <move_terminal_cursor>:
/**
 * Move terminal cursor
 * @param x - X location to move to
 * @param y - Y locationto move to
 * */
void move_terminal_cursor(int x, int y) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	printf("\x1b[%d;%dH", x, y);
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4803      	ldr	r0, [pc, #12]	; (80051b4 <move_terminal_cursor+0x1c>)
 80051a8:	f00c f8fc 	bl	80113a4 <iprintf>
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08013424 	.word	0x08013424

080051b8 <clear_terminal>:

/**
 * Clear entire terminal
 * */
void clear_terminal(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	printf("\x1b[2J");
 80051bc:	4802      	ldr	r0, [pc, #8]	; (80051c8 <clear_terminal+0x10>)
 80051be:	f00c f8f1 	bl	80113a4 <iprintf>
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08013430 	.word	0x08013430

080051cc <set_colour>:

/**
 * Set terminal colour (text or background)
 * @param colour - Colour to set to (See terminal.h)
 * */
void set_colour (TerminalColour colour) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
	printf("\x1b[%dm", colour);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	4619      	mov	r1, r3
 80051da:	4803      	ldr	r0, [pc, #12]	; (80051e8 <set_colour+0x1c>)
 80051dc:	f00c f8e2 	bl	80113a4 <iprintf>
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	0801343c 	.word	0x0801343c

080051ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80051f2:	490e      	ldr	r1, [pc, #56]	; (800522c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051f4:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f8:	e002      	b.n	8005200 <LoopCopyDataInit>

080051fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051fe:	3304      	adds	r3, #4

08005200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005204:	d3f9      	bcc.n	80051fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005206:	4a0b      	ldr	r2, [pc, #44]	; (8005234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005208:	4c0b      	ldr	r4, [pc, #44]	; (8005238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800520a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800520c:	e001      	b.n	8005212 <LoopFillZerobss>

0800520e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800520e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005210:	3204      	adds	r2, #4

08005212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005214:	d3fb      	bcc.n	800520e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005216:	f7ff ff8f 	bl	8005138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800521a:	f00b ff83 	bl	8011124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800521e:	f7fd ffc3 	bl	80031a8 <main>
  bx  lr    
 8005222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005224:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800522c:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8005230:	08013c64 	.word	0x08013c64
  ldr r2, =_sbss
 8005234:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8005238:	2000a640 	.word	0x2000a640

0800523c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800523c:	e7fe      	b.n	800523c <ADC_IRQHandler>
	...

08005240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <HAL_Init+0x40>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <HAL_Init+0x40>)
 800524a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_Init+0x40>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <HAL_Init+0x40>)
 8005256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800525a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_Init+0x40>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a07      	ldr	r2, [pc, #28]	; (8005280 <HAL_Init+0x40>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005268:	2003      	movs	r0, #3
 800526a:	f000 f8fc 	bl	8005466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800526e:	200f      	movs	r0, #15
 8005270:	f7ff fe2c 	bl	8004ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005274:	f7ff fcca 	bl	8004c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023c00 	.word	0x40023c00

08005284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_IncTick+0x20>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_IncTick+0x24>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4413      	add	r3, r2
 8005294:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <HAL_IncTick+0x24>)
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	200005e4 	.word	0x200005e4
 80052a8:	20000980 	.word	0x20000980

080052ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return uwTick;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_GetTick+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000980 	.word	0x20000980

080052c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052cc:	f7ff ffee 	bl	80052ac <HAL_GetTick>
 80052d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d005      	beq.n	80052ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_Delay+0x44>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052ea:	bf00      	nop
 80052ec:	f7ff ffde 	bl	80052ac <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d8f7      	bhi.n	80052ec <HAL_Delay+0x28>
  {
  }
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200005e4 	.word	0x200005e4

0800530c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005328:	4013      	ands	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	60d3      	str	r3, [r2, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__NVIC_GetPriorityGrouping+0x18>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 0307 	and.w	r3, r3, #7
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000ed00 	.word	0xe000ed00

08005370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db0b      	blt.n	800539a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	4907      	ldr	r1, [pc, #28]	; (80053a8 <__NVIC_EnableIRQ+0x38>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2001      	movs	r0, #1
 8005392:	fa00 f202 	lsl.w	r2, r0, r2
 8005396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	e000e100 	.word	0xe000e100

080053ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	6039      	str	r1, [r7, #0]
 80053b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	db0a      	blt.n	80053d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	490c      	ldr	r1, [pc, #48]	; (80053f8 <__NVIC_SetPriority+0x4c>)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	0112      	lsls	r2, r2, #4
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	440b      	add	r3, r1
 80053d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053d4:	e00a      	b.n	80053ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4908      	ldr	r1, [pc, #32]	; (80053fc <__NVIC_SetPriority+0x50>)
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3b04      	subs	r3, #4
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	440b      	add	r3, r1
 80053ea:	761a      	strb	r2, [r3, #24]
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	e000e100 	.word	0xe000e100
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f1c3 0307 	rsb	r3, r3, #7
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf28      	it	cs
 800541e:	2304      	movcs	r3, #4
 8005420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3304      	adds	r3, #4
 8005426:	2b06      	cmp	r3, #6
 8005428:	d902      	bls.n	8005430 <NVIC_EncodePriority+0x30>
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3b03      	subs	r3, #3
 800542e:	e000      	b.n	8005432 <NVIC_EncodePriority+0x32>
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	401a      	ands	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005448:	f04f 31ff 	mov.w	r1, #4294967295
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	43d9      	mvns	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005458:	4313      	orrs	r3, r2
         );
}
 800545a:	4618      	mov	r0, r3
 800545c:	3724      	adds	r7, #36	; 0x24
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff4c 	bl	800530c <__NVIC_SetPriorityGrouping>
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800548e:	f7ff ff61 	bl	8005354 <__NVIC_GetPriorityGrouping>
 8005492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	6978      	ldr	r0, [r7, #20]
 800549a:	f7ff ffb1 	bl	8005400 <NVIC_EncodePriority>
 800549e:	4602      	mov	r2, r0
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ff80 	bl	80053ac <__NVIC_SetPriority>
}
 80054ac:	bf00      	nop
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff54 	bl	8005370 <__NVIC_EnableIRQ>
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e159      	b.n	80057a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054ec:	2201      	movs	r2, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4013      	ands	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	429a      	cmp	r2, r3
 8005506:	f040 8148 	bne.w	800579a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d005      	beq.n	8005522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800551e:	2b02      	cmp	r3, #2
 8005520:	d130      	bne.n	8005584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	2203      	movs	r2, #3
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4013      	ands	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005558:	2201      	movs	r2, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 0201 	and.w	r2, r3, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d017      	beq.n	80055c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	2203      	movs	r2, #3
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d123      	bne.n	8005614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	08da      	lsrs	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3208      	adds	r2, #8
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	220f      	movs	r2, #15
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	08da      	lsrs	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3208      	adds	r2, #8
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0203 	and.w	r2, r3, #3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a2 	beq.w	800579a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_GPIO_Init+0x2e8>)
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	4a56      	ldr	r2, [pc, #344]	; (80057b8 <HAL_GPIO_Init+0x2e8>)
 8005660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005664:	6453      	str	r3, [r2, #68]	; 0x44
 8005666:	4b54      	ldr	r3, [pc, #336]	; (80057b8 <HAL_GPIO_Init+0x2e8>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005672:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_GPIO_Init+0x2ec>)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	3302      	adds	r3, #2
 800567a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a49      	ldr	r2, [pc, #292]	; (80057c0 <HAL_GPIO_Init+0x2f0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d019      	beq.n	80056d2 <HAL_GPIO_Init+0x202>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a48      	ldr	r2, [pc, #288]	; (80057c4 <HAL_GPIO_Init+0x2f4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_GPIO_Init+0x1fe>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a47      	ldr	r2, [pc, #284]	; (80057c8 <HAL_GPIO_Init+0x2f8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00d      	beq.n	80056ca <HAL_GPIO_Init+0x1fa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a46      	ldr	r2, [pc, #280]	; (80057cc <HAL_GPIO_Init+0x2fc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <HAL_GPIO_Init+0x1f6>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a45      	ldr	r2, [pc, #276]	; (80057d0 <HAL_GPIO_Init+0x300>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_GPIO_Init+0x1f2>
 80056be:	2304      	movs	r3, #4
 80056c0:	e008      	b.n	80056d4 <HAL_GPIO_Init+0x204>
 80056c2:	2307      	movs	r3, #7
 80056c4:	e006      	b.n	80056d4 <HAL_GPIO_Init+0x204>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e004      	b.n	80056d4 <HAL_GPIO_Init+0x204>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_Init+0x204>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_GPIO_Init+0x204>
 80056d2:	2300      	movs	r3, #0
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f002 0203 	and.w	r2, r2, #3
 80056da:	0092      	lsls	r2, r2, #2
 80056dc:	4093      	lsls	r3, r2
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e4:	4935      	ldr	r1, [pc, #212]	; (80057bc <HAL_GPIO_Init+0x2ec>)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3302      	adds	r3, #2
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056f2:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <HAL_GPIO_Init+0x304>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005716:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <HAL_GPIO_Init+0x304>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <HAL_GPIO_Init+0x304>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005740:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_GPIO_Init+0x304>)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005746:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <HAL_GPIO_Init+0x304>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <HAL_GPIO_Init+0x304>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005770:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_GPIO_Init+0x304>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005794:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <HAL_GPIO_Init+0x304>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	f67f aea2 	bls.w	80054ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40020000 	.word	0x40020000
 80057c4:	40020400 	.word	0x40020400
 80057c8:	40020800 	.word	0x40020800
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40013c00 	.word	0x40013c00

080057d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
 80057f4:	e001      	b.n	80057fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	807b      	strh	r3, [r7, #2]
 8005814:	4613      	mov	r3, r2
 8005816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005818:	787b      	ldrb	r3, [r7, #1]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005824:	e003      	b.n	800582e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	041a      	lsls	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	619a      	str	r2, [r3, #24]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d006      	beq.n	8005860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fc ffb8 	bl	80027d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40013c00 	.word	0x40013c00

0800586c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e12b      	b.n	8005ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f9e6 	bl	8004c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2224      	movs	r2, #36	; 0x24
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058d0:	f002 fe76 	bl	80085c0 <HAL_RCC_GetPCLK1Freq>
 80058d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4a81      	ldr	r2, [pc, #516]	; (8005ae0 <HAL_I2C_Init+0x274>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d807      	bhi.n	80058f0 <HAL_I2C_Init+0x84>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a80      	ldr	r2, [pc, #512]	; (8005ae4 <HAL_I2C_Init+0x278>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf94      	ite	ls
 80058e8:	2301      	movls	r3, #1
 80058ea:	2300      	movhi	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e006      	b.n	80058fe <HAL_I2C_Init+0x92>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a7d      	ldr	r2, [pc, #500]	; (8005ae8 <HAL_I2C_Init+0x27c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	bf94      	ite	ls
 80058f8:	2301      	movls	r3, #1
 80058fa:	2300      	movhi	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0e7      	b.n	8005ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a78      	ldr	r2, [pc, #480]	; (8005aec <HAL_I2C_Init+0x280>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	0c9b      	lsrs	r3, r3, #18
 8005910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a6a      	ldr	r2, [pc, #424]	; (8005ae0 <HAL_I2C_Init+0x274>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d802      	bhi.n	8005940 <HAL_I2C_Init+0xd4>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	3301      	adds	r3, #1
 800593e:	e009      	b.n	8005954 <HAL_I2C_Init+0xe8>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	4a69      	ldr	r2, [pc, #420]	; (8005af0 <HAL_I2C_Init+0x284>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	099b      	lsrs	r3, r3, #6
 8005952:	3301      	adds	r3, #1
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	430b      	orrs	r3, r1
 800595a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	495c      	ldr	r1, [pc, #368]	; (8005ae0 <HAL_I2C_Init+0x274>)
 8005970:	428b      	cmp	r3, r1
 8005972:	d819      	bhi.n	80059a8 <HAL_I2C_Init+0x13c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1e59      	subs	r1, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005988:	400b      	ands	r3, r1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_I2C_Init+0x138>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e59      	subs	r1, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fbb1 f3f3 	udiv	r3, r1, r3
 800599c:	3301      	adds	r3, #1
 800599e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a2:	e051      	b.n	8005a48 <HAL_I2C_Init+0x1dc>
 80059a4:	2304      	movs	r3, #4
 80059a6:	e04f      	b.n	8005a48 <HAL_I2C_Init+0x1dc>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d111      	bne.n	80059d4 <HAL_I2C_Init+0x168>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1e58      	subs	r0, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6859      	ldr	r1, [r3, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	440b      	add	r3, r1
 80059be:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c2:	3301      	adds	r3, #1
 80059c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e012      	b.n	80059fa <HAL_I2C_Init+0x18e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1e58      	subs	r0, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	0099      	lsls	r1, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ea:	3301      	adds	r3, #1
 80059ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf0c      	ite	eq
 80059f4:	2301      	moveq	r3, #1
 80059f6:	2300      	movne	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Init+0x196>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e022      	b.n	8005a48 <HAL_I2C_Init+0x1dc>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10e      	bne.n	8005a28 <HAL_I2C_Init+0x1bc>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1e58      	subs	r0, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	440b      	add	r3, r1
 8005a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a26:	e00f      	b.n	8005a48 <HAL_I2C_Init+0x1dc>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1e58      	subs	r0, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	0099      	lsls	r1, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	6809      	ldr	r1, [r1, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6911      	ldr	r1, [r2, #16]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68d2      	ldr	r2, [r2, #12]
 8005a82:	4311      	orrs	r1, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	000186a0 	.word	0x000186a0
 8005ae4:	001e847f 	.word	0x001e847f
 8005ae8:	003d08ff 	.word	0x003d08ff
 8005aec:	431bde83 	.word	0x431bde83
 8005af0:	10624dd3 	.word	0x10624dd3

08005af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	4608      	mov	r0, r1
 8005afe:	4611      	mov	r1, r2
 8005b00:	461a      	mov	r2, r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	817b      	strh	r3, [r7, #10]
 8005b06:	460b      	mov	r3, r1
 8005b08:	813b      	strh	r3, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b0e:	f7ff fbcd 	bl	80052ac <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	f040 80d9 	bne.w	8005cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2319      	movs	r3, #25
 8005b28:	2201      	movs	r2, #1
 8005b2a:	496d      	ldr	r1, [pc, #436]	; (8005ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fc7f 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e0cc      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_I2C_Mem_Write+0x56>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e0c5      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d007      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2221      	movs	r2, #33	; 0x21
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2240      	movs	r2, #64	; 0x40
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4a4d      	ldr	r2, [pc, #308]	; (8005ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bb2:	88f8      	ldrh	r0, [r7, #6]
 8005bb4:	893a      	ldrh	r2, [r7, #8]
 8005bb6:	8979      	ldrh	r1, [r7, #10]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fab6 	bl	8006134 <I2C_RequestMemoryWrite>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d052      	beq.n	8005c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e081      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fd00 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00d      	beq.n	8005bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d107      	bne.n	8005bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e06b      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	781a      	ldrb	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d11b      	bne.n	8005c74 <HAL_I2C_Mem_Write+0x180>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d017      	beq.n	8005c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1aa      	bne.n	8005bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fcec 	bl	800665e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00d      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d107      	bne.n	8005ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e016      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	00100002 	.word	0x00100002
 8005ce4:	ffff0000 	.word	0xffff0000

08005ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	817b      	strh	r3, [r7, #10]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	813b      	strh	r3, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d02:	f7ff fad3 	bl	80052ac <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	f040 8208 	bne.w	8006126 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2319      	movs	r3, #25
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	497b      	ldr	r1, [pc, #492]	; (8005f0c <HAL_I2C_Mem_Read+0x224>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fb85 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e1fb      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_I2C_Mem_Read+0x56>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e1f4      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d007      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2222      	movs	r2, #34	; 0x22
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2240      	movs	r2, #64	; 0x40
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a5b      	ldr	r2, [pc, #364]	; (8005f10 <HAL_I2C_Mem_Read+0x228>)
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005da6:	88f8      	ldrh	r0, [r7, #6]
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	8979      	ldrh	r1, [r7, #10]
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4603      	mov	r3, r0
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fa52 	bl	8006260 <I2C_RequestMemoryRead>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e1b0      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d113      	bne.n	8005df6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	623b      	str	r3, [r7, #32]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e184      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d11b      	bne.n	8005e36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e164      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d11b      	bne.n	8005e76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	e144      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e8c:	e138      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	f200 80f1 	bhi.w	800607a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d123      	bne.n	8005ee8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fc1b 	bl	80066e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e139      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ee6:	e10b      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d14e      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4906      	ldr	r1, [pc, #24]	; (8005f14 <HAL_I2C_Mem_Read+0x22c>)
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa98 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e10e      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
 8005f0a:	bf00      	nop
 8005f0c:	00100002 	.word	0x00100002
 8005f10:	ffff0000 	.word	0xffff0000
 8005f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f8c:	e0b8      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	4966      	ldr	r1, [pc, #408]	; (8006130 <HAL_I2C_Mem_Read+0x448>)
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fa49 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0bf      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	494f      	ldr	r1, [pc, #316]	; (8006130 <HAL_I2C_Mem_Read+0x448>)
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fa1b 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e091      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006078:	e042      	b.n	8006100 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fb2e 	bl	80066e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e04c      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d118      	bne.n	8006100 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f aec2 	bne.w	8005e8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006126:	2302      	movs	r3, #2
  }
}
 8006128:	4618      	mov	r0, r3
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	00010004 	.word	0x00010004

08006134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800615c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2200      	movs	r2, #0
 8006166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f960 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00d      	beq.n	8006192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006184:	d103      	bne.n	800618e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e05f      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	6a3a      	ldr	r2, [r7, #32]
 80061a6:	492d      	ldr	r1, [pc, #180]	; (800625c <I2C_RequestMemoryWrite+0x128>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f998 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e04c      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	6a39      	ldr	r1, [r7, #32]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa02 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d107      	bne.n	80061f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e02b      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006200:	893b      	ldrh	r3, [r7, #8]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	e021      	b.n	8006250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800620c:	893b      	ldrh	r3, [r7, #8]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b29b      	uxth	r3, r3
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621c:	6a39      	ldr	r1, [r7, #32]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f9dc 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	2b04      	cmp	r3, #4
 8006230:	d107      	bne.n	8006242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e005      	b.n	8006252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006246:	893b      	ldrh	r3, [r7, #8]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	00010002 	.word	0x00010002

08006260 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	460b      	mov	r3, r1
 8006274:	813b      	strh	r3, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f8c2 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c0:	d103      	bne.n	80062ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e0aa      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	4952      	ldr	r1, [pc, #328]	; (800642c <I2C_RequestMemoryRead+0x1cc>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f8fa 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e097      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f964 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b04      	cmp	r3, #4
 8006320:	d107      	bne.n	8006332 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e076      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	e021      	b.n	800638c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006348:	893b      	ldrh	r3, [r7, #8]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	b29b      	uxth	r3, r3
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	6a39      	ldr	r1, [r7, #32]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f93e 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b04      	cmp	r3, #4
 800636c:	d107      	bne.n	800637e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e050      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	6a39      	ldr	r1, [r7, #32]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f923 	bl	80065dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d107      	bne.n	80063b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e035      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f82b 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	d103      	bne.n	80063f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e013      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063fc:	897b      	ldrh	r3, [r7, #10]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	6a3a      	ldr	r2, [r7, #32]
 8006410:	4906      	ldr	r1, [pc, #24]	; (800642c <I2C_RequestMemoryRead+0x1cc>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f863 	bl	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	00010002 	.word	0x00010002

08006430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006440:	e025      	b.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d021      	beq.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fe ff2f 	bl	80052ac <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d116      	bne.n	800648e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e023      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d10d      	bne.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	43da      	mvns	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	e00c      	b.n	80064ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0b6      	beq.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ec:	e051      	b.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fc:	d123      	bne.n	8006546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e046      	b.n	80065d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d021      	beq.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654e:	f7fe fead 	bl	80052ac <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d302      	bcc.n	8006564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e020      	b.n	80065d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d10c      	bne.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	43da      	mvns	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e00b      	b.n	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	43da      	mvns	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4013      	ands	r3, r2
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d18d      	bne.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e8:	e02d      	b.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f8ce 	bl	800678c <I2C_IsAcknowledgeFailed>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e02d      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d021      	beq.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fe fe53 	bl	80052ac <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d116      	bne.n	8006646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e007      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d1ca      	bne.n	80065ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800666a:	e02d      	b.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f88d 	bl	800678c <I2C_IsAcknowledgeFailed>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e02d      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d021      	beq.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006684:	f7fe fe12 	bl	80052ac <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d302      	bcc.n	800669a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d116      	bne.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e007      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d1ca      	bne.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066ec:	e042      	b.n	8006774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d119      	bne.n	8006730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0210 	mvn.w	r2, #16
 8006704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e029      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006730:	f7fe fdbc 	bl	80052ac <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d302      	bcc.n	8006746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d116      	bne.n	8006774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e007      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d1b5      	bne.n	80066ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d11b      	bne.n	80067dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f043 0204 	orr.w	r2, r3, #4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ec:	b08f      	sub	sp, #60	; 0x3c
 80067ee:	af0a      	add	r7, sp, #40	; 0x28
 80067f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e10f      	b.n	8006a1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f00a f968 	bl	8010aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2203      	movs	r2, #3
 8006820:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f003 fcf7 	bl	800a22e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	603b      	str	r3, [r7, #0]
 8006846:	687e      	ldr	r6, [r7, #4]
 8006848:	466d      	mov	r5, sp
 800684a:	f106 0410 	add.w	r4, r6, #16
 800684e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800685a:	e885 0003 	stmia.w	r5, {r0, r1}
 800685e:	1d33      	adds	r3, r6, #4
 8006860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006862:	6838      	ldr	r0, [r7, #0]
 8006864:	f003 fbce 	bl	800a004 <USB_CoreInit>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e0d0      	b.n	8006a1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f003 fce5 	bl	800a250 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
 800688a:	e04a      	b.n	8006922 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800688c:	7bfa      	ldrb	r2, [r7, #15]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	333d      	adds	r3, #61	; 0x3d
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068a0:	7bfa      	ldrb	r2, [r7, #15]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	333c      	adds	r3, #60	; 0x3c
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068b4:	7bfa      	ldrb	r2, [r7, #15]
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	b298      	uxth	r0, r3
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	3344      	adds	r3, #68	; 0x44
 80068c8:	4602      	mov	r2, r0
 80068ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068cc:	7bfa      	ldrb	r2, [r7, #15]
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	3340      	adds	r3, #64	; 0x40
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068e0:	7bfa      	ldrb	r2, [r7, #15]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4613      	mov	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	3348      	adds	r3, #72	; 0x48
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068f4:	7bfa      	ldrb	r2, [r7, #15]
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	334c      	adds	r3, #76	; 0x4c
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006908:	7bfa      	ldrb	r2, [r7, #15]
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	3354      	adds	r3, #84	; 0x54
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	3301      	adds	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	7bfa      	ldrb	r2, [r7, #15]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3af      	bcc.n	800688c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
 8006930:	e044      	b.n	80069bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006932:	7bfa      	ldrb	r2, [r7, #15]
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006948:	7bfa      	ldrb	r2, [r7, #15]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800695a:	7bfa      	ldrb	r2, [r7, #15]
 800695c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800695e:	7bfa      	ldrb	r2, [r7, #15]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006974:	7bfa      	ldrb	r2, [r7, #15]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800698a:	7bfa      	ldrb	r2, [r7, #15]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069a0:	7bfa      	ldrb	r2, [r7, #15]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	3301      	adds	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d3b5      	bcc.n	8006932 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	687e      	ldr	r6, [r7, #4]
 80069ce:	466d      	mov	r5, sp
 80069d0:	f106 0410 	add.w	r4, r6, #16
 80069d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80069e4:	1d33      	adds	r3, r6, #4
 80069e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	f003 fc7d 	bl	800a2e8 <USB_DevInit>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e00d      	b.n	8006a1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f004 fdcc 	bl	800b5b2 <USB_DevDisconnect>

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_PCD_Start+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e020      	b.n	8006a82 <HAL_PCD_Start+0x5e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d109      	bne.n	8006a64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d005      	beq.n	8006a64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f003 fbcf 	bl	800a20c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f004 fd7c 	bl	800b570 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a8a:	b590      	push	{r4, r7, lr}
 8006a8c:	b08d      	sub	sp, #52	; 0x34
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f004 fe3a 	bl	800b71a <USB_GetMode>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 848a 	bne.w	80073c2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f004 fd9e 	bl	800b5f4 <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 8480 	beq.w	80073c0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f004 fd8b 	bl	800b5f4 <USB_ReadInterrupts>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d107      	bne.n	8006af8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f002 0202 	and.w	r2, r2, #2
 8006af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f004 fd79 	bl	800b5f4 <USB_ReadInterrupts>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d161      	bne.n	8006bd0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0210 	bic.w	r2, r2, #16
 8006b1a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	4413      	add	r3, r2
 8006b38:	3304      	adds	r3, #4
 8006b3a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	0c5b      	lsrs	r3, r3, #17
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d124      	bne.n	8006b92 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d035      	beq.n	8006bc0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	091b      	lsrs	r3, r3, #4
 8006b5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	6a38      	ldr	r0, [r7, #32]
 8006b68:	f004 fbb0 	bl	800b2cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b8a:	441a      	add	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	621a      	str	r2, [r3, #32]
 8006b90:	e016      	b.n	8006bc0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	0c5b      	lsrs	r3, r3, #17
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	2b06      	cmp	r3, #6
 8006b9c:	d110      	bne.n	8006bc0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6a38      	ldr	r0, [r7, #32]
 8006baa:	f004 fb8f 	bl	800b2cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bba:	441a      	add	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0210 	orr.w	r2, r2, #16
 8006bce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f004 fd0d 	bl	800b5f4 <USB_ReadInterrupts>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006be4:	f040 80a7 	bne.w	8006d36 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f004 fd12 	bl	800b61a <USB_ReadDevAllOutEpInterrupt>
 8006bf6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bf8:	e099      	b.n	8006d2e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 808e 	beq.w	8006d22 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f004 fd36 	bl	800b682 <USB_ReadDevOutEPInterrupt>
 8006c16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2e:	461a      	mov	r2, r3
 8006c30:	2301      	movs	r3, #1
 8006c32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fec2 	bl	80079c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	461a      	mov	r2, r3
 8006c54:	2308      	movs	r3, #8
 8006c56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 ff98 	bl	8007b90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	2310      	movs	r3, #16
 8006c7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d030      	beq.n	8006ce8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d109      	bne.n	8006ca6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ca4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca8:	4613      	mov	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f00a f807 	bl	8010ce4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2320      	movs	r3, #32
 8006d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	3301      	adds	r3, #1
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f47f af62 	bne.w	8006bfa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f004 fc5a 	bl	800b5f4 <USB_ReadInterrupts>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d4a:	f040 80db 	bne.w	8006f04 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f004 fc7b 	bl	800b64e <USB_ReadDevAllInEpInterrupt>
 8006d58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006d5e:	e0cd      	b.n	8006efc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80c2 	beq.w	8006ef0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f004 fca1 	bl	800b6be <USB_ReadDevInEPInterrupt>
 8006d7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d057      	beq.n	8006e38 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	2201      	movs	r2, #1
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	69f9      	ldr	r1, [r7, #28]
 8006da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da8:	4013      	ands	r3, r2
 8006daa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	461a      	mov	r2, r3
 8006dba:	2301      	movs	r3, #1
 8006dbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d132      	bne.n	8006e2c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	334c      	adds	r3, #76	; 0x4c
 8006dd6:	6819      	ldr	r1, [r3, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4403      	add	r3, r0
 8006de6:	3348      	adds	r3, #72	; 0x48
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4419      	add	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	4613      	mov	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4403      	add	r3, r0
 8006dfa:	334c      	adds	r3, #76	; 0x4c
 8006dfc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d113      	bne.n	8006e2c <HAL_PCD_IRQHandler+0x3a2>
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	3354      	adds	r3, #84	; 0x54
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d108      	bne.n	8006e2c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e24:	461a      	mov	r2, r3
 8006e26:	2101      	movs	r1, #1
 8006e28:	f004 fca8 	bl	800b77c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f009 fedb 	bl	8010bee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2308      	movs	r3, #8
 8006e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e86:	461a      	mov	r2, r3
 8006e88:	2340      	movs	r3, #64	; 0x40
 8006e8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d023      	beq.n	8006ede <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e98:	6a38      	ldr	r0, [r7, #32]
 8006e9a:	f003 fb89 	bl	800a5b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3338      	adds	r3, #56	; 0x38
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d108      	bne.n	8006ecc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f009 ff1e 	bl	8010d08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2302      	movs	r3, #2
 8006edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fcdb 	bl	80078a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af2e 	bne.w	8006d60 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f004 fb73 	bl	800b5f4 <USB_ReadInterrupts>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f18:	d122      	bne.n	8006f60 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d108      	bne.n	8006f4a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fec2 	bl	8007ccc <HAL_PCDEx_LPM_Callback>
 8006f48:	e002      	b.n	8006f50 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f009 febc 	bl	8010cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f004 fb45 	bl	800b5f4 <USB_ReadInterrupts>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f74:	d112      	bne.n	8006f9c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d102      	bne.n	8006f8c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f009 fe78 	bl	8010c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f004 fb27 	bl	800b5f4 <USB_ReadInterrupts>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb0:	f040 80b7 	bne.w	8007122 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2110      	movs	r1, #16
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f003 faee 	bl	800a5b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	e046      	b.n	8007068 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	440a      	add	r2, r1
 8007004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800700c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	461a      	mov	r2, r3
 800701c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007020:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007040:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	440a      	add	r2, r1
 8007058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007060:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	3301      	adds	r3, #1
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d3b3      	bcc.n	8006fda <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007084:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800709e:	f043 030b 	orr.w	r3, r3, #11
 80070a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b4:	f043 030b 	orr.w	r3, r3, #11
 80070b8:	6453      	str	r3, [r2, #68]	; 0x44
 80070ba:	e015      	b.n	80070e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80070d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e2:	f043 030b 	orr.w	r3, r3, #11
 80070e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800710c:	461a      	mov	r2, r3
 800710e:	f004 fb35 	bl	800b77c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695a      	ldr	r2, [r3, #20]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f004 fa64 	bl	800b5f4 <USB_ReadInterrupts>
 800712c:	4603      	mov	r3, r0
 800712e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007136:	d124      	bne.n	8007182 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f004 fafa 	bl	800b736 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f003 faaf 	bl	800a6aa <USB_GetDevSpeed>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681c      	ldr	r4, [r3, #0]
 8007158:	f001 fa26 	bl	80085a8 <HAL_RCC_GetHCLKFreq>
 800715c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007162:	b2db      	uxtb	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	4620      	mov	r0, r4
 8007168:	f002 ffae 	bl	800a0c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f009 fd66 	bl	8010c3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007180:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f004 fa34 	bl	800b5f4 <USB_ReadInterrupts>
 800718c:	4603      	mov	r3, r0
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b08      	cmp	r3, #8
 8007194:	d10a      	bne.n	80071ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f009 fd43 	bl	8010c22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695a      	ldr	r2, [r3, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f002 0208 	and.w	r2, r2, #8
 80071aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f004 fa1f 	bl	800b5f4 <USB_ReadInterrupts>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d122      	bne.n	8007206 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071cc:	2301      	movs	r3, #1
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
 80071d0:	e014      	b.n	80071fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d105      	bne.n	80071f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb27 	bl	8007844 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	3301      	adds	r3, #1
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007202:	429a      	cmp	r2, r3
 8007204:	d3e5      	bcc.n	80071d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f004 f9f2 	bl	800b5f4 <USB_ReadInterrupts>
 8007210:	4603      	mov	r3, r0
 8007212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d13b      	bne.n	8007294 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800721c:	2301      	movs	r3, #1
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
 8007220:	e02b      	b.n	800727a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	4613      	mov	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	440b      	add	r3, r1
 8007240:	3340      	adds	r3, #64	; 0x40
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d115      	bne.n	8007274 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007248:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800724a:	2b00      	cmp	r3, #0
 800724c:	da12      	bge.n	8007274 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	4613      	mov	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	333f      	adds	r3, #63	; 0x3f
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fae8 	bl	8007844 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	3301      	adds	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007280:	429a      	cmp	r2, r3
 8007282:	d3ce      	bcc.n	8007222 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f004 f9ab 	bl	800b5f4 <USB_ReadInterrupts>
 800729e:	4603      	mov	r3, r0
 80072a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a8:	d155      	bne.n	8007356 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072aa:	2301      	movs	r3, #1
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
 80072ae:	e045      	b.n	800733c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d12e      	bne.n	8007336 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da2b      	bge.n	8007336 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80072ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d121      	bne.n	8007336 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007304:	2201      	movs	r2, #1
 8007306:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007332:	6053      	str	r3, [r2, #4]
            break;
 8007334:	e007      	b.n	8007346 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	3301      	adds	r3, #1
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	429a      	cmp	r2, r3
 8007344:	d3b4      	bcc.n	80072b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f004 f94a 	bl	800b5f4 <USB_ReadInterrupts>
 8007360:	4603      	mov	r3, r0
 8007362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d10a      	bne.n	8007382 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f009 fcdd 	bl	8010d2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f004 f934 	bl	800b5f4 <USB_ReadInterrupts>
 800738c:	4603      	mov	r3, r0
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d115      	bne.n	80073c2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f009 fccd 	bl	8010d48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6859      	ldr	r1, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	e000      	b.n	80073c2 <HAL_PCD_IRQHandler+0x938>
      return;
 80073c0:	bf00      	nop
    }
  }
}
 80073c2:	3734      	adds	r7, #52	; 0x34
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd90      	pop	{r4, r7, pc}

080073c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_PCD_SetAddress+0x1a>
 80073de:	2302      	movs	r3, #2
 80073e0:	e013      	b.n	800740a <HAL_PCD_SetAddress+0x42>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f004 f892 	bl	800b524 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	461a      	mov	r2, r3
 8007420:	4603      	mov	r3, r0
 8007422:	70fb      	strb	r3, [r7, #3]
 8007424:	460b      	mov	r3, r1
 8007426:	803b      	strh	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007434:	2b00      	cmp	r3, #0
 8007436:	da0f      	bge.n	8007458 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	3338      	adds	r3, #56	; 0x38
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	3304      	adds	r3, #4
 800744e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	705a      	strb	r2, [r3, #1]
 8007456:	e00f      	b.n	8007478 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	f003 020f 	and.w	r2, r3, #15
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	3304      	adds	r3, #4
 8007470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	b2da      	uxtb	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007484:	883a      	ldrh	r2, [r7, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	78ba      	ldrb	r2, [r7, #2]
 800748e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b29a      	uxth	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074a2:	78bb      	ldrb	r3, [r7, #2]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d102      	bne.n	80074ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_PCD_EP_Open+0xaa>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e00e      	b.n	80074da <HAL_PCD_EP_Open+0xc8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68f9      	ldr	r1, [r7, #12]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f003 f912 	bl	800a6f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da0f      	bge.n	8007516 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	4613      	mov	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	3338      	adds	r3, #56	; 0x38
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4413      	add	r3, r2
 800750a:	3304      	adds	r3, #4
 800750c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	705a      	strb	r2, [r3, #1]
 8007514:	e00f      	b.n	8007536 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	f003 020f 	and.w	r2, r3, #15
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4413      	add	r3, r2
 800752c:	3304      	adds	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	b2da      	uxtb	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_PCD_EP_Close+0x6e>
 800754c:	2302      	movs	r3, #2
 800754e:	e00e      	b.n	800756e <HAL_PCD_EP_Close+0x8c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68f9      	ldr	r1, [r7, #12]
 800755e:	4618      	mov	r0, r3
 8007560:	f003 f950 	bl	800a804 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b086      	sub	sp, #24
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	460b      	mov	r3, r1
 8007584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d102      	bne.n	80075d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	f003 fc2f 	bl	800ae4c <USB_EP0StartXfer>
 80075ee:	e008      	b.n	8007602 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	6979      	ldr	r1, [r7, #20]
 80075fe:	f003 f9dd 	bl	800a9bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	f003 020f 	and.w	r2, r3, #15
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800762e:	681b      	ldr	r3, [r3, #0]
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	460b      	mov	r3, r1
 800764a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	f003 020f 	and.w	r2, r3, #15
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	3338      	adds	r3, #56	; 0x38
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	3304      	adds	r3, #4
 8007662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2200      	movs	r2, #0
 8007674:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2201      	movs	r2, #1
 800767a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	b2da      	uxtb	r2, r3
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d102      	bne.n	8007696 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	f003 fbcd 	bl	800ae4c <USB_EP0StartXfer>
 80076b2:	e008      	b.n	80076c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	f003 f97b 	bl	800a9bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d901      	bls.n	80076ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e050      	b.n	8007790 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da0f      	bge.n	8007716 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	f003 020f 	and.w	r2, r3, #15
 80076fc:	4613      	mov	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	3338      	adds	r3, #56	; 0x38
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	4413      	add	r3, r2
 800770a:	3304      	adds	r3, #4
 800770c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	705a      	strb	r2, [r3, #1]
 8007714:	e00d      	b.n	8007732 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	4613      	mov	r3, r2
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	3304      	adds	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_PCD_EP_SetStall+0x82>
 800774e:	2302      	movs	r3, #2
 8007750:	e01e      	b.n	8007790 <HAL_PCD_EP_SetStall+0xc0>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	4618      	mov	r0, r3
 8007762:	f003 fe0b 	bl	800b37c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	b2d9      	uxtb	r1, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007780:	461a      	mov	r2, r3
 8007782:	f003 fffb 	bl	800b77c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f003 020f 	and.w	r2, r3, #15
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d901      	bls.n	80077b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e042      	b.n	800783c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da0f      	bge.n	80077de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	3338      	adds	r3, #56	; 0x38
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	3304      	adds	r3, #4
 80077d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	705a      	strb	r2, [r3, #1]
 80077dc:	e00f      	b.n	80077fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	4613      	mov	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	3304      	adds	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_PCD_EP_ClrStall+0x86>
 800781a:	2302      	movs	r3, #2
 800781c:	e00e      	b.n	800783c <HAL_PCD_EP_ClrStall+0xa4>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	f003 fe13 	bl	800b458 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	da0c      	bge.n	8007872 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	f003 020f 	and.w	r2, r3, #15
 800785e:	4613      	mov	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	3338      	adds	r3, #56	; 0x38
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	4413      	add	r3, r2
 800786c:	3304      	adds	r3, #4
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e00c      	b.n	800788c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	3304      	adds	r3, #4
 800788a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	4618      	mov	r0, r3
 8007894:	f003 fc32 	bl	800b0fc <USB_EPStopXfer>
 8007898:	4603      	mov	r3, r0
 800789a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800789c:	7afb      	ldrb	r3, [r7, #11]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b08a      	sub	sp, #40	; 0x28
 80078aa:	af02      	add	r7, sp, #8
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	3338      	adds	r3, #56	; 0x38
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	3304      	adds	r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d901      	bls.n	80078de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e06c      	b.n	80079b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d902      	bls.n	80078fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3303      	adds	r3, #3
 80078fe:	089b      	lsrs	r3, r3, #2
 8007900:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007902:	e02b      	b.n	800795c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	429a      	cmp	r2, r3
 8007918:	d902      	bls.n	8007920 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	3303      	adds	r3, #3
 8007924:	089b      	lsrs	r3, r3, #2
 8007926:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6919      	ldr	r1, [r3, #16]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007938:	b2db      	uxtb	r3, r3
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4603      	mov	r3, r0
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f003 fc86 	bl	800b250 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	441a      	add	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	441a      	add	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	b29b      	uxth	r3, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	429a      	cmp	r2, r3
 8007970:	d809      	bhi.n	8007986 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1a      	ldr	r2, [r3, #32]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800797a:	429a      	cmp	r2, r3
 800797c:	d203      	bcs.n	8007986 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1be      	bne.n	8007904 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	429a      	cmp	r2, r3
 8007990:	d811      	bhi.n	80079b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	2201      	movs	r2, #1
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	43db      	mvns	r3, r3
 80079ac:	6939      	ldr	r1, [r7, #16]
 80079ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b2:	4013      	ands	r3, r2
 80079b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3720      	adds	r7, #32
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	333c      	adds	r3, #60	; 0x3c
 80079d8:	3304      	adds	r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d17b      	bne.n	8007aee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d015      	beq.n	8007a2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4a61      	ldr	r2, [pc, #388]	; (8007b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	f240 80b9 	bls.w	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80b3 	beq.w	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	461a      	mov	r2, r3
 8007a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	e0a7      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	461a      	mov	r2, r3
 8007a44:	2320      	movs	r3, #32
 8007a46:	6093      	str	r3, [r2, #8]
 8007a48:	e098      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8093 	bne.w	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	4a4b      	ldr	r2, [pc, #300]	; (8007b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d90f      	bls.n	8007a7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	461a      	mov	r2, r3
 8007a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a7a:	6093      	str	r3, [r2, #8]
 8007a7c:	e07e      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	3304      	adds	r3, #4
 8007a92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	0159      	lsls	r1, r3, #5
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	440b      	add	r3, r1
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d114      	bne.n	8007ae0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ac8:	461a      	mov	r2, r3
 8007aca:	2101      	movs	r1, #1
 8007acc:	f003 fe56 	bl	800b77c <USB_EP0_OutStart>
 8007ad0:	e006      	b.n	8007ae0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	691a      	ldr	r2, [r3, #16]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f009 f866 	bl	8010bb8 <HAL_PCD_DataOutStageCallback>
 8007aec:	e046      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d124      	bne.n	8007b40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b12:	6093      	str	r3, [r2, #8]
 8007b14:	e032      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2320      	movs	r3, #32
 8007b30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f009 f83d 	bl	8010bb8 <HAL_PCD_DataOutStageCallback>
 8007b3e:	e01d      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d114      	bne.n	8007b70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d108      	bne.n	8007b70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b68:	461a      	mov	r2, r3
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	f003 fe06 	bl	800b77c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f009 f81e 	bl	8010bb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	4f54300a 	.word	0x4f54300a
 8007b8c:	4f54310a 	.word	0x4f54310a

08007b90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	333c      	adds	r3, #60	; 0x3c
 8007ba8:	3304      	adds	r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d90e      	bls.n	8007be4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f008 ffd5 	bl	8010b94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d90c      	bls.n	8007c0c <PCD_EP_OutSetupPacket_int+0x7c>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d108      	bne.n	8007c0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c04:	461a      	mov	r2, r3
 8007c06:	2101      	movs	r1, #1
 8007c08:	f003 fdb8 	bl	800b77c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	4f54300a 	.word	0x4f54300a

08007c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c3a:	883b      	ldrh	r3, [r7, #0]
 8007c3c:	0419      	lsls	r1, r3, #16
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
 8007c48:	e028      	b.n	8007c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	e00d      	b.n	8007c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	3340      	adds	r3, #64	; 0x40
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	3301      	adds	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	7bfa      	ldrb	r2, [r7, #15]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3ec      	bcc.n	8007c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c84:	883b      	ldrh	r3, [r7, #0]
 8007c86:	0418      	lsls	r0, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6819      	ldr	r1, [r3, #0]
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4302      	orrs	r2, r0
 8007c94:	3340      	adds	r3, #64	; 0x40
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	887a      	ldrh	r2, [r7, #2]
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e267      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d075      	beq.n	8007dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d02:	4b88      	ldr	r3, [pc, #544]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 030c 	and.w	r3, r3, #12
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d00c      	beq.n	8007d28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d0e:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d112      	bne.n	8007d40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d1a:	4b82      	ldr	r3, [pc, #520]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d26:	d10b      	bne.n	8007d40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d28:	4b7e      	ldr	r3, [pc, #504]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05b      	beq.n	8007dec <HAL_RCC_OscConfig+0x108>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d157      	bne.n	8007dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e242      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d106      	bne.n	8007d58 <HAL_RCC_OscConfig+0x74>
 8007d4a:	4b76      	ldr	r3, [pc, #472]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a75      	ldr	r2, [pc, #468]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e01d      	b.n	8007d94 <HAL_RCC_OscConfig+0xb0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d60:	d10c      	bne.n	8007d7c <HAL_RCC_OscConfig+0x98>
 8007d62:	4b70      	ldr	r3, [pc, #448]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a6f      	ldr	r2, [pc, #444]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	4b6d      	ldr	r3, [pc, #436]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6c      	ldr	r2, [pc, #432]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	e00b      	b.n	8007d94 <HAL_RCC_OscConfig+0xb0>
 8007d7c:	4b69      	ldr	r3, [pc, #420]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a68      	ldr	r2, [pc, #416]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	4b66      	ldr	r3, [pc, #408]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a65      	ldr	r2, [pc, #404]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d9c:	f7fd fa86 	bl	80052ac <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da4:	f7fd fa82 	bl	80052ac <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b64      	cmp	r3, #100	; 0x64
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e207      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007db6:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0xc0>
 8007dc2:	e014      	b.n	8007dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc4:	f7fd fa72 	bl	80052ac <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dcc:	f7fd fa6e 	bl	80052ac <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b64      	cmp	r3, #100	; 0x64
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e1f3      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dde:	4b51      	ldr	r3, [pc, #324]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f0      	bne.n	8007dcc <HAL_RCC_OscConfig+0xe8>
 8007dea:	e000      	b.n	8007dee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d063      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dfa:	4b4a      	ldr	r3, [pc, #296]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 030c 	and.w	r3, r3, #12
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e06:	4b47      	ldr	r3, [pc, #284]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d11c      	bne.n	8007e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e12:	4b44      	ldr	r3, [pc, #272]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1e:	4b41      	ldr	r3, [pc, #260]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_RCC_OscConfig+0x152>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d001      	beq.n	8007e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e1c7      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e36:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4937      	ldr	r1, [pc, #220]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e4a:	e03a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d020      	beq.n	8007e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e54:	4b34      	ldr	r3, [pc, #208]	; (8007f28 <HAL_RCC_OscConfig+0x244>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5a:	f7fd fa27 	bl	80052ac <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e62:	f7fd fa23 	bl	80052ac <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e1a8      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e74:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0f0      	beq.n	8007e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e80:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4925      	ldr	r1, [pc, #148]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	600b      	str	r3, [r1, #0]
 8007e94:	e015      	b.n	8007ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <HAL_RCC_OscConfig+0x244>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9c:	f7fd fa06 	bl	80052ac <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea4:	f7fd fa02 	bl	80052ac <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e187      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eb6:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1f0      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d036      	beq.n	8007f3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d016      	beq.n	8007f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <HAL_RCC_OscConfig+0x248>)
 8007ed8:	2201      	movs	r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007edc:	f7fd f9e6 	bl	80052ac <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ee4:	f7fd f9e2 	bl	80052ac <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e167      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_RCC_OscConfig+0x240>)
 8007ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f0      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x200>
 8007f02:	e01b      	b.n	8007f3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f04:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <HAL_RCC_OscConfig+0x248>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f0a:	f7fd f9cf 	bl	80052ac <HAL_GetTick>
 8007f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f10:	e00e      	b.n	8007f30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f12:	f7fd f9cb 	bl	80052ac <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d907      	bls.n	8007f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e150      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
 8007f24:	40023800 	.word	0x40023800
 8007f28:	42470000 	.word	0x42470000
 8007f2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f30:	4b88      	ldr	r3, [pc, #544]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1ea      	bne.n	8007f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8097 	beq.w	8008078 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f4e:	4b81      	ldr	r3, [pc, #516]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10f      	bne.n	8007f7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	4b7d      	ldr	r3, [pc, #500]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	4a7c      	ldr	r2, [pc, #496]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f68:	6413      	str	r3, [r2, #64]	; 0x40
 8007f6a:	4b7a      	ldr	r3, [pc, #488]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f72:	60bb      	str	r3, [r7, #8]
 8007f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f7a:	4b77      	ldr	r3, [pc, #476]	; (8008158 <HAL_RCC_OscConfig+0x474>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d118      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f86:	4b74      	ldr	r3, [pc, #464]	; (8008158 <HAL_RCC_OscConfig+0x474>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a73      	ldr	r2, [pc, #460]	; (8008158 <HAL_RCC_OscConfig+0x474>)
 8007f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f92:	f7fd f98b 	bl	80052ac <HAL_GetTick>
 8007f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f98:	e008      	b.n	8007fac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f9a:	f7fd f987 	bl	80052ac <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d901      	bls.n	8007fac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e10c      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fac:	4b6a      	ldr	r3, [pc, #424]	; (8008158 <HAL_RCC_OscConfig+0x474>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0f0      	beq.n	8007f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d106      	bne.n	8007fce <HAL_RCC_OscConfig+0x2ea>
 8007fc0:	4b64      	ldr	r3, [pc, #400]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	4a63      	ldr	r2, [pc, #396]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fc6:	f043 0301 	orr.w	r3, r3, #1
 8007fca:	6713      	str	r3, [r2, #112]	; 0x70
 8007fcc:	e01c      	b.n	8008008 <HAL_RCC_OscConfig+0x324>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2b05      	cmp	r3, #5
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x30c>
 8007fd6:	4b5f      	ldr	r3, [pc, #380]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	4a5e      	ldr	r2, [pc, #376]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fdc:	f043 0304 	orr.w	r3, r3, #4
 8007fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe2:	4b5c      	ldr	r3, [pc, #368]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	4a5b      	ldr	r2, [pc, #364]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	6713      	str	r3, [r2, #112]	; 0x70
 8007fee:	e00b      	b.n	8008008 <HAL_RCC_OscConfig+0x324>
 8007ff0:	4b58      	ldr	r3, [pc, #352]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	4a57      	ldr	r2, [pc, #348]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffc:	4b55      	ldr	r3, [pc, #340]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	4a54      	ldr	r2, [pc, #336]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8008002:	f023 0304 	bic.w	r3, r3, #4
 8008006:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d015      	beq.n	800803c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008010:	f7fd f94c 	bl	80052ac <HAL_GetTick>
 8008014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008016:	e00a      	b.n	800802e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008018:	f7fd f948 	bl	80052ac <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f241 3288 	movw	r2, #5000	; 0x1388
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e0cb      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800802e:	4b49      	ldr	r3, [pc, #292]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0ee      	beq.n	8008018 <HAL_RCC_OscConfig+0x334>
 800803a:	e014      	b.n	8008066 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800803c:	f7fd f936 	bl	80052ac <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008042:	e00a      	b.n	800805a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008044:	f7fd f932 	bl	80052ac <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e0b5      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800805a:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1ee      	bne.n	8008044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d105      	bne.n	8008078 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800806c:	4b39      	ldr	r3, [pc, #228]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	4a38      	ldr	r2, [pc, #224]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8008072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008076:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80a1 	beq.w	80081c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008082:	4b34      	ldr	r3, [pc, #208]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 030c 	and.w	r3, r3, #12
 800808a:	2b08      	cmp	r3, #8
 800808c:	d05c      	beq.n	8008148 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d141      	bne.n	800811a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008096:	4b31      	ldr	r3, [pc, #196]	; (800815c <HAL_RCC_OscConfig+0x478>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800809c:	f7fd f906 	bl	80052ac <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080a4:	f7fd f902 	bl	80052ac <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e087      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080b6:	4b27      	ldr	r3, [pc, #156]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f0      	bne.n	80080a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69da      	ldr	r2, [r3, #28]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	019b      	lsls	r3, r3, #6
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	3b01      	subs	r3, #1
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	061b      	lsls	r3, r3, #24
 80080e6:	491b      	ldr	r1, [pc, #108]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <HAL_RCC_OscConfig+0x478>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f2:	f7fd f8db 	bl	80052ac <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fa:	f7fd f8d7 	bl	80052ac <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e05c      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x416>
 8008118:	e054      	b.n	80081c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <HAL_RCC_OscConfig+0x478>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008120:	f7fd f8c4 	bl	80052ac <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008128:	f7fd f8c0 	bl	80052ac <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e045      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_OscConfig+0x470>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x444>
 8008146:	e03d      	b.n	80081c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d107      	bne.n	8008160 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e038      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
 8008154:	40023800 	.word	0x40023800
 8008158:	40007000 	.word	0x40007000
 800815c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008160:	4b1b      	ldr	r3, [pc, #108]	; (80081d0 <HAL_RCC_OscConfig+0x4ec>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d028      	beq.n	80081c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008178:	429a      	cmp	r2, r3
 800817a:	d121      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008186:	429a      	cmp	r2, r3
 8008188:	d11a      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008198:	4293      	cmp	r3, r2
 800819a:	d111      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	3b01      	subs	r3, #1
 80081aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d107      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081bc:	429a      	cmp	r2, r3
 80081be:	d001      	beq.n	80081c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40023800 	.word	0x40023800

080081d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0cc      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081e8:	4b68      	ldr	r3, [pc, #416]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d90c      	bls.n	8008210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f6:	4b65      	ldr	r3, [pc, #404]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081fe:	4b63      	ldr	r3, [pc, #396]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d001      	beq.n	8008210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e0b8      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d020      	beq.n	800825e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008228:	4b59      	ldr	r3, [pc, #356]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	4a58      	ldr	r2, [pc, #352]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 800822e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008240:	4b53      	ldr	r3, [pc, #332]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	4a52      	ldr	r2, [pc, #328]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800824a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800824c:	4b50      	ldr	r3, [pc, #320]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	494d      	ldr	r1, [pc, #308]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	4313      	orrs	r3, r2
 800825c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d044      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d107      	bne.n	8008282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008272:	4b47      	ldr	r3, [pc, #284]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d119      	bne.n	80082b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e07f      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b02      	cmp	r3, #2
 8008288:	d003      	beq.n	8008292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800828e:	2b03      	cmp	r3, #3
 8008290:	d107      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008292:	4b3f      	ldr	r3, [pc, #252]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e06f      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a2:	4b3b      	ldr	r3, [pc, #236]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e067      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082b2:	4b37      	ldr	r3, [pc, #220]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f023 0203 	bic.w	r2, r3, #3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4934      	ldr	r1, [pc, #208]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082c4:	f7fc fff2 	bl	80052ac <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082cc:	f7fc ffee 	bl	80052ac <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e04f      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e2:	4b2b      	ldr	r3, [pc, #172]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 020c 	and.w	r2, r3, #12
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d1eb      	bne.n	80082cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082f4:	4b25      	ldr	r3, [pc, #148]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d20c      	bcs.n	800831c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008302:	4b22      	ldr	r3, [pc, #136]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800830a:	4b20      	ldr	r3, [pc, #128]	; (800838c <HAL_RCC_ClockConfig+0x1b8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d001      	beq.n	800831c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e032      	b.n	8008382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008328:	4b19      	ldr	r3, [pc, #100]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4916      	ldr	r1, [pc, #88]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	4313      	orrs	r3, r2
 8008338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008346:	4b12      	ldr	r3, [pc, #72]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	490e      	ldr	r1, [pc, #56]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	4313      	orrs	r3, r2
 8008358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800835a:	f000 f821 	bl	80083a0 <HAL_RCC_GetSysClockFreq>
 800835e:	4602      	mov	r2, r0
 8008360:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	091b      	lsrs	r3, r3, #4
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	490a      	ldr	r1, [pc, #40]	; (8008394 <HAL_RCC_ClockConfig+0x1c0>)
 800836c:	5ccb      	ldrb	r3, [r1, r3]
 800836e:	fa22 f303 	lsr.w	r3, r2, r3
 8008372:	4a09      	ldr	r2, [pc, #36]	; (8008398 <HAL_RCC_ClockConfig+0x1c4>)
 8008374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <HAL_RCC_ClockConfig+0x1c8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f7fc fda6 	bl	8004ecc <HAL_InitTick>

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40023c00 	.word	0x40023c00
 8008390:	40023800 	.word	0x40023800
 8008394:	08013aa0 	.word	0x08013aa0
 8008398:	200005c4 	.word	0x200005c4
 800839c:	200005e0 	.word	0x200005e0

080083a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a4:	b094      	sub	sp, #80	; 0x50
 80083a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	647b      	str	r3, [r7, #68]	; 0x44
 80083ac:	2300      	movs	r3, #0
 80083ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b0:	2300      	movs	r3, #0
 80083b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083b8:	4b79      	ldr	r3, [pc, #484]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f003 030c 	and.w	r3, r3, #12
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d00d      	beq.n	80083e0 <HAL_RCC_GetSysClockFreq+0x40>
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	f200 80e1 	bhi.w	800858c <HAL_RCC_GetSysClockFreq+0x1ec>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <HAL_RCC_GetSysClockFreq+0x34>
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d003      	beq.n	80083da <HAL_RCC_GetSysClockFreq+0x3a>
 80083d2:	e0db      	b.n	800858c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083d4:	4b73      	ldr	r3, [pc, #460]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80083d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80083d8:	e0db      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083da:	4b72      	ldr	r3, [pc, #456]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80083dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083de:	e0d8      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083e0:	4b6f      	ldr	r3, [pc, #444]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083ea:	4b6d      	ldr	r3, [pc, #436]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d063      	beq.n	80084be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083f6:	4b6a      	ldr	r3, [pc, #424]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	099b      	lsrs	r3, r3, #6
 80083fc:	2200      	movs	r2, #0
 80083fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008400:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008408:	633b      	str	r3, [r7, #48]	; 0x30
 800840a:	2300      	movs	r3, #0
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
 800840e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	f04f 0000 	mov.w	r0, #0
 800841a:	f04f 0100 	mov.w	r1, #0
 800841e:	0159      	lsls	r1, r3, #5
 8008420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008424:	0150      	lsls	r0, r2, #5
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4621      	mov	r1, r4
 800842c:	1a51      	subs	r1, r2, r1
 800842e:	6139      	str	r1, [r7, #16]
 8008430:	4629      	mov	r1, r5
 8008432:	eb63 0301 	sbc.w	r3, r3, r1
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008444:	4659      	mov	r1, fp
 8008446:	018b      	lsls	r3, r1, #6
 8008448:	4651      	mov	r1, sl
 800844a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800844e:	4651      	mov	r1, sl
 8008450:	018a      	lsls	r2, r1, #6
 8008452:	4651      	mov	r1, sl
 8008454:	ebb2 0801 	subs.w	r8, r2, r1
 8008458:	4659      	mov	r1, fp
 800845a:	eb63 0901 	sbc.w	r9, r3, r1
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800846a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800846e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008472:	4690      	mov	r8, r2
 8008474:	4699      	mov	r9, r3
 8008476:	4623      	mov	r3, r4
 8008478:	eb18 0303 	adds.w	r3, r8, r3
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	462b      	mov	r3, r5
 8008480:	eb49 0303 	adc.w	r3, r9, r3
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008492:	4629      	mov	r1, r5
 8008494:	028b      	lsls	r3, r1, #10
 8008496:	4621      	mov	r1, r4
 8008498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800849c:	4621      	mov	r1, r4
 800849e:	028a      	lsls	r2, r1, #10
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a6:	2200      	movs	r2, #0
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b0:	f7f8 fa04 	bl	80008bc <__aeabi_uldivmod>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4613      	mov	r3, r2
 80084ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084bc:	e058      	b.n	8008570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084be:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	099b      	lsrs	r3, r3, #6
 80084c4:	2200      	movs	r2, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	4611      	mov	r1, r2
 80084ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084ce:	623b      	str	r3, [r7, #32]
 80084d0:	2300      	movs	r3, #0
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
 80084d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	f04f 0000 	mov.w	r0, #0
 80084e0:	f04f 0100 	mov.w	r1, #0
 80084e4:	0159      	lsls	r1, r3, #5
 80084e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084ea:	0150      	lsls	r0, r2, #5
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4641      	mov	r1, r8
 80084f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800850c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008510:	ebb2 040a 	subs.w	r4, r2, sl
 8008514:	eb63 050b 	sbc.w	r5, r3, fp
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	00eb      	lsls	r3, r5, #3
 8008522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008526:	00e2      	lsls	r2, r4, #3
 8008528:	4614      	mov	r4, r2
 800852a:	461d      	mov	r5, r3
 800852c:	4643      	mov	r3, r8
 800852e:	18e3      	adds	r3, r4, r3
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	464b      	mov	r3, r9
 8008534:	eb45 0303 	adc.w	r3, r5, r3
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008546:	4629      	mov	r1, r5
 8008548:	028b      	lsls	r3, r1, #10
 800854a:	4621      	mov	r1, r4
 800854c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008550:	4621      	mov	r1, r4
 8008552:	028a      	lsls	r2, r1, #10
 8008554:	4610      	mov	r0, r2
 8008556:	4619      	mov	r1, r3
 8008558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855a:	2200      	movs	r2, #0
 800855c:	61bb      	str	r3, [r7, #24]
 800855e:	61fa      	str	r2, [r7, #28]
 8008560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008564:	f7f8 f9aa 	bl	80008bc <__aeabi_uldivmod>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4613      	mov	r3, r2
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	3301      	adds	r3, #1
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	fbb2 f3f3 	udiv	r3, r2, r3
 8008588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800858a:	e002      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800858e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008594:	4618      	mov	r0, r3
 8008596:	3750      	adds	r7, #80	; 0x50
 8008598:	46bd      	mov	sp, r7
 800859a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800859e:	bf00      	nop
 80085a0:	40023800 	.word	0x40023800
 80085a4:	00f42400 	.word	0x00f42400

080085a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085a8:	b480      	push	{r7}
 80085aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085ac:	4b03      	ldr	r3, [pc, #12]	; (80085bc <HAL_RCC_GetHCLKFreq+0x14>)
 80085ae:	681b      	ldr	r3, [r3, #0]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200005c4 	.word	0x200005c4

080085c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085c4:	f7ff fff0 	bl	80085a8 <HAL_RCC_GetHCLKFreq>
 80085c8:	4602      	mov	r2, r0
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	0a9b      	lsrs	r3, r3, #10
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	4903      	ldr	r1, [pc, #12]	; (80085e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085d6:	5ccb      	ldrb	r3, [r1, r3]
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40023800 	.word	0x40023800
 80085e4:	08013ab0 	.word	0x08013ab0

080085e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	220f      	movs	r2, #15
 80085f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_RCC_GetClockConfig+0x5c>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0203 	and.w	r2, r3, #3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <HAL_RCC_GetClockConfig+0x5c>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <HAL_RCC_GetClockConfig+0x5c>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <HAL_RCC_GetClockConfig+0x5c>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <HAL_RCC_GetClockConfig+0x60>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0207 	and.w	r2, r3, #7
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40023800 	.word	0x40023800
 8008648:	40023c00 	.word	0x40023c00

0800864c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e07b      	b.n	8008756 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d108      	bne.n	8008678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800866e:	d009      	beq.n	8008684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	61da      	str	r2, [r3, #28]
 8008676:	e005      	b.n	8008684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fc fb28 	bl	8004cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086fe:	431a      	orrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008708:	ea42 0103 	orr.w	r1, r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	0c1b      	lsrs	r3, r3, #16
 8008722:	f003 0104 	and.w	r1, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	f003 0210 	and.w	r2, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_SPI_Transmit+0x22>
 800877c:	2302      	movs	r3, #2
 800877e:	e126      	b.n	80089ce <HAL_SPI_Transmit+0x270>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008788:	f7fc fd90 	bl	80052ac <HAL_GetTick>
 800878c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b01      	cmp	r3, #1
 800879c:	d002      	beq.n	80087a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800879e:	2302      	movs	r3, #2
 80087a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087a2:	e10b      	b.n	80089bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_SPI_Transmit+0x52>
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087b4:	e102      	b.n	80089bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2203      	movs	r2, #3
 80087ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fc:	d10f      	bne.n	800881e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800880c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800881c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d007      	beq.n	800883c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800883a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008844:	d14b      	bne.n	80088de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_SPI_Transmit+0xf6>
 800884e:	8afb      	ldrh	r3, [r7, #22]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d13e      	bne.n	80088d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	1c9a      	adds	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008878:	e02b      	b.n	80088d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b02      	cmp	r3, #2
 8008886:	d112      	bne.n	80088ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	881a      	ldrh	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	1c9a      	adds	r2, r3, #2
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80088ac:	e011      	b.n	80088d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ae:	f7fc fcfd 	bl	80052ac <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d803      	bhi.n	80088c6 <HAL_SPI_Transmit+0x168>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c4:	d102      	bne.n	80088cc <HAL_SPI_Transmit+0x16e>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088d0:	e074      	b.n	80089bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1ce      	bne.n	800887a <HAL_SPI_Transmit+0x11c>
 80088dc:	e04c      	b.n	8008978 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_SPI_Transmit+0x18e>
 80088e6:	8afb      	ldrh	r3, [r7, #22]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d140      	bne.n	800896e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008912:	e02c      	b.n	800896e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b02      	cmp	r3, #2
 8008920:	d113      	bne.n	800894a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	330c      	adds	r3, #12
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	86da      	strh	r2, [r3, #54]	; 0x36
 8008948:	e011      	b.n	800896e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800894a:	f7fc fcaf 	bl	80052ac <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d803      	bhi.n	8008962 <HAL_SPI_Transmit+0x204>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d102      	bne.n	8008968 <HAL_SPI_Transmit+0x20a>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800896c:	e026      	b.n	80089bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1cd      	bne.n	8008914 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fa55 	bl	8008e2c <SPI_EndRxTxTransaction>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008996:	2300      	movs	r3, #0
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	77fb      	strb	r3, [r7, #31]
 80089b8:	e000      	b.n	80089bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80089ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3720      	adds	r7, #32
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b08c      	sub	sp, #48	; 0x30
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089e4:	2301      	movs	r3, #1
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_SPI_TransmitReceive+0x26>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e18a      	b.n	8008d12 <HAL_SPI_TransmitReceive+0x33c>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a04:	f7fc fc52 	bl	80052ac <HAL_GetTick>
 8008a08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a1a:	887b      	ldrh	r3, [r7, #2]
 8008a1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d00f      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x70>
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a2c:	d107      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <HAL_SPI_TransmitReceive+0x68>
 8008a36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d003      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a44:	e15b      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <HAL_SPI_TransmitReceive+0x82>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_SPI_TransmitReceive+0x82>
 8008a52:	887b      	ldrh	r3, [r7, #2]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a5e:	e14e      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d003      	beq.n	8008a74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2205      	movs	r2, #5
 8008a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	887a      	ldrh	r2, [r7, #2]
 8008a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	887a      	ldrh	r2, [r7, #2]
 8008a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	887a      	ldrh	r2, [r7, #2]
 8008a96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	887a      	ldrh	r2, [r7, #2]
 8008a9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	d007      	beq.n	8008ac8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad0:	d178      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <HAL_SPI_TransmitReceive+0x10a>
 8008ada:	8b7b      	ldrh	r3, [r7, #26]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d166      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	881a      	ldrh	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	1c9a      	adds	r2, r3, #2
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b04:	e053      	b.n	8008bae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d11b      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x176>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d016      	beq.n	8008b4c <HAL_SPI_TransmitReceive+0x176>
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d113      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	881a      	ldrh	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	1c9a      	adds	r2, r3, #2
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d119      	bne.n	8008b8e <HAL_SPI_TransmitReceive+0x1b8>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d014      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	b292      	uxth	r2, r2
 8008b70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	1c9a      	adds	r2, r3, #2
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b8e:	f7fc fb8d 	bl	80052ac <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d807      	bhi.n	8008bae <HAL_SPI_TransmitReceive+0x1d8>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d003      	beq.n	8008bae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bac:	e0a7      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1a6      	bne.n	8008b06 <HAL_SPI_TransmitReceive+0x130>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1a1      	bne.n	8008b06 <HAL_SPI_TransmitReceive+0x130>
 8008bc2:	e07c      	b.n	8008cbe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <HAL_SPI_TransmitReceive+0x1fc>
 8008bcc:	8b7b      	ldrh	r3, [r7, #26]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d16b      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	330c      	adds	r3, #12
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf8:	e057      	b.n	8008caa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d11c      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x26c>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d017      	beq.n	8008c42 <HAL_SPI_TransmitReceive+0x26c>
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d114      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d119      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x2ae>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d014      	beq.n	8008c84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c80:	2301      	movs	r3, #1
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c84:	f7fc fb12 	bl	80052ac <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d803      	bhi.n	8008c9c <HAL_SPI_TransmitReceive+0x2c6>
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9a:	d102      	bne.n	8008ca2 <HAL_SPI_TransmitReceive+0x2cc>
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ca8:	e029      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1a2      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x224>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d19d      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 f8b2 	bl	8008e2c <SPI_EndRxTxTransaction>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008cda:	e010      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	e000      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3730      	adds	r7, #48	; 0x30
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d2c:	f7fc fabe 	bl	80052ac <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4413      	add	r3, r2
 8008d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d3c:	f7fc fab6 	bl	80052ac <HAL_GetTick>
 8008d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d42:	4b39      	ldr	r3, [pc, #228]	; (8008e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	015b      	lsls	r3, r3, #5
 8008d48:	0d1b      	lsrs	r3, r3, #20
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d52:	e054      	b.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d050      	beq.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d5c:	f7fc faa6 	bl	80052ac <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d902      	bls.n	8008d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d13d      	bne.n	8008dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d8a:	d111      	bne.n	8008db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d94:	d004      	beq.n	8008da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9e:	d107      	bne.n	8008db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db8:	d10f      	bne.n	8008dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e017      	b.n	8008e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4013      	ands	r3, r2
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d19b      	bne.n	8008d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3720      	adds	r7, #32
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	200005c4 	.word	0x200005c4

08008e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e38:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <SPI_EndRxTxTransaction+0x7c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <SPI_EndRxTxTransaction+0x80>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	0d5b      	lsrs	r3, r3, #21
 8008e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e56:	d112      	bne.n	8008e7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2180      	movs	r1, #128	; 0x80
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff ff5a 	bl	8008d1c <SPI_WaitFlagStateUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e72:	f043 0220 	orr.w	r2, r3, #32
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e00f      	b.n	8008e9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e94:	2b80      	cmp	r3, #128	; 0x80
 8008e96:	d0f2      	beq.n	8008e7e <SPI_EndRxTxTransaction+0x52>
 8008e98:	e000      	b.n	8008e9c <SPI_EndRxTxTransaction+0x70>
        break;
 8008e9a:	bf00      	nop
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200005c4 	.word	0x200005c4
 8008eac:	165e9f81 	.word	0x165e9f81

08008eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e041      	b.n	8008f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fb ff8a 	bl	8004df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f000 fd3a 	bl	8009968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d001      	beq.n	8008f68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e03c      	b.n	8008fe2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1e      	ldr	r2, [pc, #120]	; (8008ff0 <HAL_TIM_Base_Start+0xa0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d018      	beq.n	8008fac <HAL_TIM_Base_Start+0x5c>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f82:	d013      	beq.n	8008fac <HAL_TIM_Base_Start+0x5c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1a      	ldr	r2, [pc, #104]	; (8008ff4 <HAL_TIM_Base_Start+0xa4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00e      	beq.n	8008fac <HAL_TIM_Base_Start+0x5c>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a19      	ldr	r2, [pc, #100]	; (8008ff8 <HAL_TIM_Base_Start+0xa8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <HAL_TIM_Base_Start+0x5c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <HAL_TIM_Base_Start+0xac>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d004      	beq.n	8008fac <HAL_TIM_Base_Start+0x5c>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <HAL_TIM_Base_Start+0xb0>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d111      	bne.n	8008fd0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b06      	cmp	r3, #6
 8008fbc:	d010      	beq.n	8008fe0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0201 	orr.w	r2, r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fce:	e007      	b.n	8008fe0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	40000400 	.word	0x40000400
 8008ff8:	40000800 	.word	0x40000800
 8008ffc:	40000c00 	.word	0x40000c00
 8009000:	40014000 	.word	0x40014000

08009004 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	f241 1311 	movw	r3, #4369	; 0x1111
 8009016:	4013      	ands	r3, r2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10f      	bne.n	800903c <HAL_TIM_Base_Stop+0x38>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	f240 4344 	movw	r3, #1092	; 0x444
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d107      	bne.n	800903c <HAL_TIM_Base_Stop+0x38>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 0201 	bic.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d001      	beq.n	800906c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e044      	b.n	80090f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0201 	orr.w	r2, r2, #1
 8009082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <HAL_TIM_Base_Start_IT+0xb0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d018      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x6c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009096:	d013      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x6c>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a1a      	ldr	r2, [pc, #104]	; (8009108 <HAL_TIM_Base_Start_IT+0xb4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00e      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x6c>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a19      	ldr	r2, [pc, #100]	; (800910c <HAL_TIM_Base_Start_IT+0xb8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d009      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x6c>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a17      	ldr	r2, [pc, #92]	; (8009110 <HAL_TIM_Base_Start_IT+0xbc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d004      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x6c>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a16      	ldr	r2, [pc, #88]	; (8009114 <HAL_TIM_Base_Start_IT+0xc0>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d111      	bne.n	80090e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b06      	cmp	r3, #6
 80090d0:	d010      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0201 	orr.w	r2, r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e2:	e007      	b.n	80090f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	40010000 	.word	0x40010000
 8009108:	40000400 	.word	0x40000400
 800910c:	40000800 	.word	0x40000800
 8009110:	40000c00 	.word	0x40000c00
 8009114:	40014000 	.word	0x40014000

08009118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e041      	b.n	80091ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f839 	bl	80091b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fc06 	bl	8009968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <HAL_TIM_PWM_Start+0x24>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	e022      	b.n	8009236 <HAL_TIM_PWM_Start+0x6a>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d109      	bne.n	800920a <HAL_TIM_PWM_Start+0x3e>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	bf14      	ite	ne
 8009202:	2301      	movne	r3, #1
 8009204:	2300      	moveq	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	e015      	b.n	8009236 <HAL_TIM_PWM_Start+0x6a>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d109      	bne.n	8009224 <HAL_TIM_PWM_Start+0x58>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	bf14      	ite	ne
 800921c:	2301      	movne	r3, #1
 800921e:	2300      	moveq	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	e008      	b.n	8009236 <HAL_TIM_PWM_Start+0x6a>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b01      	cmp	r3, #1
 800922e:	bf14      	ite	ne
 8009230:	2301      	movne	r3, #1
 8009232:	2300      	moveq	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e068      	b.n	8009310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d104      	bne.n	800924e <HAL_TIM_PWM_Start+0x82>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800924c:	e013      	b.n	8009276 <HAL_TIM_PWM_Start+0xaa>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b04      	cmp	r3, #4
 8009252:	d104      	bne.n	800925e <HAL_TIM_PWM_Start+0x92>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800925c:	e00b      	b.n	8009276 <HAL_TIM_PWM_Start+0xaa>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b08      	cmp	r3, #8
 8009262:	d104      	bne.n	800926e <HAL_TIM_PWM_Start+0xa2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800926c:	e003      	b.n	8009276 <HAL_TIM_PWM_Start+0xaa>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2202      	movs	r2, #2
 8009272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fe18 	bl	8009eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a23      	ldr	r2, [pc, #140]	; (8009318 <HAL_TIM_PWM_Start+0x14c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d107      	bne.n	800929e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800929c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a1d      	ldr	r2, [pc, #116]	; (8009318 <HAL_TIM_PWM_Start+0x14c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d018      	beq.n	80092da <HAL_TIM_PWM_Start+0x10e>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b0:	d013      	beq.n	80092da <HAL_TIM_PWM_Start+0x10e>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a19      	ldr	r2, [pc, #100]	; (800931c <HAL_TIM_PWM_Start+0x150>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_TIM_PWM_Start+0x10e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a17      	ldr	r2, [pc, #92]	; (8009320 <HAL_TIM_PWM_Start+0x154>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d009      	beq.n	80092da <HAL_TIM_PWM_Start+0x10e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a16      	ldr	r2, [pc, #88]	; (8009324 <HAL_TIM_PWM_Start+0x158>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d004      	beq.n	80092da <HAL_TIM_PWM_Start+0x10e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a14      	ldr	r2, [pc, #80]	; (8009328 <HAL_TIM_PWM_Start+0x15c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d111      	bne.n	80092fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d010      	beq.n	800930e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fc:	e007      	b.n	800930e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	40010000 	.word	0x40010000
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40014000 	.word	0x40014000

0800932c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fdb8 	bl	8009eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <HAL_TIM_PWM_Stop+0xc4>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d117      	bne.n	800937e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6a1a      	ldr	r2, [r3, #32]
 8009354:	f241 1311 	movw	r3, #4369	; 0x1111
 8009358:	4013      	ands	r3, r2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10f      	bne.n	800937e <HAL_TIM_PWM_Stop+0x52>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6a1a      	ldr	r2, [r3, #32]
 8009364:	f240 4344 	movw	r3, #1092	; 0x444
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <HAL_TIM_PWM_Stop+0x52>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800937c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6a1a      	ldr	r2, [r3, #32]
 8009384:	f241 1311 	movw	r3, #4369	; 0x1111
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10f      	bne.n	80093ae <HAL_TIM_PWM_Stop+0x82>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	f240 4344 	movw	r3, #1092	; 0x444
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d107      	bne.n	80093ae <HAL_TIM_PWM_Stop+0x82>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0201 	bic.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <HAL_TIM_PWM_Stop+0x92>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093bc:	e013      	b.n	80093e6 <HAL_TIM_PWM_Stop+0xba>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d104      	bne.n	80093ce <HAL_TIM_PWM_Stop+0xa2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093cc:	e00b      	b.n	80093e6 <HAL_TIM_PWM_Stop+0xba>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d104      	bne.n	80093de <HAL_TIM_PWM_Stop+0xb2>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093dc:	e003      	b.n	80093e6 <HAL_TIM_PWM_Stop+0xba>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	40010000 	.word	0x40010000

080093f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b02      	cmp	r3, #2
 8009408:	d122      	bne.n	8009450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b02      	cmp	r3, #2
 8009416:	d11b      	bne.n	8009450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0202 	mvn.w	r2, #2
 8009420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa77 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa69 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa7a 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b04      	cmp	r3, #4
 800945c:	d122      	bne.n	80094a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b04      	cmp	r3, #4
 800946a:	d11b      	bne.n	80094a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0204 	mvn.w	r2, #4
 8009474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa4d 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 8009490:	e005      	b.n	800949e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa3f 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fa50 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0308 	and.w	r3, r3, #8
 80094ae:	2b08      	cmp	r3, #8
 80094b0:	d122      	bne.n	80094f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0308 	and.w	r3, r3, #8
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d11b      	bne.n	80094f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0208 	mvn.w	r2, #8
 80094c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2204      	movs	r2, #4
 80094ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa23 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 80094e4:	e005      	b.n	80094f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa15 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fa26 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2b10      	cmp	r3, #16
 8009504:	d122      	bne.n	800954c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b10      	cmp	r3, #16
 8009512:	d11b      	bne.n	800954c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f06f 0210 	mvn.w	r2, #16
 800951c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2208      	movs	r2, #8
 8009522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f9f9 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 8009538:	e005      	b.n	8009546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9eb 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f9fc 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b01      	cmp	r3, #1
 8009558:	d10e      	bne.n	8009578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b01      	cmp	r3, #1
 8009566:	d107      	bne.n	8009578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f06f 0201 	mvn.w	r2, #1
 8009570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fa fe3c 	bl	80041f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d10e      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009590:	2b80      	cmp	r3, #128	; 0x80
 8009592:	d107      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fd26 	bl	8009ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d10e      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b40      	cmp	r3, #64	; 0x40
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f9c1 	bl	8009952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b20      	cmp	r3, #32
 80095dc:	d10e      	bne.n	80095fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d107      	bne.n	80095fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0220 	mvn.w	r2, #32
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fcf0 	bl	8009fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800961e:	2302      	movs	r3, #2
 8009620:	e0ae      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b0c      	cmp	r3, #12
 800962e:	f200 809f 	bhi.w	8009770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	0800966d 	.word	0x0800966d
 800963c:	08009771 	.word	0x08009771
 8009640:	08009771 	.word	0x08009771
 8009644:	08009771 	.word	0x08009771
 8009648:	080096ad 	.word	0x080096ad
 800964c:	08009771 	.word	0x08009771
 8009650:	08009771 	.word	0x08009771
 8009654:	08009771 	.word	0x08009771
 8009658:	080096ef 	.word	0x080096ef
 800965c:	08009771 	.word	0x08009771
 8009660:	08009771 	.word	0x08009771
 8009664:	08009771 	.word	0x08009771
 8009668:	0800972f 	.word	0x0800972f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f9f8 	bl	8009a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0208 	orr.w	r2, r2, #8
 8009686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699a      	ldr	r2, [r3, #24]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0204 	bic.w	r2, r2, #4
 8009696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6999      	ldr	r1, [r3, #24]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	619a      	str	r2, [r3, #24]
      break;
 80096aa:	e064      	b.n	8009776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fa3e 	bl	8009b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6999      	ldr	r1, [r3, #24]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	021a      	lsls	r2, r3, #8
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	619a      	str	r2, [r3, #24]
      break;
 80096ec:	e043      	b.n	8009776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fa89 	bl	8009c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0208 	orr.w	r2, r2, #8
 8009708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69da      	ldr	r2, [r3, #28]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0204 	bic.w	r2, r2, #4
 8009718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69d9      	ldr	r1, [r3, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	691a      	ldr	r2, [r3, #16]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	61da      	str	r2, [r3, #28]
      break;
 800972c:	e023      	b.n	8009776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fad3 	bl	8009ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69da      	ldr	r2, [r3, #28]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69d9      	ldr	r1, [r3, #28]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	021a      	lsls	r2, r3, #8
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	61da      	str	r2, [r3, #28]
      break;
 800976e:	e002      	b.n	8009776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]
      break;
 8009774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_TIM_ConfigClockSource+0x1c>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e0b4      	b.n	800990e <HAL_TIM_ConfigClockSource+0x186>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097dc:	d03e      	beq.n	800985c <HAL_TIM_ConfigClockSource+0xd4>
 80097de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e2:	f200 8087 	bhi.w	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 80097e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ea:	f000 8086 	beq.w	80098fa <HAL_TIM_ConfigClockSource+0x172>
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f2:	d87f      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 80097f4:	2b70      	cmp	r3, #112	; 0x70
 80097f6:	d01a      	beq.n	800982e <HAL_TIM_ConfigClockSource+0xa6>
 80097f8:	2b70      	cmp	r3, #112	; 0x70
 80097fa:	d87b      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 80097fc:	2b60      	cmp	r3, #96	; 0x60
 80097fe:	d050      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0x11a>
 8009800:	2b60      	cmp	r3, #96	; 0x60
 8009802:	d877      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009804:	2b50      	cmp	r3, #80	; 0x50
 8009806:	d03c      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0xfa>
 8009808:	2b50      	cmp	r3, #80	; 0x50
 800980a:	d873      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 800980c:	2b40      	cmp	r3, #64	; 0x40
 800980e:	d058      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x13a>
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	d86f      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009814:	2b30      	cmp	r3, #48	; 0x30
 8009816:	d064      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009818:	2b30      	cmp	r3, #48	; 0x30
 800981a:	d86b      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 800981c:	2b20      	cmp	r3, #32
 800981e:	d060      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009820:	2b20      	cmp	r3, #32
 8009822:	d867      	bhi.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d05c      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009828:	2b10      	cmp	r3, #16
 800982a:	d05a      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x15a>
 800982c:	e062      	b.n	80098f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6899      	ldr	r1, [r3, #8]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f000 fb19 	bl	8009e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	609a      	str	r2, [r3, #8]
      break;
 800985a:	e04f      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	6899      	ldr	r1, [r3, #8]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f000 fb02 	bl	8009e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800987e:	609a      	str	r2, [r3, #8]
      break;
 8009880:	e03c      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6859      	ldr	r1, [r3, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	461a      	mov	r2, r3
 8009890:	f000 fa76 	bl	8009d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2150      	movs	r1, #80	; 0x50
 800989a:	4618      	mov	r0, r3
 800989c:	f000 facf 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 80098a0:	e02c      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f000 fa95 	bl	8009dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2160      	movs	r1, #96	; 0x60
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fabf 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 80098c0:	e01c      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fa56 	bl	8009d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2140      	movs	r1, #64	; 0x40
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 faaf 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 80098e0:	e00c      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f000 faa6 	bl	8009e3e <TIM_ITRx_SetConfig>
      break;
 80098f2:	e003      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
      break;
 80098f8:	e000      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a34      	ldr	r2, [pc, #208]	; (8009a4c <TIM_Base_SetConfig+0xe4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00f      	beq.n	80099a0 <TIM_Base_SetConfig+0x38>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009986:	d00b      	beq.n	80099a0 <TIM_Base_SetConfig+0x38>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a31      	ldr	r2, [pc, #196]	; (8009a50 <TIM_Base_SetConfig+0xe8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <TIM_Base_SetConfig+0x38>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a30      	ldr	r2, [pc, #192]	; (8009a54 <TIM_Base_SetConfig+0xec>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_Base_SetConfig+0x38>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a2f      	ldr	r2, [pc, #188]	; (8009a58 <TIM_Base_SetConfig+0xf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d108      	bne.n	80099b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a25      	ldr	r2, [pc, #148]	; (8009a4c <TIM_Base_SetConfig+0xe4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d01b      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c0:	d017      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <TIM_Base_SetConfig+0xe8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a21      	ldr	r2, [pc, #132]	; (8009a54 <TIM_Base_SetConfig+0xec>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00f      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a20      	ldr	r2, [pc, #128]	; (8009a58 <TIM_Base_SetConfig+0xf0>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00b      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a1f      	ldr	r2, [pc, #124]	; (8009a5c <TIM_Base_SetConfig+0xf4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d007      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <TIM_Base_SetConfig+0xf8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d003      	beq.n	80099f2 <TIM_Base_SetConfig+0x8a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <TIM_Base_SetConfig+0xfc>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d108      	bne.n	8009a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <TIM_Base_SetConfig+0xe4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d103      	bne.n	8009a38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	615a      	str	r2, [r3, #20]
}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40014400 	.word	0x40014400
 8009a64:	40014800 	.word	0x40014800

08009a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	f023 0201 	bic.w	r2, r3, #1
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f023 0302 	bic.w	r3, r3, #2
 8009ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1c      	ldr	r2, [pc, #112]	; (8009b30 <TIM_OC1_SetConfig+0xc8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d10c      	bne.n	8009ade <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0308 	bic.w	r3, r3, #8
 8009aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f023 0304 	bic.w	r3, r3, #4
 8009adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <TIM_OC1_SetConfig+0xc8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d111      	bne.n	8009b0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	621a      	str	r2, [r3, #32]
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	40010000 	.word	0x40010000

08009b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0210 	bic.w	r2, r3, #16
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f023 0320 	bic.w	r3, r3, #32
 8009b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1e      	ldr	r2, [pc, #120]	; (8009c08 <TIM_OC2_SetConfig+0xd4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d10d      	bne.n	8009bb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a15      	ldr	r2, [pc, #84]	; (8009c08 <TIM_OC2_SetConfig+0xd4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d113      	bne.n	8009be0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	40010000 	.word	0x40010000

08009c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1d      	ldr	r2, [pc, #116]	; (8009cdc <TIM_OC3_SetConfig+0xd0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d10d      	bne.n	8009c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a14      	ldr	r2, [pc, #80]	; (8009cdc <TIM_OC3_SetConfig+0xd0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d113      	bne.n	8009cb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	621a      	str	r2, [r3, #32]
}
 8009cd0:	bf00      	nop
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	40010000 	.word	0x40010000

08009ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	031b      	lsls	r3, r3, #12
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <TIM_OC4_SetConfig+0x9c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d109      	bne.n	8009d54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	019b      	lsls	r3, r3, #6
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40010000 	.word	0x40010000

08009d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	f023 0201 	bic.w	r2, r3, #1
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 030a 	bic.w	r3, r3, #10
 8009dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b087      	sub	sp, #28
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f023 0210 	bic.w	r2, r3, #16
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	031b      	lsls	r3, r3, #12
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	011b      	lsls	r3, r3, #4
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f043 0307 	orr.w	r3, r3, #7
 8009e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	609a      	str	r2, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	021a      	lsls	r2, r3, #8
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	431a      	orrs	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	609a      	str	r2, [r3, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f003 031f 	and.w	r3, r3, #31
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6a1a      	ldr	r2, [r3, #32]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	401a      	ands	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6a1a      	ldr	r2, [r3, #32]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f003 031f 	and.w	r3, r3, #31
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8009eec:	431a      	orrs	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	621a      	str	r2, [r3, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d101      	bne.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e050      	b.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d018      	beq.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f64:	d013      	beq.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a18      	ldr	r2, [pc, #96]	; (8009fcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00e      	beq.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a16      	ldr	r2, [pc, #88]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d009      	beq.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d004      	beq.n	8009f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a13      	ldr	r2, [pc, #76]	; (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d10c      	bne.n	8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	40000800 	.word	0x40000800
 8009fd4:	40000c00 	.word	0x40000c00
 8009fd8:	40014000 	.word	0x40014000

08009fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a004:	b084      	sub	sp, #16
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	f107 001c 	add.w	r0, r7, #28
 800a012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d122      	bne.n	800a062 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a046:	2b01      	cmp	r3, #1
 800a048:	d105      	bne.n	800a056 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fbee 	bl	800b838 <USB_CoreReset>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
 800a060:	e01a      	b.n	800a098 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 fbe2 	bl	800b838 <USB_CoreReset>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	639a      	str	r2, [r3, #56]	; 0x38
 800a08a:	e005      	b.n	800a098 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d10b      	bne.n	800a0b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f043 0206 	orr.w	r2, r3, #6
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f043 0220 	orr.w	r2, r3, #32
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0c2:	b004      	add	sp, #16
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d165      	bne.n	800a1a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	4a41      	ldr	r2, [pc, #260]	; (800a1e4 <USB_SetTurnaroundTime+0x11c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d906      	bls.n	800a0f2 <USB_SetTurnaroundTime+0x2a>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4a40      	ldr	r2, [pc, #256]	; (800a1e8 <USB_SetTurnaroundTime+0x120>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d202      	bcs.n	800a0f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0ec:	230f      	movs	r3, #15
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	e062      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	4a3c      	ldr	r2, [pc, #240]	; (800a1e8 <USB_SetTurnaroundTime+0x120>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d306      	bcc.n	800a108 <USB_SetTurnaroundTime+0x40>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	4a3b      	ldr	r2, [pc, #236]	; (800a1ec <USB_SetTurnaroundTime+0x124>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d202      	bcs.n	800a108 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a102:	230e      	movs	r3, #14
 800a104:	617b      	str	r3, [r7, #20]
 800a106:	e057      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4a38      	ldr	r2, [pc, #224]	; (800a1ec <USB_SetTurnaroundTime+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d306      	bcc.n	800a11e <USB_SetTurnaroundTime+0x56>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	4a37      	ldr	r2, [pc, #220]	; (800a1f0 <USB_SetTurnaroundTime+0x128>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d202      	bcs.n	800a11e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a118:	230d      	movs	r3, #13
 800a11a:	617b      	str	r3, [r7, #20]
 800a11c:	e04c      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a33      	ldr	r2, [pc, #204]	; (800a1f0 <USB_SetTurnaroundTime+0x128>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d306      	bcc.n	800a134 <USB_SetTurnaroundTime+0x6c>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	4a32      	ldr	r2, [pc, #200]	; (800a1f4 <USB_SetTurnaroundTime+0x12c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d802      	bhi.n	800a134 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a12e:	230c      	movs	r3, #12
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	e041      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4a2f      	ldr	r2, [pc, #188]	; (800a1f4 <USB_SetTurnaroundTime+0x12c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d906      	bls.n	800a14a <USB_SetTurnaroundTime+0x82>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4a2e      	ldr	r2, [pc, #184]	; (800a1f8 <USB_SetTurnaroundTime+0x130>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d802      	bhi.n	800a14a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a144:	230b      	movs	r3, #11
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e036      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a2a      	ldr	r2, [pc, #168]	; (800a1f8 <USB_SetTurnaroundTime+0x130>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d906      	bls.n	800a160 <USB_SetTurnaroundTime+0x98>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4a29      	ldr	r2, [pc, #164]	; (800a1fc <USB_SetTurnaroundTime+0x134>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d802      	bhi.n	800a160 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a15a:	230a      	movs	r3, #10
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e02b      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4a26      	ldr	r2, [pc, #152]	; (800a1fc <USB_SetTurnaroundTime+0x134>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d906      	bls.n	800a176 <USB_SetTurnaroundTime+0xae>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4a25      	ldr	r2, [pc, #148]	; (800a200 <USB_SetTurnaroundTime+0x138>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d202      	bcs.n	800a176 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a170:	2309      	movs	r3, #9
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e020      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a21      	ldr	r2, [pc, #132]	; (800a200 <USB_SetTurnaroundTime+0x138>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d306      	bcc.n	800a18c <USB_SetTurnaroundTime+0xc4>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a20      	ldr	r2, [pc, #128]	; (800a204 <USB_SetTurnaroundTime+0x13c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d802      	bhi.n	800a18c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a186:	2308      	movs	r3, #8
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e015      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <USB_SetTurnaroundTime+0x13c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d906      	bls.n	800a1a2 <USB_SetTurnaroundTime+0xda>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <USB_SetTurnaroundTime+0x140>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d202      	bcs.n	800a1a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a19c:	2307      	movs	r3, #7
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	e00a      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1a2:	2306      	movs	r3, #6
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	e007      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1ae:	2309      	movs	r3, #9
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e001      	b.n	800a1b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	029b      	lsls	r3, r3, #10
 800a1cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	00d8acbf 	.word	0x00d8acbf
 800a1e8:	00e4e1c0 	.word	0x00e4e1c0
 800a1ec:	00f42400 	.word	0x00f42400
 800a1f0:	01067380 	.word	0x01067380
 800a1f4:	011a499f 	.word	0x011a499f
 800a1f8:	01312cff 	.word	0x01312cff
 800a1fc:	014ca43f 	.word	0x014ca43f
 800a200:	016e3600 	.word	0x016e3600
 800a204:	01a6ab1f 	.word	0x01a6ab1f
 800a208:	01e84800 	.word	0x01e84800

0800a20c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f043 0201 	orr.w	r2, r3, #1
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f023 0201 	bic.w	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d115      	bne.n	800a29e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a27e:	2001      	movs	r0, #1
 800a280:	f7fb f820 	bl	80052c4 <HAL_Delay>
      ms++;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3301      	adds	r3, #1
 800a288:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f001 fa45 	bl	800b71a <USB_GetMode>
 800a290:	4603      	mov	r3, r0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d01e      	beq.n	800a2d4 <USB_SetCurrentMode+0x84>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b31      	cmp	r3, #49	; 0x31
 800a29a:	d9f0      	bls.n	800a27e <USB_SetCurrentMode+0x2e>
 800a29c:	e01a      	b.n	800a2d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d115      	bne.n	800a2d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f7fb f807 	bl	80052c4 <HAL_Delay>
      ms++;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 fa2c 	bl	800b71a <USB_GetMode>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <USB_SetCurrentMode+0x84>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b31      	cmp	r3, #49	; 0x31
 800a2cc:	d9f0      	bls.n	800a2b0 <USB_SetCurrentMode+0x60>
 800a2ce:	e001      	b.n	800a2d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e005      	b.n	800a2e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b32      	cmp	r3, #50	; 0x32
 800a2d8:	d101      	bne.n	800a2de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a2f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	e009      	b.n	800a31c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3340      	adds	r3, #64	; 0x40
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	2200      	movs	r2, #0
 800a314:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	3301      	adds	r3, #1
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b0e      	cmp	r3, #14
 800a320:	d9f2      	bls.n	800a308 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11c      	bne.n	800a362 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a336:	f043 0302 	orr.w	r3, r3, #2
 800a33a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a358:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38
 800a360:	e00b      	b.n	800a37a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a372:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a38c:	4619      	mov	r1, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a394:	461a      	mov	r2, r3
 800a396:	680b      	ldr	r3, [r1, #0]
 800a398:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10c      	bne.n	800a3ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d104      	bne.n	800a3b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f965 	bl	800a678 <USB_SetDevSpeed>
 800a3ae:	e008      	b.n	800a3c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f960 	bl	800a678 <USB_SetDevSpeed>
 800a3b8:	e003      	b.n	800a3c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3ba:	2103      	movs	r1, #3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f95b 	bl	800a678 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3c2:	2110      	movs	r1, #16
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f8f3 	bl	800a5b0 <USB_FlushTxFifo>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f91f 	bl	800a618 <USB_FlushRxFifo>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a402:	461a      	mov	r2, r3
 800a404:	2300      	movs	r3, #0
 800a406:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a408:	2300      	movs	r3, #0
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	e043      	b.n	800a496 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a424:	d118      	bne.n	800a458 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a438:	461a      	mov	r2, r3
 800a43a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	e013      	b.n	800a46a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44e:	461a      	mov	r2, r3
 800a450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	e008      	b.n	800a46a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a464:	461a      	mov	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a476:	461a      	mov	r2, r3
 800a478:	2300      	movs	r3, #0
 800a47a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a488:	461a      	mov	r2, r3
 800a48a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a48e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	3301      	adds	r3, #1
 800a494:	613b      	str	r3, [r7, #16]
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d3b7      	bcc.n	800a40e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	e043      	b.n	800a52c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4ba:	d118      	bne.n	800a4ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	e013      	b.n	800a500 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	e008      	b.n	800a500 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	461a      	mov	r2, r3
 800a50e:	2300      	movs	r3, #0
 800a510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51e:	461a      	mov	r2, r3
 800a520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3301      	adds	r3, #1
 800a52a:	613b      	str	r3, [r7, #16]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	429a      	cmp	r2, r3
 800a532:	d3b7      	bcc.n	800a4a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a546:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a554:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d105      	bne.n	800a568 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	f043 0210 	orr.w	r2, r3, #16
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699a      	ldr	r2, [r3, #24]
 800a56c:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <USB_DevInit+0x2c4>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	f043 0208 	orr.w	r2, r3, #8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d107      	bne.n	800a59c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a594:	f043 0304 	orr.w	r3, r3, #4
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5a8:	b004      	add	sp, #16
 800a5aa:	4770      	bx	lr
 800a5ac:	803c3800 	.word	0x803c3800

0800a5b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4a13      	ldr	r2, [pc, #76]	; (800a614 <USB_FlushTxFifo+0x64>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d901      	bls.n	800a5d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e01b      	b.n	800a608 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	daf2      	bge.n	800a5be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	019b      	lsls	r3, r3, #6
 800a5e0:	f043 0220 	orr.w	r2, r3, #32
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a08      	ldr	r2, [pc, #32]	; (800a614 <USB_FlushTxFifo+0x64>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d901      	bls.n	800a5fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e006      	b.n	800a608 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b20      	cmp	r3, #32
 800a604:	d0f0      	beq.n	800a5e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	00030d40 	.word	0x00030d40

0800a618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4a11      	ldr	r2, [pc, #68]	; (800a674 <USB_FlushRxFifo+0x5c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d901      	bls.n	800a636 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e018      	b.n	800a668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	daf2      	bge.n	800a624 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2210      	movs	r2, #16
 800a646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4a08      	ldr	r2, [pc, #32]	; (800a674 <USB_FlushRxFifo+0x5c>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d901      	bls.n	800a65a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e006      	b.n	800a668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b10      	cmp	r3, #16
 800a664:	d0f0      	beq.n	800a648 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	00030d40 	.word	0x00030d40

0800a678 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a698:	4313      	orrs	r3, r2
 800a69a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b087      	sub	sp, #28
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f003 0306 	and.w	r3, r3, #6
 800a6c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75fb      	strb	r3, [r7, #23]
 800a6ce:	e00a      	b.n	800a6e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d002      	beq.n	800a6dc <USB_GetDevSpeed+0x32>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b06      	cmp	r3, #6
 800a6da:	d102      	bne.n	800a6e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	75fb      	strb	r3, [r7, #23]
 800a6e0:	e001      	b.n	800a6e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6e2:	230f      	movs	r3, #15
 800a6e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	785b      	ldrb	r3, [r3, #1]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d13a      	bne.n	800a786 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	2101      	movs	r1, #1
 800a722:	fa01 f303 	lsl.w	r3, r1, r3
 800a726:	b29b      	uxth	r3, r3
 800a728:	68f9      	ldr	r1, [r7, #12]
 800a72a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a72e:	4313      	orrs	r3, r2
 800a730:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d155      	bne.n	800a7f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	791b      	ldrb	r3, [r3, #4]
 800a762:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a764:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	059b      	lsls	r3, r3, #22
 800a76a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a76c:	4313      	orrs	r3, r2
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	e036      	b.n	800a7f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78c:	69da      	ldr	r2, [r3, #28]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	2101      	movs	r1, #1
 800a798:	fa01 f303 	lsl.w	r3, r1, r3
 800a79c:	041b      	lsls	r3, r3, #16
 800a79e:	68f9      	ldr	r1, [r7, #12]
 800a7a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d11a      	bne.n	800a7f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
	...

0800a804 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	785b      	ldrb	r3, [r3, #1]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d161      	bne.n	800a8e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a836:	d11f      	bne.n	800a878 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	0151      	lsls	r1, r2, #5
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	440a      	add	r2, r1
 800a84e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a856:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a876:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	2101      	movs	r1, #1
 800a88a:	fa01 f303 	lsl.w	r3, r1, r3
 800a88e:	b29b      	uxth	r3, r3
 800a890:	43db      	mvns	r3, r3
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a898:	4013      	ands	r3, r2
 800a89a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8bc:	4013      	ands	r3, r2
 800a8be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	0159      	lsls	r1, r3, #5
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4b35      	ldr	r3, [pc, #212]	; (800a9b4 <USB_DeactivateEndpoint+0x1b0>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	600b      	str	r3, [r1, #0]
 800a8e2:	e060      	b.n	800a9a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8fa:	d11f      	bne.n	800a93c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	0151      	lsls	r1, r2, #5
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	440a      	add	r2, r1
 800a912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a91a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a93a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	2101      	movs	r1, #1
 800a94e:	fa01 f303 	lsl.w	r3, r1, r3
 800a952:	041b      	lsls	r3, r3, #16
 800a954:	43db      	mvns	r3, r3
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a95c:	4013      	ands	r3, r2
 800a95e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	2101      	movs	r1, #1
 800a972:	fa01 f303 	lsl.w	r3, r1, r3
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	43db      	mvns	r3, r3
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a980:	4013      	ands	r3, r2
 800a982:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	0159      	lsls	r1, r3, #5
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	440b      	add	r3, r1
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <USB_DeactivateEndpoint+0x1b4>)
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	ec337800 	.word	0xec337800
 800a9b8:	eff37800 	.word	0xeff37800

0800a9bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 815c 	bne.w	800ac96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d132      	bne.n	800aa4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	0151      	lsls	r1, r2, #5
 800a9f8:	69fa      	ldr	r2, [r7, #28]
 800a9fa:	440a      	add	r2, r1
 800a9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	0151      	lsls	r1, r2, #5
 800aa3c:	69fa      	ldr	r2, [r7, #28]
 800aa3e:	440a      	add	r2, r1
 800aa40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa44:	0cdb      	lsrs	r3, r3, #19
 800aa46:	04db      	lsls	r3, r3, #19
 800aa48:	6113      	str	r3, [r2, #16]
 800aa4a:	e074      	b.n	800ab36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	69fa      	ldr	r2, [r7, #28]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa66:	0cdb      	lsrs	r3, r3, #19
 800aa68:	04db      	lsls	r3, r3, #19
 800aa6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6999      	ldr	r1, [r3, #24]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	440b      	add	r3, r1
 800aaa8:	1e59      	subs	r1, r3, #1
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	fbb1 f3f3 	udiv	r3, r1, r3
 800aab2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aab4:	4b9d      	ldr	r3, [pc, #628]	; (800ad2c <USB_EPStartXfer+0x370>)
 800aab6:	400b      	ands	r3, r1
 800aab8:	69b9      	ldr	r1, [r7, #24]
 800aaba:	0148      	lsls	r0, r1, #5
 800aabc:	69f9      	ldr	r1, [r7, #28]
 800aabe:	4401      	add	r1, r0
 800aac0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aac4:	4313      	orrs	r3, r2
 800aac6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aade:	69b9      	ldr	r1, [r7, #24]
 800aae0:	0148      	lsls	r0, r1, #5
 800aae2:	69f9      	ldr	r1, [r7, #28]
 800aae4:	4401      	add	r1, r0
 800aae6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaea:	4313      	orrs	r3, r2
 800aaec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	791b      	ldrb	r3, [r3, #4]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d11f      	bne.n	800ab36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ab14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d14b      	bne.n	800abd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab50:	461a      	mov	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d128      	bne.n	800abb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d110      	bne.n	800ab92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	0151      	lsls	r1, r2, #5
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	440a      	add	r2, r1
 800ab86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	e00f      	b.n	800abb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	0151      	lsls	r1, r2, #5
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	440a      	add	r2, r1
 800aba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e133      	b.n	800ae3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	69fa      	ldr	r2, [r7, #28]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	791b      	ldrb	r3, [r3, #4]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d015      	beq.n	800ac28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 811b 	beq.w	800ae3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	f003 030f 	and.w	r3, r3, #15
 800ac16:	2101      	movs	r1, #1
 800ac18:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1c:	69f9      	ldr	r1, [r7, #28]
 800ac1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac22:	4313      	orrs	r3, r2
 800ac24:	634b      	str	r3, [r1, #52]	; 0x34
 800ac26:	e109      	b.n	800ae3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d110      	bne.n	800ac5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e00f      	b.n	800ac7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	6919      	ldr	r1, [r3, #16]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	781a      	ldrb	r2, [r3, #0]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	b298      	uxth	r0, r3
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 fade 	bl	800b250 <USB_WritePacket>
 800ac94:	e0d2      	b.n	800ae3c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	0151      	lsls	r1, r2, #5
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	440a      	add	r2, r1
 800acac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acb0:	0cdb      	lsrs	r3, r3, #19
 800acb2:	04db      	lsls	r3, r3, #19
 800acb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	015a      	lsls	r2, r3, #5
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	4413      	add	r3, r2
 800acbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	0151      	lsls	r1, r2, #5
 800acc8:	69fa      	ldr	r2, [r7, #28]
 800acca:	440a      	add	r2, r1
 800accc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d126      	bne.n	800ad30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acee:	691a      	ldr	r2, [r3, #16]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acf8:	69b9      	ldr	r1, [r7, #24]
 800acfa:	0148      	lsls	r0, r1, #5
 800acfc:	69f9      	ldr	r1, [r7, #28]
 800acfe:	4401      	add	r1, r0
 800ad00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad04:	4313      	orrs	r3, r2
 800ad06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad26:	6113      	str	r3, [r2, #16]
 800ad28:	e03a      	b.n	800ada0 <USB_EPStartXfer+0x3e4>
 800ad2a:	bf00      	nop
 800ad2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	1e5a      	subs	r2, r3, #1
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	8afa      	ldrh	r2, [r7, #22]
 800ad4c:	fb03 f202 	mul.w	r2, r3, r2
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad60:	691a      	ldr	r2, [r3, #16]
 800ad62:	8afb      	ldrh	r3, [r7, #22]
 800ad64:	04d9      	lsls	r1, r3, #19
 800ad66:	4b38      	ldr	r3, [pc, #224]	; (800ae48 <USB_EPStartXfer+0x48c>)
 800ad68:	400b      	ands	r3, r1
 800ad6a:	69b9      	ldr	r1, [r7, #24]
 800ad6c:	0148      	lsls	r0, r1, #5
 800ad6e:	69f9      	ldr	r1, [r7, #28]
 800ad70:	4401      	add	r1, r0
 800ad72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad76:	4313      	orrs	r3, r2
 800ad78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad90:	69b9      	ldr	r1, [r7, #24]
 800ad92:	0148      	lsls	r0, r1, #5
 800ad94:	69f9      	ldr	r1, [r7, #28]
 800ad96:	4401      	add	r1, r0
 800ad98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d10d      	bne.n	800adc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6919      	ldr	r1, [r3, #16]
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	460a      	mov	r2, r1
 800adc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	791b      	ldrb	r3, [r3, #4]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d128      	bne.n	800ae1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add6:	2b00      	cmp	r3, #0
 800add8:	d110      	bne.n	800adfc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	015a      	lsls	r2, r3, #5
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	0151      	lsls	r1, r2, #5
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	440a      	add	r2, r1
 800adf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	e00f      	b.n	800ae1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	0151      	lsls	r1, r2, #5
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	440a      	add	r2, r1
 800ae12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	1ff80000 	.word	0x1ff80000

0800ae4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	f040 80ce 	bne.w	800b00a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d132      	bne.n	800aedc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	0151      	lsls	r1, r2, #5
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	440a      	add	r2, r1
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	0151      	lsls	r1, r2, #5
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	440a      	add	r2, r1
 800aeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	0151      	lsls	r1, r2, #5
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	440a      	add	r2, r1
 800aed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed4:	0cdb      	lsrs	r3, r3, #19
 800aed6:	04db      	lsls	r3, r3, #19
 800aed8:	6113      	str	r3, [r2, #16]
 800aeda:	e04e      	b.n	800af7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	0151      	lsls	r1, r2, #5
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	440a      	add	r2, r1
 800aef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef6:	0cdb      	lsrs	r3, r3, #19
 800aef8:	04db      	lsls	r3, r3, #19
 800aefa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	440a      	add	r2, r1
 800af12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	699a      	ldr	r2, [r3, #24]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d903      	bls.n	800af34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	0151      	lsls	r1, r2, #5
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	440a      	add	r2, r1
 800af4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af60:	691a      	ldr	r2, [r3, #16]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af6a:	6939      	ldr	r1, [r7, #16]
 800af6c:	0148      	lsls	r0, r1, #5
 800af6e:	6979      	ldr	r1, [r7, #20]
 800af70:	4401      	add	r1, r0
 800af72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af76:	4313      	orrs	r3, r2
 800af78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af7a:	79fb      	ldrb	r3, [r7, #7]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d11e      	bne.n	800afbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d009      	beq.n	800af9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af94:	461a      	mov	r2, r3
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	440a      	add	r2, r1
 800afb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	e097      	b.n	800b0ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 8083 	beq.w	800b0ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	2101      	movs	r1, #1
 800affa:	fa01 f303 	lsl.w	r3, r1, r3
 800affe:	6979      	ldr	r1, [r7, #20]
 800b000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b004:	4313      	orrs	r3, r2
 800b006:	634b      	str	r3, [r1, #52]	; 0x34
 800b008:	e071      	b.n	800b0ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4413      	add	r3, r2
 800b012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	0151      	lsls	r1, r2, #5
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	440a      	add	r2, r1
 800b020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b024:	0cdb      	lsrs	r3, r3, #19
 800b026:	04db      	lsls	r3, r3, #19
 800b028:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b04c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	0151      	lsls	r1, r2, #5
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	440a      	add	r2, r1
 800b07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b09c:	6939      	ldr	r1, [r7, #16]
 800b09e:	0148      	lsls	r0, r1, #5
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10d      	bne.n	800b0ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6919      	ldr	r1, [r3, #16]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ca:	460a      	mov	r2, r1
 800b0cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	371c      	adds	r7, #28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d14a      	bne.n	800b1b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b12e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b132:	f040 8086 	bne.w	800b242 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	7812      	ldrb	r2, [r2, #0]
 800b14a:	0151      	lsls	r1, r2, #5
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	440a      	add	r2, r1
 800b150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b158:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	7812      	ldrb	r2, [r2, #0]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b17c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3301      	adds	r3, #1
 800b182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f242 7210 	movw	r2, #10000	; 0x2710
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d902      	bls.n	800b194 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
          break;
 800b192:	e056      	b.n	800b242 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1ac:	d0e7      	beq.n	800b17e <USB_EPStopXfer+0x82>
 800b1ae:	e048      	b.n	800b242 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c8:	d13b      	bne.n	800b242 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	7812      	ldrb	r2, [r2, #0]
 800b1de:	0151      	lsls	r1, r2, #5
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	440a      	add	r2, r1
 800b1e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	0151      	lsls	r1, r2, #5
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	440a      	add	r2, r1
 800b208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b20c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b210:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3301      	adds	r3, #1
 800b216:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b21e:	4293      	cmp	r3, r2
 800b220:	d902      	bls.n	800b228 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	75fb      	strb	r3, [r7, #23]
          break;
 800b226:	e00c      	b.n	800b242 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b23c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b240:	d0e7      	beq.n	800b212 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b242:	7dfb      	ldrb	r3, [r7, #23]
}
 800b244:	4618      	mov	r0, r3
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b250:	b480      	push	{r7}
 800b252:	b089      	sub	sp, #36	; 0x24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4611      	mov	r1, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	460b      	mov	r3, r1
 800b260:	71fb      	strb	r3, [r7, #7]
 800b262:	4613      	mov	r3, r2
 800b264:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b26e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b272:	2b00      	cmp	r3, #0
 800b274:	d123      	bne.n	800b2be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b276:	88bb      	ldrh	r3, [r7, #4]
 800b278:	3303      	adds	r3, #3
 800b27a:	089b      	lsrs	r3, r3, #2
 800b27c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b27e:	2300      	movs	r3, #0
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e018      	b.n	800b2b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	031a      	lsls	r2, r3, #12
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b290:	461a      	mov	r2, r3
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d3e2      	bcc.n	800b284 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3724      	adds	r7, #36	; 0x24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b08b      	sub	sp, #44	; 0x2c
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	089b      	lsrs	r3, r3, #2
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	f003 0303 	and.w	r3, r3, #3
 800b2f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	623b      	str	r3, [r7, #32]
 800b2f6:	e014      	b.n	800b322 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	601a      	str	r2, [r3, #0]
    pDest++;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	3301      	adds	r3, #1
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	3301      	adds	r3, #1
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	3301      	adds	r3, #1
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	3301      	adds	r3, #1
 800b31a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	3301      	adds	r3, #1
 800b320:	623b      	str	r3, [r7, #32]
 800b322:	6a3a      	ldr	r2, [r7, #32]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	429a      	cmp	r2, r3
 800b328:	d3e6      	bcc.n	800b2f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b32a:	8bfb      	ldrh	r3, [r7, #30]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d01e      	beq.n	800b36e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b33a:	461a      	mov	r2, r3
 800b33c:	f107 0310 	add.w	r3, r7, #16
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
 800b350:	b2da      	uxtb	r2, r3
 800b352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b354:	701a      	strb	r2, [r3, #0]
      i++;
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	3301      	adds	r3, #1
 800b35a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	3301      	adds	r3, #1
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b362:	8bfb      	ldrh	r3, [r7, #30]
 800b364:	3b01      	subs	r3, #1
 800b366:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b368:	8bfb      	ldrh	r3, [r7, #30]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1ea      	bne.n	800b344 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b370:	4618      	mov	r0, r3
 800b372:	372c      	adds	r7, #44	; 0x2c
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	785b      	ldrb	r3, [r3, #1]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d12c      	bne.n	800b3f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	db12      	blt.n	800b3d0 <USB_EPSetStall+0x54>
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00f      	beq.n	800b3d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	0151      	lsls	r1, r2, #5
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	e02b      	b.n	800b44a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	db12      	blt.n	800b42a <USB_EPSetStall+0xae>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00f      	beq.n	800b42a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	0151      	lsls	r1, r2, #5
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	440a      	add	r2, r1
 800b420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b424:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b428:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b448:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d128      	bne.n	800b4c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	0151      	lsls	r1, r2, #5
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	440a      	add	r2, r1
 800b48a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b48e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b492:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	791b      	ldrb	r3, [r3, #4]
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d003      	beq.n	800b4a4 <USB_EPClearStall+0x4c>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	791b      	ldrb	r3, [r3, #4]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d138      	bne.n	800b516 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	e027      	b.n	800b516 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	791b      	ldrb	r3, [r3, #4]
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d003      	beq.n	800b4f6 <USB_EPClearStall+0x9e>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d10f      	bne.n	800b516 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	015a      	lsls	r2, r3, #5
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	0151      	lsls	r1, r2, #5
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	440a      	add	r2, r1
 800b50c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b514:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b542:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b546:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b558:	68f9      	ldr	r1, [r7, #12]
 800b55a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b55e:	4313      	orrs	r3, r2
 800b560:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b59e:	f023 0302 	bic.w	r3, r3, #2
 800b5a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5cc:	f023 0303 	bic.w	r3, r3, #3
 800b5d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5e0:	f043 0302 	orr.w	r3, r3, #2
 800b5e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	4013      	ands	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b60c:	68fb      	ldr	r3, [r7, #12]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	0c1b      	lsrs	r3, r3, #16
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66a:	69db      	ldr	r3, [r3, #28]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	4013      	ands	r3, r2
 800b670:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	b29b      	uxth	r3, r3
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b087      	sub	sp, #28
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	f003 030f 	and.w	r3, r3, #15
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ee:	01db      	lsls	r3, r3, #7
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6f8:	78fb      	ldrb	r3, [r7, #3]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	4013      	ands	r3, r2
 800b70a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b70c:	68bb      	ldr	r3, [r7, #8]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0301 	and.w	r3, r3, #1
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b754:	f023 0307 	bic.w	r3, r3, #7
 800b758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b76c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	460b      	mov	r3, r1
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	333c      	adds	r3, #60	; 0x3c
 800b792:	3304      	adds	r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	4a26      	ldr	r2, [pc, #152]	; (800b834 <USB_EP0_OutStart+0xb8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d90a      	bls.n	800b7b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7b0:	d101      	bne.n	800b7b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e037      	b.n	800b826 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e4:	f043 0318 	orr.w	r3, r3, #24
 800b7e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b7fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7fe:	7afb      	ldrb	r3, [r7, #11]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d10f      	bne.n	800b824 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b81e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	4f54300a 	.word	0x4f54300a

0800b838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3301      	adds	r3, #1
 800b848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4a13      	ldr	r2, [pc, #76]	; (800b89c <USB_CoreReset+0x64>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d901      	bls.n	800b856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e01b      	b.n	800b88e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	daf2      	bge.n	800b844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	f043 0201 	orr.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4a09      	ldr	r2, [pc, #36]	; (800b89c <USB_CoreReset+0x64>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d901      	bls.n	800b880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e006      	b.n	800b88e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d0f0      	beq.n	800b86e <USB_CoreReset+0x36>

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	00030d40 	.word	0x00030d40

0800b8a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b8ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b8b0:	f005 fbe2 	bl	8011078 <USBD_static_malloc>
 800b8b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	32b0      	adds	r2, #176	; 0xb0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e0d4      	b.n	800ba7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b8d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f005 fc66 	bl	80111a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	32b0      	adds	r2, #176	; 0xb0
 800b8e6:	68f9      	ldr	r1, [r7, #12]
 800b8e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	32b0      	adds	r2, #176	; 0xb0
 800b8f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	7c1b      	ldrb	r3, [r3, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d138      	bne.n	800b97a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b908:	4b5e      	ldr	r3, [pc, #376]	; (800ba84 <USBD_CDC_Init+0x1e4>)
 800b90a:	7819      	ldrb	r1, [r3, #0]
 800b90c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b910:	2202      	movs	r2, #2
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f005 fa8d 	bl	8010e32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b918:	4b5a      	ldr	r3, [pc, #360]	; (800ba84 <USBD_CDC_Init+0x1e4>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 020f 	and.w	r2, r3, #15
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	440b      	add	r3, r1
 800b92c:	3324      	adds	r3, #36	; 0x24
 800b92e:	2201      	movs	r2, #1
 800b930:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b932:	4b55      	ldr	r3, [pc, #340]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800b934:	7819      	ldrb	r1, [r3, #0]
 800b936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b93a:	2202      	movs	r2, #2
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f005 fa78 	bl	8010e32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b942:	4b51      	ldr	r3, [pc, #324]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 020f 	and.w	r2, r3, #15
 800b94a:	6879      	ldr	r1, [r7, #4]
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b95a:	2201      	movs	r2, #1
 800b95c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b95e:	4b4b      	ldr	r3, [pc, #300]	; (800ba8c <USBD_CDC_Init+0x1ec>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	f003 020f 	and.w	r2, r3, #15
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	4613      	mov	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4413      	add	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	440b      	add	r3, r1
 800b972:	3326      	adds	r3, #38	; 0x26
 800b974:	2210      	movs	r2, #16
 800b976:	801a      	strh	r2, [r3, #0]
 800b978:	e035      	b.n	800b9e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b97a:	4b42      	ldr	r3, [pc, #264]	; (800ba84 <USBD_CDC_Init+0x1e4>)
 800b97c:	7819      	ldrb	r1, [r3, #0]
 800b97e:	2340      	movs	r3, #64	; 0x40
 800b980:	2202      	movs	r2, #2
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f005 fa55 	bl	8010e32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b988:	4b3e      	ldr	r3, [pc, #248]	; (800ba84 <USBD_CDC_Init+0x1e4>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	f003 020f 	and.w	r2, r3, #15
 800b990:	6879      	ldr	r1, [r7, #4]
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	440b      	add	r3, r1
 800b99c:	3324      	adds	r3, #36	; 0x24
 800b99e:	2201      	movs	r2, #1
 800b9a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9a2:	4b39      	ldr	r3, [pc, #228]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800b9a4:	7819      	ldrb	r1, [r3, #0]
 800b9a6:	2340      	movs	r3, #64	; 0x40
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f005 fa41 	bl	8010e32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b9b0:	4b35      	ldr	r3, [pc, #212]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	f003 020f 	and.w	r2, r3, #15
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b9cc:	4b2f      	ldr	r3, [pc, #188]	; (800ba8c <USBD_CDC_Init+0x1ec>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 020f 	and.w	r2, r3, #15
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	440b      	add	r3, r1
 800b9e0:	3326      	adds	r3, #38	; 0x26
 800b9e2:	2210      	movs	r2, #16
 800b9e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b9e6:	4b29      	ldr	r3, [pc, #164]	; (800ba8c <USBD_CDC_Init+0x1ec>)
 800b9e8:	7819      	ldrb	r1, [r3, #0]
 800b9ea:	2308      	movs	r3, #8
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f005 fa1f 	bl	8010e32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b9f4:	4b25      	ldr	r3, [pc, #148]	; (800ba8c <USBD_CDC_Init+0x1ec>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 020f 	and.w	r2, r3, #15
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	3324      	adds	r3, #36	; 0x24
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	33b0      	adds	r3, #176	; 0xb0
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba44:	2302      	movs	r3, #2
 800ba46:	e018      	b.n	800ba7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	7c1b      	ldrb	r3, [r3, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba50:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800ba52:	7819      	ldrb	r1, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f005 fad6 	bl	8011010 <USBD_LL_PrepareReceive>
 800ba64:	e008      	b.n	800ba78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba66:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <USBD_CDC_Init+0x1e8>)
 800ba68:	7819      	ldrb	r1, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f005 facc 	bl	8011010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	2000066f 	.word	0x2000066f
 800ba88:	20000670 	.word	0x20000670
 800ba8c:	20000671 	.word	0x20000671

0800ba90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba9c:	4b3a      	ldr	r3, [pc, #232]	; (800bb88 <USBD_CDC_DeInit+0xf8>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f005 f9eb 	bl	8010e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800baa8:	4b37      	ldr	r3, [pc, #220]	; (800bb88 <USBD_CDC_DeInit+0xf8>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	f003 020f 	and.w	r2, r3, #15
 800bab0:	6879      	ldr	r1, [r7, #4]
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	440b      	add	r3, r1
 800babc:	3324      	adds	r3, #36	; 0x24
 800babe:	2200      	movs	r2, #0
 800bac0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bac2:	4b32      	ldr	r3, [pc, #200]	; (800bb8c <USBD_CDC_DeInit+0xfc>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f005 f9d8 	bl	8010e7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bace:	4b2f      	ldr	r3, [pc, #188]	; (800bb8c <USBD_CDC_DeInit+0xfc>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	f003 020f 	and.w	r2, r3, #15
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	4613      	mov	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	440b      	add	r3, r1
 800bae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bae6:	2200      	movs	r2, #0
 800bae8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800baea:	4b29      	ldr	r3, [pc, #164]	; (800bb90 <USBD_CDC_DeInit+0x100>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f005 f9c4 	bl	8010e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <USBD_CDC_DeInit+0x100>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	f003 020f 	and.w	r2, r3, #15
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	440b      	add	r3, r1
 800bb0a:	3324      	adds	r3, #36	; 0x24
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bb10:	4b1f      	ldr	r3, [pc, #124]	; (800bb90 <USBD_CDC_DeInit+0x100>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	f003 020f 	and.w	r2, r3, #15
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	440b      	add	r3, r1
 800bb24:	3326      	adds	r3, #38	; 0x26
 800bb26:	2200      	movs	r2, #0
 800bb28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	32b0      	adds	r2, #176	; 0xb0
 800bb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01f      	beq.n	800bb7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	33b0      	adds	r3, #176	; 0xb0
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	32b0      	adds	r2, #176	; 0xb0
 800bb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f005 fa98 	bl	8011094 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	32b0      	adds	r2, #176	; 0xb0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	2000066f 	.word	0x2000066f
 800bb8c:	20000670 	.word	0x20000670
 800bb90:	20000671 	.word	0x20000671

0800bb94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	32b0      	adds	r2, #176	; 0xb0
 800bba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e0bf      	b.n	800bd44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d050      	beq.n	800bc72 <USBD_CDC_Setup+0xde>
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	f040 80af 	bne.w	800bd34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d03a      	beq.n	800bc54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b25b      	sxtb	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	da1b      	bge.n	800bc20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	33b0      	adds	r3, #176	; 0xb0
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bbfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	88d2      	ldrh	r2, [r2, #6]
 800bc04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	88db      	ldrh	r3, [r3, #6]
 800bc0a:	2b07      	cmp	r3, #7
 800bc0c:	bf28      	it	cs
 800bc0e:	2307      	movcs	r3, #7
 800bc10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	89fa      	ldrh	r2, [r7, #14]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 fd89 	bl	800d730 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc1e:	e090      	b.n	800bd42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	785a      	ldrb	r2, [r3, #1]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	88db      	ldrh	r3, [r3, #6]
 800bc2e:	2b3f      	cmp	r3, #63	; 0x3f
 800bc30:	d803      	bhi.n	800bc3a <USBD_CDC_Setup+0xa6>
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	88db      	ldrh	r3, [r3, #6]
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	e000      	b.n	800bc3c <USBD_CDC_Setup+0xa8>
 800bc3a:	2240      	movs	r2, #64	; 0x40
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc42:	6939      	ldr	r1, [r7, #16]
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f001 fd9b 	bl	800d788 <USBD_CtlPrepareRx>
      break;
 800bc52:	e076      	b.n	800bd42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	33b0      	adds	r3, #176	; 0xb0
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	7850      	ldrb	r0, [r2, #1]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	4798      	blx	r3
      break;
 800bc70:	e067      	b.n	800bd42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b0b      	cmp	r3, #11
 800bc78:	d851      	bhi.n	800bd1e <USBD_CDC_Setup+0x18a>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <USBD_CDC_Setup+0xec>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bcb1 	.word	0x0800bcb1
 800bc84:	0800bd2d 	.word	0x0800bd2d
 800bc88:	0800bd1f 	.word	0x0800bd1f
 800bc8c:	0800bd1f 	.word	0x0800bd1f
 800bc90:	0800bd1f 	.word	0x0800bd1f
 800bc94:	0800bd1f 	.word	0x0800bd1f
 800bc98:	0800bd1f 	.word	0x0800bd1f
 800bc9c:	0800bd1f 	.word	0x0800bd1f
 800bca0:	0800bd1f 	.word	0x0800bd1f
 800bca4:	0800bd1f 	.word	0x0800bd1f
 800bca8:	0800bcdb 	.word	0x0800bcdb
 800bcac:	0800bd05 	.word	0x0800bd05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d107      	bne.n	800bccc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bcbc:	f107 030a 	add.w	r3, r7, #10
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f001 fd33 	bl	800d730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcca:	e032      	b.n	800bd32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f001 fcbd 	bl	800d64e <USBD_CtlError>
            ret = USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	75fb      	strb	r3, [r7, #23]
          break;
 800bcd8:	e02b      	b.n	800bd32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d107      	bne.n	800bcf6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bce6:	f107 030d 	add.w	r3, r7, #13
 800bcea:	2201      	movs	r2, #1
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fd1e 	bl	800d730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcf4:	e01d      	b.n	800bd32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 fca8 	bl	800d64e <USBD_CtlError>
            ret = USBD_FAIL;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	75fb      	strb	r3, [r7, #23]
          break;
 800bd02:	e016      	b.n	800bd32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d00f      	beq.n	800bd30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fc9b 	bl	800d64e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd1c:	e008      	b.n	800bd30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 fc94 	bl	800d64e <USBD_CtlError>
          ret = USBD_FAIL;
 800bd26:	2303      	movs	r3, #3
 800bd28:	75fb      	strb	r3, [r7, #23]
          break;
 800bd2a:	e002      	b.n	800bd32 <USBD_CDC_Setup+0x19e>
          break;
 800bd2c:	bf00      	nop
 800bd2e:	e008      	b.n	800bd42 <USBD_CDC_Setup+0x1ae>
          break;
 800bd30:	bf00      	nop
      }
      break;
 800bd32:	e006      	b.n	800bd42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 fc89 	bl	800d64e <USBD_CtlError>
      ret = USBD_FAIL;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd40:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	32b0      	adds	r2, #176	; 0xb0
 800bd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e065      	b.n	800be42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	32b0      	adds	r2, #176	; 0xb0
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	f003 020f 	and.w	r2, r3, #15
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	440b      	add	r3, r1
 800bd98:	3318      	adds	r3, #24
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d02f      	beq.n	800be00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	f003 020f 	and.w	r2, r3, #15
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3318      	adds	r3, #24
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f003 010f 	and.w	r1, r3, #15
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4403      	add	r3, r0
 800bdc8:	3348      	adds	r3, #72	; 0x48
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bdd0:	fb01 f303 	mul.w	r3, r1, r3
 800bdd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d112      	bne.n	800be00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	f003 020f 	and.w	r2, r3, #15
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	440b      	add	r3, r1
 800bdec:	3318      	adds	r3, #24
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bdf2:	78f9      	ldrb	r1, [r7, #3]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f005 f8e8 	bl	8010fce <USBD_LL_Transmit>
 800bdfe:	e01f      	b.n	800be40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2200      	movs	r2, #0
 800be04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	33b0      	adds	r3, #176	; 0xb0
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d010      	beq.n	800be40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	33b0      	adds	r3, #176	; 0xb0
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	32b0      	adds	r2, #176	; 0xb0
 800be60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	32b0      	adds	r2, #176	; 0xb0
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	e01a      	b.n	800beb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f005 f8e6 	bl	8011052 <USBD_LL_GetRxDataSize>
 800be86:	4602      	mov	r2, r0
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	33b0      	adds	r3, #176	; 0xb0
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800beac:	4611      	mov	r1, r2
 800beae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	32b0      	adds	r2, #176	; 0xb0
 800becc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	e025      	b.n	800bf28 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	33b0      	adds	r3, #176	; 0xb0
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d01a      	beq.n	800bf26 <USBD_CDC_EP0_RxReady+0x6c>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bef6:	2bff      	cmp	r3, #255	; 0xff
 800bef8:	d015      	beq.n	800bf26 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	33b0      	adds	r3, #176	; 0xb0
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bf12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf1a:	b292      	uxth	r2, r2
 800bf1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	22ff      	movs	r2, #255	; 0xff
 800bf22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf38:	2182      	movs	r1, #130	; 0x82
 800bf3a:	4818      	ldr	r0, [pc, #96]	; (800bf9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf3c:	f000 fd4f 	bl	800c9de <USBD_GetEpDesc>
 800bf40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf42:	2101      	movs	r1, #1
 800bf44:	4815      	ldr	r0, [pc, #84]	; (800bf9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf46:	f000 fd4a 	bl	800c9de <USBD_GetEpDesc>
 800bf4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf4c:	2181      	movs	r1, #129	; 0x81
 800bf4e:	4813      	ldr	r0, [pc, #76]	; (800bf9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf50:	f000 fd45 	bl	800c9de <USBD_GetEpDesc>
 800bf54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2210      	movs	r2, #16
 800bf60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d006      	beq.n	800bf76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf70:	711a      	strb	r2, [r3, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d006      	beq.n	800bf8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf84:	711a      	strb	r2, [r3, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2243      	movs	r2, #67	; 0x43
 800bf8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf90:	4b02      	ldr	r3, [pc, #8]	; (800bf9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	2000062c 	.word	0x2000062c

0800bfa0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfa8:	2182      	movs	r1, #130	; 0x82
 800bfaa:	4818      	ldr	r0, [pc, #96]	; (800c00c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfac:	f000 fd17 	bl	800c9de <USBD_GetEpDesc>
 800bfb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	4815      	ldr	r0, [pc, #84]	; (800c00c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfb6:	f000 fd12 	bl	800c9de <USBD_GetEpDesc>
 800bfba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfbc:	2181      	movs	r1, #129	; 0x81
 800bfbe:	4813      	ldr	r0, [pc, #76]	; (800c00c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfc0:	f000 fd0d 	bl	800c9de <USBD_GetEpDesc>
 800bfc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2210      	movs	r2, #16
 800bfd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d006      	beq.n	800bfe6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	711a      	strb	r2, [r3, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f042 0202 	orr.w	r2, r2, #2
 800bfe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	711a      	strb	r2, [r3, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f042 0202 	orr.w	r2, r2, #2
 800bff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2243      	movs	r2, #67	; 0x43
 800bffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2000062c 	.word	0x2000062c

0800c010 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c018:	2182      	movs	r1, #130	; 0x82
 800c01a:	4818      	ldr	r0, [pc, #96]	; (800c07c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c01c:	f000 fcdf 	bl	800c9de <USBD_GetEpDesc>
 800c020:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c022:	2101      	movs	r1, #1
 800c024:	4815      	ldr	r0, [pc, #84]	; (800c07c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c026:	f000 fcda 	bl	800c9de <USBD_GetEpDesc>
 800c02a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c02c:	2181      	movs	r1, #129	; 0x81
 800c02e:	4813      	ldr	r0, [pc, #76]	; (800c07c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c030:	f000 fcd5 	bl	800c9de <USBD_GetEpDesc>
 800c034:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2210      	movs	r2, #16
 800c040:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c050:	711a      	strb	r2, [r3, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d006      	beq.n	800c06a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c064:	711a      	strb	r2, [r3, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2243      	movs	r2, #67	; 0x43
 800c06e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c072:	4618      	mov	r0, r3
 800c074:	3718      	adds	r7, #24
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	2000062c 	.word	0x2000062c

0800c080 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	220a      	movs	r2, #10
 800c08c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c08e:	4b03      	ldr	r3, [pc, #12]	; (800c09c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	200005e8 	.word	0x200005e8

0800c0a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d101      	bne.n	800c0b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e009      	b.n	800c0c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	33b0      	adds	r3, #176	; 0xb0
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	32b0      	adds	r2, #176	; 0xb0
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e008      	b.n	800c10c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	32b0      	adds	r2, #176	; 0xb0
 800c12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c130:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c138:	2303      	movs	r3, #3
 800c13a:	e004      	b.n	800c146 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	32b0      	adds	r2, #176	; 0xb0
 800c166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c16c:	2301      	movs	r3, #1
 800c16e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	32b0      	adds	r2, #176	; 0xb0
 800c17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c182:	2303      	movs	r3, #3
 800c184:	e025      	b.n	800c1d2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11f      	bne.n	800c1d0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2201      	movs	r2, #1
 800c194:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <USBD_CDC_TransmitPacket+0x88>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f003 020f 	and.w	r2, r3, #15
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4403      	add	r3, r0
 800c1b2:	3318      	adds	r3, #24
 800c1b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <USBD_CDC_TransmitPacket+0x88>)
 800c1b8:	7819      	ldrb	r1, [r3, #0]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f004 ff01 	bl	8010fce <USBD_LL_Transmit>

    ret = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	2000066f 	.word	0x2000066f

0800c1e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	32b0      	adds	r2, #176	; 0xb0
 800c1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	32b0      	adds	r2, #176	; 0xb0
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e018      	b.n	800c240 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7c1b      	ldrb	r3, [r3, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c216:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <USBD_CDC_ReceivePacket+0x68>)
 800c218:	7819      	ldrb	r1, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c220:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f004 fef3 	bl	8011010 <USBD_LL_PrepareReceive>
 800c22a:	e008      	b.n	800c23e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <USBD_CDC_ReceivePacket+0x68>)
 800c22e:	7819      	ldrb	r1, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c236:	2340      	movs	r3, #64	; 0x40
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f004 fee9 	bl	8011010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000670 	.word	0x20000670

0800c24c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c260:	2303      	movs	r3, #3
 800c262:	e01f      	b.n	800c2a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	79fa      	ldrb	r2, [r7, #7]
 800c296:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f004 fd63 	bl	8010d64 <USBD_LL_Init>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e025      	b.n	800c310 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	32ae      	adds	r2, #174	; 0xae
 800c2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00f      	beq.n	800c300 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	32ae      	adds	r2, #174	; 0xae
 800c2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f0:	f107 020e 	add.w	r2, r7, #14
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f004 fd6b 	bl	8010dfc <USBD_LL_Start>
 800c326:	4603      	mov	r3, r0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c338:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	460b      	mov	r3, r1
 800c350:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d009      	beq.n	800c374 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	78fa      	ldrb	r2, [r7, #3]
 800c36a:	4611      	mov	r1, r2
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	4798      	blx	r3
 800c370:	4603      	mov	r3, r0
 800c372:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c374:	7bfb      	ldrb	r3, [r7, #15]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	4611      	mov	r1, r2
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	4798      	blx	r3
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d001      	beq.n	800c3a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b084      	sub	sp, #16
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f001 f908 	bl	800d5da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3e6:	f003 031f 	and.w	r3, r3, #31
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d01a      	beq.n	800c424 <USBD_LL_SetupStage+0x72>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d822      	bhi.n	800c438 <USBD_LL_SetupStage+0x86>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <USBD_LL_SetupStage+0x4a>
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d00a      	beq.n	800c410 <USBD_LL_SetupStage+0x5e>
 800c3fa:	e01d      	b.n	800c438 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fb5f 	bl	800cac8 <USBD_StdDevReq>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]
      break;
 800c40e:	e020      	b.n	800c452 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fbc7 	bl	800cbac <USBD_StdItfReq>
 800c41e:	4603      	mov	r3, r0
 800c420:	73fb      	strb	r3, [r7, #15]
      break;
 800c422:	e016      	b.n	800c452 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fc29 	bl	800cc84 <USBD_StdEPReq>
 800c432:	4603      	mov	r3, r0
 800c434:	73fb      	strb	r3, [r7, #15]
      break;
 800c436:	e00c      	b.n	800c452 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c43e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c442:	b2db      	uxtb	r3, r3
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f004 fd38 	bl	8010ebc <USBD_LL_StallEP>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]
      break;
 800c450:	bf00      	nop
  }

  return ret;
 800c452:	7bfb      	ldrb	r3, [r7, #15]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	460b      	mov	r3, r1
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d16e      	bne.n	800c552 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c47a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c482:	2b03      	cmp	r3, #3
 800c484:	f040 8098 	bne.w	800c5b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	689a      	ldr	r2, [r3, #8]
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	429a      	cmp	r2, r3
 800c492:	d913      	bls.n	800c4bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	1ad2      	subs	r2, r2, r3
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	68da      	ldr	r2, [r3, #12]
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	bf28      	it	cs
 800c4ae:	4613      	movcs	r3, r2
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f001 f984 	bl	800d7c2 <USBD_CtlContinueRx>
 800c4ba:	e07d      	b.n	800c5b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4c2:	f003 031f 	and.w	r3, r3, #31
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d014      	beq.n	800c4f4 <USBD_LL_DataOutStage+0x98>
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d81d      	bhi.n	800c50a <USBD_LL_DataOutStage+0xae>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <USBD_LL_DataOutStage+0x7c>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d003      	beq.n	800c4de <USBD_LL_DataOutStage+0x82>
 800c4d6:	e018      	b.n	800c50a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	75bb      	strb	r3, [r7, #22]
            break;
 800c4dc:	e018      	b.n	800c510 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 fa5e 	bl	800c9aa <USBD_CoreFindIF>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	75bb      	strb	r3, [r7, #22]
            break;
 800c4f2:	e00d      	b.n	800c510 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 fa60 	bl	800c9c4 <USBD_CoreFindEP>
 800c504:	4603      	mov	r3, r0
 800c506:	75bb      	strb	r3, [r7, #22]
            break;
 800c508:	e002      	b.n	800c510 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	75bb      	strb	r3, [r7, #22]
            break;
 800c50e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c510:	7dbb      	ldrb	r3, [r7, #22]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d119      	bne.n	800c54a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d113      	bne.n	800c54a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c522:	7dba      	ldrb	r2, [r7, #22]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	32ae      	adds	r2, #174	; 0xae
 800c528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00b      	beq.n	800c54a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c532:	7dba      	ldrb	r2, [r7, #22]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c53a:	7dba      	ldrb	r2, [r7, #22]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	32ae      	adds	r2, #174	; 0xae
 800c540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f001 f94a 	bl	800d7e4 <USBD_CtlSendStatus>
 800c550:	e032      	b.n	800c5b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c552:	7afb      	ldrb	r3, [r7, #11]
 800c554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	4619      	mov	r1, r3
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f000 fa31 	bl	800c9c4 <USBD_CoreFindEP>
 800c562:	4603      	mov	r3, r0
 800c564:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c566:	7dbb      	ldrb	r3, [r7, #22]
 800c568:	2bff      	cmp	r3, #255	; 0xff
 800c56a:	d025      	beq.n	800c5b8 <USBD_LL_DataOutStage+0x15c>
 800c56c:	7dbb      	ldrb	r3, [r7, #22]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d122      	bne.n	800c5b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d117      	bne.n	800c5ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c57e:	7dba      	ldrb	r2, [r7, #22]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	32ae      	adds	r2, #174	; 0xae
 800c584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00f      	beq.n	800c5ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c58e:	7dba      	ldrb	r2, [r7, #22]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c596:	7dba      	ldrb	r2, [r7, #22]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	32ae      	adds	r2, #174	; 0xae
 800c59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	7afa      	ldrb	r2, [r7, #11]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	4798      	blx	r3
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	e000      	b.n	800c5ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b086      	sub	sp, #24
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	607a      	str	r2, [r7, #4]
 800c5ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c5d0:	7afb      	ldrb	r3, [r7, #11]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d16f      	bne.n	800c6b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3314      	adds	r3, #20
 800c5da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d15a      	bne.n	800c69c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	689a      	ldr	r2, [r3, #8]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d914      	bls.n	800c61c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	689a      	ldr	r2, [r3, #8]
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	1ad2      	subs	r2, r2, r3
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	461a      	mov	r2, r3
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f001 f8ac 	bl	800d766 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c60e:	2300      	movs	r3, #0
 800c610:	2200      	movs	r2, #0
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f004 fcfb 	bl	8011010 <USBD_LL_PrepareReceive>
 800c61a:	e03f      	b.n	800c69c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	68da      	ldr	r2, [r3, #12]
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	429a      	cmp	r2, r3
 800c626:	d11c      	bne.n	800c662 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c630:	429a      	cmp	r2, r3
 800c632:	d316      	bcc.n	800c662 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c63e:	429a      	cmp	r2, r3
 800c640:	d20f      	bcs.n	800c662 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c642:	2200      	movs	r2, #0
 800c644:	2100      	movs	r1, #0
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f001 f88d 	bl	800d766 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c654:	2300      	movs	r3, #0
 800c656:	2200      	movs	r2, #0
 800c658:	2100      	movs	r1, #0
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f004 fcd8 	bl	8011010 <USBD_LL_PrepareReceive>
 800c660:	e01c      	b.n	800c69c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d10f      	bne.n	800c68e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d009      	beq.n	800c68e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c68e:	2180      	movs	r1, #128	; 0x80
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f004 fc13 	bl	8010ebc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f001 f8b7 	bl	800d80a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d03a      	beq.n	800c71c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7ff fe42 	bl	800c330 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6b4:	e032      	b.n	800c71c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c6b6:	7afb      	ldrb	r3, [r7, #11]
 800c6b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f97f 	bl	800c9c4 <USBD_CoreFindEP>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	2bff      	cmp	r3, #255	; 0xff
 800c6ce:	d025      	beq.n	800c71c <USBD_LL_DataInStage+0x15a>
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d122      	bne.n	800c71c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d11c      	bne.n	800c71c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c6e2:	7dfa      	ldrb	r2, [r7, #23]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	32ae      	adds	r2, #174	; 0xae
 800c6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d014      	beq.n	800c71c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c6f2:	7dfa      	ldrb	r2, [r7, #23]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c6fa:	7dfa      	ldrb	r2, [r7, #23]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	32ae      	adds	r2, #174	; 0xae
 800c700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	7afa      	ldrb	r2, [r7, #11]
 800c708:	4611      	mov	r1, r2
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	4798      	blx	r3
 800c70e:	4603      	mov	r3, r0
 800c710:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c712:	7dbb      	ldrb	r3, [r7, #22]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c718:	7dbb      	ldrb	r3, [r7, #22]
 800c71a:	e000      	b.n	800c71e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d014      	beq.n	800c78c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00e      	beq.n	800c78c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	6852      	ldr	r2, [r2, #4]
 800c77a:	b2d2      	uxtb	r2, r2
 800c77c:	4611      	mov	r1, r2
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c788:	2303      	movs	r3, #3
 800c78a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c78c:	2340      	movs	r3, #64	; 0x40
 800c78e:	2200      	movs	r2, #0
 800c790:	2100      	movs	r1, #0
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f004 fb4d 	bl	8010e32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2240      	movs	r2, #64	; 0x40
 800c7a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7a8:	2340      	movs	r3, #64	; 0x40
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2180      	movs	r1, #128	; 0x80
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f004 fb3f 	bl	8010e32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2240      	movs	r2, #64	; 0x40
 800c7be:	621a      	str	r2, [r3, #32]

  return ret;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	78fa      	ldrb	r2, [r7, #3]
 800c7da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2204      	movs	r2, #4
 800c804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c816:	b480      	push	{r7}
 800c818:	b083      	sub	sp, #12
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b04      	cmp	r3, #4
 800c828:	d106      	bne.n	800c838 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c830:	b2da      	uxtb	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b03      	cmp	r3, #3
 800c858:	d110      	bne.n	800c87c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86a:	69db      	ldr	r3, [r3, #28]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b082      	sub	sp, #8
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	460b      	mov	r3, r1
 800c890:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	32ae      	adds	r2, #174	; 0xae
 800c89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	e01c      	b.n	800c8e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d115      	bne.n	800c8e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	32ae      	adds	r2, #174	; 0xae
 800c8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	32ae      	adds	r2, #174	; 0xae
 800c8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	78fa      	ldrb	r2, [r7, #3]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	32ae      	adds	r2, #174	; 0xae
 800c900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c908:	2303      	movs	r3, #3
 800c90a:	e01c      	b.n	800c946 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b03      	cmp	r3, #3
 800c916:	d115      	bne.n	800c944 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	32ae      	adds	r2, #174	; 0xae
 800c922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00b      	beq.n	800c944 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	32ae      	adds	r2, #174	; 0xae
 800c936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	78fa      	ldrb	r2, [r7, #3]
 800c93e:	4611      	mov	r1, r2
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00e      	beq.n	800c9a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6852      	ldr	r2, [r2, #4]
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	4611      	mov	r1, r2
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	4798      	blx	r3
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c99c:	2303      	movs	r3, #3
 800c99e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b086      	sub	sp, #24
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	885b      	ldrh	r3, [r3, #2]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d920      	bls.n	800ca48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ca0e:	e013      	b.n	800ca38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ca10:	f107 030a 	add.w	r3, r7, #10
 800ca14:	4619      	mov	r1, r3
 800ca16:	6978      	ldr	r0, [r7, #20]
 800ca18:	f000 f81b 	bl	800ca52 <USBD_GetNextDesc>
 800ca1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	d108      	bne.n	800ca38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	789b      	ldrb	r3, [r3, #2]
 800ca2e:	78fa      	ldrb	r2, [r7, #3]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d008      	beq.n	800ca46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	885b      	ldrh	r3, [r3, #2]
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	897b      	ldrh	r3, [r7, #10]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d8e5      	bhi.n	800ca10 <USBD_GetEpDesc+0x32>
 800ca44:	e000      	b.n	800ca48 <USBD_GetEpDesc+0x6a>
          break;
 800ca46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ca48:	693b      	ldr	r3, [r7, #16]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b085      	sub	sp, #20
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	881a      	ldrh	r2, [r3, #0]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b087      	sub	sp, #28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	3301      	adds	r3, #1
 800caa2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800caaa:	8a3b      	ldrh	r3, [r7, #16]
 800caac:	021b      	lsls	r3, r3, #8
 800caae:	b21a      	sxth	r2, r3
 800cab0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	b21b      	sxth	r3, r3
 800cab8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800caba:	89fb      	ldrh	r3, [r7, #14]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cade:	2b40      	cmp	r3, #64	; 0x40
 800cae0:	d005      	beq.n	800caee <USBD_StdDevReq+0x26>
 800cae2:	2b40      	cmp	r3, #64	; 0x40
 800cae4:	d857      	bhi.n	800cb96 <USBD_StdDevReq+0xce>
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00f      	beq.n	800cb0a <USBD_StdDevReq+0x42>
 800caea:	2b20      	cmp	r3, #32
 800caec:	d153      	bne.n	800cb96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	32ae      	adds	r2, #174	; 0xae
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	4798      	blx	r3
 800cb04:	4603      	mov	r3, r0
 800cb06:	73fb      	strb	r3, [r7, #15]
      break;
 800cb08:	e04a      	b.n	800cba0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	785b      	ldrb	r3, [r3, #1]
 800cb0e:	2b09      	cmp	r3, #9
 800cb10:	d83b      	bhi.n	800cb8a <USBD_StdDevReq+0xc2>
 800cb12:	a201      	add	r2, pc, #4	; (adr r2, 800cb18 <USBD_StdDevReq+0x50>)
 800cb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb18:	0800cb6d 	.word	0x0800cb6d
 800cb1c:	0800cb81 	.word	0x0800cb81
 800cb20:	0800cb8b 	.word	0x0800cb8b
 800cb24:	0800cb77 	.word	0x0800cb77
 800cb28:	0800cb8b 	.word	0x0800cb8b
 800cb2c:	0800cb4b 	.word	0x0800cb4b
 800cb30:	0800cb41 	.word	0x0800cb41
 800cb34:	0800cb8b 	.word	0x0800cb8b
 800cb38:	0800cb63 	.word	0x0800cb63
 800cb3c:	0800cb55 	.word	0x0800cb55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fa3c 	bl	800cfc0 <USBD_GetDescriptor>
          break;
 800cb48:	e024      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fba1 	bl	800d294 <USBD_SetAddress>
          break;
 800cb52:	e01f      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fbe0 	bl	800d31c <USBD_SetConfig>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]
          break;
 800cb60:	e018      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fc83 	bl	800d470 <USBD_GetConfig>
          break;
 800cb6a:	e013      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fcb4 	bl	800d4dc <USBD_GetStatus>
          break;
 800cb74:	e00e      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fce3 	bl	800d544 <USBD_SetFeature>
          break;
 800cb7e:	e009      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fd07 	bl	800d596 <USBD_ClrFeature>
          break;
 800cb88:	e004      	b.n	800cb94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fd5e 	bl	800d64e <USBD_CtlError>
          break;
 800cb92:	bf00      	nop
      }
      break;
 800cb94:	e004      	b.n	800cba0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fd58 	bl	800d64e <USBD_CtlError>
      break;
 800cb9e:	bf00      	nop
  }

  return ret;
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop

0800cbac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbc2:	2b40      	cmp	r3, #64	; 0x40
 800cbc4:	d005      	beq.n	800cbd2 <USBD_StdItfReq+0x26>
 800cbc6:	2b40      	cmp	r3, #64	; 0x40
 800cbc8:	d852      	bhi.n	800cc70 <USBD_StdItfReq+0xc4>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <USBD_StdItfReq+0x26>
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d14e      	bne.n	800cc70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d840      	bhi.n	800cc62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	889b      	ldrh	r3, [r3, #4]
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d836      	bhi.n	800cc58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	889b      	ldrh	r3, [r3, #4]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7ff fed9 	bl	800c9aa <USBD_CoreFindIF>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	2bff      	cmp	r3, #255	; 0xff
 800cc00:	d01d      	beq.n	800cc3e <USBD_StdItfReq+0x92>
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11a      	bne.n	800cc3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cc08:	7bba      	ldrb	r2, [r7, #14]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	32ae      	adds	r2, #174	; 0xae
 800cc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00f      	beq.n	800cc38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cc18:	7bba      	ldrb	r2, [r7, #14]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc20:	7bba      	ldrb	r2, [r7, #14]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	32ae      	adds	r2, #174	; 0xae
 800cc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc36:	e004      	b.n	800cc42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc3c:	e001      	b.n	800cc42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	88db      	ldrh	r3, [r3, #6]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d110      	bne.n	800cc6c <USBD_StdItfReq+0xc0>
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10d      	bne.n	800cc6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fdc7 	bl	800d7e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc56:	e009      	b.n	800cc6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fcf7 	bl	800d64e <USBD_CtlError>
          break;
 800cc60:	e004      	b.n	800cc6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fcf2 	bl	800d64e <USBD_CtlError>
          break;
 800cc6a:	e000      	b.n	800cc6e <USBD_StdItfReq+0xc2>
          break;
 800cc6c:	bf00      	nop
      }
      break;
 800cc6e:	e004      	b.n	800cc7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc70:	6839      	ldr	r1, [r7, #0]
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fceb 	bl	800d64e <USBD_CtlError>
      break;
 800cc78:	bf00      	nop
  }

  return ret;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	889b      	ldrh	r3, [r3, #4]
 800cc96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cca0:	2b40      	cmp	r3, #64	; 0x40
 800cca2:	d007      	beq.n	800ccb4 <USBD_StdEPReq+0x30>
 800cca4:	2b40      	cmp	r3, #64	; 0x40
 800cca6:	f200 817f 	bhi.w	800cfa8 <USBD_StdEPReq+0x324>
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d02a      	beq.n	800cd04 <USBD_StdEPReq+0x80>
 800ccae:	2b20      	cmp	r3, #32
 800ccb0:	f040 817a 	bne.w	800cfa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff fe83 	bl	800c9c4 <USBD_CoreFindEP>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccc2:	7b7b      	ldrb	r3, [r7, #13]
 800ccc4:	2bff      	cmp	r3, #255	; 0xff
 800ccc6:	f000 8174 	beq.w	800cfb2 <USBD_StdEPReq+0x32e>
 800ccca:	7b7b      	ldrb	r3, [r7, #13]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f040 8170 	bne.w	800cfb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ccd2:	7b7a      	ldrb	r2, [r7, #13]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ccda:	7b7a      	ldrb	r2, [r7, #13]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	32ae      	adds	r2, #174	; 0xae
 800cce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f000 8163 	beq.w	800cfb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ccec:	7b7a      	ldrb	r2, [r7, #13]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	32ae      	adds	r2, #174	; 0xae
 800ccf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	4798      	blx	r3
 800ccfe:	4603      	mov	r3, r0
 800cd00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cd02:	e156      	b.n	800cfb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	785b      	ldrb	r3, [r3, #1]
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	d008      	beq.n	800cd1e <USBD_StdEPReq+0x9a>
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	f300 8145 	bgt.w	800cf9c <USBD_StdEPReq+0x318>
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 809b 	beq.w	800ce4e <USBD_StdEPReq+0x1ca>
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d03c      	beq.n	800cd96 <USBD_StdEPReq+0x112>
 800cd1c:	e13e      	b.n	800cf9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	d002      	beq.n	800cd30 <USBD_StdEPReq+0xac>
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d016      	beq.n	800cd5c <USBD_StdEPReq+0xd8>
 800cd2e:	e02c      	b.n	800cd8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd30:	7bbb      	ldrb	r3, [r7, #14]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00d      	beq.n	800cd52 <USBD_StdEPReq+0xce>
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	2b80      	cmp	r3, #128	; 0x80
 800cd3a:	d00a      	beq.n	800cd52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f004 f8bb 	bl	8010ebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd46:	2180      	movs	r1, #128	; 0x80
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f004 f8b7 	bl	8010ebc <USBD_LL_StallEP>
 800cd4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd50:	e020      	b.n	800cd94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fc7a 	bl	800d64e <USBD_CtlError>
              break;
 800cd5a:	e01b      	b.n	800cd94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	885b      	ldrh	r3, [r3, #2]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10e      	bne.n	800cd82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00b      	beq.n	800cd82 <USBD_StdEPReq+0xfe>
 800cd6a:	7bbb      	ldrb	r3, [r7, #14]
 800cd6c:	2b80      	cmp	r3, #128	; 0x80
 800cd6e:	d008      	beq.n	800cd82 <USBD_StdEPReq+0xfe>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	88db      	ldrh	r3, [r3, #6]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d104      	bne.n	800cd82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f004 f89d 	bl	8010ebc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fd2e 	bl	800d7e4 <USBD_CtlSendStatus>

              break;
 800cd88:	e004      	b.n	800cd94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fc5e 	bl	800d64e <USBD_CtlError>
              break;
 800cd92:	bf00      	nop
          }
          break;
 800cd94:	e107      	b.n	800cfa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d002      	beq.n	800cda8 <USBD_StdEPReq+0x124>
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	d016      	beq.n	800cdd4 <USBD_StdEPReq+0x150>
 800cda6:	e04b      	b.n	800ce40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00d      	beq.n	800cdca <USBD_StdEPReq+0x146>
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	2b80      	cmp	r3, #128	; 0x80
 800cdb2:	d00a      	beq.n	800cdca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f004 f87f 	bl	8010ebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdbe:	2180      	movs	r1, #128	; 0x80
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f004 f87b 	bl	8010ebc <USBD_LL_StallEP>
 800cdc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdc8:	e040      	b.n	800ce4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fc3e 	bl	800d64e <USBD_CtlError>
              break;
 800cdd2:	e03b      	b.n	800ce4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	885b      	ldrh	r3, [r3, #2]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d136      	bne.n	800ce4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d004      	beq.n	800cdf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f004 f885 	bl	8010efa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fcf7 	bl	800d7e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff fde2 	bl	800c9c4 <USBD_CoreFindEP>
 800ce00:	4603      	mov	r3, r0
 800ce02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce04:	7b7b      	ldrb	r3, [r7, #13]
 800ce06:	2bff      	cmp	r3, #255	; 0xff
 800ce08:	d01f      	beq.n	800ce4a <USBD_StdEPReq+0x1c6>
 800ce0a:	7b7b      	ldrb	r3, [r7, #13]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d11c      	bne.n	800ce4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ce10:	7b7a      	ldrb	r2, [r7, #13]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ce18:	7b7a      	ldrb	r2, [r7, #13]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	32ae      	adds	r2, #174	; 0xae
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d010      	beq.n	800ce4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce28:	7b7a      	ldrb	r2, [r7, #13]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	32ae      	adds	r2, #174	; 0xae
 800ce2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ce3e:	e004      	b.n	800ce4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fc03 	bl	800d64e <USBD_CtlError>
              break;
 800ce48:	e000      	b.n	800ce4c <USBD_StdEPReq+0x1c8>
              break;
 800ce4a:	bf00      	nop
          }
          break;
 800ce4c:	e0ab      	b.n	800cfa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d002      	beq.n	800ce60 <USBD_StdEPReq+0x1dc>
 800ce5a:	2b03      	cmp	r3, #3
 800ce5c:	d032      	beq.n	800cec4 <USBD_StdEPReq+0x240>
 800ce5e:	e097      	b.n	800cf90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d007      	beq.n	800ce76 <USBD_StdEPReq+0x1f2>
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	2b80      	cmp	r3, #128	; 0x80
 800ce6a:	d004      	beq.n	800ce76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fbed 	bl	800d64e <USBD_CtlError>
                break;
 800ce74:	e091      	b.n	800cf9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	da0b      	bge.n	800ce96 <USBD_StdEPReq+0x212>
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce84:	4613      	mov	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	3310      	adds	r3, #16
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	4413      	add	r3, r2
 800ce92:	3304      	adds	r3, #4
 800ce94:	e00b      	b.n	800ceae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	4413      	add	r3, r2
 800ceac:	3304      	adds	r3, #4
 800ceae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2202      	movs	r2, #2
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fc37 	bl	800d730 <USBD_CtlSendData>
              break;
 800cec2:	e06a      	b.n	800cf9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	da11      	bge.n	800cef0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	f003 020f 	and.w	r2, r3, #15
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	3324      	adds	r3, #36	; 0x24
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d117      	bne.n	800cf16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fbb0 	bl	800d64e <USBD_CtlError>
                  break;
 800ceee:	e054      	b.n	800cf9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	f003 020f 	and.w	r2, r3, #15
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	440b      	add	r3, r1
 800cf02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d104      	bne.n	800cf16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fb9d 	bl	800d64e <USBD_CtlError>
                  break;
 800cf14:	e041      	b.n	800cf9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	da0b      	bge.n	800cf36 <USBD_StdEPReq+0x2b2>
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
 800cf20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf24:	4613      	mov	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	3310      	adds	r3, #16
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	4413      	add	r3, r2
 800cf32:	3304      	adds	r3, #4
 800cf34:	e00b      	b.n	800cf4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf36:	7bbb      	ldrb	r3, [r7, #14]
 800cf38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <USBD_StdEPReq+0x2d8>
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
 800cf58:	2b80      	cmp	r3, #128	; 0x80
 800cf5a:	d103      	bne.n	800cf64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	e00e      	b.n	800cf82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf64:	7bbb      	ldrb	r3, [r7, #14]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f003 ffe5 	bl	8010f38 <USBD_LL_IsStallEP>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2201      	movs	r2, #1
 800cf78:	601a      	str	r2, [r3, #0]
 800cf7a:	e002      	b.n	800cf82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2202      	movs	r2, #2
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fbd1 	bl	800d730 <USBD_CtlSendData>
              break;
 800cf8e:	e004      	b.n	800cf9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fb5b 	bl	800d64e <USBD_CtlError>
              break;
 800cf98:	bf00      	nop
          }
          break;
 800cf9a:	e004      	b.n	800cfa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fb55 	bl	800d64e <USBD_CtlError>
          break;
 800cfa4:	bf00      	nop
      }
      break;
 800cfa6:	e005      	b.n	800cfb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fb4f 	bl	800d64e <USBD_CtlError>
      break;
 800cfb0:	e000      	b.n	800cfb4 <USBD_StdEPReq+0x330>
      break;
 800cfb2:	bf00      	nop
  }

  return ret;
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	885b      	ldrh	r3, [r3, #2]
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	2b06      	cmp	r3, #6
 800cfe2:	f200 8128 	bhi.w	800d236 <USBD_GetDescriptor+0x276>
 800cfe6:	a201      	add	r2, pc, #4	; (adr r2, 800cfec <USBD_GetDescriptor+0x2c>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d009 	.word	0x0800d009
 800cff0:	0800d021 	.word	0x0800d021
 800cff4:	0800d061 	.word	0x0800d061
 800cff8:	0800d237 	.word	0x0800d237
 800cffc:	0800d237 	.word	0x0800d237
 800d000:	0800d1d7 	.word	0x0800d1d7
 800d004:	0800d203 	.word	0x0800d203
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	7c12      	ldrb	r2, [r2, #16]
 800d014:	f107 0108 	add.w	r1, r7, #8
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	60f8      	str	r0, [r7, #12]
      break;
 800d01e:	e112      	b.n	800d246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7c1b      	ldrb	r3, [r3, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10d      	bne.n	800d044 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d030:	f107 0208 	add.w	r2, r7, #8
 800d034:	4610      	mov	r0, r2
 800d036:	4798      	blx	r3
 800d038:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3301      	adds	r3, #1
 800d03e:	2202      	movs	r2, #2
 800d040:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d042:	e100      	b.n	800d246 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	f107 0208 	add.w	r2, r7, #8
 800d050:	4610      	mov	r0, r2
 800d052:	4798      	blx	r3
 800d054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3301      	adds	r3, #1
 800d05a:	2202      	movs	r2, #2
 800d05c:	701a      	strb	r2, [r3, #0]
      break;
 800d05e:	e0f2      	b.n	800d246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	885b      	ldrh	r3, [r3, #2]
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b05      	cmp	r3, #5
 800d068:	f200 80ac 	bhi.w	800d1c4 <USBD_GetDescriptor+0x204>
 800d06c:	a201      	add	r2, pc, #4	; (adr r2, 800d074 <USBD_GetDescriptor+0xb4>)
 800d06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d072:	bf00      	nop
 800d074:	0800d08d 	.word	0x0800d08d
 800d078:	0800d0c1 	.word	0x0800d0c1
 800d07c:	0800d0f5 	.word	0x0800d0f5
 800d080:	0800d129 	.word	0x0800d129
 800d084:	0800d15d 	.word	0x0800d15d
 800d088:	0800d191 	.word	0x0800d191
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00b      	beq.n	800d0b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	7c12      	ldrb	r2, [r2, #16]
 800d0a4:	f107 0108 	add.w	r1, r7, #8
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4798      	blx	r3
 800d0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ae:	e091      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 facb 	bl	800d64e <USBD_CtlError>
            err++;
 800d0b8:	7afb      	ldrb	r3, [r7, #11]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0be:	e089      	b.n	800d1d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	7c12      	ldrb	r2, [r2, #16]
 800d0d8:	f107 0108 	add.w	r1, r7, #8
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4798      	blx	r3
 800d0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0e2:	e077      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fab1 	bl	800d64e <USBD_CtlError>
            err++;
 800d0ec:	7afb      	ldrb	r3, [r7, #11]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0f2:	e06f      	b.n	800d1d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00b      	beq.n	800d118 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	7c12      	ldrb	r2, [r2, #16]
 800d10c:	f107 0108 	add.w	r1, r7, #8
 800d110:	4610      	mov	r0, r2
 800d112:	4798      	blx	r3
 800d114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d116:	e05d      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa97 	bl	800d64e <USBD_CtlError>
            err++;
 800d120:	7afb      	ldrb	r3, [r7, #11]
 800d122:	3301      	adds	r3, #1
 800d124:	72fb      	strb	r3, [r7, #11]
          break;
 800d126:	e055      	b.n	800d1d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00b      	beq.n	800d14c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	7c12      	ldrb	r2, [r2, #16]
 800d140:	f107 0108 	add.w	r1, r7, #8
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
 800d148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d14a:	e043      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fa7d 	bl	800d64e <USBD_CtlError>
            err++;
 800d154:	7afb      	ldrb	r3, [r7, #11]
 800d156:	3301      	adds	r3, #1
 800d158:	72fb      	strb	r3, [r7, #11]
          break;
 800d15a:	e03b      	b.n	800d1d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00b      	beq.n	800d180 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	7c12      	ldrb	r2, [r2, #16]
 800d174:	f107 0108 	add.w	r1, r7, #8
 800d178:	4610      	mov	r0, r2
 800d17a:	4798      	blx	r3
 800d17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17e:	e029      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa63 	bl	800d64e <USBD_CtlError>
            err++;
 800d188:	7afb      	ldrb	r3, [r7, #11]
 800d18a:	3301      	adds	r3, #1
 800d18c:	72fb      	strb	r3, [r7, #11]
          break;
 800d18e:	e021      	b.n	800d1d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d196:	699b      	ldr	r3, [r3, #24]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a2:	699b      	ldr	r3, [r3, #24]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	7c12      	ldrb	r2, [r2, #16]
 800d1a8:	f107 0108 	add.w	r1, r7, #8
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
 800d1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1b2:	e00f      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1b4:	6839      	ldr	r1, [r7, #0]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa49 	bl	800d64e <USBD_CtlError>
            err++;
 800d1bc:	7afb      	ldrb	r3, [r7, #11]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1c2:	e007      	b.n	800d1d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fa41 	bl	800d64e <USBD_CtlError>
          err++;
 800d1cc:	7afb      	ldrb	r3, [r7, #11]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d1d2:	bf00      	nop
      }
      break;
 800d1d4:	e037      	b.n	800d246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7c1b      	ldrb	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d109      	bne.n	800d1f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e6:	f107 0208 	add.w	r2, r7, #8
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	4798      	blx	r3
 800d1ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1f0:	e029      	b.n	800d246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa2a 	bl	800d64e <USBD_CtlError>
        err++;
 800d1fa:	7afb      	ldrb	r3, [r7, #11]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d200:	e021      	b.n	800d246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7c1b      	ldrb	r3, [r3, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10d      	bne.n	800d226 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	f107 0208 	add.w	r2, r7, #8
 800d216:	4610      	mov	r0, r2
 800d218:	4798      	blx	r3
 800d21a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3301      	adds	r3, #1
 800d220:	2207      	movs	r2, #7
 800d222:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d224:	e00f      	b.n	800d246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fa10 	bl	800d64e <USBD_CtlError>
        err++;
 800d22e:	7afb      	ldrb	r3, [r7, #11]
 800d230:	3301      	adds	r3, #1
 800d232:	72fb      	strb	r3, [r7, #11]
      break;
 800d234:	e007      	b.n	800d246 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa08 	bl	800d64e <USBD_CtlError>
      err++;
 800d23e:	7afb      	ldrb	r3, [r7, #11]
 800d240:	3301      	adds	r3, #1
 800d242:	72fb      	strb	r3, [r7, #11]
      break;
 800d244:	bf00      	nop
  }

  if (err != 0U)
 800d246:	7afb      	ldrb	r3, [r7, #11]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d11e      	bne.n	800d28a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	88db      	ldrh	r3, [r3, #6]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d016      	beq.n	800d282 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d254:	893b      	ldrh	r3, [r7, #8]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00e      	beq.n	800d278 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	88da      	ldrh	r2, [r3, #6]
 800d25e:	893b      	ldrh	r3, [r7, #8]
 800d260:	4293      	cmp	r3, r2
 800d262:	bf28      	it	cs
 800d264:	4613      	movcs	r3, r2
 800d266:	b29b      	uxth	r3, r3
 800d268:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d26a:	893b      	ldrh	r3, [r7, #8]
 800d26c:	461a      	mov	r2, r3
 800d26e:	68f9      	ldr	r1, [r7, #12]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fa5d 	bl	800d730 <USBD_CtlSendData>
 800d276:	e009      	b.n	800d28c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f9e7 	bl	800d64e <USBD_CtlError>
 800d280:	e004      	b.n	800d28c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 faae 	bl	800d7e4 <USBD_CtlSendStatus>
 800d288:	e000      	b.n	800d28c <USBD_GetDescriptor+0x2cc>
    return;
 800d28a:	bf00      	nop
  }
}
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop

0800d294 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	889b      	ldrh	r3, [r3, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d131      	bne.n	800d30a <USBD_SetAddress+0x76>
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	88db      	ldrh	r3, [r3, #6]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d12d      	bne.n	800d30a <USBD_SetAddress+0x76>
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	885b      	ldrh	r3, [r3, #2]
 800d2b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2b4:	d829      	bhi.n	800d30a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	885b      	ldrh	r3, [r3, #2]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d104      	bne.n	800d2d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f9bc 	bl	800d64e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d6:	e01d      	b.n	800d314 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	7bfa      	ldrb	r2, [r7, #15]
 800d2dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f003 fe53 	bl	8010f90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa7a 	bl	800d7e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d004      	beq.n	800d300 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2fe:	e009      	b.n	800d314 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d308:	e004      	b.n	800d314 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f99e 	bl	800d64e <USBD_CtlError>
  }
}
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	885b      	ldrh	r3, [r3, #2]
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	4b4e      	ldr	r3, [pc, #312]	; (800d46c <USBD_SetConfig+0x150>)
 800d332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d334:	4b4d      	ldr	r3, [pc, #308]	; (800d46c <USBD_SetConfig+0x150>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d905      	bls.n	800d348 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f985 	bl	800d64e <USBD_CtlError>
    return USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	e08c      	b.n	800d462 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b02      	cmp	r3, #2
 800d352:	d002      	beq.n	800d35a <USBD_SetConfig+0x3e>
 800d354:	2b03      	cmp	r3, #3
 800d356:	d029      	beq.n	800d3ac <USBD_SetConfig+0x90>
 800d358:	e075      	b.n	800d446 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d35a:	4b44      	ldr	r3, [pc, #272]	; (800d46c <USBD_SetConfig+0x150>)
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d020      	beq.n	800d3a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d362:	4b42      	ldr	r3, [pc, #264]	; (800d46c <USBD_SetConfig+0x150>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d36c:	4b3f      	ldr	r3, [pc, #252]	; (800d46c <USBD_SetConfig+0x150>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7fe ffe7 	bl	800c346 <USBD_SetClassConfig>
 800d378:	4603      	mov	r3, r0
 800d37a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d008      	beq.n	800d394 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f962 	bl	800d64e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d392:	e065      	b.n	800d460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fa25 	bl	800d7e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2203      	movs	r2, #3
 800d39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3a2:	e05d      	b.n	800d460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fa1d 	bl	800d7e4 <USBD_CtlSendStatus>
      break;
 800d3aa:	e059      	b.n	800d460 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3ac:	4b2f      	ldr	r3, [pc, #188]	; (800d46c <USBD_SetConfig+0x150>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d112      	bne.n	800d3da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d3bc:	4b2b      	ldr	r3, [pc, #172]	; (800d46c <USBD_SetConfig+0x150>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3c6:	4b29      	ldr	r3, [pc, #164]	; (800d46c <USBD_SetConfig+0x150>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7fe ffd6 	bl	800c37e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fa06 	bl	800d7e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3d8:	e042      	b.n	800d460 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d3da:	4b24      	ldr	r3, [pc, #144]	; (800d46c <USBD_SetConfig+0x150>)
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d02a      	beq.n	800d43e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7fe ffc4 	bl	800c37e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d3f6:	4b1d      	ldr	r3, [pc, #116]	; (800d46c <USBD_SetConfig+0x150>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d400:	4b1a      	ldr	r3, [pc, #104]	; (800d46c <USBD_SetConfig+0x150>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	4619      	mov	r1, r3
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7fe ff9d 	bl	800c346 <USBD_SetClassConfig>
 800d40c:	4603      	mov	r3, r0
 800d40e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00f      	beq.n	800d436 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f918 	bl	800d64e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	4619      	mov	r1, r3
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7fe ffa9 	bl	800c37e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2202      	movs	r2, #2
 800d430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d434:	e014      	b.n	800d460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f9d4 	bl	800d7e4 <USBD_CtlSendStatus>
      break;
 800d43c:	e010      	b.n	800d460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f9d0 	bl	800d7e4 <USBD_CtlSendStatus>
      break;
 800d444:	e00c      	b.n	800d460 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f900 	bl	800d64e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d44e:	4b07      	ldr	r3, [pc, #28]	; (800d46c <USBD_SetConfig+0x150>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	4619      	mov	r1, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7fe ff92 	bl	800c37e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	73fb      	strb	r3, [r7, #15]
      break;
 800d45e:	bf00      	nop
  }

  return ret;
 800d460:	7bfb      	ldrb	r3, [r7, #15]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	20000984 	.word	0x20000984

0800d470 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	88db      	ldrh	r3, [r3, #6]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d004      	beq.n	800d48c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f8e2 	bl	800d64e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d48a:	e023      	b.n	800d4d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b02      	cmp	r3, #2
 800d496:	dc02      	bgt.n	800d49e <USBD_GetConfig+0x2e>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	dc03      	bgt.n	800d4a4 <USBD_GetConfig+0x34>
 800d49c:	e015      	b.n	800d4ca <USBD_GetConfig+0x5a>
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d00b      	beq.n	800d4ba <USBD_GetConfig+0x4a>
 800d4a2:	e012      	b.n	800d4ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	3308      	adds	r3, #8
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f93c 	bl	800d730 <USBD_CtlSendData>
        break;
 800d4b8:	e00c      	b.n	800d4d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	2201      	movs	r2, #1
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f934 	bl	800d730 <USBD_CtlSendData>
        break;
 800d4c8:	e004      	b.n	800d4d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d4ca:	6839      	ldr	r1, [r7, #0]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f8be 	bl	800d64e <USBD_CtlError>
        break;
 800d4d2:	bf00      	nop
}
 800d4d4:	bf00      	nop
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d81e      	bhi.n	800d532 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	88db      	ldrh	r3, [r3, #6]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d004      	beq.n	800d506 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f8a5 	bl	800d64e <USBD_CtlError>
        break;
 800d504:	e01a      	b.n	800d53c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2201      	movs	r2, #1
 800d50a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	f043 0202 	orr.w	r2, r3, #2
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	330c      	adds	r3, #12
 800d526:	2202      	movs	r2, #2
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f900 	bl	800d730 <USBD_CtlSendData>
      break;
 800d530:	e004      	b.n	800d53c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d532:	6839      	ldr	r1, [r7, #0]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f88a 	bl	800d64e <USBD_CtlError>
      break;
 800d53a:	bf00      	nop
  }
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	885b      	ldrh	r3, [r3, #2]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d107      	bne.n	800d566 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f940 	bl	800d7e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d564:	e013      	b.n	800d58e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	885b      	ldrh	r3, [r3, #2]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d10b      	bne.n	800d586 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	889b      	ldrh	r3, [r3, #4]
 800d572:	0a1b      	lsrs	r3, r3, #8
 800d574:	b29b      	uxth	r3, r3
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f930 	bl	800d7e4 <USBD_CtlSendStatus>
}
 800d584:	e003      	b.n	800d58e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d586:	6839      	ldr	r1, [r7, #0]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f860 	bl	800d64e <USBD_CtlError>
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d80b      	bhi.n	800d5c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d10c      	bne.n	800d5d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f910 	bl	800d7e4 <USBD_CtlSendStatus>
      }
      break;
 800d5c4:	e004      	b.n	800d5d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f840 	bl	800d64e <USBD_CtlError>
      break;
 800d5ce:	e000      	b.n	800d5d2 <USBD_ClrFeature+0x3c>
      break;
 800d5d0:	bf00      	nop
  }
}
 800d5d2:	bf00      	nop
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	781a      	ldrb	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3301      	adds	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7ff fa41 	bl	800ca8c <SWAPBYTE>
 800d60a:	4603      	mov	r3, r0
 800d60c:	461a      	mov	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3301      	adds	r3, #1
 800d616:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3301      	adds	r3, #1
 800d61c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7ff fa34 	bl	800ca8c <SWAPBYTE>
 800d624:	4603      	mov	r3, r0
 800d626:	461a      	mov	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	3301      	adds	r3, #1
 800d630:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3301      	adds	r3, #1
 800d636:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7ff fa27 	bl	800ca8c <SWAPBYTE>
 800d63e:	4603      	mov	r3, r0
 800d640:	461a      	mov	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	80da      	strh	r2, [r3, #6]
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d658:	2180      	movs	r1, #128	; 0x80
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f003 fc2e 	bl	8010ebc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d660:	2100      	movs	r1, #0
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f003 fc2a 	bl	8010ebc <USBD_LL_StallEP>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d036      	beq.n	800d6f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d68a:	6938      	ldr	r0, [r7, #16]
 800d68c:	f000 f836 	bl	800d6fc <USBD_GetLen>
 800d690:	4603      	mov	r3, r0
 800d692:	3301      	adds	r3, #1
 800d694:	b29b      	uxth	r3, r3
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	b29a      	uxth	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7812      	ldrb	r2, [r2, #0]
 800d6a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6b0:	7dfb      	ldrb	r3, [r7, #23]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6c0:	e013      	b.n	800d6ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	693a      	ldr	r2, [r7, #16]
 800d6ca:	7812      	ldrb	r2, [r2, #0]
 800d6cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	613b      	str	r3, [r7, #16]
    idx++;
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	4413      	add	r3, r2
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1e7      	bne.n	800d6c2 <USBD_GetString+0x52>
 800d6f2:	e000      	b.n	800d6f6 <USBD_GetString+0x86>
    return;
 800d6f4:	bf00      	nop
  }
}
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d70c:	e005      	b.n	800d71a <USBD_GetLen+0x1e>
  {
    len++;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	3301      	adds	r3, #1
 800d712:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	3301      	adds	r3, #1
 800d718:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f5      	bne.n	800d70e <USBD_GetLen+0x12>
  }

  return len;
 800d722:	7bfb      	ldrb	r3, [r7, #15]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2202      	movs	r2, #2
 800d740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	2100      	movs	r1, #0
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f003 fc39 	bl	8010fce <USBD_LL_Transmit>

  return USBD_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	2100      	movs	r1, #0
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f003 fc28 	bl	8010fce <USBD_LL_Transmit>

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2203      	movs	r2, #3
 800d798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f003 fc2c 	bl	8011010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b084      	sub	sp, #16
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f003 fc1b 	bl	8011010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2204      	movs	r2, #4
 800d7f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f003 fbe7 	bl	8010fce <USBD_LL_Transmit>

  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b082      	sub	sp, #8
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2205      	movs	r2, #5
 800d816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f003 fbf5 	bl	8011010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <__NVIC_SetPriority>:
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d83c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d840:	2b00      	cmp	r3, #0
 800d842:	db0a      	blt.n	800d85a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	b2da      	uxtb	r2, r3
 800d848:	490c      	ldr	r1, [pc, #48]	; (800d87c <__NVIC_SetPriority+0x4c>)
 800d84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d84e:	0112      	lsls	r2, r2, #4
 800d850:	b2d2      	uxtb	r2, r2
 800d852:	440b      	add	r3, r1
 800d854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d858:	e00a      	b.n	800d870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	4908      	ldr	r1, [pc, #32]	; (800d880 <__NVIC_SetPriority+0x50>)
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	f003 030f 	and.w	r3, r3, #15
 800d866:	3b04      	subs	r3, #4
 800d868:	0112      	lsls	r2, r2, #4
 800d86a:	b2d2      	uxtb	r2, r2
 800d86c:	440b      	add	r3, r1
 800d86e:	761a      	strb	r2, [r3, #24]
}
 800d870:	bf00      	nop
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	e000e100 	.word	0xe000e100
 800d880:	e000ed00 	.word	0xe000ed00

0800d884 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d888:	4b05      	ldr	r3, [pc, #20]	; (800d8a0 <SysTick_Handler+0x1c>)
 800d88a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d88c:	f001 feb2 	bl	800f5f4 <xTaskGetSchedulerState>
 800d890:	4603      	mov	r3, r0
 800d892:	2b01      	cmp	r3, #1
 800d894:	d001      	beq.n	800d89a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d896:	f002 fc97 	bl	80101c8 <xPortSysTickHandler>
  }
}
 800d89a:	bf00      	nop
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	e000e010 	.word	0xe000e010

0800d8a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f06f 0004 	mvn.w	r0, #4
 800d8ae:	f7ff ffbf 	bl	800d830 <__NVIC_SetPriority>
#endif
}
 800d8b2:	bf00      	nop
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8be:	f3ef 8305 	mrs	r3, IPSR
 800d8c2:	603b      	str	r3, [r7, #0]
  return(result);
 800d8c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d8ca:	f06f 0305 	mvn.w	r3, #5
 800d8ce:	607b      	str	r3, [r7, #4]
 800d8d0:	e00c      	b.n	800d8ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d8d2:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <osKernelInitialize+0x44>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d105      	bne.n	800d8e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d8da:	4b08      	ldr	r3, [pc, #32]	; (800d8fc <osKernelInitialize+0x44>)
 800d8dc:	2201      	movs	r2, #1
 800d8de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	607b      	str	r3, [r7, #4]
 800d8e4:	e002      	b.n	800d8ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8ec:	687b      	ldr	r3, [r7, #4]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	370c      	adds	r7, #12
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	20000988 	.word	0x20000988

0800d900 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d906:	f3ef 8305 	mrs	r3, IPSR
 800d90a:	603b      	str	r3, [r7, #0]
  return(result);
 800d90c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d003      	beq.n	800d91a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d912:	f06f 0305 	mvn.w	r3, #5
 800d916:	607b      	str	r3, [r7, #4]
 800d918:	e010      	b.n	800d93c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d91a:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <osKernelStart+0x48>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d109      	bne.n	800d936 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d922:	f7ff ffbf 	bl	800d8a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d926:	4b08      	ldr	r3, [pc, #32]	; (800d948 <osKernelStart+0x48>)
 800d928:	2202      	movs	r2, #2
 800d92a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d92c:	f001 fa1a 	bl	800ed64 <vTaskStartScheduler>
      stat = osOK;
 800d930:	2300      	movs	r3, #0
 800d932:	607b      	str	r3, [r7, #4]
 800d934:	e002      	b.n	800d93c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d936:	f04f 33ff 	mov.w	r3, #4294967295
 800d93a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d93c:	687b      	ldr	r3, [r7, #4]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000988 	.word	0x20000988

0800d94c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08e      	sub	sp, #56	; 0x38
 800d950:	af04      	add	r7, sp, #16
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d95c:	f3ef 8305 	mrs	r3, IPSR
 800d960:	617b      	str	r3, [r7, #20]
  return(result);
 800d962:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d964:	2b00      	cmp	r3, #0
 800d966:	d17f      	bne.n	800da68 <osThreadNew+0x11c>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d07c      	beq.n	800da68 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d96e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d972:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d974:	2318      	movs	r3, #24
 800d976:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d97c:	f04f 33ff 	mov.w	r3, #4294967295
 800d980:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d045      	beq.n	800da14 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <osThreadNew+0x4a>
        name = attr->name;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d008      	beq.n	800d9bc <osThreadNew+0x70>
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2b38      	cmp	r3, #56	; 0x38
 800d9ae:	d805      	bhi.n	800d9bc <osThreadNew+0x70>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <osThreadNew+0x74>
        return (NULL);
 800d9bc:	2300      	movs	r3, #0
 800d9be:	e054      	b.n	800da6a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d003      	beq.n	800d9d0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	089b      	lsrs	r3, r3, #2
 800d9ce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00e      	beq.n	800d9f6 <osThreadNew+0xaa>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	2b6b      	cmp	r3, #107	; 0x6b
 800d9de:	d90a      	bls.n	800d9f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <osThreadNew+0xaa>
        mem = 1;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	61bb      	str	r3, [r7, #24]
 800d9f4:	e010      	b.n	800da18 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10c      	bne.n	800da18 <osThreadNew+0xcc>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d108      	bne.n	800da18 <osThreadNew+0xcc>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d104      	bne.n	800da18 <osThreadNew+0xcc>
          mem = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	61bb      	str	r3, [r7, #24]
 800da12:	e001      	b.n	800da18 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d110      	bne.n	800da40 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da26:	9202      	str	r2, [sp, #8]
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	6a3a      	ldr	r2, [r7, #32]
 800da32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 feb9 	bl	800e7ac <xTaskCreateStatic>
 800da3a:	4603      	mov	r3, r0
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	e013      	b.n	800da68 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d110      	bne.n	800da68 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	b29a      	uxth	r2, r3
 800da4a:	f107 0310 	add.w	r3, r7, #16
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 ff04 	bl	800e866 <xTaskCreate>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b01      	cmp	r3, #1
 800da62:	d001      	beq.n	800da68 <osThreadNew+0x11c>
            hTask = NULL;
 800da64:	2300      	movs	r3, #0
 800da66:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da68:	693b      	ldr	r3, [r7, #16]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3728      	adds	r7, #40	; 0x28
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7a:	f3ef 8305 	mrs	r3, IPSR
 800da7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <osDelay+0x1c>
    stat = osErrorISR;
 800da86:	f06f 0305 	mvn.w	r3, #5
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e007      	b.n	800da9e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da8e:	2300      	movs	r3, #0
 800da90:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <osDelay+0x2c>
      vTaskDelay(ticks);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f001 f829 	bl	800eaf0 <vTaskDelay>
    }
  }

  return (stat);
 800da9e:	68fb      	ldr	r3, [r7, #12]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08a      	sub	sp, #40	; 0x28
 800daac:	af02      	add	r7, sp, #8
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dab4:	2300      	movs	r3, #0
 800dab6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab8:	f3ef 8305 	mrs	r3, IPSR
 800dabc:	613b      	str	r3, [r7, #16]
  return(result);
 800dabe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d15f      	bne.n	800db84 <osMessageQueueNew+0xdc>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d05c      	beq.n	800db84 <osMessageQueueNew+0xdc>
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d059      	beq.n	800db84 <osMessageQueueNew+0xdc>
    mem = -1;
 800dad0:	f04f 33ff 	mov.w	r3, #4294967295
 800dad4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d029      	beq.n	800db30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d012      	beq.n	800db0a <osMessageQueueNew+0x62>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	2b4f      	cmp	r3, #79	; 0x4f
 800daea:	d90e      	bls.n	800db0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00a      	beq.n	800db0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	695a      	ldr	r2, [r3, #20]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	68b9      	ldr	r1, [r7, #8]
 800dafc:	fb01 f303 	mul.w	r3, r1, r3
 800db00:	429a      	cmp	r2, r3
 800db02:	d302      	bcc.n	800db0a <osMessageQueueNew+0x62>
        mem = 1;
 800db04:	2301      	movs	r3, #1
 800db06:	61bb      	str	r3, [r7, #24]
 800db08:	e014      	b.n	800db34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d110      	bne.n	800db34 <osMessageQueueNew+0x8c>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10c      	bne.n	800db34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d108      	bne.n	800db34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d104      	bne.n	800db34 <osMessageQueueNew+0x8c>
          mem = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	e001      	b.n	800db34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d10b      	bne.n	800db52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	691a      	ldr	r2, [r3, #16]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	2100      	movs	r1, #0
 800db44:	9100      	str	r1, [sp, #0]
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 f971 	bl	800de30 <xQueueGenericCreateStatic>
 800db4e:	61f8      	str	r0, [r7, #28]
 800db50:	e008      	b.n	800db64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d105      	bne.n	800db64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800db58:	2200      	movs	r2, #0
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f9df 	bl	800df20 <xQueueGenericCreate>
 800db62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00c      	beq.n	800db84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d003      	beq.n	800db78 <osMessageQueueNew+0xd0>
        name = attr->name;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	617b      	str	r3, [r7, #20]
 800db76:	e001      	b.n	800db7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800db7c:	6979      	ldr	r1, [r7, #20]
 800db7e:	69f8      	ldr	r0, [r7, #28]
 800db80:	f000 fdb6 	bl	800e6f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800db84:	69fb      	ldr	r3, [r7, #28]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3720      	adds	r7, #32
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
	...

0800db90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	4a07      	ldr	r2, [pc, #28]	; (800dbbc <vApplicationGetIdleTaskMemory+0x2c>)
 800dba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	4a06      	ldr	r2, [pc, #24]	; (800dbc0 <vApplicationGetIdleTaskMemory+0x30>)
 800dba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbae:	601a      	str	r2, [r3, #0]
}
 800dbb0:	bf00      	nop
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	2000098c 	.word	0x2000098c
 800dbc0:	200009f8 	.word	0x200009f8

0800dbc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4a07      	ldr	r2, [pc, #28]	; (800dbf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dbd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	4a06      	ldr	r2, [pc, #24]	; (800dbf4 <vApplicationGetTimerTaskMemory+0x30>)
 800dbda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbe2:	601a      	str	r2, [r3, #0]
}
 800dbe4:	bf00      	nop
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	20000df8 	.word	0x20000df8
 800dbf4:	20000e64 	.word	0x20000e64

0800dbf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f103 0208 	add.w	r2, r3, #8
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f103 0208 	add.w	r2, r3, #8
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f103 0208 	add.w	r2, r3, #8
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc52:	b480      	push	{r7}
 800dc54:	b085      	sub	sp, #20
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	683a      	ldr	r2, [r7, #0]
 800dc76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	601a      	str	r2, [r3, #0]
}
 800dc8e:	bf00      	nop
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b085      	sub	sp, #20
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb0:	d103      	bne.n	800dcba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	e00c      	b.n	800dcd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	60fb      	str	r3, [r7, #12]
 800dcc0:	e002      	b.n	800dcc8 <vListInsert+0x2e>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d2f6      	bcs.n	800dcc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	685a      	ldr	r2, [r3, #4]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	683a      	ldr	r2, [r7, #0]
 800dce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
}
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	6892      	ldr	r2, [r2, #8]
 800dd22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	6852      	ldr	r2, [r2, #4]
 800dd2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d103      	bne.n	800dd40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	1e5a      	subs	r2, r3, #1
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10a      	bne.n	800dd8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd86:	bf00      	nop
 800dd88:	e7fe      	b.n	800dd88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dd8a:	f002 f98b 	bl	80100a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd96:	68f9      	ldr	r1, [r7, #12]
 800dd98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd9a:	fb01 f303 	mul.w	r3, r1, r3
 800dd9e:	441a      	add	r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	68f9      	ldr	r1, [r7, #12]
 800ddbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddc0:	fb01 f303 	mul.w	r3, r1, r3
 800ddc4:	441a      	add	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	22ff      	movs	r2, #255	; 0xff
 800ddce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	22ff      	movs	r2, #255	; 0xff
 800ddd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d114      	bne.n	800de0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d01a      	beq.n	800de1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	3310      	adds	r3, #16
 800ddec:	4618      	mov	r0, r3
 800ddee:	f001 fa43 	bl	800f278 <xTaskRemoveFromEventList>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d012      	beq.n	800de1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <xQueueGenericReset+0xcc>)
 800ddfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	e009      	b.n	800de1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3310      	adds	r3, #16
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff fef2 	bl	800dbf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3324      	adds	r3, #36	; 0x24
 800de18:	4618      	mov	r0, r3
 800de1a:	f7ff feed 	bl	800dbf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de1e:	f002 f971 	bl	8010104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de22:	2301      	movs	r3, #1
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	e000ed04 	.word	0xe000ed04

0800de30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08e      	sub	sp, #56	; 0x38
 800de34:	af02      	add	r7, sp, #8
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10a      	bne.n	800de5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de56:	bf00      	nop
 800de58:	e7fe      	b.n	800de58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10a      	bne.n	800de76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de72:	bf00      	nop
 800de74:	e7fe      	b.n	800de74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <xQueueGenericCreateStatic+0x52>
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <xQueueGenericCreateStatic+0x56>
 800de82:	2301      	movs	r3, #1
 800de84:	e000      	b.n	800de88 <xQueueGenericCreateStatic+0x58>
 800de86:	2300      	movs	r3, #0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d10a      	bne.n	800dea2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	623b      	str	r3, [r7, #32]
}
 800de9e:	bf00      	nop
 800dea0:	e7fe      	b.n	800dea0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <xQueueGenericCreateStatic+0x7e>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <xQueueGenericCreateStatic+0x82>
 800deae:	2301      	movs	r3, #1
 800deb0:	e000      	b.n	800deb4 <xQueueGenericCreateStatic+0x84>
 800deb2:	2300      	movs	r3, #0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	61fb      	str	r3, [r7, #28]
}
 800deca:	bf00      	nop
 800decc:	e7fe      	b.n	800decc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dece:	2350      	movs	r3, #80	; 0x50
 800ded0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b50      	cmp	r3, #80	; 0x50
 800ded6:	d00a      	beq.n	800deee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ded8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dedc:	f383 8811 	msr	BASEPRI, r3
 800dee0:	f3bf 8f6f 	isb	sy
 800dee4:	f3bf 8f4f 	dsb	sy
 800dee8:	61bb      	str	r3, [r7, #24]
}
 800deea:	bf00      	nop
 800deec:	e7fe      	b.n	800deec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800deee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00d      	beq.n	800df16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	2201      	movs	r2, #1
 800defe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	4613      	mov	r3, r2
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	68b9      	ldr	r1, [r7, #8]
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f000 f83f 	bl	800df94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df18:	4618      	mov	r0, r3
 800df1a:	3730      	adds	r7, #48	; 0x30
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08a      	sub	sp, #40	; 0x28
 800df24:	af02      	add	r7, sp, #8
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	4613      	mov	r3, r2
 800df2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10a      	bne.n	800df4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	613b      	str	r3, [r7, #16]
}
 800df46:	bf00      	nop
 800df48:	e7fe      	b.n	800df48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	fb02 f303 	mul.w	r3, r2, r3
 800df52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	3350      	adds	r3, #80	; 0x50
 800df58:	4618      	mov	r0, r3
 800df5a:	f002 f9c5 	bl	80102e8 <pvPortMalloc>
 800df5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d011      	beq.n	800df8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	3350      	adds	r3, #80	; 0x50
 800df6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df78:	79fa      	ldrb	r2, [r7, #7]
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	4613      	mov	r3, r2
 800df80:	697a      	ldr	r2, [r7, #20]
 800df82:	68b9      	ldr	r1, [r7, #8]
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 f805 	bl	800df94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df8a:	69bb      	ldr	r3, [r7, #24]
	}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3720      	adds	r7, #32
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
 800dfa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d103      	bne.n	800dfb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	e002      	b.n	800dfb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dfc2:	2101      	movs	r1, #1
 800dfc4:	69b8      	ldr	r0, [r7, #24]
 800dfc6:	f7ff fecb 	bl	800dd60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	78fa      	ldrb	r2, [r7, #3]
 800dfce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dfd2:	bf00      	nop
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08e      	sub	sp, #56	; 0x38
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dfea:	2300      	movs	r3, #0
 800dfec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <xQueueGenericSend+0x32>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d103      	bne.n	800e01c <xQueueGenericSend+0x40>
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <xQueueGenericSend+0x44>
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <xQueueGenericSend+0x46>
 800e020:	2300      	movs	r3, #0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10a      	bne.n	800e03c <xQueueGenericSend+0x60>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e038:	bf00      	nop
 800e03a:	e7fe      	b.n	800e03a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d103      	bne.n	800e04a <xQueueGenericSend+0x6e>
 800e042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e046:	2b01      	cmp	r3, #1
 800e048:	d101      	bne.n	800e04e <xQueueGenericSend+0x72>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e000      	b.n	800e050 <xQueueGenericSend+0x74>
 800e04e:	2300      	movs	r3, #0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10a      	bne.n	800e06a <xQueueGenericSend+0x8e>
	__asm volatile
 800e054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	623b      	str	r3, [r7, #32]
}
 800e066:	bf00      	nop
 800e068:	e7fe      	b.n	800e068 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e06a:	f001 fac3 	bl	800f5f4 <xTaskGetSchedulerState>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <xQueueGenericSend+0x9e>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <xQueueGenericSend+0xa2>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <xQueueGenericSend+0xa4>
 800e07e:	2300      	movs	r3, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <xQueueGenericSend+0xbe>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	61fb      	str	r3, [r7, #28]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e09a:	f002 f803 	bl	80100a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d302      	bcc.n	800e0b0 <xQueueGenericSend+0xd4>
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d129      	bne.n	800e104 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	68b9      	ldr	r1, [r7, #8]
 800e0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0b6:	f000 fa0b 	bl	800e4d0 <prvCopyDataToQueue>
 800e0ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d010      	beq.n	800e0e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	3324      	adds	r3, #36	; 0x24
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f001 f8d5 	bl	800f278 <xTaskRemoveFromEventList>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d013      	beq.n	800e0fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e0d4:	4b3f      	ldr	r3, [pc, #252]	; (800e1d4 <xQueueGenericSend+0x1f8>)
 800e0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	e00a      	b.n	800e0fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d007      	beq.n	800e0fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e0ec:	4b39      	ldr	r3, [pc, #228]	; (800e1d4 <xQueueGenericSend+0x1f8>)
 800e0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e0fc:	f002 f802 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e100:	2301      	movs	r3, #1
 800e102:	e063      	b.n	800e1cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d103      	bne.n	800e112 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e10a:	f001 fffb 	bl	8010104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	e05c      	b.n	800e1cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e118:	f107 0314 	add.w	r3, r7, #20
 800e11c:	4618      	mov	r0, r3
 800e11e:	f001 f90f 	bl	800f340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e122:	2301      	movs	r3, #1
 800e124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e126:	f001 ffed 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e12a:	f000 fe81 	bl	800ee30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e12e:	f001 ffb9 	bl	80100a4 <vPortEnterCritical>
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e138:	b25b      	sxtb	r3, r3
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d103      	bne.n	800e148 <xQueueGenericSend+0x16c>
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e14e:	b25b      	sxtb	r3, r3
 800e150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e154:	d103      	bne.n	800e15e <xQueueGenericSend+0x182>
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e15e:	f001 ffd1 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e162:	1d3a      	adds	r2, r7, #4
 800e164:	f107 0314 	add.w	r3, r7, #20
 800e168:	4611      	mov	r1, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 f8fe 	bl	800f36c <xTaskCheckForTimeOut>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d124      	bne.n	800e1c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e178:	f000 faa2 	bl	800e6c0 <prvIsQueueFull>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d018      	beq.n	800e1b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e184:	3310      	adds	r3, #16
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f001 f824 	bl	800f1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e192:	f000 fa2d 	bl	800e5f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e196:	f000 fe59 	bl	800ee4c <xTaskResumeAll>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f47f af7c 	bne.w	800e09a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1a2:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <xQueueGenericSend+0x1f8>)
 800e1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	e772      	b.n	800e09a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1b6:	f000 fa1b 	bl	800e5f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1ba:	f000 fe47 	bl	800ee4c <xTaskResumeAll>
 800e1be:	e76c      	b.n	800e09a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1c2:	f000 fa15 	bl	800e5f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1c6:	f000 fe41 	bl	800ee4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e1ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3738      	adds	r7, #56	; 0x38
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	e000ed04 	.word	0xe000ed04

0800e1d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b090      	sub	sp, #64	; 0x40
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10a      	bne.n	800e206 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d103      	bne.n	800e214 <xQueueGenericSendFromISR+0x3c>
 800e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e210:	2b00      	cmp	r3, #0
 800e212:	d101      	bne.n	800e218 <xQueueGenericSendFromISR+0x40>
 800e214:	2301      	movs	r3, #1
 800e216:	e000      	b.n	800e21a <xQueueGenericSendFromISR+0x42>
 800e218:	2300      	movs	r3, #0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10a      	bne.n	800e234 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e230:	bf00      	nop
 800e232:	e7fe      	b.n	800e232 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b02      	cmp	r3, #2
 800e238:	d103      	bne.n	800e242 <xQueueGenericSendFromISR+0x6a>
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d101      	bne.n	800e246 <xQueueGenericSendFromISR+0x6e>
 800e242:	2301      	movs	r3, #1
 800e244:	e000      	b.n	800e248 <xQueueGenericSendFromISR+0x70>
 800e246:	2300      	movs	r3, #0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	623b      	str	r3, [r7, #32]
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e262:	f002 f801 	bl	8010268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e266:	f3ef 8211 	mrs	r2, BASEPRI
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	61fa      	str	r2, [r7, #28]
 800e27c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e27e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e280:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d302      	bcc.n	800e294 <xQueueGenericSendFromISR+0xbc>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b02      	cmp	r3, #2
 800e292:	d12f      	bne.n	800e2f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	68b9      	ldr	r1, [r7, #8]
 800e2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2aa:	f000 f911 	bl	800e4d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b6:	d112      	bne.n	800e2de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d016      	beq.n	800e2ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	3324      	adds	r3, #36	; 0x24
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 ffd7 	bl	800f278 <xTaskRemoveFromEventList>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00e      	beq.n	800e2ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00b      	beq.n	800e2ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	e007      	b.n	800e2ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e2de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	b25a      	sxtb	r2, r3
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e2f2:	e001      	b.n	800e2f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e306:	4618      	mov	r0, r3
 800e308:	3740      	adds	r7, #64	; 0x40
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
	...

0800e310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08c      	sub	sp, #48	; 0x30
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e31c:	2300      	movs	r3, #0
 800e31e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10a      	bne.n	800e340 <xQueueReceive+0x30>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	623b      	str	r3, [r7, #32]
}
 800e33c:	bf00      	nop
 800e33e:	e7fe      	b.n	800e33e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d103      	bne.n	800e34e <xQueueReceive+0x3e>
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <xQueueReceive+0x42>
 800e34e:	2301      	movs	r3, #1
 800e350:	e000      	b.n	800e354 <xQueueReceive+0x44>
 800e352:	2300      	movs	r3, #0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d10a      	bne.n	800e36e <xQueueReceive+0x5e>
	__asm volatile
 800e358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35c:	f383 8811 	msr	BASEPRI, r3
 800e360:	f3bf 8f6f 	isb	sy
 800e364:	f3bf 8f4f 	dsb	sy
 800e368:	61fb      	str	r3, [r7, #28]
}
 800e36a:	bf00      	nop
 800e36c:	e7fe      	b.n	800e36c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e36e:	f001 f941 	bl	800f5f4 <xTaskGetSchedulerState>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <xQueueReceive+0x6e>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <xQueueReceive+0x72>
 800e37e:	2301      	movs	r3, #1
 800e380:	e000      	b.n	800e384 <xQueueReceive+0x74>
 800e382:	2300      	movs	r3, #0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <xQueueReceive+0x8e>
	__asm volatile
 800e388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	61bb      	str	r3, [r7, #24]
}
 800e39a:	bf00      	nop
 800e39c:	e7fe      	b.n	800e39c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e39e:	f001 fe81 	bl	80100a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d01f      	beq.n	800e3ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3ae:	68b9      	ldr	r1, [r7, #8]
 800e3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3b2:	f000 f8f7 	bl	800e5a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	1e5a      	subs	r2, r3, #1
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00f      	beq.n	800e3e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	3310      	adds	r3, #16
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 ff54 	bl	800f278 <xTaskRemoveFromEventList>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d007      	beq.n	800e3e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e3d6:	4b3d      	ldr	r3, [pc, #244]	; (800e4cc <xQueueReceive+0x1bc>)
 800e3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e3e6:	f001 fe8d 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e069      	b.n	800e4c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d103      	bne.n	800e3fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3f4:	f001 fe86 	bl	8010104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e062      	b.n	800e4c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d106      	bne.n	800e410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e402:	f107 0310 	add.w	r3, r7, #16
 800e406:	4618      	mov	r0, r3
 800e408:	f000 ff9a 	bl	800f340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e40c:	2301      	movs	r3, #1
 800e40e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e410:	f001 fe78 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e414:	f000 fd0c 	bl	800ee30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e418:	f001 fe44 	bl	80100a4 <vPortEnterCritical>
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e422:	b25b      	sxtb	r3, r3
 800e424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e428:	d103      	bne.n	800e432 <xQueueReceive+0x122>
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e438:	b25b      	sxtb	r3, r3
 800e43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43e:	d103      	bne.n	800e448 <xQueueReceive+0x138>
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	2200      	movs	r2, #0
 800e444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e448:	f001 fe5c 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e44c:	1d3a      	adds	r2, r7, #4
 800e44e:	f107 0310 	add.w	r3, r7, #16
 800e452:	4611      	mov	r1, r2
 800e454:	4618      	mov	r0, r3
 800e456:	f000 ff89 	bl	800f36c <xTaskCheckForTimeOut>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d123      	bne.n	800e4a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e462:	f000 f917 	bl	800e694 <prvIsQueueEmpty>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d017      	beq.n	800e49c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	3324      	adds	r3, #36	; 0x24
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4611      	mov	r1, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f000 feaf 	bl	800f1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e47c:	f000 f8b8 	bl	800e5f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e480:	f000 fce4 	bl	800ee4c <xTaskResumeAll>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d189      	bne.n	800e39e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e48a:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <xQueueReceive+0x1bc>)
 800e48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	e780      	b.n	800e39e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e49c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e49e:	f000 f8a7 	bl	800e5f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4a2:	f000 fcd3 	bl	800ee4c <xTaskResumeAll>
 800e4a6:	e77a      	b.n	800e39e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4aa:	f000 f8a1 	bl	800e5f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4ae:	f000 fccd 	bl	800ee4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4b4:	f000 f8ee 	bl	800e694 <prvIsQueueEmpty>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f43f af6f 	beq.w	800e39e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3730      	adds	r7, #48	; 0x30
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	e000ed04 	.word	0xe000ed04

0800e4d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10d      	bne.n	800e50a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d14d      	bne.n	800e592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f001 f898 	bl	800f630 <xTaskPriorityDisinherit>
 800e500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	609a      	str	r2, [r3, #8]
 800e508:	e043      	b.n	800e592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d119      	bne.n	800e544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6858      	ldr	r0, [r3, #4]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e518:	461a      	mov	r2, r3
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	f002 fe36 	bl	801118c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	685a      	ldr	r2, [r3, #4]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e528:	441a      	add	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	429a      	cmp	r2, r3
 800e538:	d32b      	bcc.n	800e592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	605a      	str	r2, [r3, #4]
 800e542:	e026      	b.n	800e592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68d8      	ldr	r0, [r3, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e54c:	461a      	mov	r2, r3
 800e54e:	68b9      	ldr	r1, [r7, #8]
 800e550:	f002 fe1c 	bl	801118c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	68da      	ldr	r2, [r3, #12]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55c:	425b      	negs	r3, r3
 800e55e:	441a      	add	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	68da      	ldr	r2, [r3, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d207      	bcs.n	800e580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e578:	425b      	negs	r3, r3
 800e57a:	441a      	add	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b02      	cmp	r3, #2
 800e584:	d105      	bne.n	800e592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	3b01      	subs	r3, #1
 800e590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	1c5a      	adds	r2, r3, #1
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e59a:	697b      	ldr	r3, [r7, #20]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d018      	beq.n	800e5e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	68da      	ldr	r2, [r3, #12]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5be:	441a      	add	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68da      	ldr	r2, [r3, #12]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d303      	bcc.n	800e5d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	68d9      	ldr	r1, [r3, #12]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	6838      	ldr	r0, [r7, #0]
 800e5e4:	f002 fdd2 	bl	801118c <memcpy>
	}
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e5f8:	f001 fd54 	bl	80100a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e604:	e011      	b.n	800e62a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d012      	beq.n	800e634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3324      	adds	r3, #36	; 0x24
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fe30 	bl	800f278 <xTaskRemoveFromEventList>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e61e:	f000 ff07 	bl	800f430 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e622:	7bfb      	ldrb	r3, [r7, #15]
 800e624:	3b01      	subs	r3, #1
 800e626:	b2db      	uxtb	r3, r3
 800e628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dce9      	bgt.n	800e606 <prvUnlockQueue+0x16>
 800e632:	e000      	b.n	800e636 <prvUnlockQueue+0x46>
					break;
 800e634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	22ff      	movs	r2, #255	; 0xff
 800e63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e63e:	f001 fd61 	bl	8010104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e642:	f001 fd2f 	bl	80100a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e64c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e64e:	e011      	b.n	800e674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d012      	beq.n	800e67e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3310      	adds	r3, #16
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 fe0b 	bl	800f278 <xTaskRemoveFromEventList>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e668:	f000 fee2 	bl	800f430 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e66c:	7bbb      	ldrb	r3, [r7, #14]
 800e66e:	3b01      	subs	r3, #1
 800e670:	b2db      	uxtb	r3, r3
 800e672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	dce9      	bgt.n	800e650 <prvUnlockQueue+0x60>
 800e67c:	e000      	b.n	800e680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e67e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	22ff      	movs	r2, #255	; 0xff
 800e684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e688:	f001 fd3c 	bl	8010104 <vPortExitCritical>
}
 800e68c:	bf00      	nop
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e69c:	f001 fd02 	bl	80100a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d102      	bne.n	800e6ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	60fb      	str	r3, [r7, #12]
 800e6ac:	e001      	b.n	800e6b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6b2:	f001 fd27 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6c8:	f001 fcec 	bl	80100a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d102      	bne.n	800e6de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	e001      	b.n	800e6e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6e2:	f001 fd0f 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	e014      	b.n	800e72a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e700:	4a0f      	ldr	r2, [pc, #60]	; (800e740 <vQueueAddToRegistry+0x50>)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10b      	bne.n	800e724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e70c:	490c      	ldr	r1, [pc, #48]	; (800e740 <vQueueAddToRegistry+0x50>)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e716:	4a0a      	ldr	r2, [pc, #40]	; (800e740 <vQueueAddToRegistry+0x50>)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	4413      	add	r3, r2
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e722:	e006      	b.n	800e732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	3301      	adds	r3, #1
 800e728:	60fb      	str	r3, [r7, #12]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	d9e7      	bls.n	800e700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e730:	bf00      	nop
 800e732:	bf00      	nop
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	20001664 	.word	0x20001664

0800e744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e754:	f001 fca6 	bl	80100a4 <vPortEnterCritical>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e75e:	b25b      	sxtb	r3, r3
 800e760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e764:	d103      	bne.n	800e76e <vQueueWaitForMessageRestricted+0x2a>
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	2200      	movs	r2, #0
 800e76a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e774:	b25b      	sxtb	r3, r3
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d103      	bne.n	800e784 <vQueueWaitForMessageRestricted+0x40>
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e784:	f001 fcbe 	bl	8010104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d106      	bne.n	800e79e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	3324      	adds	r3, #36	; 0x24
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	68b9      	ldr	r1, [r7, #8]
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 fd41 	bl	800f220 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f7ff ff26 	bl	800e5f0 <prvUnlockQueue>
	}
 800e7a4:	bf00      	nop
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08e      	sub	sp, #56	; 0x38
 800e7b0:	af04      	add	r7, sp, #16
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10a      	bne.n	800e7d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	623b      	str	r3, [r7, #32]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	61fb      	str	r3, [r7, #28]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7f2:	236c      	movs	r3, #108	; 0x6c
 800e7f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	2b6c      	cmp	r3, #108	; 0x6c
 800e7fa:	d00a      	beq.n	800e812 <xTaskCreateStatic+0x66>
	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	61bb      	str	r3, [r7, #24]
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	2b00      	cmp	r3, #0
 800e818:	d01e      	beq.n	800e858 <xTaskCreateStatic+0xac>
 800e81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d01b      	beq.n	800e858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	2202      	movs	r2, #2
 800e82e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e832:	2300      	movs	r3, #0
 800e834:	9303      	str	r3, [sp, #12]
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	9302      	str	r3, [sp, #8]
 800e83a:	f107 0314 	add.w	r3, r7, #20
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	68b9      	ldr	r1, [r7, #8]
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f000 f850 	bl	800e8f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e852:	f000 f8dd 	bl	800ea10 <prvAddNewTaskToReadyList>
 800e856:	e001      	b.n	800e85c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e858:	2300      	movs	r3, #0
 800e85a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e85c:	697b      	ldr	r3, [r7, #20]
	}
 800e85e:	4618      	mov	r0, r3
 800e860:	3728      	adds	r7, #40	; 0x28
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e866:	b580      	push	{r7, lr}
 800e868:	b08c      	sub	sp, #48	; 0x30
 800e86a:	af04      	add	r7, sp, #16
 800e86c:	60f8      	str	r0, [r7, #12]
 800e86e:	60b9      	str	r1, [r7, #8]
 800e870:	603b      	str	r3, [r7, #0]
 800e872:	4613      	mov	r3, r2
 800e874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e876:	88fb      	ldrh	r3, [r7, #6]
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4618      	mov	r0, r3
 800e87c:	f001 fd34 	bl	80102e8 <pvPortMalloc>
 800e880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00e      	beq.n	800e8a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e888:	206c      	movs	r0, #108	; 0x6c
 800e88a:	f001 fd2d 	bl	80102e8 <pvPortMalloc>
 800e88e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	697a      	ldr	r2, [r7, #20]
 800e89a:	631a      	str	r2, [r3, #48]	; 0x30
 800e89c:	e005      	b.n	800e8aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e89e:	6978      	ldr	r0, [r7, #20]
 800e8a0:	f001 fdee 	bl	8010480 <vPortFree>
 800e8a4:	e001      	b.n	800e8aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d017      	beq.n	800e8e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8b8:	88fa      	ldrh	r2, [r7, #6]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9303      	str	r3, [sp, #12]
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	9302      	str	r3, [sp, #8]
 800e8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	68b9      	ldr	r1, [r7, #8]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 f80e 	bl	800e8f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8d4:	69f8      	ldr	r0, [r7, #28]
 800e8d6:	f000 f89b 	bl	800ea10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	61bb      	str	r3, [r7, #24]
 800e8de:	e002      	b.n	800e8e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
	}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3720      	adds	r7, #32
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b088      	sub	sp, #32
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	461a      	mov	r2, r3
 800e908:	21a5      	movs	r1, #165	; 0xa5
 800e90a:	f002 fc4d 	bl	80111a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e918:	3b01      	subs	r3, #1
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4413      	add	r3, r2
 800e91e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	f023 0307 	bic.w	r3, r3, #7
 800e926:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	f003 0307 	and.w	r3, r3, #7
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00a      	beq.n	800e948 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	617b      	str	r3, [r7, #20]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d01f      	beq.n	800e98e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e94e:	2300      	movs	r3, #0
 800e950:	61fb      	str	r3, [r7, #28]
 800e952:	e012      	b.n	800e97a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	4413      	add	r3, r2
 800e95a:	7819      	ldrb	r1, [r3, #0]
 800e95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	4413      	add	r3, r2
 800e962:	3334      	adds	r3, #52	; 0x34
 800e964:	460a      	mov	r2, r1
 800e966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	4413      	add	r3, r2
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d006      	beq.n	800e982 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	3301      	adds	r3, #1
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	2b1d      	cmp	r3, #29
 800e97e:	d9e9      	bls.n	800e954 <prvInitialiseNewTask+0x64>
 800e980:	e000      	b.n	800e984 <prvInitialiseNewTask+0x94>
			{
				break;
 800e982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800e98c:	e003      	b.n	800e996 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	2b37      	cmp	r3, #55	; 0x37
 800e99a:	d901      	bls.n	800e9a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e99c:	2337      	movs	r3, #55	; 0x37
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9aa:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff f93e 	bl	800dc38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9be:	3318      	adds	r3, #24
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7ff f939 	bl	800dc38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	2200      	movs	r2, #0
 800e9e0:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	68f9      	ldr	r1, [r7, #12]
 800e9ee:	69b8      	ldr	r0, [r7, #24]
 800e9f0:	f001 fa2e 	bl	800fe50 <pxPortInitialiseStack>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea06:	bf00      	nop
 800ea08:	3720      	adds	r7, #32
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
	...

0800ea10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea18:	f001 fb44 	bl	80100a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea1c:	4b2d      	ldr	r3, [pc, #180]	; (800ead4 <prvAddNewTaskToReadyList+0xc4>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3301      	adds	r3, #1
 800ea22:	4a2c      	ldr	r2, [pc, #176]	; (800ead4 <prvAddNewTaskToReadyList+0xc4>)
 800ea24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea26:	4b2c      	ldr	r3, [pc, #176]	; (800ead8 <prvAddNewTaskToReadyList+0xc8>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d109      	bne.n	800ea42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea2e:	4a2a      	ldr	r2, [pc, #168]	; (800ead8 <prvAddNewTaskToReadyList+0xc8>)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea34:	4b27      	ldr	r3, [pc, #156]	; (800ead4 <prvAddNewTaskToReadyList+0xc4>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d110      	bne.n	800ea5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea3c:	f000 fd1c 	bl	800f478 <prvInitialiseTaskLists>
 800ea40:	e00d      	b.n	800ea5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea42:	4b26      	ldr	r3, [pc, #152]	; (800eadc <prvAddNewTaskToReadyList+0xcc>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea4a:	4b23      	ldr	r3, [pc, #140]	; (800ead8 <prvAddNewTaskToReadyList+0xc8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d802      	bhi.n	800ea5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea58:	4a1f      	ldr	r2, [pc, #124]	; (800ead8 <prvAddNewTaskToReadyList+0xc8>)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea5e:	4b20      	ldr	r3, [pc, #128]	; (800eae0 <prvAddNewTaskToReadyList+0xd0>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <prvAddNewTaskToReadyList+0xd0>)
 800ea66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea68:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <prvAddNewTaskToReadyList+0xd0>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea74:	4b1b      	ldr	r3, [pc, #108]	; (800eae4 <prvAddNewTaskToReadyList+0xd4>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d903      	bls.n	800ea84 <prvAddNewTaskToReadyList+0x74>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea80:	4a18      	ldr	r2, [pc, #96]	; (800eae4 <prvAddNewTaskToReadyList+0xd4>)
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea88:	4613      	mov	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4413      	add	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4a15      	ldr	r2, [pc, #84]	; (800eae8 <prvAddNewTaskToReadyList+0xd8>)
 800ea92:	441a      	add	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3304      	adds	r3, #4
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4610      	mov	r0, r2
 800ea9c:	f7ff f8d9 	bl	800dc52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eaa0:	f001 fb30 	bl	8010104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eaa4:	4b0d      	ldr	r3, [pc, #52]	; (800eadc <prvAddNewTaskToReadyList+0xcc>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00e      	beq.n	800eaca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eaac:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <prvAddNewTaskToReadyList+0xc8>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d207      	bcs.n	800eaca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eaba:	4b0c      	ldr	r3, [pc, #48]	; (800eaec <prvAddNewTaskToReadyList+0xdc>)
 800eabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac0:	601a      	str	r2, [r3, #0]
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20001b78 	.word	0x20001b78
 800ead8:	200016a4 	.word	0x200016a4
 800eadc:	20001b84 	.word	0x20001b84
 800eae0:	20001b94 	.word	0x20001b94
 800eae4:	20001b80 	.word	0x20001b80
 800eae8:	200016a8 	.word	0x200016a8
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d017      	beq.n	800eb32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb02:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <vTaskDelay+0x60>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00a      	beq.n	800eb20 <vTaskDelay+0x30>
	__asm volatile
 800eb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	60bb      	str	r3, [r7, #8]
}
 800eb1c:	bf00      	nop
 800eb1e:	e7fe      	b.n	800eb1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb20:	f000 f986 	bl	800ee30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb24:	2100      	movs	r1, #0
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fdf0 	bl	800f70c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb2c:	f000 f98e 	bl	800ee4c <xTaskResumeAll>
 800eb30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d107      	bne.n	800eb48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb38:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <vTaskDelay+0x64>)
 800eb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb48:	bf00      	nop
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	20001ba0 	.word	0x20001ba0
 800eb54:	e000ed04 	.word	0xe000ed04

0800eb58 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eb60:	f001 faa0 	bl	80100a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <vTaskSuspend+0x18>
 800eb6a:	4b30      	ldr	r3, [pc, #192]	; (800ec2c <vTaskSuspend+0xd4>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	e000      	b.n	800eb72 <vTaskSuspend+0x1a>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7ff f8c7 	bl	800dd0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d004      	beq.n	800eb90 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	3318      	adds	r3, #24
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff f8be 	bl	800dd0c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4619      	mov	r1, r3
 800eb96:	4826      	ldr	r0, [pc, #152]	; (800ec30 <vTaskSuspend+0xd8>)
 800eb98:	f7ff f85b 	bl	800dc52 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d103      	bne.n	800ebb0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ebb0:	f001 faa8 	bl	8010104 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ebb4:	4b1f      	ldr	r3, [pc, #124]	; (800ec34 <vTaskSuspend+0xdc>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d005      	beq.n	800ebc8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ebbc:	f001 fa72 	bl	80100a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ebc0:	f000 fcf8 	bl	800f5b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ebc4:	f001 fa9e 	bl	8010104 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ebc8:	4b18      	ldr	r3, [pc, #96]	; (800ec2c <vTaskSuspend+0xd4>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d127      	bne.n	800ec22 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ebd2:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <vTaskSuspend+0xdc>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d017      	beq.n	800ec0a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ebda:	4b17      	ldr	r3, [pc, #92]	; (800ec38 <vTaskSuspend+0xe0>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00a      	beq.n	800ebf8 <vTaskSuspend+0xa0>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	60bb      	str	r3, [r7, #8]
}
 800ebf4:	bf00      	nop
 800ebf6:	e7fe      	b.n	800ebf6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ebf8:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <vTaskSuspend+0xe4>)
 800ebfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec08:	e00b      	b.n	800ec22 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ec0a:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <vTaskSuspend+0xd8>)
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <vTaskSuspend+0xe8>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d103      	bne.n	800ec1e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ec16:	4b05      	ldr	r3, [pc, #20]	; (800ec2c <vTaskSuspend+0xd4>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
	}
 800ec1c:	e001      	b.n	800ec22 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ec1e:	f000 fa7d 	bl	800f11c <vTaskSwitchContext>
	}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	200016a4 	.word	0x200016a4
 800ec30:	20001b64 	.word	0x20001b64
 800ec34:	20001b84 	.word	0x20001b84
 800ec38:	20001ba0 	.word	0x20001ba0
 800ec3c:	e000ed04 	.word	0xe000ed04
 800ec40:	20001b78 	.word	0x20001b78

0800ec44 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10a      	bne.n	800ec70 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	60fb      	str	r3, [r7, #12]
}
 800ec6c:	bf00      	nop
 800ec6e:	e7fe      	b.n	800ec6e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	4a0a      	ldr	r2, [pc, #40]	; (800eca0 <prvTaskIsTaskSuspended+0x5c>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d10a      	bne.n	800ec90 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	4a09      	ldr	r2, [pc, #36]	; (800eca4 <prvTaskIsTaskSuspended+0x60>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d005      	beq.n	800ec90 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec90:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ec92:	4618      	mov	r0, r3
 800ec94:	371c      	adds	r7, #28
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	20001b64 	.word	0x20001b64
 800eca4:	20001b38 	.word	0x20001b38

0800eca8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10a      	bne.n	800ecd0 <vTaskResume+0x28>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	60bb      	str	r3, [r7, #8]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ecd0:	4b20      	ldr	r3, [pc, #128]	; (800ed54 <vTaskResume+0xac>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d038      	beq.n	800ed4c <vTaskResume+0xa4>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d035      	beq.n	800ed4c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ece0:	f001 f9e0 	bl	80100a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7ff ffad 	bl	800ec44 <prvTaskIsTaskSuspended>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d02b      	beq.n	800ed48 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f809 	bl	800dd0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfe:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <vTaskResume+0xb0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d903      	bls.n	800ed0e <vTaskResume+0x66>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0a:	4a13      	ldr	r2, [pc, #76]	; (800ed58 <vTaskResume+0xb0>)
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4a10      	ldr	r2, [pc, #64]	; (800ed5c <vTaskResume+0xb4>)
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3304      	adds	r3, #4
 800ed22:	4619      	mov	r1, r3
 800ed24:	4610      	mov	r0, r2
 800ed26:	f7fe ff94 	bl	800dc52 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed2e:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <vTaskResume+0xac>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d307      	bcc.n	800ed48 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ed38:	4b09      	ldr	r3, [pc, #36]	; (800ed60 <vTaskResume+0xb8>)
 800ed3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ed48:	f001 f9dc 	bl	8010104 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	200016a4 	.word	0x200016a4
 800ed58:	20001b80 	.word	0x20001b80
 800ed5c:	200016a8 	.word	0x200016a8
 800ed60:	e000ed04 	.word	0xe000ed04

0800ed64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08a      	sub	sp, #40	; 0x28
 800ed68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed72:	463a      	mov	r2, r7
 800ed74:	1d39      	adds	r1, r7, #4
 800ed76:	f107 0308 	add.w	r3, r7, #8
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fe ff08 	bl	800db90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	9202      	str	r2, [sp, #8]
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	460a      	mov	r2, r1
 800ed92:	4921      	ldr	r1, [pc, #132]	; (800ee18 <vTaskStartScheduler+0xb4>)
 800ed94:	4821      	ldr	r0, [pc, #132]	; (800ee1c <vTaskStartScheduler+0xb8>)
 800ed96:	f7ff fd09 	bl	800e7ac <xTaskCreateStatic>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4a20      	ldr	r2, [pc, #128]	; (800ee20 <vTaskStartScheduler+0xbc>)
 800ed9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eda0:	4b1f      	ldr	r3, [pc, #124]	; (800ee20 <vTaskStartScheduler+0xbc>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eda8:	2301      	movs	r3, #1
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	e001      	b.n	800edb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800edae:	2300      	movs	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d102      	bne.n	800edbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800edb8:	f000 fcfc 	bl	800f7b4 <xTimerCreateTimerTask>
 800edbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d116      	bne.n	800edf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	613b      	str	r3, [r7, #16]
}
 800edd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800edd8:	4b12      	ldr	r3, [pc, #72]	; (800ee24 <vTaskStartScheduler+0xc0>)
 800edda:	f04f 32ff 	mov.w	r2, #4294967295
 800edde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ede0:	4b11      	ldr	r3, [pc, #68]	; (800ee28 <vTaskStartScheduler+0xc4>)
 800ede2:	2201      	movs	r2, #1
 800ede4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ede6:	4b11      	ldr	r3, [pc, #68]	; (800ee2c <vTaskStartScheduler+0xc8>)
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800edec:	f001 f8b8 	bl	800ff60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800edf0:	e00e      	b.n	800ee10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf8:	d10a      	bne.n	800ee10 <vTaskStartScheduler+0xac>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	60fb      	str	r3, [r7, #12]
}
 800ee0c:	bf00      	nop
 800ee0e:	e7fe      	b.n	800ee0e <vTaskStartScheduler+0xaa>
}
 800ee10:	bf00      	nop
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	08013444 	.word	0x08013444
 800ee1c:	0800f449 	.word	0x0800f449
 800ee20:	20001b9c 	.word	0x20001b9c
 800ee24:	20001b98 	.word	0x20001b98
 800ee28:	20001b84 	.word	0x20001b84
 800ee2c:	20001b7c 	.word	0x20001b7c

0800ee30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee30:	b480      	push	{r7}
 800ee32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ee34:	4b04      	ldr	r3, [pc, #16]	; (800ee48 <vTaskSuspendAll+0x18>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	4a03      	ldr	r2, [pc, #12]	; (800ee48 <vTaskSuspendAll+0x18>)
 800ee3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ee3e:	bf00      	nop
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	20001ba0 	.word	0x20001ba0

0800ee4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee5a:	4b42      	ldr	r3, [pc, #264]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10a      	bne.n	800ee78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ee62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee66:	f383 8811 	msr	BASEPRI, r3
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	603b      	str	r3, [r7, #0]
}
 800ee74:	bf00      	nop
 800ee76:	e7fe      	b.n	800ee76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee78:	f001 f914 	bl	80100a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee7c:	4b39      	ldr	r3, [pc, #228]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	4a38      	ldr	r2, [pc, #224]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee86:	4b37      	ldr	r3, [pc, #220]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d162      	bne.n	800ef54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee8e:	4b36      	ldr	r3, [pc, #216]	; (800ef68 <xTaskResumeAll+0x11c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d05e      	beq.n	800ef54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee96:	e02f      	b.n	800eef8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee98:	4b34      	ldr	r3, [pc, #208]	; (800ef6c <xTaskResumeAll+0x120>)
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3318      	adds	r3, #24
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fe ff31 	bl	800dd0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3304      	adds	r3, #4
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fe ff2c 	bl	800dd0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb8:	4b2d      	ldr	r3, [pc, #180]	; (800ef70 <xTaskResumeAll+0x124>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d903      	bls.n	800eec8 <xTaskResumeAll+0x7c>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec4:	4a2a      	ldr	r2, [pc, #168]	; (800ef70 <xTaskResumeAll+0x124>)
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4a27      	ldr	r2, [pc, #156]	; (800ef74 <xTaskResumeAll+0x128>)
 800eed6:	441a      	add	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fe feb7 	bl	800dc52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee8:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <xTaskResumeAll+0x12c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d302      	bcc.n	800eef8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eef2:	4b22      	ldr	r3, [pc, #136]	; (800ef7c <xTaskResumeAll+0x130>)
 800eef4:	2201      	movs	r2, #1
 800eef6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eef8:	4b1c      	ldr	r3, [pc, #112]	; (800ef6c <xTaskResumeAll+0x120>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1cb      	bne.n	800ee98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef06:	f000 fb55 	bl	800f5b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef0a:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <xTaskResumeAll+0x134>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d010      	beq.n	800ef38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef16:	f000 f847 	bl	800efa8 <xTaskIncrementTick>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ef20:	4b16      	ldr	r3, [pc, #88]	; (800ef7c <xTaskResumeAll+0x130>)
 800ef22:	2201      	movs	r2, #1
 800ef24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3b01      	subs	r3, #1
 800ef2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1f1      	bne.n	800ef16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ef32:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <xTaskResumeAll+0x134>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef38:	4b10      	ldr	r3, [pc, #64]	; (800ef7c <xTaskResumeAll+0x130>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ef40:	2301      	movs	r3, #1
 800ef42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ef44:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <xTaskResumeAll+0x138>)
 800ef46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef54:	f001 f8d6 	bl	8010104 <vPortExitCritical>

	return xAlreadyYielded;
 800ef58:	68bb      	ldr	r3, [r7, #8]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20001ba0 	.word	0x20001ba0
 800ef68:	20001b78 	.word	0x20001b78
 800ef6c:	20001b38 	.word	0x20001b38
 800ef70:	20001b80 	.word	0x20001b80
 800ef74:	200016a8 	.word	0x200016a8
 800ef78:	200016a4 	.word	0x200016a4
 800ef7c:	20001b8c 	.word	0x20001b8c
 800ef80:	20001b88 	.word	0x20001b88
 800ef84:	e000ed04 	.word	0xe000ed04

0800ef88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef8e:	4b05      	ldr	r3, [pc, #20]	; (800efa4 <xTaskGetTickCount+0x1c>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef94:	687b      	ldr	r3, [r7, #4]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20001b7c 	.word	0x20001b7c

0800efa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efb2:	4b4f      	ldr	r3, [pc, #316]	; (800f0f0 <xTaskIncrementTick+0x148>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f040 808f 	bne.w	800f0da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800efbc:	4b4d      	ldr	r3, [pc, #308]	; (800f0f4 <xTaskIncrementTick+0x14c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800efc4:	4a4b      	ldr	r2, [pc, #300]	; (800f0f4 <xTaskIncrementTick+0x14c>)
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d120      	bne.n	800f012 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800efd0:	4b49      	ldr	r3, [pc, #292]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00a      	beq.n	800eff0 <xTaskIncrementTick+0x48>
	__asm volatile
 800efda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efde:	f383 8811 	msr	BASEPRI, r3
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	603b      	str	r3, [r7, #0]
}
 800efec:	bf00      	nop
 800efee:	e7fe      	b.n	800efee <xTaskIncrementTick+0x46>
 800eff0:	4b41      	ldr	r3, [pc, #260]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	4b41      	ldr	r3, [pc, #260]	; (800f0fc <xTaskIncrementTick+0x154>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a3f      	ldr	r2, [pc, #252]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	4a3f      	ldr	r2, [pc, #252]	; (800f0fc <xTaskIncrementTick+0x154>)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	4b3e      	ldr	r3, [pc, #248]	; (800f100 <xTaskIncrementTick+0x158>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3301      	adds	r3, #1
 800f00a:	4a3d      	ldr	r2, [pc, #244]	; (800f100 <xTaskIncrementTick+0x158>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	f000 fad1 	bl	800f5b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f012:	4b3c      	ldr	r3, [pc, #240]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d349      	bcc.n	800f0b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f01c:	4b36      	ldr	r3, [pc, #216]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d104      	bne.n	800f030 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f026:	4b37      	ldr	r3, [pc, #220]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f028:	f04f 32ff 	mov.w	r2, #4294967295
 800f02c:	601a      	str	r2, [r3, #0]
					break;
 800f02e:	e03f      	b.n	800f0b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f030:	4b31      	ldr	r3, [pc, #196]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	429a      	cmp	r2, r3
 800f046:	d203      	bcs.n	800f050 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f048:	4a2e      	ldr	r2, [pc, #184]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f04e:	e02f      	b.n	800f0b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3304      	adds	r3, #4
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe fe59 	bl	800dd0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d004      	beq.n	800f06c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	3318      	adds	r3, #24
 800f066:	4618      	mov	r0, r3
 800f068:	f7fe fe50 	bl	800dd0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <xTaskIncrementTick+0x160>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	d903      	bls.n	800f080 <xTaskIncrementTick+0xd8>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	4a22      	ldr	r2, [pc, #136]	; (800f108 <xTaskIncrementTick+0x160>)
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f084:	4613      	mov	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4413      	add	r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4a1f      	ldr	r2, [pc, #124]	; (800f10c <xTaskIncrementTick+0x164>)
 800f08e:	441a      	add	r2, r3
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	3304      	adds	r3, #4
 800f094:	4619      	mov	r1, r3
 800f096:	4610      	mov	r0, r2
 800f098:	f7fe fddb 	bl	800dc52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a0:	4b1b      	ldr	r3, [pc, #108]	; (800f110 <xTaskIncrementTick+0x168>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d3b8      	bcc.n	800f01c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0ae:	e7b5      	b.n	800f01c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f0b0:	4b17      	ldr	r3, [pc, #92]	; (800f110 <xTaskIncrementTick+0x168>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b6:	4915      	ldr	r1, [pc, #84]	; (800f10c <xTaskIncrementTick+0x164>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d901      	bls.n	800f0cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f0cc:	4b11      	ldr	r3, [pc, #68]	; (800f114 <xTaskIncrementTick+0x16c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	617b      	str	r3, [r7, #20]
 800f0d8:	e004      	b.n	800f0e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f0da:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <xTaskIncrementTick+0x170>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	4a0d      	ldr	r2, [pc, #52]	; (800f118 <xTaskIncrementTick+0x170>)
 800f0e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f0e4:	697b      	ldr	r3, [r7, #20]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20001ba0 	.word	0x20001ba0
 800f0f4:	20001b7c 	.word	0x20001b7c
 800f0f8:	20001b30 	.word	0x20001b30
 800f0fc:	20001b34 	.word	0x20001b34
 800f100:	20001b90 	.word	0x20001b90
 800f104:	20001b98 	.word	0x20001b98
 800f108:	20001b80 	.word	0x20001b80
 800f10c:	200016a8 	.word	0x200016a8
 800f110:	200016a4 	.word	0x200016a4
 800f114:	20001b8c 	.word	0x20001b8c
 800f118:	20001b88 	.word	0x20001b88

0800f11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f122:	4b28      	ldr	r3, [pc, #160]	; (800f1c4 <vTaskSwitchContext+0xa8>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d003      	beq.n	800f132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f12a:	4b27      	ldr	r3, [pc, #156]	; (800f1c8 <vTaskSwitchContext+0xac>)
 800f12c:	2201      	movs	r2, #1
 800f12e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f130:	e041      	b.n	800f1b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f132:	4b25      	ldr	r3, [pc, #148]	; (800f1c8 <vTaskSwitchContext+0xac>)
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f138:	4b24      	ldr	r3, [pc, #144]	; (800f1cc <vTaskSwitchContext+0xb0>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e010      	b.n	800f162 <vTaskSwitchContext+0x46>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10a      	bne.n	800f15c <vTaskSwitchContext+0x40>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	607b      	str	r3, [r7, #4]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <vTaskSwitchContext+0x3e>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3b01      	subs	r3, #1
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	491b      	ldr	r1, [pc, #108]	; (800f1d0 <vTaskSwitchContext+0xb4>)
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	440b      	add	r3, r1
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0e4      	beq.n	800f140 <vTaskSwitchContext+0x24>
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4613      	mov	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4a13      	ldr	r2, [pc, #76]	; (800f1d0 <vTaskSwitchContext+0xb4>)
 800f182:	4413      	add	r3, r2
 800f184:	60bb      	str	r3, [r7, #8]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	605a      	str	r2, [r3, #4]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	3308      	adds	r3, #8
 800f198:	429a      	cmp	r2, r3
 800f19a:	d104      	bne.n	800f1a6 <vTaskSwitchContext+0x8a>
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	685a      	ldr	r2, [r3, #4]
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	605a      	str	r2, [r3, #4]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <vTaskSwitchContext+0xb8>)
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	4a06      	ldr	r2, [pc, #24]	; (800f1cc <vTaskSwitchContext+0xb0>)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6013      	str	r3, [r2, #0]
}
 800f1b6:	bf00      	nop
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20001ba0 	.word	0x20001ba0
 800f1c8:	20001b8c 	.word	0x20001b8c
 800f1cc:	20001b80 	.word	0x20001b80
 800f1d0:	200016a8 	.word	0x200016a8
 800f1d4:	200016a4 	.word	0x200016a4

0800f1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d10a      	bne.n	800f1fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	60fb      	str	r3, [r7, #12]
}
 800f1fa:	bf00      	nop
 800f1fc:	e7fe      	b.n	800f1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1fe:	4b07      	ldr	r3, [pc, #28]	; (800f21c <vTaskPlaceOnEventList+0x44>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3318      	adds	r3, #24
 800f204:	4619      	mov	r1, r3
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7fe fd47 	bl	800dc9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f20c:	2101      	movs	r1, #1
 800f20e:	6838      	ldr	r0, [r7, #0]
 800f210:	f000 fa7c 	bl	800f70c <prvAddCurrentTaskToDelayedList>
}
 800f214:	bf00      	nop
 800f216:	3710      	adds	r7, #16
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	200016a4 	.word	0x200016a4

0800f220 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10a      	bne.n	800f248 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	617b      	str	r3, [r7, #20]
}
 800f244:	bf00      	nop
 800f246:	e7fe      	b.n	800f246 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f248:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <vTaskPlaceOnEventListRestricted+0x54>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3318      	adds	r3, #24
 800f24e:	4619      	mov	r1, r3
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f7fe fcfe 	bl	800dc52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f25c:	f04f 33ff 	mov.w	r3, #4294967295
 800f260:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f262:	6879      	ldr	r1, [r7, #4]
 800f264:	68b8      	ldr	r0, [r7, #8]
 800f266:	f000 fa51 	bl	800f70c <prvAddCurrentTaskToDelayedList>
	}
 800f26a:	bf00      	nop
 800f26c:	3718      	adds	r7, #24
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	200016a4 	.word	0x200016a4

0800f278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10a      	bne.n	800f2a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	60fb      	str	r3, [r7, #12]
}
 800f2a0:	bf00      	nop
 800f2a2:	e7fe      	b.n	800f2a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	3318      	adds	r3, #24
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe fd2f 	bl	800dd0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2ae:	4b1e      	ldr	r3, [pc, #120]	; (800f328 <xTaskRemoveFromEventList+0xb0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d11d      	bne.n	800f2f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	3304      	adds	r3, #4
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fe fd26 	bl	800dd0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c4:	4b19      	ldr	r3, [pc, #100]	; (800f32c <xTaskRemoveFromEventList+0xb4>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d903      	bls.n	800f2d4 <xTaskRemoveFromEventList+0x5c>
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d0:	4a16      	ldr	r2, [pc, #88]	; (800f32c <xTaskRemoveFromEventList+0xb4>)
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d8:	4613      	mov	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	4413      	add	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	4a13      	ldr	r2, [pc, #76]	; (800f330 <xTaskRemoveFromEventList+0xb8>)
 800f2e2:	441a      	add	r2, r3
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	3304      	adds	r3, #4
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4610      	mov	r0, r2
 800f2ec:	f7fe fcb1 	bl	800dc52 <vListInsertEnd>
 800f2f0:	e005      	b.n	800f2fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	3318      	adds	r3, #24
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	480e      	ldr	r0, [pc, #56]	; (800f334 <xTaskRemoveFromEventList+0xbc>)
 800f2fa:	f7fe fcaa 	bl	800dc52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f302:	4b0d      	ldr	r3, [pc, #52]	; (800f338 <xTaskRemoveFromEventList+0xc0>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f308:	429a      	cmp	r2, r3
 800f30a:	d905      	bls.n	800f318 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f30c:	2301      	movs	r3, #1
 800f30e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <xTaskRemoveFromEventList+0xc4>)
 800f312:	2201      	movs	r2, #1
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	e001      	b.n	800f31c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f318:	2300      	movs	r3, #0
 800f31a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f31c:	697b      	ldr	r3, [r7, #20]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	20001ba0 	.word	0x20001ba0
 800f32c:	20001b80 	.word	0x20001b80
 800f330:	200016a8 	.word	0x200016a8
 800f334:	20001b38 	.word	0x20001b38
 800f338:	200016a4 	.word	0x200016a4
 800f33c:	20001b8c 	.word	0x20001b8c

0800f340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f348:	4b06      	ldr	r3, [pc, #24]	; (800f364 <vTaskInternalSetTimeOutState+0x24>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f350:	4b05      	ldr	r3, [pc, #20]	; (800f368 <vTaskInternalSetTimeOutState+0x28>)
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	605a      	str	r2, [r3, #4]
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	20001b90 	.word	0x20001b90
 800f368:	20001b7c 	.word	0x20001b7c

0800f36c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10a      	bne.n	800f392 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f380:	f383 8811 	msr	BASEPRI, r3
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	613b      	str	r3, [r7, #16]
}
 800f38e:	bf00      	nop
 800f390:	e7fe      	b.n	800f390 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10a      	bne.n	800f3ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	60fb      	str	r3, [r7, #12]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f3ae:	f000 fe79 	bl	80100a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3b2:	4b1d      	ldr	r3, [pc, #116]	; (800f428 <xTaskCheckForTimeOut+0xbc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	69ba      	ldr	r2, [r7, #24]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ca:	d102      	bne.n	800f3d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	61fb      	str	r3, [r7, #28]
 800f3d0:	e023      	b.n	800f41a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	4b15      	ldr	r3, [pc, #84]	; (800f42c <xTaskCheckForTimeOut+0xc0>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d007      	beq.n	800f3ee <xTaskCheckForTimeOut+0x82>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	69ba      	ldr	r2, [r7, #24]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d302      	bcc.n	800f3ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	e015      	b.n	800f41a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	697a      	ldr	r2, [r7, #20]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d20b      	bcs.n	800f410 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	1ad2      	subs	r2, r2, r3
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff ff9b 	bl	800f340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f40a:	2300      	movs	r3, #0
 800f40c:	61fb      	str	r3, [r7, #28]
 800f40e:	e004      	b.n	800f41a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f416:	2301      	movs	r3, #1
 800f418:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f41a:	f000 fe73 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800f41e:	69fb      	ldr	r3, [r7, #28]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3720      	adds	r7, #32
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	20001b7c 	.word	0x20001b7c
 800f42c:	20001b90 	.word	0x20001b90

0800f430 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f430:	b480      	push	{r7}
 800f432:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f434:	4b03      	ldr	r3, [pc, #12]	; (800f444 <vTaskMissedYield+0x14>)
 800f436:	2201      	movs	r2, #1
 800f438:	601a      	str	r2, [r3, #0]
}
 800f43a:	bf00      	nop
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	20001b8c 	.word	0x20001b8c

0800f448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f450:	f000 f852 	bl	800f4f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f454:	4b06      	ldr	r3, [pc, #24]	; (800f470 <prvIdleTask+0x28>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d9f9      	bls.n	800f450 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f45c:	4b05      	ldr	r3, [pc, #20]	; (800f474 <prvIdleTask+0x2c>)
 800f45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f46c:	e7f0      	b.n	800f450 <prvIdleTask+0x8>
 800f46e:	bf00      	nop
 800f470:	200016a8 	.word	0x200016a8
 800f474:	e000ed04 	.word	0xe000ed04

0800f478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f47e:	2300      	movs	r3, #0
 800f480:	607b      	str	r3, [r7, #4]
 800f482:	e00c      	b.n	800f49e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	4613      	mov	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4413      	add	r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4a12      	ldr	r2, [pc, #72]	; (800f4d8 <prvInitialiseTaskLists+0x60>)
 800f490:	4413      	add	r3, r2
 800f492:	4618      	mov	r0, r3
 800f494:	f7fe fbb0 	bl	800dbf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	3301      	adds	r3, #1
 800f49c:	607b      	str	r3, [r7, #4]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b37      	cmp	r3, #55	; 0x37
 800f4a2:	d9ef      	bls.n	800f484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4a4:	480d      	ldr	r0, [pc, #52]	; (800f4dc <prvInitialiseTaskLists+0x64>)
 800f4a6:	f7fe fba7 	bl	800dbf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4aa:	480d      	ldr	r0, [pc, #52]	; (800f4e0 <prvInitialiseTaskLists+0x68>)
 800f4ac:	f7fe fba4 	bl	800dbf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4b0:	480c      	ldr	r0, [pc, #48]	; (800f4e4 <prvInitialiseTaskLists+0x6c>)
 800f4b2:	f7fe fba1 	bl	800dbf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4b6:	480c      	ldr	r0, [pc, #48]	; (800f4e8 <prvInitialiseTaskLists+0x70>)
 800f4b8:	f7fe fb9e 	bl	800dbf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4bc:	480b      	ldr	r0, [pc, #44]	; (800f4ec <prvInitialiseTaskLists+0x74>)
 800f4be:	f7fe fb9b 	bl	800dbf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4c2:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <prvInitialiseTaskLists+0x78>)
 800f4c4:	4a05      	ldr	r2, [pc, #20]	; (800f4dc <prvInitialiseTaskLists+0x64>)
 800f4c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4c8:	4b0a      	ldr	r3, [pc, #40]	; (800f4f4 <prvInitialiseTaskLists+0x7c>)
 800f4ca:	4a05      	ldr	r2, [pc, #20]	; (800f4e0 <prvInitialiseTaskLists+0x68>)
 800f4cc:	601a      	str	r2, [r3, #0]
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	200016a8 	.word	0x200016a8
 800f4dc:	20001b08 	.word	0x20001b08
 800f4e0:	20001b1c 	.word	0x20001b1c
 800f4e4:	20001b38 	.word	0x20001b38
 800f4e8:	20001b4c 	.word	0x20001b4c
 800f4ec:	20001b64 	.word	0x20001b64
 800f4f0:	20001b30 	.word	0x20001b30
 800f4f4:	20001b34 	.word	0x20001b34

0800f4f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4fe:	e019      	b.n	800f534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f500:	f000 fdd0 	bl	80100a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f504:	4b10      	ldr	r3, [pc, #64]	; (800f548 <prvCheckTasksWaitingTermination+0x50>)
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	3304      	adds	r3, #4
 800f510:	4618      	mov	r0, r3
 800f512:	f7fe fbfb 	bl	800dd0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f516:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <prvCheckTasksWaitingTermination+0x54>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	4a0b      	ldr	r2, [pc, #44]	; (800f54c <prvCheckTasksWaitingTermination+0x54>)
 800f51e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f520:	4b0b      	ldr	r3, [pc, #44]	; (800f550 <prvCheckTasksWaitingTermination+0x58>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3b01      	subs	r3, #1
 800f526:	4a0a      	ldr	r2, [pc, #40]	; (800f550 <prvCheckTasksWaitingTermination+0x58>)
 800f528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f52a:	f000 fdeb 	bl	8010104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f810 	bl	800f554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f534:	4b06      	ldr	r3, [pc, #24]	; (800f550 <prvCheckTasksWaitingTermination+0x58>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e1      	bne.n	800f500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	3708      	adds	r7, #8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20001b4c 	.word	0x20001b4c
 800f54c:	20001b78 	.word	0x20001b78
 800f550:	20001b60 	.word	0x20001b60

0800f554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f562:	2b00      	cmp	r3, #0
 800f564:	d108      	bne.n	800f578 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 ff88 	bl	8010480 <vPortFree>
				vPortFree( pxTCB );
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 ff85 	bl	8010480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f576:	e018      	b.n	800f5aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d103      	bne.n	800f58a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 ff7c 	bl	8010480 <vPortFree>
	}
 800f588:	e00f      	b.n	800f5aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f590:	2b02      	cmp	r3, #2
 800f592:	d00a      	beq.n	800f5aa <prvDeleteTCB+0x56>
	__asm volatile
 800f594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f598:	f383 8811 	msr	BASEPRI, r3
 800f59c:	f3bf 8f6f 	isb	sy
 800f5a0:	f3bf 8f4f 	dsb	sy
 800f5a4:	60fb      	str	r3, [r7, #12]
}
 800f5a6:	bf00      	nop
 800f5a8:	e7fe      	b.n	800f5a8 <prvDeleteTCB+0x54>
	}
 800f5aa:	bf00      	nop
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5ba:	4b0c      	ldr	r3, [pc, #48]	; (800f5ec <prvResetNextTaskUnblockTime+0x38>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d104      	bne.n	800f5ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800f5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5cc:	e008      	b.n	800f5e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ce:	4b07      	ldr	r3, [pc, #28]	; (800f5ec <prvResetNextTaskUnblockTime+0x38>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	4a04      	ldr	r2, [pc, #16]	; (800f5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800f5de:	6013      	str	r3, [r2, #0]
}
 800f5e0:	bf00      	nop
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	20001b30 	.word	0x20001b30
 800f5f0:	20001b98 	.word	0x20001b98

0800f5f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f5fa:	4b0b      	ldr	r3, [pc, #44]	; (800f628 <xTaskGetSchedulerState+0x34>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d102      	bne.n	800f608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f602:	2301      	movs	r3, #1
 800f604:	607b      	str	r3, [r7, #4]
 800f606:	e008      	b.n	800f61a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f608:	4b08      	ldr	r3, [pc, #32]	; (800f62c <xTaskGetSchedulerState+0x38>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d102      	bne.n	800f616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f610:	2302      	movs	r3, #2
 800f612:	607b      	str	r3, [r7, #4]
 800f614:	e001      	b.n	800f61a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f616:	2300      	movs	r3, #0
 800f618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f61a:	687b      	ldr	r3, [r7, #4]
	}
 800f61c:	4618      	mov	r0, r3
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	20001b84 	.word	0x20001b84
 800f62c:	20001ba0 	.word	0x20001ba0

0800f630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f63c:	2300      	movs	r3, #0
 800f63e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d056      	beq.n	800f6f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f646:	4b2e      	ldr	r3, [pc, #184]	; (800f700 <xTaskPriorityDisinherit+0xd0>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d00a      	beq.n	800f666 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	60fb      	str	r3, [r7, #12]
}
 800f662:	bf00      	nop
 800f664:	e7fe      	b.n	800f664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10a      	bne.n	800f684 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	60bb      	str	r3, [r7, #8]
}
 800f680:	bf00      	nop
 800f682:	e7fe      	b.n	800f682 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f688:	1e5a      	subs	r2, r3, #1
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f696:	429a      	cmp	r2, r3
 800f698:	d02c      	beq.n	800f6f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d128      	bne.n	800f6f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fb30 	bl	800dd0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6c4:	4b0f      	ldr	r3, [pc, #60]	; (800f704 <xTaskPriorityDisinherit+0xd4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d903      	bls.n	800f6d4 <xTaskPriorityDisinherit+0xa4>
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d0:	4a0c      	ldr	r2, [pc, #48]	; (800f704 <xTaskPriorityDisinherit+0xd4>)
 800f6d2:	6013      	str	r3, [r2, #0]
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d8:	4613      	mov	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	4413      	add	r3, r2
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	4a09      	ldr	r2, [pc, #36]	; (800f708 <xTaskPriorityDisinherit+0xd8>)
 800f6e2:	441a      	add	r2, r3
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	f7fe fab1 	bl	800dc52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f6f4:	697b      	ldr	r3, [r7, #20]
	}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3718      	adds	r7, #24
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	200016a4 	.word	0x200016a4
 800f704:	20001b80 	.word	0x20001b80
 800f708:	200016a8 	.word	0x200016a8

0800f70c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f716:	4b21      	ldr	r3, [pc, #132]	; (800f79c <prvAddCurrentTaskToDelayedList+0x90>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f71c:	4b20      	ldr	r3, [pc, #128]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	3304      	adds	r3, #4
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe faf2 	bl	800dd0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f72e:	d10a      	bne.n	800f746 <prvAddCurrentTaskToDelayedList+0x3a>
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d007      	beq.n	800f746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f736:	4b1a      	ldr	r3, [pc, #104]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	3304      	adds	r3, #4
 800f73c:	4619      	mov	r1, r3
 800f73e:	4819      	ldr	r0, [pc, #100]	; (800f7a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f740:	f7fe fa87 	bl	800dc52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f744:	e026      	b.n	800f794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4413      	add	r3, r2
 800f74c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f74e:	4b14      	ldr	r3, [pc, #80]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d209      	bcs.n	800f772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f75e:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	4b0f      	ldr	r3, [pc, #60]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	3304      	adds	r3, #4
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fe fa95 	bl	800dc9a <vListInsert>
}
 800f770:	e010      	b.n	800f794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f772:	4b0e      	ldr	r3, [pc, #56]	; (800f7ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	3304      	adds	r3, #4
 800f77c:	4619      	mov	r1, r3
 800f77e:	4610      	mov	r0, r2
 800f780:	f7fe fa8b 	bl	800dc9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f784:	4b0a      	ldr	r3, [pc, #40]	; (800f7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d202      	bcs.n	800f794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f78e:	4a08      	ldr	r2, [pc, #32]	; (800f7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	6013      	str	r3, [r2, #0]
}
 800f794:	bf00      	nop
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20001b7c 	.word	0x20001b7c
 800f7a0:	200016a4 	.word	0x200016a4
 800f7a4:	20001b64 	.word	0x20001b64
 800f7a8:	20001b34 	.word	0x20001b34
 800f7ac:	20001b30 	.word	0x20001b30
 800f7b0:	20001b98 	.word	0x20001b98

0800f7b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08a      	sub	sp, #40	; 0x28
 800f7b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f7be:	f000 fb07 	bl	800fdd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f7c2:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <xTimerCreateTimerTask+0x80>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d021      	beq.n	800f80e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f7d2:	1d3a      	adds	r2, r7, #4
 800f7d4:	f107 0108 	add.w	r1, r7, #8
 800f7d8:	f107 030c 	add.w	r3, r7, #12
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe f9f1 	bl	800dbc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	9202      	str	r2, [sp, #8]
 800f7ea:	9301      	str	r3, [sp, #4]
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	460a      	mov	r2, r1
 800f7f4:	4910      	ldr	r1, [pc, #64]	; (800f838 <xTimerCreateTimerTask+0x84>)
 800f7f6:	4811      	ldr	r0, [pc, #68]	; (800f83c <xTimerCreateTimerTask+0x88>)
 800f7f8:	f7fe ffd8 	bl	800e7ac <xTaskCreateStatic>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	4a10      	ldr	r2, [pc, #64]	; (800f840 <xTimerCreateTimerTask+0x8c>)
 800f800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f802:	4b0f      	ldr	r3, [pc, #60]	; (800f840 <xTimerCreateTimerTask+0x8c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d001      	beq.n	800f80e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f80a:	2301      	movs	r3, #1
 800f80c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10a      	bne.n	800f82a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f818:	f383 8811 	msr	BASEPRI, r3
 800f81c:	f3bf 8f6f 	isb	sy
 800f820:	f3bf 8f4f 	dsb	sy
 800f824:	613b      	str	r3, [r7, #16]
}
 800f826:	bf00      	nop
 800f828:	e7fe      	b.n	800f828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f82a:	697b      	ldr	r3, [r7, #20]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	20001bd4 	.word	0x20001bd4
 800f838:	0801344c 	.word	0x0801344c
 800f83c:	0800f979 	.word	0x0800f979
 800f840:	20001bd8 	.word	0x20001bd8

0800f844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08a      	sub	sp, #40	; 0x28
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f852:	2300      	movs	r3, #0
 800f854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10a      	bne.n	800f872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f860:	f383 8811 	msr	BASEPRI, r3
 800f864:	f3bf 8f6f 	isb	sy
 800f868:	f3bf 8f4f 	dsb	sy
 800f86c:	623b      	str	r3, [r7, #32]
}
 800f86e:	bf00      	nop
 800f870:	e7fe      	b.n	800f870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f872:	4b1a      	ldr	r3, [pc, #104]	; (800f8dc <xTimerGenericCommand+0x98>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d02a      	beq.n	800f8d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	2b05      	cmp	r3, #5
 800f88a:	dc18      	bgt.n	800f8be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f88c:	f7ff feb2 	bl	800f5f4 <xTaskGetSchedulerState>
 800f890:	4603      	mov	r3, r0
 800f892:	2b02      	cmp	r3, #2
 800f894:	d109      	bne.n	800f8aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f896:	4b11      	ldr	r3, [pc, #68]	; (800f8dc <xTimerGenericCommand+0x98>)
 800f898:	6818      	ldr	r0, [r3, #0]
 800f89a:	f107 0110 	add.w	r1, r7, #16
 800f89e:	2300      	movs	r3, #0
 800f8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a2:	f7fe fb9b 	bl	800dfdc <xQueueGenericSend>
 800f8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800f8a8:	e012      	b.n	800f8d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8aa:	4b0c      	ldr	r3, [pc, #48]	; (800f8dc <xTimerGenericCommand+0x98>)
 800f8ac:	6818      	ldr	r0, [r3, #0]
 800f8ae:	f107 0110 	add.w	r1, r7, #16
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f7fe fb91 	bl	800dfdc <xQueueGenericSend>
 800f8ba:	6278      	str	r0, [r7, #36]	; 0x24
 800f8bc:	e008      	b.n	800f8d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8be:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <xTimerGenericCommand+0x98>)
 800f8c0:	6818      	ldr	r0, [r3, #0]
 800f8c2:	f107 0110 	add.w	r1, r7, #16
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	f7fe fc85 	bl	800e1d8 <xQueueGenericSendFromISR>
 800f8ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3728      	adds	r7, #40	; 0x28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20001bd4 	.word	0x20001bd4

0800f8e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af02      	add	r7, sp, #8
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ea:	4b22      	ldr	r3, [pc, #136]	; (800f974 <prvProcessExpiredTimer+0x94>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fa07 	bl	800dd0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f904:	f003 0304 	and.w	r3, r3, #4
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d022      	beq.n	800f952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	699a      	ldr	r2, [r3, #24]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	18d1      	adds	r1, r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	6978      	ldr	r0, [r7, #20]
 800f91a:	f000 f8d1 	bl	800fac0 <prvInsertTimerInActiveList>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01f      	beq.n	800f964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f924:	2300      	movs	r3, #0
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	2300      	movs	r3, #0
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	2100      	movs	r1, #0
 800f92e:	6978      	ldr	r0, [r7, #20]
 800f930:	f7ff ff88 	bl	800f844 <xTimerGenericCommand>
 800f934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d113      	bne.n	800f964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	60fb      	str	r3, [r7, #12]
}
 800f94e:	bf00      	nop
 800f950:	e7fe      	b.n	800f950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f958:	f023 0301 	bic.w	r3, r3, #1
 800f95c:	b2da      	uxtb	r2, r3
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	6978      	ldr	r0, [r7, #20]
 800f96a:	4798      	blx	r3
}
 800f96c:	bf00      	nop
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	20001bcc 	.word	0x20001bcc

0800f978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f980:	f107 0308 	add.w	r3, r7, #8
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f857 	bl	800fa38 <prvGetNextExpireTime>
 800f98a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	4619      	mov	r1, r3
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f000 f803 	bl	800f99c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f996:	f000 f8d5 	bl	800fb44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f99a:	e7f1      	b.n	800f980 <prvTimerTask+0x8>

0800f99c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f9a6:	f7ff fa43 	bl	800ee30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9aa:	f107 0308 	add.w	r3, r7, #8
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 f866 	bl	800fa80 <prvSampleTimeNow>
 800f9b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d130      	bne.n	800fa1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d10a      	bne.n	800f9d8 <prvProcessTimerOrBlockTask+0x3c>
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d806      	bhi.n	800f9d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f9ca:	f7ff fa3f 	bl	800ee4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f9ce:	68f9      	ldr	r1, [r7, #12]
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff ff85 	bl	800f8e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f9d6:	e024      	b.n	800fa22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d008      	beq.n	800f9f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f9de:	4b13      	ldr	r3, [pc, #76]	; (800fa2c <prvProcessTimerOrBlockTask+0x90>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d101      	bne.n	800f9ec <prvProcessTimerOrBlockTask+0x50>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e000      	b.n	800f9ee <prvProcessTimerOrBlockTask+0x52>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f9f0:	4b0f      	ldr	r3, [pc, #60]	; (800fa30 <prvProcessTimerOrBlockTask+0x94>)
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	f7fe fea1 	bl	800e744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa02:	f7ff fa23 	bl	800ee4c <xTaskResumeAll>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d10a      	bne.n	800fa22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa0c:	4b09      	ldr	r3, [pc, #36]	; (800fa34 <prvProcessTimerOrBlockTask+0x98>)
 800fa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	f3bf 8f6f 	isb	sy
}
 800fa1c:	e001      	b.n	800fa22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa1e:	f7ff fa15 	bl	800ee4c <xTaskResumeAll>
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20001bd0 	.word	0x20001bd0
 800fa30:	20001bd4 	.word	0x20001bd4
 800fa34:	e000ed04 	.word	0xe000ed04

0800fa38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa40:	4b0e      	ldr	r3, [pc, #56]	; (800fa7c <prvGetNextExpireTime+0x44>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <prvGetNextExpireTime+0x16>
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	e000      	b.n	800fa50 <prvGetNextExpireTime+0x18>
 800fa4e:	2200      	movs	r2, #0
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d105      	bne.n	800fa68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa5c:	4b07      	ldr	r3, [pc, #28]	; (800fa7c <prvGetNextExpireTime+0x44>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	60fb      	str	r3, [r7, #12]
 800fa66:	e001      	b.n	800fa6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	20001bcc 	.word	0x20001bcc

0800fa80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fa88:	f7ff fa7e 	bl	800ef88 <xTaskGetTickCount>
 800fa8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fa8e:	4b0b      	ldr	r3, [pc, #44]	; (800fabc <prvSampleTimeNow+0x3c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d205      	bcs.n	800faa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa98:	f000 f936 	bl	800fd08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	601a      	str	r2, [r3, #0]
 800faa2:	e002      	b.n	800faaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800faaa:	4a04      	ldr	r2, [pc, #16]	; (800fabc <prvSampleTimeNow+0x3c>)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fab0:	68fb      	ldr	r3, [r7, #12]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	20001bdc 	.word	0x20001bdc

0800fac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800face:	2300      	movs	r3, #0
 800fad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d812      	bhi.n	800fb0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	1ad2      	subs	r2, r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	699b      	ldr	r3, [r3, #24]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d302      	bcc.n	800fafa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800faf4:	2301      	movs	r3, #1
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	e01b      	b.n	800fb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fafa:	4b10      	ldr	r3, [pc, #64]	; (800fb3c <prvInsertTimerInActiveList+0x7c>)
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3304      	adds	r3, #4
 800fb02:	4619      	mov	r1, r3
 800fb04:	4610      	mov	r0, r2
 800fb06:	f7fe f8c8 	bl	800dc9a <vListInsert>
 800fb0a:	e012      	b.n	800fb32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d206      	bcs.n	800fb22 <prvInsertTimerInActiveList+0x62>
 800fb14:	68ba      	ldr	r2, [r7, #8]
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d302      	bcc.n	800fb22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	617b      	str	r3, [r7, #20]
 800fb20:	e007      	b.n	800fb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb22:	4b07      	ldr	r3, [pc, #28]	; (800fb40 <prvInsertTimerInActiveList+0x80>)
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	3304      	adds	r3, #4
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	f7fe f8b4 	bl	800dc9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb32:	697b      	ldr	r3, [r7, #20]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3718      	adds	r7, #24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	20001bd0 	.word	0x20001bd0
 800fb40:	20001bcc 	.word	0x20001bcc

0800fb44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08e      	sub	sp, #56	; 0x38
 800fb48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb4a:	e0ca      	b.n	800fce2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	da18      	bge.n	800fb84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb52:	1d3b      	adds	r3, r7, #4
 800fb54:	3304      	adds	r3, #4
 800fb56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d10a      	bne.n	800fb74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	61fb      	str	r3, [r7, #28]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb7a:	6850      	ldr	r0, [r2, #4]
 800fb7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb7e:	6892      	ldr	r2, [r2, #8]
 800fb80:	4611      	mov	r1, r2
 800fb82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f2c0 80aa 	blt.w	800fce0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb92:	695b      	ldr	r3, [r3, #20]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe f8b5 	bl	800dd0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fba2:	463b      	mov	r3, r7
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff ff6b 	bl	800fa80 <prvSampleTimeNow>
 800fbaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b09      	cmp	r3, #9
 800fbb0:	f200 8097 	bhi.w	800fce2 <prvProcessReceivedCommands+0x19e>
 800fbb4:	a201      	add	r2, pc, #4	; (adr r2, 800fbbc <prvProcessReceivedCommands+0x78>)
 800fbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbba:	bf00      	nop
 800fbbc:	0800fbe5 	.word	0x0800fbe5
 800fbc0:	0800fbe5 	.word	0x0800fbe5
 800fbc4:	0800fbe5 	.word	0x0800fbe5
 800fbc8:	0800fc59 	.word	0x0800fc59
 800fbcc:	0800fc6d 	.word	0x0800fc6d
 800fbd0:	0800fcb7 	.word	0x0800fcb7
 800fbd4:	0800fbe5 	.word	0x0800fbe5
 800fbd8:	0800fbe5 	.word	0x0800fbe5
 800fbdc:	0800fc59 	.word	0x0800fc59
 800fbe0:	0800fc6d 	.word	0x0800fc6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbea:	f043 0301 	orr.w	r3, r3, #1
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	699b      	ldr	r3, [r3, #24]
 800fbfc:	18d1      	adds	r1, r2, r3
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc04:	f7ff ff5c 	bl	800fac0 <prvInsertTimerInActiveList>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d069      	beq.n	800fce2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc10:	6a1b      	ldr	r3, [r3, #32]
 800fc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc1c:	f003 0304 	and.w	r3, r3, #4
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d05e      	beq.n	800fce2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	699b      	ldr	r3, [r3, #24]
 800fc2a:	441a      	add	r2, r3
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9300      	str	r3, [sp, #0]
 800fc30:	2300      	movs	r3, #0
 800fc32:	2100      	movs	r1, #0
 800fc34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc36:	f7ff fe05 	bl	800f844 <xTimerGenericCommand>
 800fc3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d14f      	bne.n	800fce2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	61bb      	str	r3, [r7, #24]
}
 800fc54:	bf00      	nop
 800fc56:	e7fe      	b.n	800fc56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc5e:	f023 0301 	bic.w	r3, r3, #1
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fc6a:	e03a      	b.n	800fce2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc72:	f043 0301 	orr.w	r3, r3, #1
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc7e:	68ba      	ldr	r2, [r7, #8]
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	617b      	str	r3, [r7, #20]
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	699a      	ldr	r2, [r3, #24]
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	18d1      	adds	r1, r2, r3
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb0:	f7ff ff06 	bl	800fac0 <prvInsertTimerInActiveList>
					break;
 800fcb4:	e015      	b.n	800fce2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcbc:	f003 0302 	and.w	r3, r3, #2
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d103      	bne.n	800fccc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcc6:	f000 fbdb 	bl	8010480 <vPortFree>
 800fcca:	e00a      	b.n	800fce2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcd2:	f023 0301 	bic.w	r3, r3, #1
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fcde:	e000      	b.n	800fce2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fce0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fce2:	4b08      	ldr	r3, [pc, #32]	; (800fd04 <prvProcessReceivedCommands+0x1c0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	1d39      	adds	r1, r7, #4
 800fce8:	2200      	movs	r2, #0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fe fb10 	bl	800e310 <xQueueReceive>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f47f af2a 	bne.w	800fb4c <prvProcessReceivedCommands+0x8>
	}
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	3730      	adds	r7, #48	; 0x30
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20001bd4 	.word	0x20001bd4

0800fd08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b088      	sub	sp, #32
 800fd0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd0e:	e048      	b.n	800fda2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd10:	4b2d      	ldr	r3, [pc, #180]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd1a:	4b2b      	ldr	r3, [pc, #172]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	3304      	adds	r3, #4
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fd ffef 	bl	800dd0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd3c:	f003 0304 	and.w	r3, r3, #4
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d02e      	beq.n	800fda2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	699b      	ldr	r3, [r3, #24]
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d90e      	bls.n	800fd74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd62:	4b19      	ldr	r3, [pc, #100]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	f7fd ff94 	bl	800dc9a <vListInsert>
 800fd72:	e016      	b.n	800fda2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd74:	2300      	movs	r3, #0
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	693a      	ldr	r2, [r7, #16]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f7ff fd60 	bl	800f844 <xTimerGenericCommand>
 800fd84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d10a      	bne.n	800fda2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd90:	f383 8811 	msr	BASEPRI, r3
 800fd94:	f3bf 8f6f 	isb	sy
 800fd98:	f3bf 8f4f 	dsb	sy
 800fd9c:	603b      	str	r3, [r7, #0]
}
 800fd9e:	bf00      	nop
 800fda0:	e7fe      	b.n	800fda0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1b1      	bne.n	800fd10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fdac:	4b06      	ldr	r3, [pc, #24]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fdb2:	4b06      	ldr	r3, [pc, #24]	; (800fdcc <prvSwitchTimerLists+0xc4>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a04      	ldr	r2, [pc, #16]	; (800fdc8 <prvSwitchTimerLists+0xc0>)
 800fdb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdba:	4a04      	ldr	r2, [pc, #16]	; (800fdcc <prvSwitchTimerLists+0xc4>)
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	6013      	str	r3, [r2, #0]
}
 800fdc0:	bf00      	nop
 800fdc2:	3718      	adds	r7, #24
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	20001bcc 	.word	0x20001bcc
 800fdcc:	20001bd0 	.word	0x20001bd0

0800fdd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fdd6:	f000 f965 	bl	80100a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fdda:	4b15      	ldr	r3, [pc, #84]	; (800fe30 <prvCheckForValidListAndQueue+0x60>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d120      	bne.n	800fe24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fde2:	4814      	ldr	r0, [pc, #80]	; (800fe34 <prvCheckForValidListAndQueue+0x64>)
 800fde4:	f7fd ff08 	bl	800dbf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fde8:	4813      	ldr	r0, [pc, #76]	; (800fe38 <prvCheckForValidListAndQueue+0x68>)
 800fdea:	f7fd ff05 	bl	800dbf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <prvCheckForValidListAndQueue+0x6c>)
 800fdf0:	4a10      	ldr	r2, [pc, #64]	; (800fe34 <prvCheckForValidListAndQueue+0x64>)
 800fdf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fdf4:	4b12      	ldr	r3, [pc, #72]	; (800fe40 <prvCheckForValidListAndQueue+0x70>)
 800fdf6:	4a10      	ldr	r2, [pc, #64]	; (800fe38 <prvCheckForValidListAndQueue+0x68>)
 800fdf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	9300      	str	r3, [sp, #0]
 800fdfe:	4b11      	ldr	r3, [pc, #68]	; (800fe44 <prvCheckForValidListAndQueue+0x74>)
 800fe00:	4a11      	ldr	r2, [pc, #68]	; (800fe48 <prvCheckForValidListAndQueue+0x78>)
 800fe02:	2110      	movs	r1, #16
 800fe04:	200a      	movs	r0, #10
 800fe06:	f7fe f813 	bl	800de30 <xQueueGenericCreateStatic>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	4a08      	ldr	r2, [pc, #32]	; (800fe30 <prvCheckForValidListAndQueue+0x60>)
 800fe0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe10:	4b07      	ldr	r3, [pc, #28]	; (800fe30 <prvCheckForValidListAndQueue+0x60>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d005      	beq.n	800fe24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe18:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <prvCheckForValidListAndQueue+0x60>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	490b      	ldr	r1, [pc, #44]	; (800fe4c <prvCheckForValidListAndQueue+0x7c>)
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe fc66 	bl	800e6f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe24:	f000 f96e 	bl	8010104 <vPortExitCritical>
}
 800fe28:	bf00      	nop
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	20001bd4 	.word	0x20001bd4
 800fe34:	20001ba4 	.word	0x20001ba4
 800fe38:	20001bb8 	.word	0x20001bb8
 800fe3c:	20001bcc 	.word	0x20001bcc
 800fe40:	20001bd0 	.word	0x20001bd0
 800fe44:	20001c80 	.word	0x20001c80
 800fe48:	20001be0 	.word	0x20001be0
 800fe4c:	08013454 	.word	0x08013454

0800fe50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	3b04      	subs	r3, #4
 800fe60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	3b04      	subs	r3, #4
 800fe6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	f023 0201 	bic.w	r2, r3, #1
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	3b04      	subs	r3, #4
 800fe7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe80:	4a0c      	ldr	r2, [pc, #48]	; (800feb4 <pxPortInitialiseStack+0x64>)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	3b14      	subs	r3, #20
 800fe8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3b04      	subs	r3, #4
 800fe96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f06f 0202 	mvn.w	r2, #2
 800fe9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	3b20      	subs	r3, #32
 800fea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fea6:	68fb      	ldr	r3, [r7, #12]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3714      	adds	r7, #20
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr
 800feb4:	0800feb9 	.word	0x0800feb9

0800feb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fec2:	4b12      	ldr	r3, [pc, #72]	; (800ff0c <prvTaskExitError+0x54>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feca:	d00a      	beq.n	800fee2 <prvTaskExitError+0x2a>
	__asm volatile
 800fecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed0:	f383 8811 	msr	BASEPRI, r3
 800fed4:	f3bf 8f6f 	isb	sy
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	60fb      	str	r3, [r7, #12]
}
 800fede:	bf00      	nop
 800fee0:	e7fe      	b.n	800fee0 <prvTaskExitError+0x28>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	60bb      	str	r3, [r7, #8]
}
 800fef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fef6:	bf00      	nop
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d0fc      	beq.n	800fef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fefe:	bf00      	nop
 800ff00:	bf00      	nop
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	20000674 	.word	0x20000674

0800ff10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <pxCurrentTCBConst2>)
 800ff12:	6819      	ldr	r1, [r3, #0]
 800ff14:	6808      	ldr	r0, [r1, #0]
 800ff16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1a:	f380 8809 	msr	PSP, r0
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f04f 0000 	mov.w	r0, #0
 800ff26:	f380 8811 	msr	BASEPRI, r0
 800ff2a:	4770      	bx	lr
 800ff2c:	f3af 8000 	nop.w

0800ff30 <pxCurrentTCBConst2>:
 800ff30:	200016a4 	.word	0x200016a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff34:	bf00      	nop
 800ff36:	bf00      	nop

0800ff38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff38:	4808      	ldr	r0, [pc, #32]	; (800ff5c <prvPortStartFirstTask+0x24>)
 800ff3a:	6800      	ldr	r0, [r0, #0]
 800ff3c:	6800      	ldr	r0, [r0, #0]
 800ff3e:	f380 8808 	msr	MSP, r0
 800ff42:	f04f 0000 	mov.w	r0, #0
 800ff46:	f380 8814 	msr	CONTROL, r0
 800ff4a:	b662      	cpsie	i
 800ff4c:	b661      	cpsie	f
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	df00      	svc	0
 800ff58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff5a:	bf00      	nop
 800ff5c:	e000ed08 	.word	0xe000ed08

0800ff60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff66:	4b46      	ldr	r3, [pc, #280]	; (8010080 <xPortStartScheduler+0x120>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a46      	ldr	r2, [pc, #280]	; (8010084 <xPortStartScheduler+0x124>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d10a      	bne.n	800ff86 <xPortStartScheduler+0x26>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	613b      	str	r3, [r7, #16]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff86:	4b3e      	ldr	r3, [pc, #248]	; (8010080 <xPortStartScheduler+0x120>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a3f      	ldr	r2, [pc, #252]	; (8010088 <xPortStartScheduler+0x128>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d10a      	bne.n	800ffa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	60fb      	str	r3, [r7, #12]
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffa6:	4b39      	ldr	r3, [pc, #228]	; (801008c <xPortStartScheduler+0x12c>)
 800ffa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	22ff      	movs	r2, #255	; 0xff
 800ffb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	4b31      	ldr	r3, [pc, #196]	; (8010090 <xPortStartScheduler+0x130>)
 800ffcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ffce:	4b31      	ldr	r3, [pc, #196]	; (8010094 <xPortStartScheduler+0x134>)
 800ffd0:	2207      	movs	r2, #7
 800ffd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffd4:	e009      	b.n	800ffea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ffd6:	4b2f      	ldr	r3, [pc, #188]	; (8010094 <xPortStartScheduler+0x134>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	4a2d      	ldr	r2, [pc, #180]	; (8010094 <xPortStartScheduler+0x134>)
 800ffde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffea:	78fb      	ldrb	r3, [r7, #3]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff2:	2b80      	cmp	r3, #128	; 0x80
 800fff4:	d0ef      	beq.n	800ffd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fff6:	4b27      	ldr	r3, [pc, #156]	; (8010094 <xPortStartScheduler+0x134>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f1c3 0307 	rsb	r3, r3, #7
 800fffe:	2b04      	cmp	r3, #4
 8010000:	d00a      	beq.n	8010018 <xPortStartScheduler+0xb8>
	__asm volatile
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	60bb      	str	r3, [r7, #8]
}
 8010014:	bf00      	nop
 8010016:	e7fe      	b.n	8010016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010018:	4b1e      	ldr	r3, [pc, #120]	; (8010094 <xPortStartScheduler+0x134>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	021b      	lsls	r3, r3, #8
 801001e:	4a1d      	ldr	r2, [pc, #116]	; (8010094 <xPortStartScheduler+0x134>)
 8010020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010022:	4b1c      	ldr	r3, [pc, #112]	; (8010094 <xPortStartScheduler+0x134>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801002a:	4a1a      	ldr	r2, [pc, #104]	; (8010094 <xPortStartScheduler+0x134>)
 801002c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	b2da      	uxtb	r2, r3
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010036:	4b18      	ldr	r3, [pc, #96]	; (8010098 <xPortStartScheduler+0x138>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a17      	ldr	r2, [pc, #92]	; (8010098 <xPortStartScheduler+0x138>)
 801003c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010042:	4b15      	ldr	r3, [pc, #84]	; (8010098 <xPortStartScheduler+0x138>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a14      	ldr	r2, [pc, #80]	; (8010098 <xPortStartScheduler+0x138>)
 8010048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801004c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801004e:	f000 f8dd 	bl	801020c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010052:	4b12      	ldr	r3, [pc, #72]	; (801009c <xPortStartScheduler+0x13c>)
 8010054:	2200      	movs	r2, #0
 8010056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010058:	f000 f8fc 	bl	8010254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801005c:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <xPortStartScheduler+0x140>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0f      	ldr	r2, [pc, #60]	; (80100a0 <xPortStartScheduler+0x140>)
 8010062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010068:	f7ff ff66 	bl	800ff38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801006c:	f7ff f856 	bl	800f11c <vTaskSwitchContext>
	prvTaskExitError();
 8010070:	f7ff ff22 	bl	800feb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	e000ed00 	.word	0xe000ed00
 8010084:	410fc271 	.word	0x410fc271
 8010088:	410fc270 	.word	0x410fc270
 801008c:	e000e400 	.word	0xe000e400
 8010090:	20001cd0 	.word	0x20001cd0
 8010094:	20001cd4 	.word	0x20001cd4
 8010098:	e000ed20 	.word	0xe000ed20
 801009c:	20000674 	.word	0x20000674
 80100a0:	e000ef34 	.word	0xe000ef34

080100a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	607b      	str	r3, [r7, #4]
}
 80100bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100be:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <vPortEnterCritical+0x58>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3301      	adds	r3, #1
 80100c4:	4a0d      	ldr	r2, [pc, #52]	; (80100fc <vPortEnterCritical+0x58>)
 80100c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100c8:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <vPortEnterCritical+0x58>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d10f      	bne.n	80100f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100d0:	4b0b      	ldr	r3, [pc, #44]	; (8010100 <vPortEnterCritical+0x5c>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00a      	beq.n	80100f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80100da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100de:	f383 8811 	msr	BASEPRI, r3
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	603b      	str	r3, [r7, #0]
}
 80100ec:	bf00      	nop
 80100ee:	e7fe      	b.n	80100ee <vPortEnterCritical+0x4a>
	}
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	20000674 	.word	0x20000674
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801010a:	4b12      	ldr	r3, [pc, #72]	; (8010154 <vPortExitCritical+0x50>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10a      	bne.n	8010128 <vPortExitCritical+0x24>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	607b      	str	r3, [r7, #4]
}
 8010124:	bf00      	nop
 8010126:	e7fe      	b.n	8010126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <vPortExitCritical+0x50>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3b01      	subs	r3, #1
 801012e:	4a09      	ldr	r2, [pc, #36]	; (8010154 <vPortExitCritical+0x50>)
 8010130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010132:	4b08      	ldr	r3, [pc, #32]	; (8010154 <vPortExitCritical+0x50>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d105      	bne.n	8010146 <vPortExitCritical+0x42>
 801013a:	2300      	movs	r3, #0
 801013c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	f383 8811 	msr	BASEPRI, r3
}
 8010144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010146:	bf00      	nop
 8010148:	370c      	adds	r7, #12
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	20000674 	.word	0x20000674
	...

08010160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010160:	f3ef 8009 	mrs	r0, PSP
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	4b15      	ldr	r3, [pc, #84]	; (80101c0 <pxCurrentTCBConst>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	f01e 0f10 	tst.w	lr, #16
 8010170:	bf08      	it	eq
 8010172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017a:	6010      	str	r0, [r2, #0]
 801017c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010184:	f380 8811 	msr	BASEPRI, r0
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f7fe ffc4 	bl	800f11c <vTaskSwitchContext>
 8010194:	f04f 0000 	mov.w	r0, #0
 8010198:	f380 8811 	msr	BASEPRI, r0
 801019c:	bc09      	pop	{r0, r3}
 801019e:	6819      	ldr	r1, [r3, #0]
 80101a0:	6808      	ldr	r0, [r1, #0]
 80101a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a6:	f01e 0f10 	tst.w	lr, #16
 80101aa:	bf08      	it	eq
 80101ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101b0:	f380 8809 	msr	PSP, r0
 80101b4:	f3bf 8f6f 	isb	sy
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	f3af 8000 	nop.w

080101c0 <pxCurrentTCBConst>:
 80101c0:	200016a4 	.word	0x200016a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop

080101c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	607b      	str	r3, [r7, #4]
}
 80101e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80101e2:	f7fe fee1 	bl	800efa8 <xTaskIncrementTick>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d003      	beq.n	80101f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80101ec:	4b06      	ldr	r3, [pc, #24]	; (8010208 <xPortSysTickHandler+0x40>)
 80101ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	2300      	movs	r3, #0
 80101f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	f383 8811 	msr	BASEPRI, r3
}
 80101fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010200:	bf00      	nop
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	e000ed04 	.word	0xe000ed04

0801020c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801020c:	b480      	push	{r7}
 801020e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010210:	4b0b      	ldr	r3, [pc, #44]	; (8010240 <vPortSetupTimerInterrupt+0x34>)
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010216:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <vPortSetupTimerInterrupt+0x38>)
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801021c:	4b0a      	ldr	r3, [pc, #40]	; (8010248 <vPortSetupTimerInterrupt+0x3c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a0a      	ldr	r2, [pc, #40]	; (801024c <vPortSetupTimerInterrupt+0x40>)
 8010222:	fba2 2303 	umull	r2, r3, r2, r3
 8010226:	099b      	lsrs	r3, r3, #6
 8010228:	4a09      	ldr	r2, [pc, #36]	; (8010250 <vPortSetupTimerInterrupt+0x44>)
 801022a:	3b01      	subs	r3, #1
 801022c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801022e:	4b04      	ldr	r3, [pc, #16]	; (8010240 <vPortSetupTimerInterrupt+0x34>)
 8010230:	2207      	movs	r2, #7
 8010232:	601a      	str	r2, [r3, #0]
}
 8010234:	bf00      	nop
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	e000e010 	.word	0xe000e010
 8010244:	e000e018 	.word	0xe000e018
 8010248:	200005c4 	.word	0x200005c4
 801024c:	10624dd3 	.word	0x10624dd3
 8010250:	e000e014 	.word	0xe000e014

08010254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010264 <vPortEnableVFP+0x10>
 8010258:	6801      	ldr	r1, [r0, #0]
 801025a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801025e:	6001      	str	r1, [r0, #0]
 8010260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010262:	bf00      	nop
 8010264:	e000ed88 	.word	0xe000ed88

08010268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801026e:	f3ef 8305 	mrs	r3, IPSR
 8010272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b0f      	cmp	r3, #15
 8010278:	d914      	bls.n	80102a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801027a:	4a17      	ldr	r2, [pc, #92]	; (80102d8 <vPortValidateInterruptPriority+0x70>)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4413      	add	r3, r2
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010284:	4b15      	ldr	r3, [pc, #84]	; (80102dc <vPortValidateInterruptPriority+0x74>)
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	7afa      	ldrb	r2, [r7, #11]
 801028a:	429a      	cmp	r2, r3
 801028c:	d20a      	bcs.n	80102a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	607b      	str	r3, [r7, #4]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80102a4:	4b0e      	ldr	r3, [pc, #56]	; (80102e0 <vPortValidateInterruptPriority+0x78>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80102ac:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <vPortValidateInterruptPriority+0x7c>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d90a      	bls.n	80102ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b8:	f383 8811 	msr	BASEPRI, r3
 80102bc:	f3bf 8f6f 	isb	sy
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	603b      	str	r3, [r7, #0]
}
 80102c6:	bf00      	nop
 80102c8:	e7fe      	b.n	80102c8 <vPortValidateInterruptPriority+0x60>
	}
 80102ca:	bf00      	nop
 80102cc:	3714      	adds	r7, #20
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	e000e3f0 	.word	0xe000e3f0
 80102dc:	20001cd0 	.word	0x20001cd0
 80102e0:	e000ed0c 	.word	0xe000ed0c
 80102e4:	20001cd4 	.word	0x20001cd4

080102e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	; 0x28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80102f4:	f7fe fd9c 	bl	800ee30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80102f8:	4b5b      	ldr	r3, [pc, #364]	; (8010468 <pvPortMalloc+0x180>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010300:	f000 f920 	bl	8010544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010304:	4b59      	ldr	r3, [pc, #356]	; (801046c <pvPortMalloc+0x184>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4013      	ands	r3, r2
 801030c:	2b00      	cmp	r3, #0
 801030e:	f040 8093 	bne.w	8010438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d01d      	beq.n	8010354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010318:	2208      	movs	r2, #8
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4413      	add	r3, r2
 801031e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f003 0307 	and.w	r3, r3, #7
 8010326:	2b00      	cmp	r3, #0
 8010328:	d014      	beq.n	8010354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f023 0307 	bic.w	r3, r3, #7
 8010330:	3308      	adds	r3, #8
 8010332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f003 0307 	and.w	r3, r3, #7
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <pvPortMalloc+0x6c>
	__asm volatile
 801033e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	617b      	str	r3, [r7, #20]
}
 8010350:	bf00      	nop
 8010352:	e7fe      	b.n	8010352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d06e      	beq.n	8010438 <pvPortMalloc+0x150>
 801035a:	4b45      	ldr	r3, [pc, #276]	; (8010470 <pvPortMalloc+0x188>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	429a      	cmp	r2, r3
 8010362:	d869      	bhi.n	8010438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010364:	4b43      	ldr	r3, [pc, #268]	; (8010474 <pvPortMalloc+0x18c>)
 8010366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010368:	4b42      	ldr	r3, [pc, #264]	; (8010474 <pvPortMalloc+0x18c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801036e:	e004      	b.n	801037a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	429a      	cmp	r2, r3
 8010382:	d903      	bls.n	801038c <pvPortMalloc+0xa4>
 8010384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1f1      	bne.n	8010370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801038c:	4b36      	ldr	r3, [pc, #216]	; (8010468 <pvPortMalloc+0x180>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010392:	429a      	cmp	r2, r3
 8010394:	d050      	beq.n	8010438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010396:	6a3b      	ldr	r3, [r7, #32]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2208      	movs	r2, #8
 801039c:	4413      	add	r3, r2
 801039e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	6a3b      	ldr	r3, [r7, #32]
 80103a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	685a      	ldr	r2, [r3, #4]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	1ad2      	subs	r2, r2, r3
 80103b0:	2308      	movs	r3, #8
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d91f      	bls.n	80103f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4413      	add	r3, r2
 80103be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f003 0307 	and.w	r3, r3, #7
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00a      	beq.n	80103e0 <pvPortMalloc+0xf8>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	613b      	str	r3, [r7, #16]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80103e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	1ad2      	subs	r2, r2, r3
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80103f2:	69b8      	ldr	r0, [r7, #24]
 80103f4:	f000 f908 	bl	8010608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80103f8:	4b1d      	ldr	r3, [pc, #116]	; (8010470 <pvPortMalloc+0x188>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	4a1b      	ldr	r2, [pc, #108]	; (8010470 <pvPortMalloc+0x188>)
 8010404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010406:	4b1a      	ldr	r3, [pc, #104]	; (8010470 <pvPortMalloc+0x188>)
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4b1b      	ldr	r3, [pc, #108]	; (8010478 <pvPortMalloc+0x190>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	429a      	cmp	r2, r3
 8010410:	d203      	bcs.n	801041a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010412:	4b17      	ldr	r3, [pc, #92]	; (8010470 <pvPortMalloc+0x188>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a18      	ldr	r2, [pc, #96]	; (8010478 <pvPortMalloc+0x190>)
 8010418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	4b13      	ldr	r3, [pc, #76]	; (801046c <pvPortMalloc+0x184>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	431a      	orrs	r2, r3
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	2200      	movs	r2, #0
 801042c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801042e:	4b13      	ldr	r3, [pc, #76]	; (801047c <pvPortMalloc+0x194>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3301      	adds	r3, #1
 8010434:	4a11      	ldr	r2, [pc, #68]	; (801047c <pvPortMalloc+0x194>)
 8010436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010438:	f7fe fd08 	bl	800ee4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	f003 0307 	and.w	r3, r3, #7
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00a      	beq.n	801045c <pvPortMalloc+0x174>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	60fb      	str	r3, [r7, #12]
}
 8010458:	bf00      	nop
 801045a:	e7fe      	b.n	801045a <pvPortMalloc+0x172>
	return pvReturn;
 801045c:	69fb      	ldr	r3, [r7, #28]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3728      	adds	r7, #40	; 0x28
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	20009210 	.word	0x20009210
 801046c:	20009224 	.word	0x20009224
 8010470:	20009214 	.word	0x20009214
 8010474:	20009208 	.word	0x20009208
 8010478:	20009218 	.word	0x20009218
 801047c:	2000921c 	.word	0x2000921c

08010480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d04d      	beq.n	801052e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010492:	2308      	movs	r3, #8
 8010494:	425b      	negs	r3, r3
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4413      	add	r3, r2
 801049a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	685a      	ldr	r2, [r3, #4]
 80104a4:	4b24      	ldr	r3, [pc, #144]	; (8010538 <vPortFree+0xb8>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4013      	ands	r3, r2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10a      	bne.n	80104c4 <vPortFree+0x44>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	60fb      	str	r3, [r7, #12]
}
 80104c0:	bf00      	nop
 80104c2:	e7fe      	b.n	80104c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00a      	beq.n	80104e2 <vPortFree+0x62>
	__asm volatile
 80104cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d0:	f383 8811 	msr	BASEPRI, r3
 80104d4:	f3bf 8f6f 	isb	sy
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	60bb      	str	r3, [r7, #8]
}
 80104de:	bf00      	nop
 80104e0:	e7fe      	b.n	80104e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	685a      	ldr	r2, [r3, #4]
 80104e6:	4b14      	ldr	r3, [pc, #80]	; (8010538 <vPortFree+0xb8>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4013      	ands	r3, r2
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d01e      	beq.n	801052e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d11a      	bne.n	801052e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	685a      	ldr	r2, [r3, #4]
 80104fc:	4b0e      	ldr	r3, [pc, #56]	; (8010538 <vPortFree+0xb8>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	43db      	mvns	r3, r3
 8010502:	401a      	ands	r2, r3
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010508:	f7fe fc92 	bl	800ee30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	685a      	ldr	r2, [r3, #4]
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <vPortFree+0xbc>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4413      	add	r3, r2
 8010516:	4a09      	ldr	r2, [pc, #36]	; (801053c <vPortFree+0xbc>)
 8010518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801051a:	6938      	ldr	r0, [r7, #16]
 801051c:	f000 f874 	bl	8010608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010520:	4b07      	ldr	r3, [pc, #28]	; (8010540 <vPortFree+0xc0>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3301      	adds	r3, #1
 8010526:	4a06      	ldr	r2, [pc, #24]	; (8010540 <vPortFree+0xc0>)
 8010528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801052a:	f7fe fc8f 	bl	800ee4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801052e:	bf00      	nop
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	20009224 	.word	0x20009224
 801053c:	20009214 	.word	0x20009214
 8010540:	20009220 	.word	0x20009220

08010544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801054a:	f247 5330 	movw	r3, #30000	; 0x7530
 801054e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010550:	4b27      	ldr	r3, [pc, #156]	; (80105f0 <prvHeapInit+0xac>)
 8010552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 0307 	and.w	r3, r3, #7
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00c      	beq.n	8010578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0307 	bic.w	r3, r3, #7
 801056a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	4a1f      	ldr	r2, [pc, #124]	; (80105f0 <prvHeapInit+0xac>)
 8010574:	4413      	add	r3, r2
 8010576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801057c:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <prvHeapInit+0xb0>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010582:	4b1c      	ldr	r3, [pc, #112]	; (80105f4 <prvHeapInit+0xb0>)
 8010584:	2200      	movs	r2, #0
 8010586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010590:	2208      	movs	r2, #8
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f023 0307 	bic.w	r3, r3, #7
 801059e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4a15      	ldr	r2, [pc, #84]	; (80105f8 <prvHeapInit+0xb4>)
 80105a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105a6:	4b14      	ldr	r3, [pc, #80]	; (80105f8 <prvHeapInit+0xb4>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ae:	4b12      	ldr	r3, [pc, #72]	; (80105f8 <prvHeapInit+0xb4>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	; (80105f8 <prvHeapInit+0xb4>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4a0a      	ldr	r2, [pc, #40]	; (80105fc <prvHeapInit+0xb8>)
 80105d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <prvHeapInit+0xbc>)
 80105da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <prvHeapInit+0xc0>)
 80105de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	20001cd8 	.word	0x20001cd8
 80105f4:	20009208 	.word	0x20009208
 80105f8:	20009210 	.word	0x20009210
 80105fc:	20009218 	.word	0x20009218
 8010600:	20009214 	.word	0x20009214
 8010604:	20009224 	.word	0x20009224

08010608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010610:	4b28      	ldr	r3, [pc, #160]	; (80106b4 <prvInsertBlockIntoFreeList+0xac>)
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e002      	b.n	801061c <prvInsertBlockIntoFreeList+0x14>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d8f7      	bhi.n	8010616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	4413      	add	r3, r2
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	429a      	cmp	r2, r3
 8010636:	d108      	bne.n	801064a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	441a      	add	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	441a      	add	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	429a      	cmp	r2, r3
 801065c:	d118      	bne.n	8010690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d00d      	beq.n	8010686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	441a      	add	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	e008      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	e003      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d002      	beq.n	80106a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20009208 	.word	0x20009208
 80106b8:	20009210 	.word	0x20009210

080106bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106c0:	2200      	movs	r2, #0
 80106c2:	4912      	ldr	r1, [pc, #72]	; (801070c <MX_USB_DEVICE_Init+0x50>)
 80106c4:	4812      	ldr	r0, [pc, #72]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106c6:	f7fb fdc1 	bl	800c24c <USBD_Init>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106d0:	f7f3 fda0 	bl	8004214 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80106d4:	490f      	ldr	r1, [pc, #60]	; (8010714 <MX_USB_DEVICE_Init+0x58>)
 80106d6:	480e      	ldr	r0, [pc, #56]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106d8:	f7fb fde8 	bl	800c2ac <USBD_RegisterClass>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80106e2:	f7f3 fd97 	bl	8004214 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80106e6:	490c      	ldr	r1, [pc, #48]	; (8010718 <MX_USB_DEVICE_Init+0x5c>)
 80106e8:	4809      	ldr	r0, [pc, #36]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106ea:	f7fb fcd9 	bl	800c0a0 <USBD_CDC_RegisterInterface>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80106f4:	f7f3 fd8e 	bl	8004214 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80106f8:	4805      	ldr	r0, [pc, #20]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106fa:	f7fb fe0d 	bl	800c318 <USBD_Start>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010704:	f7f3 fd86 	bl	8004214 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010708:	bf00      	nop
 801070a:	bd80      	pop	{r7, pc}
 801070c:	2000068c 	.word	0x2000068c
 8010710:	20009228 	.word	0x20009228
 8010714:	200005f4 	.word	0x200005f4
 8010718:	20000678 	.word	0x20000678

0801071c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010720:	2200      	movs	r2, #0
 8010722:	4905      	ldr	r1, [pc, #20]	; (8010738 <CDC_Init_FS+0x1c>)
 8010724:	4805      	ldr	r0, [pc, #20]	; (801073c <CDC_Init_FS+0x20>)
 8010726:	f7fb fcd5 	bl	800c0d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801072a:	4905      	ldr	r1, [pc, #20]	; (8010740 <CDC_Init_FS+0x24>)
 801072c:	4803      	ldr	r0, [pc, #12]	; (801073c <CDC_Init_FS+0x20>)
 801072e:	f7fb fcf3 	bl	800c118 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010734:	4618      	mov	r0, r3
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20009904 	.word	0x20009904
 801073c:	20009228 	.word	0x20009228
 8010740:	20009504 	.word	0x20009504

08010744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010744:	b480      	push	{r7}
 8010746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801074a:	4618      	mov	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	6039      	str	r1, [r7, #0]
 801075e:	71fb      	strb	r3, [r7, #7]
 8010760:	4613      	mov	r3, r2
 8010762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010764:	79fb      	ldrb	r3, [r7, #7]
 8010766:	2b23      	cmp	r3, #35	; 0x23
 8010768:	d84a      	bhi.n	8010800 <CDC_Control_FS+0xac>
 801076a:	a201      	add	r2, pc, #4	; (adr r2, 8010770 <CDC_Control_FS+0x1c>)
 801076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010770:	08010801 	.word	0x08010801
 8010774:	08010801 	.word	0x08010801
 8010778:	08010801 	.word	0x08010801
 801077c:	08010801 	.word	0x08010801
 8010780:	08010801 	.word	0x08010801
 8010784:	08010801 	.word	0x08010801
 8010788:	08010801 	.word	0x08010801
 801078c:	08010801 	.word	0x08010801
 8010790:	08010801 	.word	0x08010801
 8010794:	08010801 	.word	0x08010801
 8010798:	08010801 	.word	0x08010801
 801079c:	08010801 	.word	0x08010801
 80107a0:	08010801 	.word	0x08010801
 80107a4:	08010801 	.word	0x08010801
 80107a8:	08010801 	.word	0x08010801
 80107ac:	08010801 	.word	0x08010801
 80107b0:	08010801 	.word	0x08010801
 80107b4:	08010801 	.word	0x08010801
 80107b8:	08010801 	.word	0x08010801
 80107bc:	08010801 	.word	0x08010801
 80107c0:	08010801 	.word	0x08010801
 80107c4:	08010801 	.word	0x08010801
 80107c8:	08010801 	.word	0x08010801
 80107cc:	08010801 	.word	0x08010801
 80107d0:	08010801 	.word	0x08010801
 80107d4:	08010801 	.word	0x08010801
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010801 	.word	0x08010801
 80107e4:	08010801 	.word	0x08010801
 80107e8:	08010801 	.word	0x08010801
 80107ec:	08010801 	.word	0x08010801
 80107f0:	08010801 	.word	0x08010801
 80107f4:	08010801 	.word	0x08010801
 80107f8:	08010801 	.word	0x08010801
 80107fc:	08010801 	.word	0x08010801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010800:	bf00      	nop
  }

  return (USBD_OK);
 8010802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t check = Buf[0];
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	73fb      	strb	r3, [r7, #15]
  CDC_Transmit_FS(Buf, *Len); //Echo input back to user
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	b29b      	uxth	r3, r3
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 f817 	bl	801085c <CDC_Transmit_FS>
  xQueueSendFromISR(USBInputHandle, &Buf[0], 0);
 801082e:	4b09      	ldr	r3, [pc, #36]	; (8010854 <CDC_Receive_FS+0x44>)
 8010830:	6818      	ldr	r0, [r3, #0]
 8010832:	2300      	movs	r3, #0
 8010834:	2200      	movs	r2, #0
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	f7fd fcce 	bl	800e1d8 <xQueueGenericSendFromISR>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	4806      	ldr	r0, [pc, #24]	; (8010858 <CDC_Receive_FS+0x48>)
 8010840:	f7fb fc6a 	bl	800c118 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010844:	4804      	ldr	r0, [pc, #16]	; (8010858 <CDC_Receive_FS+0x48>)
 8010846:	f7fb fccb 	bl	800c1e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801084a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20000930 	.word	0x20000930
 8010858:	20009228 	.word	0x20009228

0801085c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	460b      	mov	r3, r1
 8010866:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010868:	2300      	movs	r3, #0
 801086a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801086c:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <CDC_Transmit_FS+0x48>)
 801086e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010872:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801087a:	2b00      	cmp	r3, #0
 801087c:	d001      	beq.n	8010882 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801087e:	2301      	movs	r3, #1
 8010880:	e00b      	b.n	801089a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010882:	887b      	ldrh	r3, [r7, #2]
 8010884:	461a      	mov	r2, r3
 8010886:	6879      	ldr	r1, [r7, #4]
 8010888:	4806      	ldr	r0, [pc, #24]	; (80108a4 <CDC_Transmit_FS+0x48>)
 801088a:	f7fb fc23 	bl	800c0d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801088e:	4805      	ldr	r0, [pc, #20]	; (80108a4 <CDC_Transmit_FS+0x48>)
 8010890:	f7fb fc60 	bl	800c154 <USBD_CDC_TransmitPacket>
 8010894:	4603      	mov	r3, r0
 8010896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010898:	7bfb      	ldrb	r3, [r7, #15]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	20009228 	.word	0x20009228

080108a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b087      	sub	sp, #28
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	4613      	mov	r3, r2
 80108b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80108b6:	2300      	movs	r3, #0
 80108b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80108ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	371c      	adds	r7, #28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
	...

080108cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	4603      	mov	r3, r0
 80108d4:	6039      	str	r1, [r7, #0]
 80108d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	2212      	movs	r2, #18
 80108dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80108de:	4b03      	ldr	r3, [pc, #12]	; (80108ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	200006a8 	.word	0x200006a8

080108f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	4603      	mov	r3, r0
 80108f8:	6039      	str	r1, [r7, #0]
 80108fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2204      	movs	r2, #4
 8010900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010902:	4b03      	ldr	r3, [pc, #12]	; (8010910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	200006bc 	.word	0x200006bc

08010914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	4603      	mov	r3, r0
 801091c:	6039      	str	r1, [r7, #0]
 801091e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d105      	bne.n	8010932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	4907      	ldr	r1, [pc, #28]	; (8010948 <USBD_FS_ProductStrDescriptor+0x34>)
 801092a:	4808      	ldr	r0, [pc, #32]	; (801094c <USBD_FS_ProductStrDescriptor+0x38>)
 801092c:	f7fc fea0 	bl	800d670 <USBD_GetString>
 8010930:	e004      	b.n	801093c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	4904      	ldr	r1, [pc, #16]	; (8010948 <USBD_FS_ProductStrDescriptor+0x34>)
 8010936:	4805      	ldr	r0, [pc, #20]	; (801094c <USBD_FS_ProductStrDescriptor+0x38>)
 8010938:	f7fc fe9a 	bl	800d670 <USBD_GetString>
  }
  return USBD_StrDesc;
 801093c:	4b02      	ldr	r3, [pc, #8]	; (8010948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801093e:	4618      	mov	r0, r3
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20009d04 	.word	0x20009d04
 801094c:	0801345c 	.word	0x0801345c

08010950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	4603      	mov	r3, r0
 8010958:	6039      	str	r1, [r7, #0]
 801095a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	4904      	ldr	r1, [pc, #16]	; (8010970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010960:	4804      	ldr	r0, [pc, #16]	; (8010974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010962:	f7fc fe85 	bl	800d670 <USBD_GetString>
  return USBD_StrDesc;
 8010966:	4b02      	ldr	r3, [pc, #8]	; (8010970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20009d04 	.word	0x20009d04
 8010974:	08013474 	.word	0x08013474

08010978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	6039      	str	r1, [r7, #0]
 8010982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	221a      	movs	r2, #26
 8010988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801098a:	f000 f843 	bl	8010a14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801098e:	4b02      	ldr	r3, [pc, #8]	; (8010998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	200006c0 	.word	0x200006c0

0801099c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	4603      	mov	r3, r0
 80109a4:	6039      	str	r1, [r7, #0]
 80109a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80109a8:	79fb      	ldrb	r3, [r7, #7]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d105      	bne.n	80109ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	4907      	ldr	r1, [pc, #28]	; (80109d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80109b2:	4808      	ldr	r0, [pc, #32]	; (80109d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109b4:	f7fc fe5c 	bl	800d670 <USBD_GetString>
 80109b8:	e004      	b.n	80109c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	4904      	ldr	r1, [pc, #16]	; (80109d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80109be:	4805      	ldr	r0, [pc, #20]	; (80109d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109c0:	f7fc fe56 	bl	800d670 <USBD_GetString>
  }
  return USBD_StrDesc;
 80109c4:	4b02      	ldr	r3, [pc, #8]	; (80109d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3708      	adds	r7, #8
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	20009d04 	.word	0x20009d04
 80109d4:	08013488 	.word	0x08013488

080109d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	6039      	str	r1, [r7, #0]
 80109e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109e4:	79fb      	ldrb	r3, [r7, #7]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d105      	bne.n	80109f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	4907      	ldr	r1, [pc, #28]	; (8010a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109ee:	4808      	ldr	r0, [pc, #32]	; (8010a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109f0:	f7fc fe3e 	bl	800d670 <USBD_GetString>
 80109f4:	e004      	b.n	8010a00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109f6:	683a      	ldr	r2, [r7, #0]
 80109f8:	4904      	ldr	r1, [pc, #16]	; (8010a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109fa:	4805      	ldr	r0, [pc, #20]	; (8010a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109fc:	f7fc fe38 	bl	800d670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a00:	4b02      	ldr	r3, [pc, #8]	; (8010a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	20009d04 	.word	0x20009d04
 8010a10:	08013494 	.word	0x08013494

08010a14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010a1a:	4b0f      	ldr	r3, [pc, #60]	; (8010a58 <Get_SerialNum+0x44>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010a20:	4b0e      	ldr	r3, [pc, #56]	; (8010a5c <Get_SerialNum+0x48>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010a26:	4b0e      	ldr	r3, [pc, #56]	; (8010a60 <Get_SerialNum+0x4c>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4413      	add	r3, r2
 8010a32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d009      	beq.n	8010a4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010a3a:	2208      	movs	r2, #8
 8010a3c:	4909      	ldr	r1, [pc, #36]	; (8010a64 <Get_SerialNum+0x50>)
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f000 f814 	bl	8010a6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010a44:	2204      	movs	r2, #4
 8010a46:	4908      	ldr	r1, [pc, #32]	; (8010a68 <Get_SerialNum+0x54>)
 8010a48:	68b8      	ldr	r0, [r7, #8]
 8010a4a:	f000 f80f 	bl	8010a6c <IntToUnicode>
  }
}
 8010a4e:	bf00      	nop
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	1fff7a10 	.word	0x1fff7a10
 8010a5c:	1fff7a14 	.word	0x1fff7a14
 8010a60:	1fff7a18 	.word	0x1fff7a18
 8010a64:	200006c2 	.word	0x200006c2
 8010a68:	200006d2 	.word	0x200006d2

08010a6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b087      	sub	sp, #28
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	4613      	mov	r3, r2
 8010a78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a7e:	2300      	movs	r3, #0
 8010a80:	75fb      	strb	r3, [r7, #23]
 8010a82:	e027      	b.n	8010ad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	0f1b      	lsrs	r3, r3, #28
 8010a88:	2b09      	cmp	r3, #9
 8010a8a:	d80b      	bhi.n	8010aa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	0f1b      	lsrs	r3, r3, #28
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	7dfb      	ldrb	r3, [r7, #23]
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	4619      	mov	r1, r3
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	440b      	add	r3, r1
 8010a9c:	3230      	adds	r2, #48	; 0x30
 8010a9e:	b2d2      	uxtb	r2, r2
 8010aa0:	701a      	strb	r2, [r3, #0]
 8010aa2:	e00a      	b.n	8010aba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	0f1b      	lsrs	r3, r3, #28
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
 8010aac:	005b      	lsls	r3, r3, #1
 8010aae:	4619      	mov	r1, r3
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	440b      	add	r3, r1
 8010ab4:	3237      	adds	r2, #55	; 0x37
 8010ab6:	b2d2      	uxtb	r2, r2
 8010ab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	011b      	lsls	r3, r3, #4
 8010abe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ac0:	7dfb      	ldrb	r3, [r7, #23]
 8010ac2:	005b      	lsls	r3, r3, #1
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	4413      	add	r3, r2
 8010aca:	2200      	movs	r2, #0
 8010acc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	75fb      	strb	r3, [r7, #23]
 8010ad4:	7dfa      	ldrb	r2, [r7, #23]
 8010ad6:	79fb      	ldrb	r3, [r7, #7]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d3d3      	bcc.n	8010a84 <IntToUnicode+0x18>
  }
}
 8010adc:	bf00      	nop
 8010ade:	bf00      	nop
 8010ae0:	371c      	adds	r7, #28
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr
	...

08010aec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b08a      	sub	sp, #40	; 0x28
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010af4:	f107 0314 	add.w	r3, r7, #20
 8010af8:	2200      	movs	r2, #0
 8010afa:	601a      	str	r2, [r3, #0]
 8010afc:	605a      	str	r2, [r3, #4]
 8010afe:	609a      	str	r2, [r3, #8]
 8010b00:	60da      	str	r2, [r3, #12]
 8010b02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b0c:	d13a      	bne.n	8010b84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b0e:	2300      	movs	r3, #0
 8010b10:	613b      	str	r3, [r7, #16]
 8010b12:	4b1e      	ldr	r3, [pc, #120]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b16:	4a1d      	ldr	r2, [pc, #116]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b18:	f043 0301 	orr.w	r3, r3, #1
 8010b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b1e:	4b1b      	ldr	r3, [pc, #108]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b22:	f003 0301 	and.w	r3, r3, #1
 8010b26:	613b      	str	r3, [r7, #16]
 8010b28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010b2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b30:	2302      	movs	r3, #2
 8010b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b34:	2300      	movs	r3, #0
 8010b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010b3c:	230a      	movs	r3, #10
 8010b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b40:	f107 0314 	add.w	r3, r7, #20
 8010b44:	4619      	mov	r1, r3
 8010b46:	4812      	ldr	r0, [pc, #72]	; (8010b90 <HAL_PCD_MspInit+0xa4>)
 8010b48:	f7f4 fcc2 	bl	80054d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b4c:	4b0f      	ldr	r3, [pc, #60]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b50:	4a0e      	ldr	r2, [pc, #56]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b56:	6353      	str	r3, [r2, #52]	; 0x34
 8010b58:	2300      	movs	r3, #0
 8010b5a:	60fb      	str	r3, [r7, #12]
 8010b5c:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b60:	4a0a      	ldr	r2, [pc, #40]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b66:	6453      	str	r3, [r2, #68]	; 0x44
 8010b68:	4b08      	ldr	r3, [pc, #32]	; (8010b8c <HAL_PCD_MspInit+0xa0>)
 8010b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b70:	60fb      	str	r3, [r7, #12]
 8010b72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b74:	2200      	movs	r2, #0
 8010b76:	2105      	movs	r1, #5
 8010b78:	2043      	movs	r0, #67	; 0x43
 8010b7a:	f7f4 fc7f 	bl	800547c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b7e:	2043      	movs	r0, #67	; 0x43
 8010b80:	f7f4 fc98 	bl	80054b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b84:	bf00      	nop
 8010b86:	3728      	adds	r7, #40	; 0x28
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	40023800 	.word	0x40023800
 8010b90:	40020000 	.word	0x40020000

08010b94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fb fc01 	bl	800c3b2 <USBD_LL_SetupStage>
}
 8010bb0:	bf00      	nop
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010bca:	78fa      	ldrb	r2, [r7, #3]
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	4413      	add	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	440b      	add	r3, r1
 8010bd8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	78fb      	ldrb	r3, [r7, #3]
 8010be0:	4619      	mov	r1, r3
 8010be2:	f7fb fc3b 	bl	800c45c <USBD_LL_DataOutStage>
}
 8010be6:	bf00      	nop
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b082      	sub	sp, #8
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010c00:	78fa      	ldrb	r2, [r7, #3]
 8010c02:	6879      	ldr	r1, [r7, #4]
 8010c04:	4613      	mov	r3, r2
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	4413      	add	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	440b      	add	r3, r1
 8010c0e:	334c      	adds	r3, #76	; 0x4c
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	78fb      	ldrb	r3, [r7, #3]
 8010c14:	4619      	mov	r1, r3
 8010c16:	f7fb fcd4 	bl	800c5c2 <USBD_LL_DataInStage>
}
 8010c1a:	bf00      	nop
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b082      	sub	sp, #8
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fb fe08 	bl	800c846 <USBD_LL_SOF>
}
 8010c36:	bf00      	nop
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b084      	sub	sp, #16
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c46:	2301      	movs	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	d001      	beq.n	8010c56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010c52:	f7f3 fadf 	bl	8004214 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c5c:	7bfa      	ldrb	r2, [r7, #15]
 8010c5e:	4611      	mov	r1, r2
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fb fdb2 	bl	800c7ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fb fd5a 	bl	800c726 <USBD_LL_Reset>
}
 8010c72:	bf00      	nop
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
	...

08010c7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fb fdad 	bl	800c7ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	6812      	ldr	r2, [r2, #0]
 8010c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ca2:	f043 0301 	orr.w	r3, r3, #1
 8010ca6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a1b      	ldr	r3, [r3, #32]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d005      	beq.n	8010cbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010cb0:	4b04      	ldr	r3, [pc, #16]	; (8010cc4 <HAL_PCD_SuspendCallback+0x48>)
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	4a03      	ldr	r2, [pc, #12]	; (8010cc4 <HAL_PCD_SuspendCallback+0x48>)
 8010cb6:	f043 0306 	orr.w	r3, r3, #6
 8010cba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010cbc:	bf00      	nop
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	e000ed00 	.word	0xe000ed00

08010cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fb fd9d 	bl	800c816 <USBD_LL_Resume>
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cf6:	78fa      	ldrb	r2, [r7, #3]
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fb fdf5 	bl	800c8ea <USBD_LL_IsoOUTIncomplete>
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	460b      	mov	r3, r1
 8010d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d1a:	78fa      	ldrb	r2, [r7, #3]
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fb fdb1 	bl	800c886 <USBD_LL_IsoINIncomplete>
}
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fb fe07 	bl	800c94e <USBD_LL_DevConnected>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fb fe04 	bl	800c964 <USBD_LL_DevDisconnected>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d13c      	bne.n	8010dee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d74:	4a20      	ldr	r2, [pc, #128]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4a1e      	ldr	r2, [pc, #120]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d84:	4b1c      	ldr	r3, [pc, #112]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010d8c:	4b1a      	ldr	r3, [pc, #104]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d8e:	2204      	movs	r2, #4
 8010d90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d92:	4b19      	ldr	r3, [pc, #100]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d94:	2202      	movs	r2, #2
 8010d96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d98:	4b17      	ldr	r3, [pc, #92]	; (8010df8 <USBD_LL_Init+0x94>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d9e:	4b16      	ldr	r3, [pc, #88]	; (8010df8 <USBD_LL_Init+0x94>)
 8010da0:	2202      	movs	r2, #2
 8010da2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010da4:	4b14      	ldr	r3, [pc, #80]	; (8010df8 <USBD_LL_Init+0x94>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010daa:	4b13      	ldr	r3, [pc, #76]	; (8010df8 <USBD_LL_Init+0x94>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010db0:	4b11      	ldr	r3, [pc, #68]	; (8010df8 <USBD_LL_Init+0x94>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010db6:	4b10      	ldr	r3, [pc, #64]	; (8010df8 <USBD_LL_Init+0x94>)
 8010db8:	2200      	movs	r2, #0
 8010dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010dbc:	4b0e      	ldr	r3, [pc, #56]	; (8010df8 <USBD_LL_Init+0x94>)
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010dc2:	480d      	ldr	r0, [pc, #52]	; (8010df8 <USBD_LL_Init+0x94>)
 8010dc4:	f7f5 fd11 	bl	80067ea <HAL_PCD_Init>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010dce:	f7f3 fa21 	bl	8004214 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010dd2:	2180      	movs	r1, #128	; 0x80
 8010dd4:	4808      	ldr	r0, [pc, #32]	; (8010df8 <USBD_LL_Init+0x94>)
 8010dd6:	f7f6 ff68 	bl	8007caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010dda:	2240      	movs	r2, #64	; 0x40
 8010ddc:	2100      	movs	r1, #0
 8010dde:	4806      	ldr	r0, [pc, #24]	; (8010df8 <USBD_LL_Init+0x94>)
 8010de0:	f7f6 ff1c 	bl	8007c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010de4:	2280      	movs	r2, #128	; 0x80
 8010de6:	2101      	movs	r1, #1
 8010de8:	4803      	ldr	r0, [pc, #12]	; (8010df8 <USBD_LL_Init+0x94>)
 8010dea:	f7f6 ff17 	bl	8007c1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20009f04 	.word	0x20009f04

08010dfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7f5 fe06 	bl	8006a24 <HAL_PCD_Start>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 f942 	bl	80110a8 <USBD_Get_USB_Status>
 8010e24:	4603      	mov	r3, r0
 8010e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}

08010e32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b084      	sub	sp, #16
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
 8010e3a:	4608      	mov	r0, r1
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	461a      	mov	r2, r3
 8010e40:	4603      	mov	r3, r0
 8010e42:	70fb      	strb	r3, [r7, #3]
 8010e44:	460b      	mov	r3, r1
 8010e46:	70bb      	strb	r3, [r7, #2]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010e5a:	78bb      	ldrb	r3, [r7, #2]
 8010e5c:	883a      	ldrh	r2, [r7, #0]
 8010e5e:	78f9      	ldrb	r1, [r7, #3]
 8010e60:	f7f6 fad7 	bl	8007412 <HAL_PCD_EP_Open>
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f000 f91c 	bl	80110a8 <USBD_Get_USB_Status>
 8010e70:	4603      	mov	r3, r0
 8010e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b084      	sub	sp, #16
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e98:	78fa      	ldrb	r2, [r7, #3]
 8010e9a:	4611      	mov	r1, r2
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7f6 fb20 	bl	80074e2 <HAL_PCD_EP_Close>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ea6:	7bfb      	ldrb	r3, [r7, #15]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f000 f8fd 	bl	80110a8 <USBD_Get_USB_Status>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3710      	adds	r7, #16
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ed6:	78fa      	ldrb	r2, [r7, #3]
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7f6 fbf8 	bl	80076d0 <HAL_PCD_EP_SetStall>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ee4:	7bfb      	ldrb	r3, [r7, #15]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 f8de 	bl	80110a8 <USBD_Get_USB_Status>
 8010eec:	4603      	mov	r3, r0
 8010eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b084      	sub	sp, #16
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	460b      	mov	r3, r1
 8010f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f14:	78fa      	ldrb	r2, [r7, #3]
 8010f16:	4611      	mov	r1, r2
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7f6 fc3d 	bl	8007798 <HAL_PCD_EP_ClrStall>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f000 f8bf 	bl	80110a8 <USBD_Get_USB_Status>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3710      	adds	r7, #16
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	da0b      	bge.n	8010f6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f54:	78fb      	ldrb	r3, [r7, #3]
 8010f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f5a:	68f9      	ldr	r1, [r7, #12]
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	4413      	add	r3, r2
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	440b      	add	r3, r1
 8010f66:	333e      	adds	r3, #62	; 0x3e
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	e00b      	b.n	8010f84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f6c:	78fb      	ldrb	r3, [r7, #3]
 8010f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f72:	68f9      	ldr	r1, [r7, #12]
 8010f74:	4613      	mov	r3, r2
 8010f76:	00db      	lsls	r3, r3, #3
 8010f78:	4413      	add	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	440b      	add	r3, r1
 8010f7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3714      	adds	r7, #20
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr

08010f90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	460b      	mov	r3, r1
 8010f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010faa:	78fa      	ldrb	r2, [r7, #3]
 8010fac:	4611      	mov	r1, r2
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7f6 fa0a 	bl	80073c8 <HAL_PCD_SetAddress>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fb8:	7bfb      	ldrb	r3, [r7, #15]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f000 f874 	bl	80110a8 <USBD_Get_USB_Status>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3710      	adds	r7, #16
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b086      	sub	sp, #24
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	60f8      	str	r0, [r7, #12]
 8010fd6:	607a      	str	r2, [r7, #4]
 8010fd8:	603b      	str	r3, [r7, #0]
 8010fda:	460b      	mov	r3, r1
 8010fdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010fec:	7af9      	ldrb	r1, [r7, #11]
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	f7f6 fb23 	bl	800763c <HAL_PCD_EP_Transmit>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ffa:	7dfb      	ldrb	r3, [r7, #23]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f000 f853 	bl	80110a8 <USBD_Get_USB_Status>
 8011002:	4603      	mov	r3, r0
 8011004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011006:	7dbb      	ldrb	r3, [r7, #22]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3718      	adds	r7, #24
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	607a      	str	r2, [r7, #4]
 801101a:	603b      	str	r3, [r7, #0]
 801101c:	460b      	mov	r3, r1
 801101e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801102e:	7af9      	ldrb	r1, [r7, #11]
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	f7f6 fa9f 	bl	8007576 <HAL_PCD_EP_Receive>
 8011038:	4603      	mov	r3, r0
 801103a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801103c:	7dfb      	ldrb	r3, [r7, #23]
 801103e:	4618      	mov	r0, r3
 8011040:	f000 f832 	bl	80110a8 <USBD_Get_USB_Status>
 8011044:	4603      	mov	r3, r0
 8011046:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011048:	7dbb      	ldrb	r3, [r7, #22]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011052:	b580      	push	{r7, lr}
 8011054:	b082      	sub	sp, #8
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	460b      	mov	r3, r1
 801105c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011064:	78fa      	ldrb	r2, [r7, #3]
 8011066:	4611      	mov	r1, r2
 8011068:	4618      	mov	r0, r3
 801106a:	f7f6 facf 	bl	800760c <HAL_PCD_EP_GetRxCount>
 801106e:	4603      	mov	r3, r0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011080:	4b03      	ldr	r3, [pc, #12]	; (8011090 <USBD_static_malloc+0x18>)
}
 8011082:	4618      	mov	r0, r3
 8011084:	370c      	adds	r7, #12
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	2000a410 	.word	0x2000a410

08011094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]

}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	4603      	mov	r3, r0
 80110b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110b2:	2300      	movs	r3, #0
 80110b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110b6:	79fb      	ldrb	r3, [r7, #7]
 80110b8:	2b03      	cmp	r3, #3
 80110ba:	d817      	bhi.n	80110ec <USBD_Get_USB_Status+0x44>
 80110bc:	a201      	add	r2, pc, #4	; (adr r2, 80110c4 <USBD_Get_USB_Status+0x1c>)
 80110be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c2:	bf00      	nop
 80110c4:	080110d5 	.word	0x080110d5
 80110c8:	080110db 	.word	0x080110db
 80110cc:	080110e1 	.word	0x080110e1
 80110d0:	080110e7 	.word	0x080110e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]
    break;
 80110d8:	e00b      	b.n	80110f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110da:	2303      	movs	r3, #3
 80110dc:	73fb      	strb	r3, [r7, #15]
    break;
 80110de:	e008      	b.n	80110f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110e0:	2301      	movs	r3, #1
 80110e2:	73fb      	strb	r3, [r7, #15]
    break;
 80110e4:	e005      	b.n	80110f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110e6:	2303      	movs	r3, #3
 80110e8:	73fb      	strb	r3, [r7, #15]
    break;
 80110ea:	e002      	b.n	80110f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80110ec:	2303      	movs	r3, #3
 80110ee:	73fb      	strb	r3, [r7, #15]
    break;
 80110f0:	bf00      	nop
  }
  return usb_status;
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr

08011100 <atoi>:
 8011100:	220a      	movs	r2, #10
 8011102:	2100      	movs	r1, #0
 8011104:	f000 bb80 	b.w	8011808 <strtol>

08011108 <calloc>:
 8011108:	4b02      	ldr	r3, [pc, #8]	; (8011114 <calloc+0xc>)
 801110a:	460a      	mov	r2, r1
 801110c:	4601      	mov	r1, r0
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	f000 b852 	b.w	80111b8 <_calloc_r>
 8011114:	200006dc 	.word	0x200006dc

08011118 <__errno>:
 8011118:	4b01      	ldr	r3, [pc, #4]	; (8011120 <__errno+0x8>)
 801111a:	6818      	ldr	r0, [r3, #0]
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	200006dc 	.word	0x200006dc

08011124 <__libc_init_array>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	4d0d      	ldr	r5, [pc, #52]	; (801115c <__libc_init_array+0x38>)
 8011128:	4c0d      	ldr	r4, [pc, #52]	; (8011160 <__libc_init_array+0x3c>)
 801112a:	1b64      	subs	r4, r4, r5
 801112c:	10a4      	asrs	r4, r4, #2
 801112e:	2600      	movs	r6, #0
 8011130:	42a6      	cmp	r6, r4
 8011132:	d109      	bne.n	8011148 <__libc_init_array+0x24>
 8011134:	4d0b      	ldr	r5, [pc, #44]	; (8011164 <__libc_init_array+0x40>)
 8011136:	4c0c      	ldr	r4, [pc, #48]	; (8011168 <__libc_init_array+0x44>)
 8011138:	f001 fba2 	bl	8012880 <_init>
 801113c:	1b64      	subs	r4, r4, r5
 801113e:	10a4      	asrs	r4, r4, #2
 8011140:	2600      	movs	r6, #0
 8011142:	42a6      	cmp	r6, r4
 8011144:	d105      	bne.n	8011152 <__libc_init_array+0x2e>
 8011146:	bd70      	pop	{r4, r5, r6, pc}
 8011148:	f855 3b04 	ldr.w	r3, [r5], #4
 801114c:	4798      	blx	r3
 801114e:	3601      	adds	r6, #1
 8011150:	e7ee      	b.n	8011130 <__libc_init_array+0xc>
 8011152:	f855 3b04 	ldr.w	r3, [r5], #4
 8011156:	4798      	blx	r3
 8011158:	3601      	adds	r6, #1
 801115a:	e7f2      	b.n	8011142 <__libc_init_array+0x1e>
 801115c:	08013c5c 	.word	0x08013c5c
 8011160:	08013c5c 	.word	0x08013c5c
 8011164:	08013c5c 	.word	0x08013c5c
 8011168:	08013c60 	.word	0x08013c60

0801116c <malloc>:
 801116c:	4b02      	ldr	r3, [pc, #8]	; (8011178 <malloc+0xc>)
 801116e:	4601      	mov	r1, r0
 8011170:	6818      	ldr	r0, [r3, #0]
 8011172:	f000 b8a3 	b.w	80112bc <_malloc_r>
 8011176:	bf00      	nop
 8011178:	200006dc 	.word	0x200006dc

0801117c <free>:
 801117c:	4b02      	ldr	r3, [pc, #8]	; (8011188 <free+0xc>)
 801117e:	4601      	mov	r1, r0
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	f000 b82f 	b.w	80111e4 <_free_r>
 8011186:	bf00      	nop
 8011188:	200006dc 	.word	0x200006dc

0801118c <memcpy>:
 801118c:	440a      	add	r2, r1
 801118e:	4291      	cmp	r1, r2
 8011190:	f100 33ff 	add.w	r3, r0, #4294967295
 8011194:	d100      	bne.n	8011198 <memcpy+0xc>
 8011196:	4770      	bx	lr
 8011198:	b510      	push	{r4, lr}
 801119a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801119e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111a2:	4291      	cmp	r1, r2
 80111a4:	d1f9      	bne.n	801119a <memcpy+0xe>
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <memset>:
 80111a8:	4402      	add	r2, r0
 80111aa:	4603      	mov	r3, r0
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d100      	bne.n	80111b2 <memset+0xa>
 80111b0:	4770      	bx	lr
 80111b2:	f803 1b01 	strb.w	r1, [r3], #1
 80111b6:	e7f9      	b.n	80111ac <memset+0x4>

080111b8 <_calloc_r>:
 80111b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ba:	fba1 2402 	umull	r2, r4, r1, r2
 80111be:	b94c      	cbnz	r4, 80111d4 <_calloc_r+0x1c>
 80111c0:	4611      	mov	r1, r2
 80111c2:	9201      	str	r2, [sp, #4]
 80111c4:	f000 f87a 	bl	80112bc <_malloc_r>
 80111c8:	9a01      	ldr	r2, [sp, #4]
 80111ca:	4605      	mov	r5, r0
 80111cc:	b930      	cbnz	r0, 80111dc <_calloc_r+0x24>
 80111ce:	4628      	mov	r0, r5
 80111d0:	b003      	add	sp, #12
 80111d2:	bd30      	pop	{r4, r5, pc}
 80111d4:	220c      	movs	r2, #12
 80111d6:	6002      	str	r2, [r0, #0]
 80111d8:	2500      	movs	r5, #0
 80111da:	e7f8      	b.n	80111ce <_calloc_r+0x16>
 80111dc:	4621      	mov	r1, r4
 80111de:	f7ff ffe3 	bl	80111a8 <memset>
 80111e2:	e7f4      	b.n	80111ce <_calloc_r+0x16>

080111e4 <_free_r>:
 80111e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111e6:	2900      	cmp	r1, #0
 80111e8:	d044      	beq.n	8011274 <_free_r+0x90>
 80111ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111ee:	9001      	str	r0, [sp, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f1a1 0404 	sub.w	r4, r1, #4
 80111f6:	bfb8      	it	lt
 80111f8:	18e4      	addlt	r4, r4, r3
 80111fa:	f000 fdef 	bl	8011ddc <__malloc_lock>
 80111fe:	4a1e      	ldr	r2, [pc, #120]	; (8011278 <_free_r+0x94>)
 8011200:	9801      	ldr	r0, [sp, #4]
 8011202:	6813      	ldr	r3, [r2, #0]
 8011204:	b933      	cbnz	r3, 8011214 <_free_r+0x30>
 8011206:	6063      	str	r3, [r4, #4]
 8011208:	6014      	str	r4, [r2, #0]
 801120a:	b003      	add	sp, #12
 801120c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011210:	f000 bdea 	b.w	8011de8 <__malloc_unlock>
 8011214:	42a3      	cmp	r3, r4
 8011216:	d908      	bls.n	801122a <_free_r+0x46>
 8011218:	6825      	ldr	r5, [r4, #0]
 801121a:	1961      	adds	r1, r4, r5
 801121c:	428b      	cmp	r3, r1
 801121e:	bf01      	itttt	eq
 8011220:	6819      	ldreq	r1, [r3, #0]
 8011222:	685b      	ldreq	r3, [r3, #4]
 8011224:	1949      	addeq	r1, r1, r5
 8011226:	6021      	streq	r1, [r4, #0]
 8011228:	e7ed      	b.n	8011206 <_free_r+0x22>
 801122a:	461a      	mov	r2, r3
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	b10b      	cbz	r3, 8011234 <_free_r+0x50>
 8011230:	42a3      	cmp	r3, r4
 8011232:	d9fa      	bls.n	801122a <_free_r+0x46>
 8011234:	6811      	ldr	r1, [r2, #0]
 8011236:	1855      	adds	r5, r2, r1
 8011238:	42a5      	cmp	r5, r4
 801123a:	d10b      	bne.n	8011254 <_free_r+0x70>
 801123c:	6824      	ldr	r4, [r4, #0]
 801123e:	4421      	add	r1, r4
 8011240:	1854      	adds	r4, r2, r1
 8011242:	42a3      	cmp	r3, r4
 8011244:	6011      	str	r1, [r2, #0]
 8011246:	d1e0      	bne.n	801120a <_free_r+0x26>
 8011248:	681c      	ldr	r4, [r3, #0]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	6053      	str	r3, [r2, #4]
 801124e:	4421      	add	r1, r4
 8011250:	6011      	str	r1, [r2, #0]
 8011252:	e7da      	b.n	801120a <_free_r+0x26>
 8011254:	d902      	bls.n	801125c <_free_r+0x78>
 8011256:	230c      	movs	r3, #12
 8011258:	6003      	str	r3, [r0, #0]
 801125a:	e7d6      	b.n	801120a <_free_r+0x26>
 801125c:	6825      	ldr	r5, [r4, #0]
 801125e:	1961      	adds	r1, r4, r5
 8011260:	428b      	cmp	r3, r1
 8011262:	bf04      	itt	eq
 8011264:	6819      	ldreq	r1, [r3, #0]
 8011266:	685b      	ldreq	r3, [r3, #4]
 8011268:	6063      	str	r3, [r4, #4]
 801126a:	bf04      	itt	eq
 801126c:	1949      	addeq	r1, r1, r5
 801126e:	6021      	streq	r1, [r4, #0]
 8011270:	6054      	str	r4, [r2, #4]
 8011272:	e7ca      	b.n	801120a <_free_r+0x26>
 8011274:	b003      	add	sp, #12
 8011276:	bd30      	pop	{r4, r5, pc}
 8011278:	2000a630 	.word	0x2000a630

0801127c <sbrk_aligned>:
 801127c:	b570      	push	{r4, r5, r6, lr}
 801127e:	4e0e      	ldr	r6, [pc, #56]	; (80112b8 <sbrk_aligned+0x3c>)
 8011280:	460c      	mov	r4, r1
 8011282:	6831      	ldr	r1, [r6, #0]
 8011284:	4605      	mov	r5, r0
 8011286:	b911      	cbnz	r1, 801128e <sbrk_aligned+0x12>
 8011288:	f000 f922 	bl	80114d0 <_sbrk_r>
 801128c:	6030      	str	r0, [r6, #0]
 801128e:	4621      	mov	r1, r4
 8011290:	4628      	mov	r0, r5
 8011292:	f000 f91d 	bl	80114d0 <_sbrk_r>
 8011296:	1c43      	adds	r3, r0, #1
 8011298:	d00a      	beq.n	80112b0 <sbrk_aligned+0x34>
 801129a:	1cc4      	adds	r4, r0, #3
 801129c:	f024 0403 	bic.w	r4, r4, #3
 80112a0:	42a0      	cmp	r0, r4
 80112a2:	d007      	beq.n	80112b4 <sbrk_aligned+0x38>
 80112a4:	1a21      	subs	r1, r4, r0
 80112a6:	4628      	mov	r0, r5
 80112a8:	f000 f912 	bl	80114d0 <_sbrk_r>
 80112ac:	3001      	adds	r0, #1
 80112ae:	d101      	bne.n	80112b4 <sbrk_aligned+0x38>
 80112b0:	f04f 34ff 	mov.w	r4, #4294967295
 80112b4:	4620      	mov	r0, r4
 80112b6:	bd70      	pop	{r4, r5, r6, pc}
 80112b8:	2000a634 	.word	0x2000a634

080112bc <_malloc_r>:
 80112bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c0:	1ccd      	adds	r5, r1, #3
 80112c2:	f025 0503 	bic.w	r5, r5, #3
 80112c6:	3508      	adds	r5, #8
 80112c8:	2d0c      	cmp	r5, #12
 80112ca:	bf38      	it	cc
 80112cc:	250c      	movcc	r5, #12
 80112ce:	2d00      	cmp	r5, #0
 80112d0:	4607      	mov	r7, r0
 80112d2:	db01      	blt.n	80112d8 <_malloc_r+0x1c>
 80112d4:	42a9      	cmp	r1, r5
 80112d6:	d905      	bls.n	80112e4 <_malloc_r+0x28>
 80112d8:	230c      	movs	r3, #12
 80112da:	603b      	str	r3, [r7, #0]
 80112dc:	2600      	movs	r6, #0
 80112de:	4630      	mov	r0, r6
 80112e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e4:	4e2e      	ldr	r6, [pc, #184]	; (80113a0 <_malloc_r+0xe4>)
 80112e6:	f000 fd79 	bl	8011ddc <__malloc_lock>
 80112ea:	6833      	ldr	r3, [r6, #0]
 80112ec:	461c      	mov	r4, r3
 80112ee:	bb34      	cbnz	r4, 801133e <_malloc_r+0x82>
 80112f0:	4629      	mov	r1, r5
 80112f2:	4638      	mov	r0, r7
 80112f4:	f7ff ffc2 	bl	801127c <sbrk_aligned>
 80112f8:	1c43      	adds	r3, r0, #1
 80112fa:	4604      	mov	r4, r0
 80112fc:	d14d      	bne.n	801139a <_malloc_r+0xde>
 80112fe:	6834      	ldr	r4, [r6, #0]
 8011300:	4626      	mov	r6, r4
 8011302:	2e00      	cmp	r6, #0
 8011304:	d140      	bne.n	8011388 <_malloc_r+0xcc>
 8011306:	6823      	ldr	r3, [r4, #0]
 8011308:	4631      	mov	r1, r6
 801130a:	4638      	mov	r0, r7
 801130c:	eb04 0803 	add.w	r8, r4, r3
 8011310:	f000 f8de 	bl	80114d0 <_sbrk_r>
 8011314:	4580      	cmp	r8, r0
 8011316:	d13a      	bne.n	801138e <_malloc_r+0xd2>
 8011318:	6821      	ldr	r1, [r4, #0]
 801131a:	3503      	adds	r5, #3
 801131c:	1a6d      	subs	r5, r5, r1
 801131e:	f025 0503 	bic.w	r5, r5, #3
 8011322:	3508      	adds	r5, #8
 8011324:	2d0c      	cmp	r5, #12
 8011326:	bf38      	it	cc
 8011328:	250c      	movcc	r5, #12
 801132a:	4629      	mov	r1, r5
 801132c:	4638      	mov	r0, r7
 801132e:	f7ff ffa5 	bl	801127c <sbrk_aligned>
 8011332:	3001      	adds	r0, #1
 8011334:	d02b      	beq.n	801138e <_malloc_r+0xd2>
 8011336:	6823      	ldr	r3, [r4, #0]
 8011338:	442b      	add	r3, r5
 801133a:	6023      	str	r3, [r4, #0]
 801133c:	e00e      	b.n	801135c <_malloc_r+0xa0>
 801133e:	6822      	ldr	r2, [r4, #0]
 8011340:	1b52      	subs	r2, r2, r5
 8011342:	d41e      	bmi.n	8011382 <_malloc_r+0xc6>
 8011344:	2a0b      	cmp	r2, #11
 8011346:	d916      	bls.n	8011376 <_malloc_r+0xba>
 8011348:	1961      	adds	r1, r4, r5
 801134a:	42a3      	cmp	r3, r4
 801134c:	6025      	str	r5, [r4, #0]
 801134e:	bf18      	it	ne
 8011350:	6059      	strne	r1, [r3, #4]
 8011352:	6863      	ldr	r3, [r4, #4]
 8011354:	bf08      	it	eq
 8011356:	6031      	streq	r1, [r6, #0]
 8011358:	5162      	str	r2, [r4, r5]
 801135a:	604b      	str	r3, [r1, #4]
 801135c:	4638      	mov	r0, r7
 801135e:	f104 060b 	add.w	r6, r4, #11
 8011362:	f000 fd41 	bl	8011de8 <__malloc_unlock>
 8011366:	f026 0607 	bic.w	r6, r6, #7
 801136a:	1d23      	adds	r3, r4, #4
 801136c:	1af2      	subs	r2, r6, r3
 801136e:	d0b6      	beq.n	80112de <_malloc_r+0x22>
 8011370:	1b9b      	subs	r3, r3, r6
 8011372:	50a3      	str	r3, [r4, r2]
 8011374:	e7b3      	b.n	80112de <_malloc_r+0x22>
 8011376:	6862      	ldr	r2, [r4, #4]
 8011378:	42a3      	cmp	r3, r4
 801137a:	bf0c      	ite	eq
 801137c:	6032      	streq	r2, [r6, #0]
 801137e:	605a      	strne	r2, [r3, #4]
 8011380:	e7ec      	b.n	801135c <_malloc_r+0xa0>
 8011382:	4623      	mov	r3, r4
 8011384:	6864      	ldr	r4, [r4, #4]
 8011386:	e7b2      	b.n	80112ee <_malloc_r+0x32>
 8011388:	4634      	mov	r4, r6
 801138a:	6876      	ldr	r6, [r6, #4]
 801138c:	e7b9      	b.n	8011302 <_malloc_r+0x46>
 801138e:	230c      	movs	r3, #12
 8011390:	603b      	str	r3, [r7, #0]
 8011392:	4638      	mov	r0, r7
 8011394:	f000 fd28 	bl	8011de8 <__malloc_unlock>
 8011398:	e7a1      	b.n	80112de <_malloc_r+0x22>
 801139a:	6025      	str	r5, [r4, #0]
 801139c:	e7de      	b.n	801135c <_malloc_r+0xa0>
 801139e:	bf00      	nop
 80113a0:	2000a630 	.word	0x2000a630

080113a4 <iprintf>:
 80113a4:	b40f      	push	{r0, r1, r2, r3}
 80113a6:	4b0a      	ldr	r3, [pc, #40]	; (80113d0 <iprintf+0x2c>)
 80113a8:	b513      	push	{r0, r1, r4, lr}
 80113aa:	681c      	ldr	r4, [r3, #0]
 80113ac:	b124      	cbz	r4, 80113b8 <iprintf+0x14>
 80113ae:	69a3      	ldr	r3, [r4, #24]
 80113b0:	b913      	cbnz	r3, 80113b8 <iprintf+0x14>
 80113b2:	4620      	mov	r0, r4
 80113b4:	f000 fc0c 	bl	8011bd0 <__sinit>
 80113b8:	ab05      	add	r3, sp, #20
 80113ba:	9a04      	ldr	r2, [sp, #16]
 80113bc:	68a1      	ldr	r1, [r4, #8]
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fecb 	bl	801215c <_vfiprintf_r>
 80113c6:	b002      	add	sp, #8
 80113c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113cc:	b004      	add	sp, #16
 80113ce:	4770      	bx	lr
 80113d0:	200006dc 	.word	0x200006dc

080113d4 <_puts_r>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	460e      	mov	r6, r1
 80113d8:	4605      	mov	r5, r0
 80113da:	b118      	cbz	r0, 80113e4 <_puts_r+0x10>
 80113dc:	6983      	ldr	r3, [r0, #24]
 80113de:	b90b      	cbnz	r3, 80113e4 <_puts_r+0x10>
 80113e0:	f000 fbf6 	bl	8011bd0 <__sinit>
 80113e4:	69ab      	ldr	r3, [r5, #24]
 80113e6:	68ac      	ldr	r4, [r5, #8]
 80113e8:	b913      	cbnz	r3, 80113f0 <_puts_r+0x1c>
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 fbf0 	bl	8011bd0 <__sinit>
 80113f0:	4b2c      	ldr	r3, [pc, #176]	; (80114a4 <_puts_r+0xd0>)
 80113f2:	429c      	cmp	r4, r3
 80113f4:	d120      	bne.n	8011438 <_puts_r+0x64>
 80113f6:	686c      	ldr	r4, [r5, #4]
 80113f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113fa:	07db      	lsls	r3, r3, #31
 80113fc:	d405      	bmi.n	801140a <_puts_r+0x36>
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	0598      	lsls	r0, r3, #22
 8011402:	d402      	bmi.n	801140a <_puts_r+0x36>
 8011404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011406:	f000 fc81 	bl	8011d0c <__retarget_lock_acquire_recursive>
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	0719      	lsls	r1, r3, #28
 801140e:	d51d      	bpl.n	801144c <_puts_r+0x78>
 8011410:	6923      	ldr	r3, [r4, #16]
 8011412:	b1db      	cbz	r3, 801144c <_puts_r+0x78>
 8011414:	3e01      	subs	r6, #1
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801141c:	3b01      	subs	r3, #1
 801141e:	60a3      	str	r3, [r4, #8]
 8011420:	bb39      	cbnz	r1, 8011472 <_puts_r+0x9e>
 8011422:	2b00      	cmp	r3, #0
 8011424:	da38      	bge.n	8011498 <_puts_r+0xc4>
 8011426:	4622      	mov	r2, r4
 8011428:	210a      	movs	r1, #10
 801142a:	4628      	mov	r0, r5
 801142c:	f000 f9f6 	bl	801181c <__swbuf_r>
 8011430:	3001      	adds	r0, #1
 8011432:	d011      	beq.n	8011458 <_puts_r+0x84>
 8011434:	250a      	movs	r5, #10
 8011436:	e011      	b.n	801145c <_puts_r+0x88>
 8011438:	4b1b      	ldr	r3, [pc, #108]	; (80114a8 <_puts_r+0xd4>)
 801143a:	429c      	cmp	r4, r3
 801143c:	d101      	bne.n	8011442 <_puts_r+0x6e>
 801143e:	68ac      	ldr	r4, [r5, #8]
 8011440:	e7da      	b.n	80113f8 <_puts_r+0x24>
 8011442:	4b1a      	ldr	r3, [pc, #104]	; (80114ac <_puts_r+0xd8>)
 8011444:	429c      	cmp	r4, r3
 8011446:	bf08      	it	eq
 8011448:	68ec      	ldreq	r4, [r5, #12]
 801144a:	e7d5      	b.n	80113f8 <_puts_r+0x24>
 801144c:	4621      	mov	r1, r4
 801144e:	4628      	mov	r0, r5
 8011450:	f000 fa36 	bl	80118c0 <__swsetup_r>
 8011454:	2800      	cmp	r0, #0
 8011456:	d0dd      	beq.n	8011414 <_puts_r+0x40>
 8011458:	f04f 35ff 	mov.w	r5, #4294967295
 801145c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801145e:	07da      	lsls	r2, r3, #31
 8011460:	d405      	bmi.n	801146e <_puts_r+0x9a>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	059b      	lsls	r3, r3, #22
 8011466:	d402      	bmi.n	801146e <_puts_r+0x9a>
 8011468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801146a:	f000 fc50 	bl	8011d0e <__retarget_lock_release_recursive>
 801146e:	4628      	mov	r0, r5
 8011470:	bd70      	pop	{r4, r5, r6, pc}
 8011472:	2b00      	cmp	r3, #0
 8011474:	da04      	bge.n	8011480 <_puts_r+0xac>
 8011476:	69a2      	ldr	r2, [r4, #24]
 8011478:	429a      	cmp	r2, r3
 801147a:	dc06      	bgt.n	801148a <_puts_r+0xb6>
 801147c:	290a      	cmp	r1, #10
 801147e:	d004      	beq.n	801148a <_puts_r+0xb6>
 8011480:	6823      	ldr	r3, [r4, #0]
 8011482:	1c5a      	adds	r2, r3, #1
 8011484:	6022      	str	r2, [r4, #0]
 8011486:	7019      	strb	r1, [r3, #0]
 8011488:	e7c5      	b.n	8011416 <_puts_r+0x42>
 801148a:	4622      	mov	r2, r4
 801148c:	4628      	mov	r0, r5
 801148e:	f000 f9c5 	bl	801181c <__swbuf_r>
 8011492:	3001      	adds	r0, #1
 8011494:	d1bf      	bne.n	8011416 <_puts_r+0x42>
 8011496:	e7df      	b.n	8011458 <_puts_r+0x84>
 8011498:	6823      	ldr	r3, [r4, #0]
 801149a:	250a      	movs	r5, #10
 801149c:	1c5a      	adds	r2, r3, #1
 801149e:	6022      	str	r2, [r4, #0]
 80114a0:	701d      	strb	r5, [r3, #0]
 80114a2:	e7db      	b.n	801145c <_puts_r+0x88>
 80114a4:	08013be0 	.word	0x08013be0
 80114a8:	08013c00 	.word	0x08013c00
 80114ac:	08013bc0 	.word	0x08013bc0

080114b0 <puts>:
 80114b0:	4b02      	ldr	r3, [pc, #8]	; (80114bc <puts+0xc>)
 80114b2:	4601      	mov	r1, r0
 80114b4:	6818      	ldr	r0, [r3, #0]
 80114b6:	f7ff bf8d 	b.w	80113d4 <_puts_r>
 80114ba:	bf00      	nop
 80114bc:	200006dc 	.word	0x200006dc

080114c0 <realloc>:
 80114c0:	4b02      	ldr	r3, [pc, #8]	; (80114cc <realloc+0xc>)
 80114c2:	460a      	mov	r2, r1
 80114c4:	4601      	mov	r1, r0
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	f000 bc94 	b.w	8011df4 <_realloc_r>
 80114cc:	200006dc 	.word	0x200006dc

080114d0 <_sbrk_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4d06      	ldr	r5, [pc, #24]	; (80114ec <_sbrk_r+0x1c>)
 80114d4:	2300      	movs	r3, #0
 80114d6:	4604      	mov	r4, r0
 80114d8:	4608      	mov	r0, r1
 80114da:	602b      	str	r3, [r5, #0]
 80114dc:	f7f3 fdf6 	bl	80050cc <_sbrk>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d102      	bne.n	80114ea <_sbrk_r+0x1a>
 80114e4:	682b      	ldr	r3, [r5, #0]
 80114e6:	b103      	cbz	r3, 80114ea <_sbrk_r+0x1a>
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	2000a63c 	.word	0x2000a63c

080114f0 <setbuf>:
 80114f0:	2900      	cmp	r1, #0
 80114f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114f6:	bf0c      	ite	eq
 80114f8:	2202      	moveq	r2, #2
 80114fa:	2200      	movne	r2, #0
 80114fc:	f000 b800 	b.w	8011500 <setvbuf>

08011500 <setvbuf>:
 8011500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011504:	461d      	mov	r5, r3
 8011506:	4b5d      	ldr	r3, [pc, #372]	; (801167c <setvbuf+0x17c>)
 8011508:	681f      	ldr	r7, [r3, #0]
 801150a:	4604      	mov	r4, r0
 801150c:	460e      	mov	r6, r1
 801150e:	4690      	mov	r8, r2
 8011510:	b127      	cbz	r7, 801151c <setvbuf+0x1c>
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	b913      	cbnz	r3, 801151c <setvbuf+0x1c>
 8011516:	4638      	mov	r0, r7
 8011518:	f000 fb5a 	bl	8011bd0 <__sinit>
 801151c:	4b58      	ldr	r3, [pc, #352]	; (8011680 <setvbuf+0x180>)
 801151e:	429c      	cmp	r4, r3
 8011520:	d167      	bne.n	80115f2 <setvbuf+0xf2>
 8011522:	687c      	ldr	r4, [r7, #4]
 8011524:	f1b8 0f02 	cmp.w	r8, #2
 8011528:	d006      	beq.n	8011538 <setvbuf+0x38>
 801152a:	f1b8 0f01 	cmp.w	r8, #1
 801152e:	f200 809f 	bhi.w	8011670 <setvbuf+0x170>
 8011532:	2d00      	cmp	r5, #0
 8011534:	f2c0 809c 	blt.w	8011670 <setvbuf+0x170>
 8011538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801153a:	07db      	lsls	r3, r3, #31
 801153c:	d405      	bmi.n	801154a <setvbuf+0x4a>
 801153e:	89a3      	ldrh	r3, [r4, #12]
 8011540:	0598      	lsls	r0, r3, #22
 8011542:	d402      	bmi.n	801154a <setvbuf+0x4a>
 8011544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011546:	f000 fbe1 	bl	8011d0c <__retarget_lock_acquire_recursive>
 801154a:	4621      	mov	r1, r4
 801154c:	4638      	mov	r0, r7
 801154e:	f000 faab 	bl	8011aa8 <_fflush_r>
 8011552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011554:	b141      	cbz	r1, 8011568 <setvbuf+0x68>
 8011556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801155a:	4299      	cmp	r1, r3
 801155c:	d002      	beq.n	8011564 <setvbuf+0x64>
 801155e:	4638      	mov	r0, r7
 8011560:	f7ff fe40 	bl	80111e4 <_free_r>
 8011564:	2300      	movs	r3, #0
 8011566:	6363      	str	r3, [r4, #52]	; 0x34
 8011568:	2300      	movs	r3, #0
 801156a:	61a3      	str	r3, [r4, #24]
 801156c:	6063      	str	r3, [r4, #4]
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	0619      	lsls	r1, r3, #24
 8011572:	d503      	bpl.n	801157c <setvbuf+0x7c>
 8011574:	6921      	ldr	r1, [r4, #16]
 8011576:	4638      	mov	r0, r7
 8011578:	f7ff fe34 	bl	80111e4 <_free_r>
 801157c:	89a3      	ldrh	r3, [r4, #12]
 801157e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8011582:	f023 0303 	bic.w	r3, r3, #3
 8011586:	f1b8 0f02 	cmp.w	r8, #2
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	d06c      	beq.n	8011668 <setvbuf+0x168>
 801158e:	ab01      	add	r3, sp, #4
 8011590:	466a      	mov	r2, sp
 8011592:	4621      	mov	r1, r4
 8011594:	4638      	mov	r0, r7
 8011596:	f000 fbbb 	bl	8011d10 <__swhatbuf_r>
 801159a:	89a3      	ldrh	r3, [r4, #12]
 801159c:	4318      	orrs	r0, r3
 801159e:	81a0      	strh	r0, [r4, #12]
 80115a0:	2d00      	cmp	r5, #0
 80115a2:	d130      	bne.n	8011606 <setvbuf+0x106>
 80115a4:	9d00      	ldr	r5, [sp, #0]
 80115a6:	4628      	mov	r0, r5
 80115a8:	f7ff fde0 	bl	801116c <malloc>
 80115ac:	4606      	mov	r6, r0
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d155      	bne.n	801165e <setvbuf+0x15e>
 80115b2:	f8dd 9000 	ldr.w	r9, [sp]
 80115b6:	45a9      	cmp	r9, r5
 80115b8:	d14a      	bne.n	8011650 <setvbuf+0x150>
 80115ba:	f04f 35ff 	mov.w	r5, #4294967295
 80115be:	2200      	movs	r2, #0
 80115c0:	60a2      	str	r2, [r4, #8]
 80115c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80115c6:	6022      	str	r2, [r4, #0]
 80115c8:	6122      	str	r2, [r4, #16]
 80115ca:	2201      	movs	r2, #1
 80115cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115d0:	6162      	str	r2, [r4, #20]
 80115d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115d4:	f043 0302 	orr.w	r3, r3, #2
 80115d8:	07d2      	lsls	r2, r2, #31
 80115da:	81a3      	strh	r3, [r4, #12]
 80115dc:	d405      	bmi.n	80115ea <setvbuf+0xea>
 80115de:	f413 7f00 	tst.w	r3, #512	; 0x200
 80115e2:	d102      	bne.n	80115ea <setvbuf+0xea>
 80115e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115e6:	f000 fb92 	bl	8011d0e <__retarget_lock_release_recursive>
 80115ea:	4628      	mov	r0, r5
 80115ec:	b003      	add	sp, #12
 80115ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115f2:	4b24      	ldr	r3, [pc, #144]	; (8011684 <setvbuf+0x184>)
 80115f4:	429c      	cmp	r4, r3
 80115f6:	d101      	bne.n	80115fc <setvbuf+0xfc>
 80115f8:	68bc      	ldr	r4, [r7, #8]
 80115fa:	e793      	b.n	8011524 <setvbuf+0x24>
 80115fc:	4b22      	ldr	r3, [pc, #136]	; (8011688 <setvbuf+0x188>)
 80115fe:	429c      	cmp	r4, r3
 8011600:	bf08      	it	eq
 8011602:	68fc      	ldreq	r4, [r7, #12]
 8011604:	e78e      	b.n	8011524 <setvbuf+0x24>
 8011606:	2e00      	cmp	r6, #0
 8011608:	d0cd      	beq.n	80115a6 <setvbuf+0xa6>
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	b913      	cbnz	r3, 8011614 <setvbuf+0x114>
 801160e:	4638      	mov	r0, r7
 8011610:	f000 fade 	bl	8011bd0 <__sinit>
 8011614:	f1b8 0f01 	cmp.w	r8, #1
 8011618:	bf08      	it	eq
 801161a:	89a3      	ldrheq	r3, [r4, #12]
 801161c:	6026      	str	r6, [r4, #0]
 801161e:	bf04      	itt	eq
 8011620:	f043 0301 	orreq.w	r3, r3, #1
 8011624:	81a3      	strheq	r3, [r4, #12]
 8011626:	89a2      	ldrh	r2, [r4, #12]
 8011628:	f012 0308 	ands.w	r3, r2, #8
 801162c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011630:	d01c      	beq.n	801166c <setvbuf+0x16c>
 8011632:	07d3      	lsls	r3, r2, #31
 8011634:	bf41      	itttt	mi
 8011636:	2300      	movmi	r3, #0
 8011638:	426d      	negmi	r5, r5
 801163a:	60a3      	strmi	r3, [r4, #8]
 801163c:	61a5      	strmi	r5, [r4, #24]
 801163e:	bf58      	it	pl
 8011640:	60a5      	strpl	r5, [r4, #8]
 8011642:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011644:	f015 0501 	ands.w	r5, r5, #1
 8011648:	d115      	bne.n	8011676 <setvbuf+0x176>
 801164a:	f412 7f00 	tst.w	r2, #512	; 0x200
 801164e:	e7c8      	b.n	80115e2 <setvbuf+0xe2>
 8011650:	4648      	mov	r0, r9
 8011652:	f7ff fd8b 	bl	801116c <malloc>
 8011656:	4606      	mov	r6, r0
 8011658:	2800      	cmp	r0, #0
 801165a:	d0ae      	beq.n	80115ba <setvbuf+0xba>
 801165c:	464d      	mov	r5, r9
 801165e:	89a3      	ldrh	r3, [r4, #12]
 8011660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011664:	81a3      	strh	r3, [r4, #12]
 8011666:	e7d0      	b.n	801160a <setvbuf+0x10a>
 8011668:	2500      	movs	r5, #0
 801166a:	e7a8      	b.n	80115be <setvbuf+0xbe>
 801166c:	60a3      	str	r3, [r4, #8]
 801166e:	e7e8      	b.n	8011642 <setvbuf+0x142>
 8011670:	f04f 35ff 	mov.w	r5, #4294967295
 8011674:	e7b9      	b.n	80115ea <setvbuf+0xea>
 8011676:	2500      	movs	r5, #0
 8011678:	e7b7      	b.n	80115ea <setvbuf+0xea>
 801167a:	bf00      	nop
 801167c:	200006dc 	.word	0x200006dc
 8011680:	08013be0 	.word	0x08013be0
 8011684:	08013c00 	.word	0x08013c00
 8011688:	08013bc0 	.word	0x08013bc0

0801168c <siprintf>:
 801168c:	b40e      	push	{r1, r2, r3}
 801168e:	b500      	push	{lr}
 8011690:	b09c      	sub	sp, #112	; 0x70
 8011692:	ab1d      	add	r3, sp, #116	; 0x74
 8011694:	9002      	str	r0, [sp, #8]
 8011696:	9006      	str	r0, [sp, #24]
 8011698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801169c:	4809      	ldr	r0, [pc, #36]	; (80116c4 <siprintf+0x38>)
 801169e:	9107      	str	r1, [sp, #28]
 80116a0:	9104      	str	r1, [sp, #16]
 80116a2:	4909      	ldr	r1, [pc, #36]	; (80116c8 <siprintf+0x3c>)
 80116a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116a8:	9105      	str	r1, [sp, #20]
 80116aa:	6800      	ldr	r0, [r0, #0]
 80116ac:	9301      	str	r3, [sp, #4]
 80116ae:	a902      	add	r1, sp, #8
 80116b0:	f000 fc2a 	bl	8011f08 <_svfiprintf_r>
 80116b4:	9b02      	ldr	r3, [sp, #8]
 80116b6:	2200      	movs	r2, #0
 80116b8:	701a      	strb	r2, [r3, #0]
 80116ba:	b01c      	add	sp, #112	; 0x70
 80116bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80116c0:	b003      	add	sp, #12
 80116c2:	4770      	bx	lr
 80116c4:	200006dc 	.word	0x200006dc
 80116c8:	ffff0208 	.word	0xffff0208

080116cc <strcpy>:
 80116cc:	4603      	mov	r3, r0
 80116ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116d2:	f803 2b01 	strb.w	r2, [r3], #1
 80116d6:	2a00      	cmp	r2, #0
 80116d8:	d1f9      	bne.n	80116ce <strcpy+0x2>
 80116da:	4770      	bx	lr

080116dc <strncpy>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	3901      	subs	r1, #1
 80116e0:	4603      	mov	r3, r0
 80116e2:	b132      	cbz	r2, 80116f2 <strncpy+0x16>
 80116e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80116e8:	f803 4b01 	strb.w	r4, [r3], #1
 80116ec:	3a01      	subs	r2, #1
 80116ee:	2c00      	cmp	r4, #0
 80116f0:	d1f7      	bne.n	80116e2 <strncpy+0x6>
 80116f2:	441a      	add	r2, r3
 80116f4:	2100      	movs	r1, #0
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d100      	bne.n	80116fc <strncpy+0x20>
 80116fa:	bd10      	pop	{r4, pc}
 80116fc:	f803 1b01 	strb.w	r1, [r3], #1
 8011700:	e7f9      	b.n	80116f6 <strncpy+0x1a>
	...

08011704 <_strtol_l.constprop.0>:
 8011704:	2b01      	cmp	r3, #1
 8011706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801170a:	d001      	beq.n	8011710 <_strtol_l.constprop.0+0xc>
 801170c:	2b24      	cmp	r3, #36	; 0x24
 801170e:	d906      	bls.n	801171e <_strtol_l.constprop.0+0x1a>
 8011710:	f7ff fd02 	bl	8011118 <__errno>
 8011714:	2316      	movs	r3, #22
 8011716:	6003      	str	r3, [r0, #0]
 8011718:	2000      	movs	r0, #0
 801171a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801171e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011804 <_strtol_l.constprop.0+0x100>
 8011722:	460d      	mov	r5, r1
 8011724:	462e      	mov	r6, r5
 8011726:	f815 4b01 	ldrb.w	r4, [r5], #1
 801172a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801172e:	f017 0708 	ands.w	r7, r7, #8
 8011732:	d1f7      	bne.n	8011724 <_strtol_l.constprop.0+0x20>
 8011734:	2c2d      	cmp	r4, #45	; 0x2d
 8011736:	d132      	bne.n	801179e <_strtol_l.constprop.0+0x9a>
 8011738:	782c      	ldrb	r4, [r5, #0]
 801173a:	2701      	movs	r7, #1
 801173c:	1cb5      	adds	r5, r6, #2
 801173e:	2b00      	cmp	r3, #0
 8011740:	d05b      	beq.n	80117fa <_strtol_l.constprop.0+0xf6>
 8011742:	2b10      	cmp	r3, #16
 8011744:	d109      	bne.n	801175a <_strtol_l.constprop.0+0x56>
 8011746:	2c30      	cmp	r4, #48	; 0x30
 8011748:	d107      	bne.n	801175a <_strtol_l.constprop.0+0x56>
 801174a:	782c      	ldrb	r4, [r5, #0]
 801174c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011750:	2c58      	cmp	r4, #88	; 0x58
 8011752:	d14d      	bne.n	80117f0 <_strtol_l.constprop.0+0xec>
 8011754:	786c      	ldrb	r4, [r5, #1]
 8011756:	2310      	movs	r3, #16
 8011758:	3502      	adds	r5, #2
 801175a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801175e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011762:	f04f 0c00 	mov.w	ip, #0
 8011766:	fbb8 f9f3 	udiv	r9, r8, r3
 801176a:	4666      	mov	r6, ip
 801176c:	fb03 8a19 	mls	sl, r3, r9, r8
 8011770:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011774:	f1be 0f09 	cmp.w	lr, #9
 8011778:	d816      	bhi.n	80117a8 <_strtol_l.constprop.0+0xa4>
 801177a:	4674      	mov	r4, lr
 801177c:	42a3      	cmp	r3, r4
 801177e:	dd24      	ble.n	80117ca <_strtol_l.constprop.0+0xc6>
 8011780:	f1bc 0f00 	cmp.w	ip, #0
 8011784:	db1e      	blt.n	80117c4 <_strtol_l.constprop.0+0xc0>
 8011786:	45b1      	cmp	r9, r6
 8011788:	d31c      	bcc.n	80117c4 <_strtol_l.constprop.0+0xc0>
 801178a:	d101      	bne.n	8011790 <_strtol_l.constprop.0+0x8c>
 801178c:	45a2      	cmp	sl, r4
 801178e:	db19      	blt.n	80117c4 <_strtol_l.constprop.0+0xc0>
 8011790:	fb06 4603 	mla	r6, r6, r3, r4
 8011794:	f04f 0c01 	mov.w	ip, #1
 8011798:	f815 4b01 	ldrb.w	r4, [r5], #1
 801179c:	e7e8      	b.n	8011770 <_strtol_l.constprop.0+0x6c>
 801179e:	2c2b      	cmp	r4, #43	; 0x2b
 80117a0:	bf04      	itt	eq
 80117a2:	782c      	ldrbeq	r4, [r5, #0]
 80117a4:	1cb5      	addeq	r5, r6, #2
 80117a6:	e7ca      	b.n	801173e <_strtol_l.constprop.0+0x3a>
 80117a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80117ac:	f1be 0f19 	cmp.w	lr, #25
 80117b0:	d801      	bhi.n	80117b6 <_strtol_l.constprop.0+0xb2>
 80117b2:	3c37      	subs	r4, #55	; 0x37
 80117b4:	e7e2      	b.n	801177c <_strtol_l.constprop.0+0x78>
 80117b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80117ba:	f1be 0f19 	cmp.w	lr, #25
 80117be:	d804      	bhi.n	80117ca <_strtol_l.constprop.0+0xc6>
 80117c0:	3c57      	subs	r4, #87	; 0x57
 80117c2:	e7db      	b.n	801177c <_strtol_l.constprop.0+0x78>
 80117c4:	f04f 3cff 	mov.w	ip, #4294967295
 80117c8:	e7e6      	b.n	8011798 <_strtol_l.constprop.0+0x94>
 80117ca:	f1bc 0f00 	cmp.w	ip, #0
 80117ce:	da05      	bge.n	80117dc <_strtol_l.constprop.0+0xd8>
 80117d0:	2322      	movs	r3, #34	; 0x22
 80117d2:	6003      	str	r3, [r0, #0]
 80117d4:	4646      	mov	r6, r8
 80117d6:	b942      	cbnz	r2, 80117ea <_strtol_l.constprop.0+0xe6>
 80117d8:	4630      	mov	r0, r6
 80117da:	e79e      	b.n	801171a <_strtol_l.constprop.0+0x16>
 80117dc:	b107      	cbz	r7, 80117e0 <_strtol_l.constprop.0+0xdc>
 80117de:	4276      	negs	r6, r6
 80117e0:	2a00      	cmp	r2, #0
 80117e2:	d0f9      	beq.n	80117d8 <_strtol_l.constprop.0+0xd4>
 80117e4:	f1bc 0f00 	cmp.w	ip, #0
 80117e8:	d000      	beq.n	80117ec <_strtol_l.constprop.0+0xe8>
 80117ea:	1e69      	subs	r1, r5, #1
 80117ec:	6011      	str	r1, [r2, #0]
 80117ee:	e7f3      	b.n	80117d8 <_strtol_l.constprop.0+0xd4>
 80117f0:	2430      	movs	r4, #48	; 0x30
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1b1      	bne.n	801175a <_strtol_l.constprop.0+0x56>
 80117f6:	2308      	movs	r3, #8
 80117f8:	e7af      	b.n	801175a <_strtol_l.constprop.0+0x56>
 80117fa:	2c30      	cmp	r4, #48	; 0x30
 80117fc:	d0a5      	beq.n	801174a <_strtol_l.constprop.0+0x46>
 80117fe:	230a      	movs	r3, #10
 8011800:	e7ab      	b.n	801175a <_strtol_l.constprop.0+0x56>
 8011802:	bf00      	nop
 8011804:	08013ab9 	.word	0x08013ab9

08011808 <strtol>:
 8011808:	4613      	mov	r3, r2
 801180a:	460a      	mov	r2, r1
 801180c:	4601      	mov	r1, r0
 801180e:	4802      	ldr	r0, [pc, #8]	; (8011818 <strtol+0x10>)
 8011810:	6800      	ldr	r0, [r0, #0]
 8011812:	f7ff bf77 	b.w	8011704 <_strtol_l.constprop.0>
 8011816:	bf00      	nop
 8011818:	200006dc 	.word	0x200006dc

0801181c <__swbuf_r>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	460e      	mov	r6, r1
 8011820:	4614      	mov	r4, r2
 8011822:	4605      	mov	r5, r0
 8011824:	b118      	cbz	r0, 801182e <__swbuf_r+0x12>
 8011826:	6983      	ldr	r3, [r0, #24]
 8011828:	b90b      	cbnz	r3, 801182e <__swbuf_r+0x12>
 801182a:	f000 f9d1 	bl	8011bd0 <__sinit>
 801182e:	4b21      	ldr	r3, [pc, #132]	; (80118b4 <__swbuf_r+0x98>)
 8011830:	429c      	cmp	r4, r3
 8011832:	d12b      	bne.n	801188c <__swbuf_r+0x70>
 8011834:	686c      	ldr	r4, [r5, #4]
 8011836:	69a3      	ldr	r3, [r4, #24]
 8011838:	60a3      	str	r3, [r4, #8]
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	071a      	lsls	r2, r3, #28
 801183e:	d52f      	bpl.n	80118a0 <__swbuf_r+0x84>
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	b36b      	cbz	r3, 80118a0 <__swbuf_r+0x84>
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	6820      	ldr	r0, [r4, #0]
 8011848:	1ac0      	subs	r0, r0, r3
 801184a:	6963      	ldr	r3, [r4, #20]
 801184c:	b2f6      	uxtb	r6, r6
 801184e:	4283      	cmp	r3, r0
 8011850:	4637      	mov	r7, r6
 8011852:	dc04      	bgt.n	801185e <__swbuf_r+0x42>
 8011854:	4621      	mov	r1, r4
 8011856:	4628      	mov	r0, r5
 8011858:	f000 f926 	bl	8011aa8 <_fflush_r>
 801185c:	bb30      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	3b01      	subs	r3, #1
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	6022      	str	r2, [r4, #0]
 801186a:	701e      	strb	r6, [r3, #0]
 801186c:	6963      	ldr	r3, [r4, #20]
 801186e:	3001      	adds	r0, #1
 8011870:	4283      	cmp	r3, r0
 8011872:	d004      	beq.n	801187e <__swbuf_r+0x62>
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	07db      	lsls	r3, r3, #31
 8011878:	d506      	bpl.n	8011888 <__swbuf_r+0x6c>
 801187a:	2e0a      	cmp	r6, #10
 801187c:	d104      	bne.n	8011888 <__swbuf_r+0x6c>
 801187e:	4621      	mov	r1, r4
 8011880:	4628      	mov	r0, r5
 8011882:	f000 f911 	bl	8011aa8 <_fflush_r>
 8011886:	b988      	cbnz	r0, 80118ac <__swbuf_r+0x90>
 8011888:	4638      	mov	r0, r7
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <__swbuf_r+0x9c>)
 801188e:	429c      	cmp	r4, r3
 8011890:	d101      	bne.n	8011896 <__swbuf_r+0x7a>
 8011892:	68ac      	ldr	r4, [r5, #8]
 8011894:	e7cf      	b.n	8011836 <__swbuf_r+0x1a>
 8011896:	4b09      	ldr	r3, [pc, #36]	; (80118bc <__swbuf_r+0xa0>)
 8011898:	429c      	cmp	r4, r3
 801189a:	bf08      	it	eq
 801189c:	68ec      	ldreq	r4, [r5, #12]
 801189e:	e7ca      	b.n	8011836 <__swbuf_r+0x1a>
 80118a0:	4621      	mov	r1, r4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f80c 	bl	80118c0 <__swsetup_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d0cb      	beq.n	8011844 <__swbuf_r+0x28>
 80118ac:	f04f 37ff 	mov.w	r7, #4294967295
 80118b0:	e7ea      	b.n	8011888 <__swbuf_r+0x6c>
 80118b2:	bf00      	nop
 80118b4:	08013be0 	.word	0x08013be0
 80118b8:	08013c00 	.word	0x08013c00
 80118bc:	08013bc0 	.word	0x08013bc0

080118c0 <__swsetup_r>:
 80118c0:	4b32      	ldr	r3, [pc, #200]	; (801198c <__swsetup_r+0xcc>)
 80118c2:	b570      	push	{r4, r5, r6, lr}
 80118c4:	681d      	ldr	r5, [r3, #0]
 80118c6:	4606      	mov	r6, r0
 80118c8:	460c      	mov	r4, r1
 80118ca:	b125      	cbz	r5, 80118d6 <__swsetup_r+0x16>
 80118cc:	69ab      	ldr	r3, [r5, #24]
 80118ce:	b913      	cbnz	r3, 80118d6 <__swsetup_r+0x16>
 80118d0:	4628      	mov	r0, r5
 80118d2:	f000 f97d 	bl	8011bd0 <__sinit>
 80118d6:	4b2e      	ldr	r3, [pc, #184]	; (8011990 <__swsetup_r+0xd0>)
 80118d8:	429c      	cmp	r4, r3
 80118da:	d10f      	bne.n	80118fc <__swsetup_r+0x3c>
 80118dc:	686c      	ldr	r4, [r5, #4]
 80118de:	89a3      	ldrh	r3, [r4, #12]
 80118e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118e4:	0719      	lsls	r1, r3, #28
 80118e6:	d42c      	bmi.n	8011942 <__swsetup_r+0x82>
 80118e8:	06dd      	lsls	r5, r3, #27
 80118ea:	d411      	bmi.n	8011910 <__swsetup_r+0x50>
 80118ec:	2309      	movs	r3, #9
 80118ee:	6033      	str	r3, [r6, #0]
 80118f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118f4:	81a3      	strh	r3, [r4, #12]
 80118f6:	f04f 30ff 	mov.w	r0, #4294967295
 80118fa:	e03e      	b.n	801197a <__swsetup_r+0xba>
 80118fc:	4b25      	ldr	r3, [pc, #148]	; (8011994 <__swsetup_r+0xd4>)
 80118fe:	429c      	cmp	r4, r3
 8011900:	d101      	bne.n	8011906 <__swsetup_r+0x46>
 8011902:	68ac      	ldr	r4, [r5, #8]
 8011904:	e7eb      	b.n	80118de <__swsetup_r+0x1e>
 8011906:	4b24      	ldr	r3, [pc, #144]	; (8011998 <__swsetup_r+0xd8>)
 8011908:	429c      	cmp	r4, r3
 801190a:	bf08      	it	eq
 801190c:	68ec      	ldreq	r4, [r5, #12]
 801190e:	e7e6      	b.n	80118de <__swsetup_r+0x1e>
 8011910:	0758      	lsls	r0, r3, #29
 8011912:	d512      	bpl.n	801193a <__swsetup_r+0x7a>
 8011914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011916:	b141      	cbz	r1, 801192a <__swsetup_r+0x6a>
 8011918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801191c:	4299      	cmp	r1, r3
 801191e:	d002      	beq.n	8011926 <__swsetup_r+0x66>
 8011920:	4630      	mov	r0, r6
 8011922:	f7ff fc5f 	bl	80111e4 <_free_r>
 8011926:	2300      	movs	r3, #0
 8011928:	6363      	str	r3, [r4, #52]	; 0x34
 801192a:	89a3      	ldrh	r3, [r4, #12]
 801192c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	2300      	movs	r3, #0
 8011934:	6063      	str	r3, [r4, #4]
 8011936:	6923      	ldr	r3, [r4, #16]
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f043 0308 	orr.w	r3, r3, #8
 8011940:	81a3      	strh	r3, [r4, #12]
 8011942:	6923      	ldr	r3, [r4, #16]
 8011944:	b94b      	cbnz	r3, 801195a <__swsetup_r+0x9a>
 8011946:	89a3      	ldrh	r3, [r4, #12]
 8011948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011950:	d003      	beq.n	801195a <__swsetup_r+0x9a>
 8011952:	4621      	mov	r1, r4
 8011954:	4630      	mov	r0, r6
 8011956:	f000 fa01 	bl	8011d5c <__smakebuf_r>
 801195a:	89a0      	ldrh	r0, [r4, #12]
 801195c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011960:	f010 0301 	ands.w	r3, r0, #1
 8011964:	d00a      	beq.n	801197c <__swsetup_r+0xbc>
 8011966:	2300      	movs	r3, #0
 8011968:	60a3      	str	r3, [r4, #8]
 801196a:	6963      	ldr	r3, [r4, #20]
 801196c:	425b      	negs	r3, r3
 801196e:	61a3      	str	r3, [r4, #24]
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	b943      	cbnz	r3, 8011986 <__swsetup_r+0xc6>
 8011974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011978:	d1ba      	bne.n	80118f0 <__swsetup_r+0x30>
 801197a:	bd70      	pop	{r4, r5, r6, pc}
 801197c:	0781      	lsls	r1, r0, #30
 801197e:	bf58      	it	pl
 8011980:	6963      	ldrpl	r3, [r4, #20]
 8011982:	60a3      	str	r3, [r4, #8]
 8011984:	e7f4      	b.n	8011970 <__swsetup_r+0xb0>
 8011986:	2000      	movs	r0, #0
 8011988:	e7f7      	b.n	801197a <__swsetup_r+0xba>
 801198a:	bf00      	nop
 801198c:	200006dc 	.word	0x200006dc
 8011990:	08013be0 	.word	0x08013be0
 8011994:	08013c00 	.word	0x08013c00
 8011998:	08013bc0 	.word	0x08013bc0

0801199c <__sflush_r>:
 801199c:	898a      	ldrh	r2, [r1, #12]
 801199e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a2:	4605      	mov	r5, r0
 80119a4:	0710      	lsls	r0, r2, #28
 80119a6:	460c      	mov	r4, r1
 80119a8:	d458      	bmi.n	8011a5c <__sflush_r+0xc0>
 80119aa:	684b      	ldr	r3, [r1, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	dc05      	bgt.n	80119bc <__sflush_r+0x20>
 80119b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	dc02      	bgt.n	80119bc <__sflush_r+0x20>
 80119b6:	2000      	movs	r0, #0
 80119b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119be:	2e00      	cmp	r6, #0
 80119c0:	d0f9      	beq.n	80119b6 <__sflush_r+0x1a>
 80119c2:	2300      	movs	r3, #0
 80119c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119c8:	682f      	ldr	r7, [r5, #0]
 80119ca:	602b      	str	r3, [r5, #0]
 80119cc:	d032      	beq.n	8011a34 <__sflush_r+0x98>
 80119ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	075a      	lsls	r2, r3, #29
 80119d4:	d505      	bpl.n	80119e2 <__sflush_r+0x46>
 80119d6:	6863      	ldr	r3, [r4, #4]
 80119d8:	1ac0      	subs	r0, r0, r3
 80119da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119dc:	b10b      	cbz	r3, 80119e2 <__sflush_r+0x46>
 80119de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119e0:	1ac0      	subs	r0, r0, r3
 80119e2:	2300      	movs	r3, #0
 80119e4:	4602      	mov	r2, r0
 80119e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119e8:	6a21      	ldr	r1, [r4, #32]
 80119ea:	4628      	mov	r0, r5
 80119ec:	47b0      	blx	r6
 80119ee:	1c43      	adds	r3, r0, #1
 80119f0:	89a3      	ldrh	r3, [r4, #12]
 80119f2:	d106      	bne.n	8011a02 <__sflush_r+0x66>
 80119f4:	6829      	ldr	r1, [r5, #0]
 80119f6:	291d      	cmp	r1, #29
 80119f8:	d82c      	bhi.n	8011a54 <__sflush_r+0xb8>
 80119fa:	4a2a      	ldr	r2, [pc, #168]	; (8011aa4 <__sflush_r+0x108>)
 80119fc:	40ca      	lsrs	r2, r1
 80119fe:	07d6      	lsls	r6, r2, #31
 8011a00:	d528      	bpl.n	8011a54 <__sflush_r+0xb8>
 8011a02:	2200      	movs	r2, #0
 8011a04:	6062      	str	r2, [r4, #4]
 8011a06:	04d9      	lsls	r1, r3, #19
 8011a08:	6922      	ldr	r2, [r4, #16]
 8011a0a:	6022      	str	r2, [r4, #0]
 8011a0c:	d504      	bpl.n	8011a18 <__sflush_r+0x7c>
 8011a0e:	1c42      	adds	r2, r0, #1
 8011a10:	d101      	bne.n	8011a16 <__sflush_r+0x7a>
 8011a12:	682b      	ldr	r3, [r5, #0]
 8011a14:	b903      	cbnz	r3, 8011a18 <__sflush_r+0x7c>
 8011a16:	6560      	str	r0, [r4, #84]	; 0x54
 8011a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a1a:	602f      	str	r7, [r5, #0]
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	d0ca      	beq.n	80119b6 <__sflush_r+0x1a>
 8011a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a24:	4299      	cmp	r1, r3
 8011a26:	d002      	beq.n	8011a2e <__sflush_r+0x92>
 8011a28:	4628      	mov	r0, r5
 8011a2a:	f7ff fbdb 	bl	80111e4 <_free_r>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	6360      	str	r0, [r4, #52]	; 0x34
 8011a32:	e7c1      	b.n	80119b8 <__sflush_r+0x1c>
 8011a34:	6a21      	ldr	r1, [r4, #32]
 8011a36:	2301      	movs	r3, #1
 8011a38:	4628      	mov	r0, r5
 8011a3a:	47b0      	blx	r6
 8011a3c:	1c41      	adds	r1, r0, #1
 8011a3e:	d1c7      	bne.n	80119d0 <__sflush_r+0x34>
 8011a40:	682b      	ldr	r3, [r5, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d0c4      	beq.n	80119d0 <__sflush_r+0x34>
 8011a46:	2b1d      	cmp	r3, #29
 8011a48:	d001      	beq.n	8011a4e <__sflush_r+0xb2>
 8011a4a:	2b16      	cmp	r3, #22
 8011a4c:	d101      	bne.n	8011a52 <__sflush_r+0xb6>
 8011a4e:	602f      	str	r7, [r5, #0]
 8011a50:	e7b1      	b.n	80119b6 <__sflush_r+0x1a>
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a58:	81a3      	strh	r3, [r4, #12]
 8011a5a:	e7ad      	b.n	80119b8 <__sflush_r+0x1c>
 8011a5c:	690f      	ldr	r7, [r1, #16]
 8011a5e:	2f00      	cmp	r7, #0
 8011a60:	d0a9      	beq.n	80119b6 <__sflush_r+0x1a>
 8011a62:	0793      	lsls	r3, r2, #30
 8011a64:	680e      	ldr	r6, [r1, #0]
 8011a66:	bf08      	it	eq
 8011a68:	694b      	ldreq	r3, [r1, #20]
 8011a6a:	600f      	str	r7, [r1, #0]
 8011a6c:	bf18      	it	ne
 8011a6e:	2300      	movne	r3, #0
 8011a70:	eba6 0807 	sub.w	r8, r6, r7
 8011a74:	608b      	str	r3, [r1, #8]
 8011a76:	f1b8 0f00 	cmp.w	r8, #0
 8011a7a:	dd9c      	ble.n	80119b6 <__sflush_r+0x1a>
 8011a7c:	6a21      	ldr	r1, [r4, #32]
 8011a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a80:	4643      	mov	r3, r8
 8011a82:	463a      	mov	r2, r7
 8011a84:	4628      	mov	r0, r5
 8011a86:	47b0      	blx	r6
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	dc06      	bgt.n	8011a9a <__sflush_r+0xfe>
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a92:	81a3      	strh	r3, [r4, #12]
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295
 8011a98:	e78e      	b.n	80119b8 <__sflush_r+0x1c>
 8011a9a:	4407      	add	r7, r0
 8011a9c:	eba8 0800 	sub.w	r8, r8, r0
 8011aa0:	e7e9      	b.n	8011a76 <__sflush_r+0xda>
 8011aa2:	bf00      	nop
 8011aa4:	20400001 	.word	0x20400001

08011aa8 <_fflush_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	690b      	ldr	r3, [r1, #16]
 8011aac:	4605      	mov	r5, r0
 8011aae:	460c      	mov	r4, r1
 8011ab0:	b913      	cbnz	r3, 8011ab8 <_fflush_r+0x10>
 8011ab2:	2500      	movs	r5, #0
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	bd38      	pop	{r3, r4, r5, pc}
 8011ab8:	b118      	cbz	r0, 8011ac2 <_fflush_r+0x1a>
 8011aba:	6983      	ldr	r3, [r0, #24]
 8011abc:	b90b      	cbnz	r3, 8011ac2 <_fflush_r+0x1a>
 8011abe:	f000 f887 	bl	8011bd0 <__sinit>
 8011ac2:	4b14      	ldr	r3, [pc, #80]	; (8011b14 <_fflush_r+0x6c>)
 8011ac4:	429c      	cmp	r4, r3
 8011ac6:	d11b      	bne.n	8011b00 <_fflush_r+0x58>
 8011ac8:	686c      	ldr	r4, [r5, #4]
 8011aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d0ef      	beq.n	8011ab2 <_fflush_r+0xa>
 8011ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ad4:	07d0      	lsls	r0, r2, #31
 8011ad6:	d404      	bmi.n	8011ae2 <_fflush_r+0x3a>
 8011ad8:	0599      	lsls	r1, r3, #22
 8011ada:	d402      	bmi.n	8011ae2 <_fflush_r+0x3a>
 8011adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ade:	f000 f915 	bl	8011d0c <__retarget_lock_acquire_recursive>
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	4621      	mov	r1, r4
 8011ae6:	f7ff ff59 	bl	801199c <__sflush_r>
 8011aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011aec:	07da      	lsls	r2, r3, #31
 8011aee:	4605      	mov	r5, r0
 8011af0:	d4e0      	bmi.n	8011ab4 <_fflush_r+0xc>
 8011af2:	89a3      	ldrh	r3, [r4, #12]
 8011af4:	059b      	lsls	r3, r3, #22
 8011af6:	d4dd      	bmi.n	8011ab4 <_fflush_r+0xc>
 8011af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011afa:	f000 f908 	bl	8011d0e <__retarget_lock_release_recursive>
 8011afe:	e7d9      	b.n	8011ab4 <_fflush_r+0xc>
 8011b00:	4b05      	ldr	r3, [pc, #20]	; (8011b18 <_fflush_r+0x70>)
 8011b02:	429c      	cmp	r4, r3
 8011b04:	d101      	bne.n	8011b0a <_fflush_r+0x62>
 8011b06:	68ac      	ldr	r4, [r5, #8]
 8011b08:	e7df      	b.n	8011aca <_fflush_r+0x22>
 8011b0a:	4b04      	ldr	r3, [pc, #16]	; (8011b1c <_fflush_r+0x74>)
 8011b0c:	429c      	cmp	r4, r3
 8011b0e:	bf08      	it	eq
 8011b10:	68ec      	ldreq	r4, [r5, #12]
 8011b12:	e7da      	b.n	8011aca <_fflush_r+0x22>
 8011b14:	08013be0 	.word	0x08013be0
 8011b18:	08013c00 	.word	0x08013c00
 8011b1c:	08013bc0 	.word	0x08013bc0

08011b20 <std>:
 8011b20:	2300      	movs	r3, #0
 8011b22:	b510      	push	{r4, lr}
 8011b24:	4604      	mov	r4, r0
 8011b26:	e9c0 3300 	strd	r3, r3, [r0]
 8011b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b2e:	6083      	str	r3, [r0, #8]
 8011b30:	8181      	strh	r1, [r0, #12]
 8011b32:	6643      	str	r3, [r0, #100]	; 0x64
 8011b34:	81c2      	strh	r2, [r0, #14]
 8011b36:	6183      	str	r3, [r0, #24]
 8011b38:	4619      	mov	r1, r3
 8011b3a:	2208      	movs	r2, #8
 8011b3c:	305c      	adds	r0, #92	; 0x5c
 8011b3e:	f7ff fb33 	bl	80111a8 <memset>
 8011b42:	4b05      	ldr	r3, [pc, #20]	; (8011b58 <std+0x38>)
 8011b44:	6263      	str	r3, [r4, #36]	; 0x24
 8011b46:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <std+0x3c>)
 8011b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b4a:	4b05      	ldr	r3, [pc, #20]	; (8011b60 <std+0x40>)
 8011b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b4e:	4b05      	ldr	r3, [pc, #20]	; (8011b64 <std+0x44>)
 8011b50:	6224      	str	r4, [r4, #32]
 8011b52:	6323      	str	r3, [r4, #48]	; 0x30
 8011b54:	bd10      	pop	{r4, pc}
 8011b56:	bf00      	nop
 8011b58:	080126e5 	.word	0x080126e5
 8011b5c:	08012707 	.word	0x08012707
 8011b60:	0801273f 	.word	0x0801273f
 8011b64:	08012763 	.word	0x08012763

08011b68 <_cleanup_r>:
 8011b68:	4901      	ldr	r1, [pc, #4]	; (8011b70 <_cleanup_r+0x8>)
 8011b6a:	f000 b8af 	b.w	8011ccc <_fwalk_reent>
 8011b6e:	bf00      	nop
 8011b70:	08011aa9 	.word	0x08011aa9

08011b74 <__sfmoreglue>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	2268      	movs	r2, #104	; 0x68
 8011b78:	1e4d      	subs	r5, r1, #1
 8011b7a:	4355      	muls	r5, r2
 8011b7c:	460e      	mov	r6, r1
 8011b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b82:	f7ff fb9b 	bl	80112bc <_malloc_r>
 8011b86:	4604      	mov	r4, r0
 8011b88:	b140      	cbz	r0, 8011b9c <__sfmoreglue+0x28>
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8011b90:	300c      	adds	r0, #12
 8011b92:	60a0      	str	r0, [r4, #8]
 8011b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b98:	f7ff fb06 	bl	80111a8 <memset>
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	bd70      	pop	{r4, r5, r6, pc}

08011ba0 <__sfp_lock_acquire>:
 8011ba0:	4801      	ldr	r0, [pc, #4]	; (8011ba8 <__sfp_lock_acquire+0x8>)
 8011ba2:	f000 b8b3 	b.w	8011d0c <__retarget_lock_acquire_recursive>
 8011ba6:	bf00      	nop
 8011ba8:	2000a639 	.word	0x2000a639

08011bac <__sfp_lock_release>:
 8011bac:	4801      	ldr	r0, [pc, #4]	; (8011bb4 <__sfp_lock_release+0x8>)
 8011bae:	f000 b8ae 	b.w	8011d0e <__retarget_lock_release_recursive>
 8011bb2:	bf00      	nop
 8011bb4:	2000a639 	.word	0x2000a639

08011bb8 <__sinit_lock_acquire>:
 8011bb8:	4801      	ldr	r0, [pc, #4]	; (8011bc0 <__sinit_lock_acquire+0x8>)
 8011bba:	f000 b8a7 	b.w	8011d0c <__retarget_lock_acquire_recursive>
 8011bbe:	bf00      	nop
 8011bc0:	2000a63a 	.word	0x2000a63a

08011bc4 <__sinit_lock_release>:
 8011bc4:	4801      	ldr	r0, [pc, #4]	; (8011bcc <__sinit_lock_release+0x8>)
 8011bc6:	f000 b8a2 	b.w	8011d0e <__retarget_lock_release_recursive>
 8011bca:	bf00      	nop
 8011bcc:	2000a63a 	.word	0x2000a63a

08011bd0 <__sinit>:
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	f7ff fff0 	bl	8011bb8 <__sinit_lock_acquire>
 8011bd8:	69a3      	ldr	r3, [r4, #24]
 8011bda:	b11b      	cbz	r3, 8011be4 <__sinit+0x14>
 8011bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011be0:	f7ff bff0 	b.w	8011bc4 <__sinit_lock_release>
 8011be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011be8:	6523      	str	r3, [r4, #80]	; 0x50
 8011bea:	4b13      	ldr	r3, [pc, #76]	; (8011c38 <__sinit+0x68>)
 8011bec:	4a13      	ldr	r2, [pc, #76]	; (8011c3c <__sinit+0x6c>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8011bf2:	42a3      	cmp	r3, r4
 8011bf4:	bf04      	itt	eq
 8011bf6:	2301      	moveq	r3, #1
 8011bf8:	61a3      	streq	r3, [r4, #24]
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 f820 	bl	8011c40 <__sfp>
 8011c00:	6060      	str	r0, [r4, #4]
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 f81c 	bl	8011c40 <__sfp>
 8011c08:	60a0      	str	r0, [r4, #8]
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f000 f818 	bl	8011c40 <__sfp>
 8011c10:	2200      	movs	r2, #0
 8011c12:	60e0      	str	r0, [r4, #12]
 8011c14:	2104      	movs	r1, #4
 8011c16:	6860      	ldr	r0, [r4, #4]
 8011c18:	f7ff ff82 	bl	8011b20 <std>
 8011c1c:	68a0      	ldr	r0, [r4, #8]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	2109      	movs	r1, #9
 8011c22:	f7ff ff7d 	bl	8011b20 <std>
 8011c26:	68e0      	ldr	r0, [r4, #12]
 8011c28:	2202      	movs	r2, #2
 8011c2a:	2112      	movs	r1, #18
 8011c2c:	f7ff ff78 	bl	8011b20 <std>
 8011c30:	2301      	movs	r3, #1
 8011c32:	61a3      	str	r3, [r4, #24]
 8011c34:	e7d2      	b.n	8011bdc <__sinit+0xc>
 8011c36:	bf00      	nop
 8011c38:	08013bbc 	.word	0x08013bbc
 8011c3c:	08011b69 	.word	0x08011b69

08011c40 <__sfp>:
 8011c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c42:	4607      	mov	r7, r0
 8011c44:	f7ff ffac 	bl	8011ba0 <__sfp_lock_acquire>
 8011c48:	4b1e      	ldr	r3, [pc, #120]	; (8011cc4 <__sfp+0x84>)
 8011c4a:	681e      	ldr	r6, [r3, #0]
 8011c4c:	69b3      	ldr	r3, [r6, #24]
 8011c4e:	b913      	cbnz	r3, 8011c56 <__sfp+0x16>
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7ff ffbd 	bl	8011bd0 <__sinit>
 8011c56:	3648      	adds	r6, #72	; 0x48
 8011c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	d503      	bpl.n	8011c68 <__sfp+0x28>
 8011c60:	6833      	ldr	r3, [r6, #0]
 8011c62:	b30b      	cbz	r3, 8011ca8 <__sfp+0x68>
 8011c64:	6836      	ldr	r6, [r6, #0]
 8011c66:	e7f7      	b.n	8011c58 <__sfp+0x18>
 8011c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c6c:	b9d5      	cbnz	r5, 8011ca4 <__sfp+0x64>
 8011c6e:	4b16      	ldr	r3, [pc, #88]	; (8011cc8 <__sfp+0x88>)
 8011c70:	60e3      	str	r3, [r4, #12]
 8011c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c76:	6665      	str	r5, [r4, #100]	; 0x64
 8011c78:	f000 f847 	bl	8011d0a <__retarget_lock_init_recursive>
 8011c7c:	f7ff ff96 	bl	8011bac <__sfp_lock_release>
 8011c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c88:	6025      	str	r5, [r4, #0]
 8011c8a:	61a5      	str	r5, [r4, #24]
 8011c8c:	2208      	movs	r2, #8
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c94:	f7ff fa88 	bl	80111a8 <memset>
 8011c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ca4:	3468      	adds	r4, #104	; 0x68
 8011ca6:	e7d9      	b.n	8011c5c <__sfp+0x1c>
 8011ca8:	2104      	movs	r1, #4
 8011caa:	4638      	mov	r0, r7
 8011cac:	f7ff ff62 	bl	8011b74 <__sfmoreglue>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	6030      	str	r0, [r6, #0]
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d1d5      	bne.n	8011c64 <__sfp+0x24>
 8011cb8:	f7ff ff78 	bl	8011bac <__sfp_lock_release>
 8011cbc:	230c      	movs	r3, #12
 8011cbe:	603b      	str	r3, [r7, #0]
 8011cc0:	e7ee      	b.n	8011ca0 <__sfp+0x60>
 8011cc2:	bf00      	nop
 8011cc4:	08013bbc 	.word	0x08013bbc
 8011cc8:	ffff0001 	.word	0xffff0001

08011ccc <_fwalk_reent>:
 8011ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cd0:	4606      	mov	r6, r0
 8011cd2:	4688      	mov	r8, r1
 8011cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011cd8:	2700      	movs	r7, #0
 8011cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cde:	f1b9 0901 	subs.w	r9, r9, #1
 8011ce2:	d505      	bpl.n	8011cf0 <_fwalk_reent+0x24>
 8011ce4:	6824      	ldr	r4, [r4, #0]
 8011ce6:	2c00      	cmp	r4, #0
 8011ce8:	d1f7      	bne.n	8011cda <_fwalk_reent+0xe>
 8011cea:	4638      	mov	r0, r7
 8011cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf0:	89ab      	ldrh	r3, [r5, #12]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d907      	bls.n	8011d06 <_fwalk_reent+0x3a>
 8011cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	d003      	beq.n	8011d06 <_fwalk_reent+0x3a>
 8011cfe:	4629      	mov	r1, r5
 8011d00:	4630      	mov	r0, r6
 8011d02:	47c0      	blx	r8
 8011d04:	4307      	orrs	r7, r0
 8011d06:	3568      	adds	r5, #104	; 0x68
 8011d08:	e7e9      	b.n	8011cde <_fwalk_reent+0x12>

08011d0a <__retarget_lock_init_recursive>:
 8011d0a:	4770      	bx	lr

08011d0c <__retarget_lock_acquire_recursive>:
 8011d0c:	4770      	bx	lr

08011d0e <__retarget_lock_release_recursive>:
 8011d0e:	4770      	bx	lr

08011d10 <__swhatbuf_r>:
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	460e      	mov	r6, r1
 8011d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	b096      	sub	sp, #88	; 0x58
 8011d1c:	4614      	mov	r4, r2
 8011d1e:	461d      	mov	r5, r3
 8011d20:	da08      	bge.n	8011d34 <__swhatbuf_r+0x24>
 8011d22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d26:	2200      	movs	r2, #0
 8011d28:	602a      	str	r2, [r5, #0]
 8011d2a:	061a      	lsls	r2, r3, #24
 8011d2c:	d410      	bmi.n	8011d50 <__swhatbuf_r+0x40>
 8011d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d32:	e00e      	b.n	8011d52 <__swhatbuf_r+0x42>
 8011d34:	466a      	mov	r2, sp
 8011d36:	f000 fd3b 	bl	80127b0 <_fstat_r>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	dbf1      	blt.n	8011d22 <__swhatbuf_r+0x12>
 8011d3e:	9a01      	ldr	r2, [sp, #4]
 8011d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d48:	425a      	negs	r2, r3
 8011d4a:	415a      	adcs	r2, r3
 8011d4c:	602a      	str	r2, [r5, #0]
 8011d4e:	e7ee      	b.n	8011d2e <__swhatbuf_r+0x1e>
 8011d50:	2340      	movs	r3, #64	; 0x40
 8011d52:	2000      	movs	r0, #0
 8011d54:	6023      	str	r3, [r4, #0]
 8011d56:	b016      	add	sp, #88	; 0x58
 8011d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08011d5c <__smakebuf_r>:
 8011d5c:	898b      	ldrh	r3, [r1, #12]
 8011d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d60:	079d      	lsls	r5, r3, #30
 8011d62:	4606      	mov	r6, r0
 8011d64:	460c      	mov	r4, r1
 8011d66:	d507      	bpl.n	8011d78 <__smakebuf_r+0x1c>
 8011d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	6123      	str	r3, [r4, #16]
 8011d70:	2301      	movs	r3, #1
 8011d72:	6163      	str	r3, [r4, #20]
 8011d74:	b002      	add	sp, #8
 8011d76:	bd70      	pop	{r4, r5, r6, pc}
 8011d78:	ab01      	add	r3, sp, #4
 8011d7a:	466a      	mov	r2, sp
 8011d7c:	f7ff ffc8 	bl	8011d10 <__swhatbuf_r>
 8011d80:	9900      	ldr	r1, [sp, #0]
 8011d82:	4605      	mov	r5, r0
 8011d84:	4630      	mov	r0, r6
 8011d86:	f7ff fa99 	bl	80112bc <_malloc_r>
 8011d8a:	b948      	cbnz	r0, 8011da0 <__smakebuf_r+0x44>
 8011d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d90:	059a      	lsls	r2, r3, #22
 8011d92:	d4ef      	bmi.n	8011d74 <__smakebuf_r+0x18>
 8011d94:	f023 0303 	bic.w	r3, r3, #3
 8011d98:	f043 0302 	orr.w	r3, r3, #2
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	e7e3      	b.n	8011d68 <__smakebuf_r+0xc>
 8011da0:	4b0d      	ldr	r3, [pc, #52]	; (8011dd8 <__smakebuf_r+0x7c>)
 8011da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011da4:	89a3      	ldrh	r3, [r4, #12]
 8011da6:	6020      	str	r0, [r4, #0]
 8011da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	9b00      	ldr	r3, [sp, #0]
 8011db0:	6163      	str	r3, [r4, #20]
 8011db2:	9b01      	ldr	r3, [sp, #4]
 8011db4:	6120      	str	r0, [r4, #16]
 8011db6:	b15b      	cbz	r3, 8011dd0 <__smakebuf_r+0x74>
 8011db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f000 fd09 	bl	80127d4 <_isatty_r>
 8011dc2:	b128      	cbz	r0, 8011dd0 <__smakebuf_r+0x74>
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	f023 0303 	bic.w	r3, r3, #3
 8011dca:	f043 0301 	orr.w	r3, r3, #1
 8011dce:	81a3      	strh	r3, [r4, #12]
 8011dd0:	89a0      	ldrh	r0, [r4, #12]
 8011dd2:	4305      	orrs	r5, r0
 8011dd4:	81a5      	strh	r5, [r4, #12]
 8011dd6:	e7cd      	b.n	8011d74 <__smakebuf_r+0x18>
 8011dd8:	08011b69 	.word	0x08011b69

08011ddc <__malloc_lock>:
 8011ddc:	4801      	ldr	r0, [pc, #4]	; (8011de4 <__malloc_lock+0x8>)
 8011dde:	f7ff bf95 	b.w	8011d0c <__retarget_lock_acquire_recursive>
 8011de2:	bf00      	nop
 8011de4:	2000a638 	.word	0x2000a638

08011de8 <__malloc_unlock>:
 8011de8:	4801      	ldr	r0, [pc, #4]	; (8011df0 <__malloc_unlock+0x8>)
 8011dea:	f7ff bf90 	b.w	8011d0e <__retarget_lock_release_recursive>
 8011dee:	bf00      	nop
 8011df0:	2000a638 	.word	0x2000a638

08011df4 <_realloc_r>:
 8011df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df8:	4680      	mov	r8, r0
 8011dfa:	4614      	mov	r4, r2
 8011dfc:	460e      	mov	r6, r1
 8011dfe:	b921      	cbnz	r1, 8011e0a <_realloc_r+0x16>
 8011e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	4611      	mov	r1, r2
 8011e06:	f7ff ba59 	b.w	80112bc <_malloc_r>
 8011e0a:	b92a      	cbnz	r2, 8011e18 <_realloc_r+0x24>
 8011e0c:	f7ff f9ea 	bl	80111e4 <_free_r>
 8011e10:	4625      	mov	r5, r4
 8011e12:	4628      	mov	r0, r5
 8011e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e18:	f000 fd18 	bl	801284c <_malloc_usable_size_r>
 8011e1c:	4284      	cmp	r4, r0
 8011e1e:	4607      	mov	r7, r0
 8011e20:	d802      	bhi.n	8011e28 <_realloc_r+0x34>
 8011e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e26:	d812      	bhi.n	8011e4e <_realloc_r+0x5a>
 8011e28:	4621      	mov	r1, r4
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	f7ff fa46 	bl	80112bc <_malloc_r>
 8011e30:	4605      	mov	r5, r0
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d0ed      	beq.n	8011e12 <_realloc_r+0x1e>
 8011e36:	42bc      	cmp	r4, r7
 8011e38:	4622      	mov	r2, r4
 8011e3a:	4631      	mov	r1, r6
 8011e3c:	bf28      	it	cs
 8011e3e:	463a      	movcs	r2, r7
 8011e40:	f7ff f9a4 	bl	801118c <memcpy>
 8011e44:	4631      	mov	r1, r6
 8011e46:	4640      	mov	r0, r8
 8011e48:	f7ff f9cc 	bl	80111e4 <_free_r>
 8011e4c:	e7e1      	b.n	8011e12 <_realloc_r+0x1e>
 8011e4e:	4635      	mov	r5, r6
 8011e50:	e7df      	b.n	8011e12 <_realloc_r+0x1e>

08011e52 <__ssputs_r>:
 8011e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e56:	688e      	ldr	r6, [r1, #8]
 8011e58:	429e      	cmp	r6, r3
 8011e5a:	4682      	mov	sl, r0
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	4690      	mov	r8, r2
 8011e60:	461f      	mov	r7, r3
 8011e62:	d838      	bhi.n	8011ed6 <__ssputs_r+0x84>
 8011e64:	898a      	ldrh	r2, [r1, #12]
 8011e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e6a:	d032      	beq.n	8011ed2 <__ssputs_r+0x80>
 8011e6c:	6825      	ldr	r5, [r4, #0]
 8011e6e:	6909      	ldr	r1, [r1, #16]
 8011e70:	eba5 0901 	sub.w	r9, r5, r1
 8011e74:	6965      	ldr	r5, [r4, #20]
 8011e76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e7e:	3301      	adds	r3, #1
 8011e80:	444b      	add	r3, r9
 8011e82:	106d      	asrs	r5, r5, #1
 8011e84:	429d      	cmp	r5, r3
 8011e86:	bf38      	it	cc
 8011e88:	461d      	movcc	r5, r3
 8011e8a:	0553      	lsls	r3, r2, #21
 8011e8c:	d531      	bpl.n	8011ef2 <__ssputs_r+0xa0>
 8011e8e:	4629      	mov	r1, r5
 8011e90:	f7ff fa14 	bl	80112bc <_malloc_r>
 8011e94:	4606      	mov	r6, r0
 8011e96:	b950      	cbnz	r0, 8011eae <__ssputs_r+0x5c>
 8011e98:	230c      	movs	r3, #12
 8011e9a:	f8ca 3000 	str.w	r3, [sl]
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ea4:	81a3      	strh	r3, [r4, #12]
 8011ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eae:	6921      	ldr	r1, [r4, #16]
 8011eb0:	464a      	mov	r2, r9
 8011eb2:	f7ff f96b 	bl	801118c <memcpy>
 8011eb6:	89a3      	ldrh	r3, [r4, #12]
 8011eb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec0:	81a3      	strh	r3, [r4, #12]
 8011ec2:	6126      	str	r6, [r4, #16]
 8011ec4:	6165      	str	r5, [r4, #20]
 8011ec6:	444e      	add	r6, r9
 8011ec8:	eba5 0509 	sub.w	r5, r5, r9
 8011ecc:	6026      	str	r6, [r4, #0]
 8011ece:	60a5      	str	r5, [r4, #8]
 8011ed0:	463e      	mov	r6, r7
 8011ed2:	42be      	cmp	r6, r7
 8011ed4:	d900      	bls.n	8011ed8 <__ssputs_r+0x86>
 8011ed6:	463e      	mov	r6, r7
 8011ed8:	6820      	ldr	r0, [r4, #0]
 8011eda:	4632      	mov	r2, r6
 8011edc:	4641      	mov	r1, r8
 8011ede:	f000 fc9b 	bl	8012818 <memmove>
 8011ee2:	68a3      	ldr	r3, [r4, #8]
 8011ee4:	1b9b      	subs	r3, r3, r6
 8011ee6:	60a3      	str	r3, [r4, #8]
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	4433      	add	r3, r6
 8011eec:	6023      	str	r3, [r4, #0]
 8011eee:	2000      	movs	r0, #0
 8011ef0:	e7db      	b.n	8011eaa <__ssputs_r+0x58>
 8011ef2:	462a      	mov	r2, r5
 8011ef4:	f7ff ff7e 	bl	8011df4 <_realloc_r>
 8011ef8:	4606      	mov	r6, r0
 8011efa:	2800      	cmp	r0, #0
 8011efc:	d1e1      	bne.n	8011ec2 <__ssputs_r+0x70>
 8011efe:	6921      	ldr	r1, [r4, #16]
 8011f00:	4650      	mov	r0, sl
 8011f02:	f7ff f96f 	bl	80111e4 <_free_r>
 8011f06:	e7c7      	b.n	8011e98 <__ssputs_r+0x46>

08011f08 <_svfiprintf_r>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	4698      	mov	r8, r3
 8011f0e:	898b      	ldrh	r3, [r1, #12]
 8011f10:	061b      	lsls	r3, r3, #24
 8011f12:	b09d      	sub	sp, #116	; 0x74
 8011f14:	4607      	mov	r7, r0
 8011f16:	460d      	mov	r5, r1
 8011f18:	4614      	mov	r4, r2
 8011f1a:	d50e      	bpl.n	8011f3a <_svfiprintf_r+0x32>
 8011f1c:	690b      	ldr	r3, [r1, #16]
 8011f1e:	b963      	cbnz	r3, 8011f3a <_svfiprintf_r+0x32>
 8011f20:	2140      	movs	r1, #64	; 0x40
 8011f22:	f7ff f9cb 	bl	80112bc <_malloc_r>
 8011f26:	6028      	str	r0, [r5, #0]
 8011f28:	6128      	str	r0, [r5, #16]
 8011f2a:	b920      	cbnz	r0, 8011f36 <_svfiprintf_r+0x2e>
 8011f2c:	230c      	movs	r3, #12
 8011f2e:	603b      	str	r3, [r7, #0]
 8011f30:	f04f 30ff 	mov.w	r0, #4294967295
 8011f34:	e0d1      	b.n	80120da <_svfiprintf_r+0x1d2>
 8011f36:	2340      	movs	r3, #64	; 0x40
 8011f38:	616b      	str	r3, [r5, #20]
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f3e:	2320      	movs	r3, #32
 8011f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f48:	2330      	movs	r3, #48	; 0x30
 8011f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120f4 <_svfiprintf_r+0x1ec>
 8011f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f52:	f04f 0901 	mov.w	r9, #1
 8011f56:	4623      	mov	r3, r4
 8011f58:	469a      	mov	sl, r3
 8011f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f5e:	b10a      	cbz	r2, 8011f64 <_svfiprintf_r+0x5c>
 8011f60:	2a25      	cmp	r2, #37	; 0x25
 8011f62:	d1f9      	bne.n	8011f58 <_svfiprintf_r+0x50>
 8011f64:	ebba 0b04 	subs.w	fp, sl, r4
 8011f68:	d00b      	beq.n	8011f82 <_svfiprintf_r+0x7a>
 8011f6a:	465b      	mov	r3, fp
 8011f6c:	4622      	mov	r2, r4
 8011f6e:	4629      	mov	r1, r5
 8011f70:	4638      	mov	r0, r7
 8011f72:	f7ff ff6e 	bl	8011e52 <__ssputs_r>
 8011f76:	3001      	adds	r0, #1
 8011f78:	f000 80aa 	beq.w	80120d0 <_svfiprintf_r+0x1c8>
 8011f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f7e:	445a      	add	r2, fp
 8011f80:	9209      	str	r2, [sp, #36]	; 0x24
 8011f82:	f89a 3000 	ldrb.w	r3, [sl]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f000 80a2 	beq.w	80120d0 <_svfiprintf_r+0x1c8>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f96:	f10a 0a01 	add.w	sl, sl, #1
 8011f9a:	9304      	str	r3, [sp, #16]
 8011f9c:	9307      	str	r3, [sp, #28]
 8011f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8011fa4:	4654      	mov	r4, sl
 8011fa6:	2205      	movs	r2, #5
 8011fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fac:	4851      	ldr	r0, [pc, #324]	; (80120f4 <_svfiprintf_r+0x1ec>)
 8011fae:	f7ee f92f 	bl	8000210 <memchr>
 8011fb2:	9a04      	ldr	r2, [sp, #16]
 8011fb4:	b9d8      	cbnz	r0, 8011fee <_svfiprintf_r+0xe6>
 8011fb6:	06d0      	lsls	r0, r2, #27
 8011fb8:	bf44      	itt	mi
 8011fba:	2320      	movmi	r3, #32
 8011fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fc0:	0711      	lsls	r1, r2, #28
 8011fc2:	bf44      	itt	mi
 8011fc4:	232b      	movmi	r3, #43	; 0x2b
 8011fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fca:	f89a 3000 	ldrb.w	r3, [sl]
 8011fce:	2b2a      	cmp	r3, #42	; 0x2a
 8011fd0:	d015      	beq.n	8011ffe <_svfiprintf_r+0xf6>
 8011fd2:	9a07      	ldr	r2, [sp, #28]
 8011fd4:	4654      	mov	r4, sl
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	f04f 0c0a 	mov.w	ip, #10
 8011fdc:	4621      	mov	r1, r4
 8011fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fe2:	3b30      	subs	r3, #48	; 0x30
 8011fe4:	2b09      	cmp	r3, #9
 8011fe6:	d94e      	bls.n	8012086 <_svfiprintf_r+0x17e>
 8011fe8:	b1b0      	cbz	r0, 8012018 <_svfiprintf_r+0x110>
 8011fea:	9207      	str	r2, [sp, #28]
 8011fec:	e014      	b.n	8012018 <_svfiprintf_r+0x110>
 8011fee:	eba0 0308 	sub.w	r3, r0, r8
 8011ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	9304      	str	r3, [sp, #16]
 8011ffa:	46a2      	mov	sl, r4
 8011ffc:	e7d2      	b.n	8011fa4 <_svfiprintf_r+0x9c>
 8011ffe:	9b03      	ldr	r3, [sp, #12]
 8012000:	1d19      	adds	r1, r3, #4
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	9103      	str	r1, [sp, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	bfbb      	ittet	lt
 801200a:	425b      	neglt	r3, r3
 801200c:	f042 0202 	orrlt.w	r2, r2, #2
 8012010:	9307      	strge	r3, [sp, #28]
 8012012:	9307      	strlt	r3, [sp, #28]
 8012014:	bfb8      	it	lt
 8012016:	9204      	strlt	r2, [sp, #16]
 8012018:	7823      	ldrb	r3, [r4, #0]
 801201a:	2b2e      	cmp	r3, #46	; 0x2e
 801201c:	d10c      	bne.n	8012038 <_svfiprintf_r+0x130>
 801201e:	7863      	ldrb	r3, [r4, #1]
 8012020:	2b2a      	cmp	r3, #42	; 0x2a
 8012022:	d135      	bne.n	8012090 <_svfiprintf_r+0x188>
 8012024:	9b03      	ldr	r3, [sp, #12]
 8012026:	1d1a      	adds	r2, r3, #4
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	9203      	str	r2, [sp, #12]
 801202c:	2b00      	cmp	r3, #0
 801202e:	bfb8      	it	lt
 8012030:	f04f 33ff 	movlt.w	r3, #4294967295
 8012034:	3402      	adds	r4, #2
 8012036:	9305      	str	r3, [sp, #20]
 8012038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012104 <_svfiprintf_r+0x1fc>
 801203c:	7821      	ldrb	r1, [r4, #0]
 801203e:	2203      	movs	r2, #3
 8012040:	4650      	mov	r0, sl
 8012042:	f7ee f8e5 	bl	8000210 <memchr>
 8012046:	b140      	cbz	r0, 801205a <_svfiprintf_r+0x152>
 8012048:	2340      	movs	r3, #64	; 0x40
 801204a:	eba0 000a 	sub.w	r0, r0, sl
 801204e:	fa03 f000 	lsl.w	r0, r3, r0
 8012052:	9b04      	ldr	r3, [sp, #16]
 8012054:	4303      	orrs	r3, r0
 8012056:	3401      	adds	r4, #1
 8012058:	9304      	str	r3, [sp, #16]
 801205a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801205e:	4826      	ldr	r0, [pc, #152]	; (80120f8 <_svfiprintf_r+0x1f0>)
 8012060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012064:	2206      	movs	r2, #6
 8012066:	f7ee f8d3 	bl	8000210 <memchr>
 801206a:	2800      	cmp	r0, #0
 801206c:	d038      	beq.n	80120e0 <_svfiprintf_r+0x1d8>
 801206e:	4b23      	ldr	r3, [pc, #140]	; (80120fc <_svfiprintf_r+0x1f4>)
 8012070:	bb1b      	cbnz	r3, 80120ba <_svfiprintf_r+0x1b2>
 8012072:	9b03      	ldr	r3, [sp, #12]
 8012074:	3307      	adds	r3, #7
 8012076:	f023 0307 	bic.w	r3, r3, #7
 801207a:	3308      	adds	r3, #8
 801207c:	9303      	str	r3, [sp, #12]
 801207e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012080:	4433      	add	r3, r6
 8012082:	9309      	str	r3, [sp, #36]	; 0x24
 8012084:	e767      	b.n	8011f56 <_svfiprintf_r+0x4e>
 8012086:	fb0c 3202 	mla	r2, ip, r2, r3
 801208a:	460c      	mov	r4, r1
 801208c:	2001      	movs	r0, #1
 801208e:	e7a5      	b.n	8011fdc <_svfiprintf_r+0xd4>
 8012090:	2300      	movs	r3, #0
 8012092:	3401      	adds	r4, #1
 8012094:	9305      	str	r3, [sp, #20]
 8012096:	4619      	mov	r1, r3
 8012098:	f04f 0c0a 	mov.w	ip, #10
 801209c:	4620      	mov	r0, r4
 801209e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120a2:	3a30      	subs	r2, #48	; 0x30
 80120a4:	2a09      	cmp	r2, #9
 80120a6:	d903      	bls.n	80120b0 <_svfiprintf_r+0x1a8>
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d0c5      	beq.n	8012038 <_svfiprintf_r+0x130>
 80120ac:	9105      	str	r1, [sp, #20]
 80120ae:	e7c3      	b.n	8012038 <_svfiprintf_r+0x130>
 80120b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80120b4:	4604      	mov	r4, r0
 80120b6:	2301      	movs	r3, #1
 80120b8:	e7f0      	b.n	801209c <_svfiprintf_r+0x194>
 80120ba:	ab03      	add	r3, sp, #12
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	462a      	mov	r2, r5
 80120c0:	4b0f      	ldr	r3, [pc, #60]	; (8012100 <_svfiprintf_r+0x1f8>)
 80120c2:	a904      	add	r1, sp, #16
 80120c4:	4638      	mov	r0, r7
 80120c6:	f3af 8000 	nop.w
 80120ca:	1c42      	adds	r2, r0, #1
 80120cc:	4606      	mov	r6, r0
 80120ce:	d1d6      	bne.n	801207e <_svfiprintf_r+0x176>
 80120d0:	89ab      	ldrh	r3, [r5, #12]
 80120d2:	065b      	lsls	r3, r3, #25
 80120d4:	f53f af2c 	bmi.w	8011f30 <_svfiprintf_r+0x28>
 80120d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120da:	b01d      	add	sp, #116	; 0x74
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e0:	ab03      	add	r3, sp, #12
 80120e2:	9300      	str	r3, [sp, #0]
 80120e4:	462a      	mov	r2, r5
 80120e6:	4b06      	ldr	r3, [pc, #24]	; (8012100 <_svfiprintf_r+0x1f8>)
 80120e8:	a904      	add	r1, sp, #16
 80120ea:	4638      	mov	r0, r7
 80120ec:	f000 f9d4 	bl	8012498 <_printf_i>
 80120f0:	e7eb      	b.n	80120ca <_svfiprintf_r+0x1c2>
 80120f2:	bf00      	nop
 80120f4:	08013c20 	.word	0x08013c20
 80120f8:	08013c2a 	.word	0x08013c2a
 80120fc:	00000000 	.word	0x00000000
 8012100:	08011e53 	.word	0x08011e53
 8012104:	08013c26 	.word	0x08013c26

08012108 <__sfputc_r>:
 8012108:	6893      	ldr	r3, [r2, #8]
 801210a:	3b01      	subs	r3, #1
 801210c:	2b00      	cmp	r3, #0
 801210e:	b410      	push	{r4}
 8012110:	6093      	str	r3, [r2, #8]
 8012112:	da08      	bge.n	8012126 <__sfputc_r+0x1e>
 8012114:	6994      	ldr	r4, [r2, #24]
 8012116:	42a3      	cmp	r3, r4
 8012118:	db01      	blt.n	801211e <__sfputc_r+0x16>
 801211a:	290a      	cmp	r1, #10
 801211c:	d103      	bne.n	8012126 <__sfputc_r+0x1e>
 801211e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012122:	f7ff bb7b 	b.w	801181c <__swbuf_r>
 8012126:	6813      	ldr	r3, [r2, #0]
 8012128:	1c58      	adds	r0, r3, #1
 801212a:	6010      	str	r0, [r2, #0]
 801212c:	7019      	strb	r1, [r3, #0]
 801212e:	4608      	mov	r0, r1
 8012130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012134:	4770      	bx	lr

08012136 <__sfputs_r>:
 8012136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012138:	4606      	mov	r6, r0
 801213a:	460f      	mov	r7, r1
 801213c:	4614      	mov	r4, r2
 801213e:	18d5      	adds	r5, r2, r3
 8012140:	42ac      	cmp	r4, r5
 8012142:	d101      	bne.n	8012148 <__sfputs_r+0x12>
 8012144:	2000      	movs	r0, #0
 8012146:	e007      	b.n	8012158 <__sfputs_r+0x22>
 8012148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801214c:	463a      	mov	r2, r7
 801214e:	4630      	mov	r0, r6
 8012150:	f7ff ffda 	bl	8012108 <__sfputc_r>
 8012154:	1c43      	adds	r3, r0, #1
 8012156:	d1f3      	bne.n	8012140 <__sfputs_r+0xa>
 8012158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801215c <_vfiprintf_r>:
 801215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012160:	460d      	mov	r5, r1
 8012162:	b09d      	sub	sp, #116	; 0x74
 8012164:	4614      	mov	r4, r2
 8012166:	4698      	mov	r8, r3
 8012168:	4606      	mov	r6, r0
 801216a:	b118      	cbz	r0, 8012174 <_vfiprintf_r+0x18>
 801216c:	6983      	ldr	r3, [r0, #24]
 801216e:	b90b      	cbnz	r3, 8012174 <_vfiprintf_r+0x18>
 8012170:	f7ff fd2e 	bl	8011bd0 <__sinit>
 8012174:	4b89      	ldr	r3, [pc, #548]	; (801239c <_vfiprintf_r+0x240>)
 8012176:	429d      	cmp	r5, r3
 8012178:	d11b      	bne.n	80121b2 <_vfiprintf_r+0x56>
 801217a:	6875      	ldr	r5, [r6, #4]
 801217c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801217e:	07d9      	lsls	r1, r3, #31
 8012180:	d405      	bmi.n	801218e <_vfiprintf_r+0x32>
 8012182:	89ab      	ldrh	r3, [r5, #12]
 8012184:	059a      	lsls	r2, r3, #22
 8012186:	d402      	bmi.n	801218e <_vfiprintf_r+0x32>
 8012188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801218a:	f7ff fdbf 	bl	8011d0c <__retarget_lock_acquire_recursive>
 801218e:	89ab      	ldrh	r3, [r5, #12]
 8012190:	071b      	lsls	r3, r3, #28
 8012192:	d501      	bpl.n	8012198 <_vfiprintf_r+0x3c>
 8012194:	692b      	ldr	r3, [r5, #16]
 8012196:	b9eb      	cbnz	r3, 80121d4 <_vfiprintf_r+0x78>
 8012198:	4629      	mov	r1, r5
 801219a:	4630      	mov	r0, r6
 801219c:	f7ff fb90 	bl	80118c0 <__swsetup_r>
 80121a0:	b1c0      	cbz	r0, 80121d4 <_vfiprintf_r+0x78>
 80121a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121a4:	07dc      	lsls	r4, r3, #31
 80121a6:	d50e      	bpl.n	80121c6 <_vfiprintf_r+0x6a>
 80121a8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ac:	b01d      	add	sp, #116	; 0x74
 80121ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b2:	4b7b      	ldr	r3, [pc, #492]	; (80123a0 <_vfiprintf_r+0x244>)
 80121b4:	429d      	cmp	r5, r3
 80121b6:	d101      	bne.n	80121bc <_vfiprintf_r+0x60>
 80121b8:	68b5      	ldr	r5, [r6, #8]
 80121ba:	e7df      	b.n	801217c <_vfiprintf_r+0x20>
 80121bc:	4b79      	ldr	r3, [pc, #484]	; (80123a4 <_vfiprintf_r+0x248>)
 80121be:	429d      	cmp	r5, r3
 80121c0:	bf08      	it	eq
 80121c2:	68f5      	ldreq	r5, [r6, #12]
 80121c4:	e7da      	b.n	801217c <_vfiprintf_r+0x20>
 80121c6:	89ab      	ldrh	r3, [r5, #12]
 80121c8:	0598      	lsls	r0, r3, #22
 80121ca:	d4ed      	bmi.n	80121a8 <_vfiprintf_r+0x4c>
 80121cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121ce:	f7ff fd9e 	bl	8011d0e <__retarget_lock_release_recursive>
 80121d2:	e7e9      	b.n	80121a8 <_vfiprintf_r+0x4c>
 80121d4:	2300      	movs	r3, #0
 80121d6:	9309      	str	r3, [sp, #36]	; 0x24
 80121d8:	2320      	movs	r3, #32
 80121da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121de:	f8cd 800c 	str.w	r8, [sp, #12]
 80121e2:	2330      	movs	r3, #48	; 0x30
 80121e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80123a8 <_vfiprintf_r+0x24c>
 80121e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121ec:	f04f 0901 	mov.w	r9, #1
 80121f0:	4623      	mov	r3, r4
 80121f2:	469a      	mov	sl, r3
 80121f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121f8:	b10a      	cbz	r2, 80121fe <_vfiprintf_r+0xa2>
 80121fa:	2a25      	cmp	r2, #37	; 0x25
 80121fc:	d1f9      	bne.n	80121f2 <_vfiprintf_r+0x96>
 80121fe:	ebba 0b04 	subs.w	fp, sl, r4
 8012202:	d00b      	beq.n	801221c <_vfiprintf_r+0xc0>
 8012204:	465b      	mov	r3, fp
 8012206:	4622      	mov	r2, r4
 8012208:	4629      	mov	r1, r5
 801220a:	4630      	mov	r0, r6
 801220c:	f7ff ff93 	bl	8012136 <__sfputs_r>
 8012210:	3001      	adds	r0, #1
 8012212:	f000 80aa 	beq.w	801236a <_vfiprintf_r+0x20e>
 8012216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012218:	445a      	add	r2, fp
 801221a:	9209      	str	r2, [sp, #36]	; 0x24
 801221c:	f89a 3000 	ldrb.w	r3, [sl]
 8012220:	2b00      	cmp	r3, #0
 8012222:	f000 80a2 	beq.w	801236a <_vfiprintf_r+0x20e>
 8012226:	2300      	movs	r3, #0
 8012228:	f04f 32ff 	mov.w	r2, #4294967295
 801222c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012230:	f10a 0a01 	add.w	sl, sl, #1
 8012234:	9304      	str	r3, [sp, #16]
 8012236:	9307      	str	r3, [sp, #28]
 8012238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801223c:	931a      	str	r3, [sp, #104]	; 0x68
 801223e:	4654      	mov	r4, sl
 8012240:	2205      	movs	r2, #5
 8012242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012246:	4858      	ldr	r0, [pc, #352]	; (80123a8 <_vfiprintf_r+0x24c>)
 8012248:	f7ed ffe2 	bl	8000210 <memchr>
 801224c:	9a04      	ldr	r2, [sp, #16]
 801224e:	b9d8      	cbnz	r0, 8012288 <_vfiprintf_r+0x12c>
 8012250:	06d1      	lsls	r1, r2, #27
 8012252:	bf44      	itt	mi
 8012254:	2320      	movmi	r3, #32
 8012256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801225a:	0713      	lsls	r3, r2, #28
 801225c:	bf44      	itt	mi
 801225e:	232b      	movmi	r3, #43	; 0x2b
 8012260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012264:	f89a 3000 	ldrb.w	r3, [sl]
 8012268:	2b2a      	cmp	r3, #42	; 0x2a
 801226a:	d015      	beq.n	8012298 <_vfiprintf_r+0x13c>
 801226c:	9a07      	ldr	r2, [sp, #28]
 801226e:	4654      	mov	r4, sl
 8012270:	2000      	movs	r0, #0
 8012272:	f04f 0c0a 	mov.w	ip, #10
 8012276:	4621      	mov	r1, r4
 8012278:	f811 3b01 	ldrb.w	r3, [r1], #1
 801227c:	3b30      	subs	r3, #48	; 0x30
 801227e:	2b09      	cmp	r3, #9
 8012280:	d94e      	bls.n	8012320 <_vfiprintf_r+0x1c4>
 8012282:	b1b0      	cbz	r0, 80122b2 <_vfiprintf_r+0x156>
 8012284:	9207      	str	r2, [sp, #28]
 8012286:	e014      	b.n	80122b2 <_vfiprintf_r+0x156>
 8012288:	eba0 0308 	sub.w	r3, r0, r8
 801228c:	fa09 f303 	lsl.w	r3, r9, r3
 8012290:	4313      	orrs	r3, r2
 8012292:	9304      	str	r3, [sp, #16]
 8012294:	46a2      	mov	sl, r4
 8012296:	e7d2      	b.n	801223e <_vfiprintf_r+0xe2>
 8012298:	9b03      	ldr	r3, [sp, #12]
 801229a:	1d19      	adds	r1, r3, #4
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	9103      	str	r1, [sp, #12]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	bfbb      	ittet	lt
 80122a4:	425b      	neglt	r3, r3
 80122a6:	f042 0202 	orrlt.w	r2, r2, #2
 80122aa:	9307      	strge	r3, [sp, #28]
 80122ac:	9307      	strlt	r3, [sp, #28]
 80122ae:	bfb8      	it	lt
 80122b0:	9204      	strlt	r2, [sp, #16]
 80122b2:	7823      	ldrb	r3, [r4, #0]
 80122b4:	2b2e      	cmp	r3, #46	; 0x2e
 80122b6:	d10c      	bne.n	80122d2 <_vfiprintf_r+0x176>
 80122b8:	7863      	ldrb	r3, [r4, #1]
 80122ba:	2b2a      	cmp	r3, #42	; 0x2a
 80122bc:	d135      	bne.n	801232a <_vfiprintf_r+0x1ce>
 80122be:	9b03      	ldr	r3, [sp, #12]
 80122c0:	1d1a      	adds	r2, r3, #4
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	9203      	str	r2, [sp, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bfb8      	it	lt
 80122ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80122ce:	3402      	adds	r4, #2
 80122d0:	9305      	str	r3, [sp, #20]
 80122d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80123b8 <_vfiprintf_r+0x25c>
 80122d6:	7821      	ldrb	r1, [r4, #0]
 80122d8:	2203      	movs	r2, #3
 80122da:	4650      	mov	r0, sl
 80122dc:	f7ed ff98 	bl	8000210 <memchr>
 80122e0:	b140      	cbz	r0, 80122f4 <_vfiprintf_r+0x198>
 80122e2:	2340      	movs	r3, #64	; 0x40
 80122e4:	eba0 000a 	sub.w	r0, r0, sl
 80122e8:	fa03 f000 	lsl.w	r0, r3, r0
 80122ec:	9b04      	ldr	r3, [sp, #16]
 80122ee:	4303      	orrs	r3, r0
 80122f0:	3401      	adds	r4, #1
 80122f2:	9304      	str	r3, [sp, #16]
 80122f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f8:	482c      	ldr	r0, [pc, #176]	; (80123ac <_vfiprintf_r+0x250>)
 80122fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122fe:	2206      	movs	r2, #6
 8012300:	f7ed ff86 	bl	8000210 <memchr>
 8012304:	2800      	cmp	r0, #0
 8012306:	d03f      	beq.n	8012388 <_vfiprintf_r+0x22c>
 8012308:	4b29      	ldr	r3, [pc, #164]	; (80123b0 <_vfiprintf_r+0x254>)
 801230a:	bb1b      	cbnz	r3, 8012354 <_vfiprintf_r+0x1f8>
 801230c:	9b03      	ldr	r3, [sp, #12]
 801230e:	3307      	adds	r3, #7
 8012310:	f023 0307 	bic.w	r3, r3, #7
 8012314:	3308      	adds	r3, #8
 8012316:	9303      	str	r3, [sp, #12]
 8012318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231a:	443b      	add	r3, r7
 801231c:	9309      	str	r3, [sp, #36]	; 0x24
 801231e:	e767      	b.n	80121f0 <_vfiprintf_r+0x94>
 8012320:	fb0c 3202 	mla	r2, ip, r2, r3
 8012324:	460c      	mov	r4, r1
 8012326:	2001      	movs	r0, #1
 8012328:	e7a5      	b.n	8012276 <_vfiprintf_r+0x11a>
 801232a:	2300      	movs	r3, #0
 801232c:	3401      	adds	r4, #1
 801232e:	9305      	str	r3, [sp, #20]
 8012330:	4619      	mov	r1, r3
 8012332:	f04f 0c0a 	mov.w	ip, #10
 8012336:	4620      	mov	r0, r4
 8012338:	f810 2b01 	ldrb.w	r2, [r0], #1
 801233c:	3a30      	subs	r2, #48	; 0x30
 801233e:	2a09      	cmp	r2, #9
 8012340:	d903      	bls.n	801234a <_vfiprintf_r+0x1ee>
 8012342:	2b00      	cmp	r3, #0
 8012344:	d0c5      	beq.n	80122d2 <_vfiprintf_r+0x176>
 8012346:	9105      	str	r1, [sp, #20]
 8012348:	e7c3      	b.n	80122d2 <_vfiprintf_r+0x176>
 801234a:	fb0c 2101 	mla	r1, ip, r1, r2
 801234e:	4604      	mov	r4, r0
 8012350:	2301      	movs	r3, #1
 8012352:	e7f0      	b.n	8012336 <_vfiprintf_r+0x1da>
 8012354:	ab03      	add	r3, sp, #12
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	462a      	mov	r2, r5
 801235a:	4b16      	ldr	r3, [pc, #88]	; (80123b4 <_vfiprintf_r+0x258>)
 801235c:	a904      	add	r1, sp, #16
 801235e:	4630      	mov	r0, r6
 8012360:	f3af 8000 	nop.w
 8012364:	4607      	mov	r7, r0
 8012366:	1c78      	adds	r0, r7, #1
 8012368:	d1d6      	bne.n	8012318 <_vfiprintf_r+0x1bc>
 801236a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801236c:	07d9      	lsls	r1, r3, #31
 801236e:	d405      	bmi.n	801237c <_vfiprintf_r+0x220>
 8012370:	89ab      	ldrh	r3, [r5, #12]
 8012372:	059a      	lsls	r2, r3, #22
 8012374:	d402      	bmi.n	801237c <_vfiprintf_r+0x220>
 8012376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012378:	f7ff fcc9 	bl	8011d0e <__retarget_lock_release_recursive>
 801237c:	89ab      	ldrh	r3, [r5, #12]
 801237e:	065b      	lsls	r3, r3, #25
 8012380:	f53f af12 	bmi.w	80121a8 <_vfiprintf_r+0x4c>
 8012384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012386:	e711      	b.n	80121ac <_vfiprintf_r+0x50>
 8012388:	ab03      	add	r3, sp, #12
 801238a:	9300      	str	r3, [sp, #0]
 801238c:	462a      	mov	r2, r5
 801238e:	4b09      	ldr	r3, [pc, #36]	; (80123b4 <_vfiprintf_r+0x258>)
 8012390:	a904      	add	r1, sp, #16
 8012392:	4630      	mov	r0, r6
 8012394:	f000 f880 	bl	8012498 <_printf_i>
 8012398:	e7e4      	b.n	8012364 <_vfiprintf_r+0x208>
 801239a:	bf00      	nop
 801239c:	08013be0 	.word	0x08013be0
 80123a0:	08013c00 	.word	0x08013c00
 80123a4:	08013bc0 	.word	0x08013bc0
 80123a8:	08013c20 	.word	0x08013c20
 80123ac:	08013c2a 	.word	0x08013c2a
 80123b0:	00000000 	.word	0x00000000
 80123b4:	08012137 	.word	0x08012137
 80123b8:	08013c26 	.word	0x08013c26

080123bc <_printf_common>:
 80123bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123c0:	4616      	mov	r6, r2
 80123c2:	4699      	mov	r9, r3
 80123c4:	688a      	ldr	r2, [r1, #8]
 80123c6:	690b      	ldr	r3, [r1, #16]
 80123c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123cc:	4293      	cmp	r3, r2
 80123ce:	bfb8      	it	lt
 80123d0:	4613      	movlt	r3, r2
 80123d2:	6033      	str	r3, [r6, #0]
 80123d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123d8:	4607      	mov	r7, r0
 80123da:	460c      	mov	r4, r1
 80123dc:	b10a      	cbz	r2, 80123e2 <_printf_common+0x26>
 80123de:	3301      	adds	r3, #1
 80123e0:	6033      	str	r3, [r6, #0]
 80123e2:	6823      	ldr	r3, [r4, #0]
 80123e4:	0699      	lsls	r1, r3, #26
 80123e6:	bf42      	ittt	mi
 80123e8:	6833      	ldrmi	r3, [r6, #0]
 80123ea:	3302      	addmi	r3, #2
 80123ec:	6033      	strmi	r3, [r6, #0]
 80123ee:	6825      	ldr	r5, [r4, #0]
 80123f0:	f015 0506 	ands.w	r5, r5, #6
 80123f4:	d106      	bne.n	8012404 <_printf_common+0x48>
 80123f6:	f104 0a19 	add.w	sl, r4, #25
 80123fa:	68e3      	ldr	r3, [r4, #12]
 80123fc:	6832      	ldr	r2, [r6, #0]
 80123fe:	1a9b      	subs	r3, r3, r2
 8012400:	42ab      	cmp	r3, r5
 8012402:	dc26      	bgt.n	8012452 <_printf_common+0x96>
 8012404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012408:	1e13      	subs	r3, r2, #0
 801240a:	6822      	ldr	r2, [r4, #0]
 801240c:	bf18      	it	ne
 801240e:	2301      	movne	r3, #1
 8012410:	0692      	lsls	r2, r2, #26
 8012412:	d42b      	bmi.n	801246c <_printf_common+0xb0>
 8012414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012418:	4649      	mov	r1, r9
 801241a:	4638      	mov	r0, r7
 801241c:	47c0      	blx	r8
 801241e:	3001      	adds	r0, #1
 8012420:	d01e      	beq.n	8012460 <_printf_common+0xa4>
 8012422:	6823      	ldr	r3, [r4, #0]
 8012424:	68e5      	ldr	r5, [r4, #12]
 8012426:	6832      	ldr	r2, [r6, #0]
 8012428:	f003 0306 	and.w	r3, r3, #6
 801242c:	2b04      	cmp	r3, #4
 801242e:	bf08      	it	eq
 8012430:	1aad      	subeq	r5, r5, r2
 8012432:	68a3      	ldr	r3, [r4, #8]
 8012434:	6922      	ldr	r2, [r4, #16]
 8012436:	bf0c      	ite	eq
 8012438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801243c:	2500      	movne	r5, #0
 801243e:	4293      	cmp	r3, r2
 8012440:	bfc4      	itt	gt
 8012442:	1a9b      	subgt	r3, r3, r2
 8012444:	18ed      	addgt	r5, r5, r3
 8012446:	2600      	movs	r6, #0
 8012448:	341a      	adds	r4, #26
 801244a:	42b5      	cmp	r5, r6
 801244c:	d11a      	bne.n	8012484 <_printf_common+0xc8>
 801244e:	2000      	movs	r0, #0
 8012450:	e008      	b.n	8012464 <_printf_common+0xa8>
 8012452:	2301      	movs	r3, #1
 8012454:	4652      	mov	r2, sl
 8012456:	4649      	mov	r1, r9
 8012458:	4638      	mov	r0, r7
 801245a:	47c0      	blx	r8
 801245c:	3001      	adds	r0, #1
 801245e:	d103      	bne.n	8012468 <_printf_common+0xac>
 8012460:	f04f 30ff 	mov.w	r0, #4294967295
 8012464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012468:	3501      	adds	r5, #1
 801246a:	e7c6      	b.n	80123fa <_printf_common+0x3e>
 801246c:	18e1      	adds	r1, r4, r3
 801246e:	1c5a      	adds	r2, r3, #1
 8012470:	2030      	movs	r0, #48	; 0x30
 8012472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012476:	4422      	add	r2, r4
 8012478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801247c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012480:	3302      	adds	r3, #2
 8012482:	e7c7      	b.n	8012414 <_printf_common+0x58>
 8012484:	2301      	movs	r3, #1
 8012486:	4622      	mov	r2, r4
 8012488:	4649      	mov	r1, r9
 801248a:	4638      	mov	r0, r7
 801248c:	47c0      	blx	r8
 801248e:	3001      	adds	r0, #1
 8012490:	d0e6      	beq.n	8012460 <_printf_common+0xa4>
 8012492:	3601      	adds	r6, #1
 8012494:	e7d9      	b.n	801244a <_printf_common+0x8e>
	...

08012498 <_printf_i>:
 8012498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801249c:	7e0f      	ldrb	r7, [r1, #24]
 801249e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124a0:	2f78      	cmp	r7, #120	; 0x78
 80124a2:	4691      	mov	r9, r2
 80124a4:	4680      	mov	r8, r0
 80124a6:	460c      	mov	r4, r1
 80124a8:	469a      	mov	sl, r3
 80124aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124ae:	d807      	bhi.n	80124c0 <_printf_i+0x28>
 80124b0:	2f62      	cmp	r7, #98	; 0x62
 80124b2:	d80a      	bhi.n	80124ca <_printf_i+0x32>
 80124b4:	2f00      	cmp	r7, #0
 80124b6:	f000 80d8 	beq.w	801266a <_printf_i+0x1d2>
 80124ba:	2f58      	cmp	r7, #88	; 0x58
 80124bc:	f000 80a3 	beq.w	8012606 <_printf_i+0x16e>
 80124c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80124c8:	e03a      	b.n	8012540 <_printf_i+0xa8>
 80124ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80124ce:	2b15      	cmp	r3, #21
 80124d0:	d8f6      	bhi.n	80124c0 <_printf_i+0x28>
 80124d2:	a101      	add	r1, pc, #4	; (adr r1, 80124d8 <_printf_i+0x40>)
 80124d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124d8:	08012531 	.word	0x08012531
 80124dc:	08012545 	.word	0x08012545
 80124e0:	080124c1 	.word	0x080124c1
 80124e4:	080124c1 	.word	0x080124c1
 80124e8:	080124c1 	.word	0x080124c1
 80124ec:	080124c1 	.word	0x080124c1
 80124f0:	08012545 	.word	0x08012545
 80124f4:	080124c1 	.word	0x080124c1
 80124f8:	080124c1 	.word	0x080124c1
 80124fc:	080124c1 	.word	0x080124c1
 8012500:	080124c1 	.word	0x080124c1
 8012504:	08012651 	.word	0x08012651
 8012508:	08012575 	.word	0x08012575
 801250c:	08012633 	.word	0x08012633
 8012510:	080124c1 	.word	0x080124c1
 8012514:	080124c1 	.word	0x080124c1
 8012518:	08012673 	.word	0x08012673
 801251c:	080124c1 	.word	0x080124c1
 8012520:	08012575 	.word	0x08012575
 8012524:	080124c1 	.word	0x080124c1
 8012528:	080124c1 	.word	0x080124c1
 801252c:	0801263b 	.word	0x0801263b
 8012530:	682b      	ldr	r3, [r5, #0]
 8012532:	1d1a      	adds	r2, r3, #4
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	602a      	str	r2, [r5, #0]
 8012538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801253c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012540:	2301      	movs	r3, #1
 8012542:	e0a3      	b.n	801268c <_printf_i+0x1f4>
 8012544:	6820      	ldr	r0, [r4, #0]
 8012546:	6829      	ldr	r1, [r5, #0]
 8012548:	0606      	lsls	r6, r0, #24
 801254a:	f101 0304 	add.w	r3, r1, #4
 801254e:	d50a      	bpl.n	8012566 <_printf_i+0xce>
 8012550:	680e      	ldr	r6, [r1, #0]
 8012552:	602b      	str	r3, [r5, #0]
 8012554:	2e00      	cmp	r6, #0
 8012556:	da03      	bge.n	8012560 <_printf_i+0xc8>
 8012558:	232d      	movs	r3, #45	; 0x2d
 801255a:	4276      	negs	r6, r6
 801255c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012560:	485e      	ldr	r0, [pc, #376]	; (80126dc <_printf_i+0x244>)
 8012562:	230a      	movs	r3, #10
 8012564:	e019      	b.n	801259a <_printf_i+0x102>
 8012566:	680e      	ldr	r6, [r1, #0]
 8012568:	602b      	str	r3, [r5, #0]
 801256a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801256e:	bf18      	it	ne
 8012570:	b236      	sxthne	r6, r6
 8012572:	e7ef      	b.n	8012554 <_printf_i+0xbc>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	6820      	ldr	r0, [r4, #0]
 8012578:	1d19      	adds	r1, r3, #4
 801257a:	6029      	str	r1, [r5, #0]
 801257c:	0601      	lsls	r1, r0, #24
 801257e:	d501      	bpl.n	8012584 <_printf_i+0xec>
 8012580:	681e      	ldr	r6, [r3, #0]
 8012582:	e002      	b.n	801258a <_printf_i+0xf2>
 8012584:	0646      	lsls	r6, r0, #25
 8012586:	d5fb      	bpl.n	8012580 <_printf_i+0xe8>
 8012588:	881e      	ldrh	r6, [r3, #0]
 801258a:	4854      	ldr	r0, [pc, #336]	; (80126dc <_printf_i+0x244>)
 801258c:	2f6f      	cmp	r7, #111	; 0x6f
 801258e:	bf0c      	ite	eq
 8012590:	2308      	moveq	r3, #8
 8012592:	230a      	movne	r3, #10
 8012594:	2100      	movs	r1, #0
 8012596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801259a:	6865      	ldr	r5, [r4, #4]
 801259c:	60a5      	str	r5, [r4, #8]
 801259e:	2d00      	cmp	r5, #0
 80125a0:	bfa2      	ittt	ge
 80125a2:	6821      	ldrge	r1, [r4, #0]
 80125a4:	f021 0104 	bicge.w	r1, r1, #4
 80125a8:	6021      	strge	r1, [r4, #0]
 80125aa:	b90e      	cbnz	r6, 80125b0 <_printf_i+0x118>
 80125ac:	2d00      	cmp	r5, #0
 80125ae:	d04d      	beq.n	801264c <_printf_i+0x1b4>
 80125b0:	4615      	mov	r5, r2
 80125b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80125b6:	fb03 6711 	mls	r7, r3, r1, r6
 80125ba:	5dc7      	ldrb	r7, [r0, r7]
 80125bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80125c0:	4637      	mov	r7, r6
 80125c2:	42bb      	cmp	r3, r7
 80125c4:	460e      	mov	r6, r1
 80125c6:	d9f4      	bls.n	80125b2 <_printf_i+0x11a>
 80125c8:	2b08      	cmp	r3, #8
 80125ca:	d10b      	bne.n	80125e4 <_printf_i+0x14c>
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	07de      	lsls	r6, r3, #31
 80125d0:	d508      	bpl.n	80125e4 <_printf_i+0x14c>
 80125d2:	6923      	ldr	r3, [r4, #16]
 80125d4:	6861      	ldr	r1, [r4, #4]
 80125d6:	4299      	cmp	r1, r3
 80125d8:	bfde      	ittt	le
 80125da:	2330      	movle	r3, #48	; 0x30
 80125dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80125e4:	1b52      	subs	r2, r2, r5
 80125e6:	6122      	str	r2, [r4, #16]
 80125e8:	f8cd a000 	str.w	sl, [sp]
 80125ec:	464b      	mov	r3, r9
 80125ee:	aa03      	add	r2, sp, #12
 80125f0:	4621      	mov	r1, r4
 80125f2:	4640      	mov	r0, r8
 80125f4:	f7ff fee2 	bl	80123bc <_printf_common>
 80125f8:	3001      	adds	r0, #1
 80125fa:	d14c      	bne.n	8012696 <_printf_i+0x1fe>
 80125fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012600:	b004      	add	sp, #16
 8012602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012606:	4835      	ldr	r0, [pc, #212]	; (80126dc <_printf_i+0x244>)
 8012608:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801260c:	6829      	ldr	r1, [r5, #0]
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	f851 6b04 	ldr.w	r6, [r1], #4
 8012614:	6029      	str	r1, [r5, #0]
 8012616:	061d      	lsls	r5, r3, #24
 8012618:	d514      	bpl.n	8012644 <_printf_i+0x1ac>
 801261a:	07df      	lsls	r7, r3, #31
 801261c:	bf44      	itt	mi
 801261e:	f043 0320 	orrmi.w	r3, r3, #32
 8012622:	6023      	strmi	r3, [r4, #0]
 8012624:	b91e      	cbnz	r6, 801262e <_printf_i+0x196>
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	f023 0320 	bic.w	r3, r3, #32
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	2310      	movs	r3, #16
 8012630:	e7b0      	b.n	8012594 <_printf_i+0xfc>
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	f043 0320 	orr.w	r3, r3, #32
 8012638:	6023      	str	r3, [r4, #0]
 801263a:	2378      	movs	r3, #120	; 0x78
 801263c:	4828      	ldr	r0, [pc, #160]	; (80126e0 <_printf_i+0x248>)
 801263e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012642:	e7e3      	b.n	801260c <_printf_i+0x174>
 8012644:	0659      	lsls	r1, r3, #25
 8012646:	bf48      	it	mi
 8012648:	b2b6      	uxthmi	r6, r6
 801264a:	e7e6      	b.n	801261a <_printf_i+0x182>
 801264c:	4615      	mov	r5, r2
 801264e:	e7bb      	b.n	80125c8 <_printf_i+0x130>
 8012650:	682b      	ldr	r3, [r5, #0]
 8012652:	6826      	ldr	r6, [r4, #0]
 8012654:	6961      	ldr	r1, [r4, #20]
 8012656:	1d18      	adds	r0, r3, #4
 8012658:	6028      	str	r0, [r5, #0]
 801265a:	0635      	lsls	r5, r6, #24
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	d501      	bpl.n	8012664 <_printf_i+0x1cc>
 8012660:	6019      	str	r1, [r3, #0]
 8012662:	e002      	b.n	801266a <_printf_i+0x1d2>
 8012664:	0670      	lsls	r0, r6, #25
 8012666:	d5fb      	bpl.n	8012660 <_printf_i+0x1c8>
 8012668:	8019      	strh	r1, [r3, #0]
 801266a:	2300      	movs	r3, #0
 801266c:	6123      	str	r3, [r4, #16]
 801266e:	4615      	mov	r5, r2
 8012670:	e7ba      	b.n	80125e8 <_printf_i+0x150>
 8012672:	682b      	ldr	r3, [r5, #0]
 8012674:	1d1a      	adds	r2, r3, #4
 8012676:	602a      	str	r2, [r5, #0]
 8012678:	681d      	ldr	r5, [r3, #0]
 801267a:	6862      	ldr	r2, [r4, #4]
 801267c:	2100      	movs	r1, #0
 801267e:	4628      	mov	r0, r5
 8012680:	f7ed fdc6 	bl	8000210 <memchr>
 8012684:	b108      	cbz	r0, 801268a <_printf_i+0x1f2>
 8012686:	1b40      	subs	r0, r0, r5
 8012688:	6060      	str	r0, [r4, #4]
 801268a:	6863      	ldr	r3, [r4, #4]
 801268c:	6123      	str	r3, [r4, #16]
 801268e:	2300      	movs	r3, #0
 8012690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012694:	e7a8      	b.n	80125e8 <_printf_i+0x150>
 8012696:	6923      	ldr	r3, [r4, #16]
 8012698:	462a      	mov	r2, r5
 801269a:	4649      	mov	r1, r9
 801269c:	4640      	mov	r0, r8
 801269e:	47d0      	blx	sl
 80126a0:	3001      	adds	r0, #1
 80126a2:	d0ab      	beq.n	80125fc <_printf_i+0x164>
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	079b      	lsls	r3, r3, #30
 80126a8:	d413      	bmi.n	80126d2 <_printf_i+0x23a>
 80126aa:	68e0      	ldr	r0, [r4, #12]
 80126ac:	9b03      	ldr	r3, [sp, #12]
 80126ae:	4298      	cmp	r0, r3
 80126b0:	bfb8      	it	lt
 80126b2:	4618      	movlt	r0, r3
 80126b4:	e7a4      	b.n	8012600 <_printf_i+0x168>
 80126b6:	2301      	movs	r3, #1
 80126b8:	4632      	mov	r2, r6
 80126ba:	4649      	mov	r1, r9
 80126bc:	4640      	mov	r0, r8
 80126be:	47d0      	blx	sl
 80126c0:	3001      	adds	r0, #1
 80126c2:	d09b      	beq.n	80125fc <_printf_i+0x164>
 80126c4:	3501      	adds	r5, #1
 80126c6:	68e3      	ldr	r3, [r4, #12]
 80126c8:	9903      	ldr	r1, [sp, #12]
 80126ca:	1a5b      	subs	r3, r3, r1
 80126cc:	42ab      	cmp	r3, r5
 80126ce:	dcf2      	bgt.n	80126b6 <_printf_i+0x21e>
 80126d0:	e7eb      	b.n	80126aa <_printf_i+0x212>
 80126d2:	2500      	movs	r5, #0
 80126d4:	f104 0619 	add.w	r6, r4, #25
 80126d8:	e7f5      	b.n	80126c6 <_printf_i+0x22e>
 80126da:	bf00      	nop
 80126dc:	08013c31 	.word	0x08013c31
 80126e0:	08013c42 	.word	0x08013c42

080126e4 <__sread>:
 80126e4:	b510      	push	{r4, lr}
 80126e6:	460c      	mov	r4, r1
 80126e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ec:	f000 f8b6 	bl	801285c <_read_r>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	bfab      	itete	ge
 80126f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80126f6:	89a3      	ldrhlt	r3, [r4, #12]
 80126f8:	181b      	addge	r3, r3, r0
 80126fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80126fe:	bfac      	ite	ge
 8012700:	6563      	strge	r3, [r4, #84]	; 0x54
 8012702:	81a3      	strhlt	r3, [r4, #12]
 8012704:	bd10      	pop	{r4, pc}

08012706 <__swrite>:
 8012706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801270a:	461f      	mov	r7, r3
 801270c:	898b      	ldrh	r3, [r1, #12]
 801270e:	05db      	lsls	r3, r3, #23
 8012710:	4605      	mov	r5, r0
 8012712:	460c      	mov	r4, r1
 8012714:	4616      	mov	r6, r2
 8012716:	d505      	bpl.n	8012724 <__swrite+0x1e>
 8012718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801271c:	2302      	movs	r3, #2
 801271e:	2200      	movs	r2, #0
 8012720:	f000 f868 	bl	80127f4 <_lseek_r>
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801272e:	81a3      	strh	r3, [r4, #12]
 8012730:	4632      	mov	r2, r6
 8012732:	463b      	mov	r3, r7
 8012734:	4628      	mov	r0, r5
 8012736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801273a:	f000 b817 	b.w	801276c <_write_r>

0801273e <__sseek>:
 801273e:	b510      	push	{r4, lr}
 8012740:	460c      	mov	r4, r1
 8012742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012746:	f000 f855 	bl	80127f4 <_lseek_r>
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	bf15      	itete	ne
 8012750:	6560      	strne	r0, [r4, #84]	; 0x54
 8012752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801275a:	81a3      	strheq	r3, [r4, #12]
 801275c:	bf18      	it	ne
 801275e:	81a3      	strhne	r3, [r4, #12]
 8012760:	bd10      	pop	{r4, pc}

08012762 <__sclose>:
 8012762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012766:	f000 b813 	b.w	8012790 <_close_r>
	...

0801276c <_write_r>:
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	4d07      	ldr	r5, [pc, #28]	; (801278c <_write_r+0x20>)
 8012770:	4604      	mov	r4, r0
 8012772:	4608      	mov	r0, r1
 8012774:	4611      	mov	r1, r2
 8012776:	2200      	movs	r2, #0
 8012778:	602a      	str	r2, [r5, #0]
 801277a:	461a      	mov	r2, r3
 801277c:	f7f1 f856 	bl	800382c <_write>
 8012780:	1c43      	adds	r3, r0, #1
 8012782:	d102      	bne.n	801278a <_write_r+0x1e>
 8012784:	682b      	ldr	r3, [r5, #0]
 8012786:	b103      	cbz	r3, 801278a <_write_r+0x1e>
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	bd38      	pop	{r3, r4, r5, pc}
 801278c:	2000a63c 	.word	0x2000a63c

08012790 <_close_r>:
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	4d06      	ldr	r5, [pc, #24]	; (80127ac <_close_r+0x1c>)
 8012794:	2300      	movs	r3, #0
 8012796:	4604      	mov	r4, r0
 8012798:	4608      	mov	r0, r1
 801279a:	602b      	str	r3, [r5, #0]
 801279c:	f7f2 fc61 	bl	8005062 <_close>
 80127a0:	1c43      	adds	r3, r0, #1
 80127a2:	d102      	bne.n	80127aa <_close_r+0x1a>
 80127a4:	682b      	ldr	r3, [r5, #0]
 80127a6:	b103      	cbz	r3, 80127aa <_close_r+0x1a>
 80127a8:	6023      	str	r3, [r4, #0]
 80127aa:	bd38      	pop	{r3, r4, r5, pc}
 80127ac:	2000a63c 	.word	0x2000a63c

080127b0 <_fstat_r>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4d07      	ldr	r5, [pc, #28]	; (80127d0 <_fstat_r+0x20>)
 80127b4:	2300      	movs	r3, #0
 80127b6:	4604      	mov	r4, r0
 80127b8:	4608      	mov	r0, r1
 80127ba:	4611      	mov	r1, r2
 80127bc:	602b      	str	r3, [r5, #0]
 80127be:	f7f2 fc5c 	bl	800507a <_fstat>
 80127c2:	1c43      	adds	r3, r0, #1
 80127c4:	d102      	bne.n	80127cc <_fstat_r+0x1c>
 80127c6:	682b      	ldr	r3, [r5, #0]
 80127c8:	b103      	cbz	r3, 80127cc <_fstat_r+0x1c>
 80127ca:	6023      	str	r3, [r4, #0]
 80127cc:	bd38      	pop	{r3, r4, r5, pc}
 80127ce:	bf00      	nop
 80127d0:	2000a63c 	.word	0x2000a63c

080127d4 <_isatty_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4d06      	ldr	r5, [pc, #24]	; (80127f0 <_isatty_r+0x1c>)
 80127d8:	2300      	movs	r3, #0
 80127da:	4604      	mov	r4, r0
 80127dc:	4608      	mov	r0, r1
 80127de:	602b      	str	r3, [r5, #0]
 80127e0:	f7f2 fc5b 	bl	800509a <_isatty>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	d102      	bne.n	80127ee <_isatty_r+0x1a>
 80127e8:	682b      	ldr	r3, [r5, #0]
 80127ea:	b103      	cbz	r3, 80127ee <_isatty_r+0x1a>
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	bd38      	pop	{r3, r4, r5, pc}
 80127f0:	2000a63c 	.word	0x2000a63c

080127f4 <_lseek_r>:
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	4d07      	ldr	r5, [pc, #28]	; (8012814 <_lseek_r+0x20>)
 80127f8:	4604      	mov	r4, r0
 80127fa:	4608      	mov	r0, r1
 80127fc:	4611      	mov	r1, r2
 80127fe:	2200      	movs	r2, #0
 8012800:	602a      	str	r2, [r5, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	f7f2 fc54 	bl	80050b0 <_lseek>
 8012808:	1c43      	adds	r3, r0, #1
 801280a:	d102      	bne.n	8012812 <_lseek_r+0x1e>
 801280c:	682b      	ldr	r3, [r5, #0]
 801280e:	b103      	cbz	r3, 8012812 <_lseek_r+0x1e>
 8012810:	6023      	str	r3, [r4, #0]
 8012812:	bd38      	pop	{r3, r4, r5, pc}
 8012814:	2000a63c 	.word	0x2000a63c

08012818 <memmove>:
 8012818:	4288      	cmp	r0, r1
 801281a:	b510      	push	{r4, lr}
 801281c:	eb01 0402 	add.w	r4, r1, r2
 8012820:	d902      	bls.n	8012828 <memmove+0x10>
 8012822:	4284      	cmp	r4, r0
 8012824:	4623      	mov	r3, r4
 8012826:	d807      	bhi.n	8012838 <memmove+0x20>
 8012828:	1e43      	subs	r3, r0, #1
 801282a:	42a1      	cmp	r1, r4
 801282c:	d008      	beq.n	8012840 <memmove+0x28>
 801282e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012836:	e7f8      	b.n	801282a <memmove+0x12>
 8012838:	4402      	add	r2, r0
 801283a:	4601      	mov	r1, r0
 801283c:	428a      	cmp	r2, r1
 801283e:	d100      	bne.n	8012842 <memmove+0x2a>
 8012840:	bd10      	pop	{r4, pc}
 8012842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801284a:	e7f7      	b.n	801283c <memmove+0x24>

0801284c <_malloc_usable_size_r>:
 801284c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012850:	1f18      	subs	r0, r3, #4
 8012852:	2b00      	cmp	r3, #0
 8012854:	bfbc      	itt	lt
 8012856:	580b      	ldrlt	r3, [r1, r0]
 8012858:	18c0      	addlt	r0, r0, r3
 801285a:	4770      	bx	lr

0801285c <_read_r>:
 801285c:	b538      	push	{r3, r4, r5, lr}
 801285e:	4d07      	ldr	r5, [pc, #28]	; (801287c <_read_r+0x20>)
 8012860:	4604      	mov	r4, r0
 8012862:	4608      	mov	r0, r1
 8012864:	4611      	mov	r1, r2
 8012866:	2200      	movs	r2, #0
 8012868:	602a      	str	r2, [r5, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	f7f2 fbdc 	bl	8005028 <_read>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d102      	bne.n	801287a <_read_r+0x1e>
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	b103      	cbz	r3, 801287a <_read_r+0x1e>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	2000a63c 	.word	0x2000a63c

08012880 <_init>:
 8012880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012882:	bf00      	nop
 8012884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012886:	bc08      	pop	{r3}
 8012888:	469e      	mov	lr, r3
 801288a:	4770      	bx	lr

0801288c <_fini>:
 801288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288e:	bf00      	nop
 8012890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012892:	bc08      	pop	{r3}
 8012894:	469e      	mov	lr, r3
 8012896:	4770      	bx	lr
