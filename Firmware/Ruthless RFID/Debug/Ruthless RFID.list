
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800f580  0800f580  0001f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbe4  0800fbe4  0002067c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbe4  0800fbe4  0001fbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbec  0800fbec  0002067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbec  0800fbec  0001fbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbf0  0800fbf0  0001fbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  0800fbf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000067c  08010270  0002067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c24  08010270  00026c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027295  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005833  00000000  00000000  00047941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0004d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  0004f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb95  00000000  00000000  000510b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269a5  00000000  00000000  0006dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec16  00000000  00000000  000945f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e18  00000000  00000000  00133258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000067c 	.word	0x2000067c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f568 	.word	0x0800f568

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000680 	.word	0x20000680
 80001dc:	0800f568 	.word	0x0800f568

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 f87e 	bl	80036c0 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000698 	.word	0x20000698

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 f959 	bl	80038b4 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000698 	.word	0x20000698

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f003 f83b 	bl	80036c0 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fc33 	bl	8002ec0 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000698 	.word	0x20000698

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 f907 	bl	80038b4 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fc05 	bl	8002ec0 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000698 	.word	0x20000698

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fb95 	bl	8002ec0 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fe0f 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fe0a 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fb65 	bl	8002ec0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fe02 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fb5d 	bl	8002ec0 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 fb07 	bl	8002ec0 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00e f96f 	bl	800ec44 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00e f91c 	bl	800ec44 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 fa23 	bl	8002ec0 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f002 fa18 	bl	8002ec0 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f002 fa11 	bl	8002ec0 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f002 fa08 	bl	8002ec0 <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	2330      	movs	r3, #48	; 0x30
 8000afe:	733b      	strb	r3, [r7, #12]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe22 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	3302      	adds	r3, #2
 8000b1a:	893a      	ldrh	r2, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b1e:	f107 000c 	add.w	r0, r7, #12
 8000b22:	2300      	movs	r3, #0
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2310      	movs	r3, #16
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f7ff fe86 	bl	800083c <MFRC_TRANSCEIVE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2bcc      	cmp	r3, #204	; 0xcc
 8000b34:	d001      	beq.n	8000b3a <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 8000b36:	23aa      	movs	r3, #170	; 0xaa
 8000b38:	e000      	b.n	8000b3c <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 8000b3a:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4619      	mov	r1, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffca 	bl	8000aec <UL_READ>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b5c:	d001      	beq.n	8000b62 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b5e:	23aa      	movs	r3, #170	; 0xaa
 8000b60:	e007      	b.n	8000b72 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2207      	movs	r2, #7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f00e f86a 	bl	800ec44 <memcpy>
	return PCD_OK;
 8000b70:	23cc      	movs	r3, #204	; 0xcc
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e010      	b.n	8000baa <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffac 	bl	8000aec <UL_READ>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2bcc      	cmp	r3, #204	; 0xcc
 8000b98:	d001      	beq.n	8000b9e <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8000b9a:	23aa      	movs	r3, #170	; 0xaa
 8000b9c:	e009      	b.n	8000bb2 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	ddeb      	ble.n	8000b88 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8000bb0:	23cc      	movs	r3, #204	; 0xcc
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f00e f82d 	bl	800ec24 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60fb      	str	r3, [r7, #12]
	uint8_t* contents = malloc(UL_MEMSIZE);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f00e f828 	bl	800ec24 <malloc>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60bb      	str	r3, [r7, #8]

	result->type = "MIFARE Ultralight";
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <UL_readcard+0x7c>)
 8000bdc:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <UL_readcard+0x80>)
 8000be2:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2207      	movs	r2, #7
 8000be8:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 8000bf6:	f7ff ff29 	bl	8000a4c <PICC_Select>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2bcc      	cmp	r3, #204	; 0xcc
 8000bfe:	d001      	beq.n	8000c04 <UL_readcard+0x48>
		return PCD_NO_PICC;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e014      	b.n	8000c2e <UL_readcard+0x72>
	}
	if ((UL_getuid(uid) != PCD_OK) || (UL_getalldata(contents) !=  PCD_OK)) {
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff9d 	bl	8000b44 <UL_getuid>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2bcc      	cmp	r3, #204	; 0xcc
 8000c0e:	d105      	bne.n	8000c1c <UL_readcard+0x60>
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff ffb2 	bl	8000b7a <UL_getalldata>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2bcc      	cmp	r3, #204	; 0xcc
 8000c1a:	d001      	beq.n	8000c20 <UL_readcard+0x64>
		return PCD_COMM_ERR;
 8000c1c:	23aa      	movs	r3, #170	; 0xaa
 8000c1e:	e006      	b.n	8000c2e <UL_readcard+0x72>
	}
	result->uid = uid;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
	result->contents = contents;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000c2c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800f5e0 	.word	0x0800f5e0
 8000c3c:	0800f5f4 	.word	0x0800f5f4

08000c40 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	3301      	adds	r3, #1
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00d ffe6 	bl	800ec24 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e023      	b.n	8000caa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d80d      	bhi.n	8000c8a <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1898      	adds	r0, r3, r2
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4912      	ldr	r1, [pc, #72]	; (8000ccc <uid_tostring+0x8c>)
 8000c84:	f00e f8e4 	bl	800ee50 <siprintf>
 8000c88:	e00c      	b.n	8000ca4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1898      	adds	r0, r3, r2
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <uid_tostring+0x90>)
 8000ca0:	f00e f8d6 	bl	800ee50 <siprintf>
	for (int i = 0; i < size; i++) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbd7      	blt.n	8000c62 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	return result;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800f5fc 	.word	0x0800f5fc
 8000cd0:	0800f600 	.word	0x0800f600

08000cd4 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000cda:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000cdc:	463b      	mov	r3, r7
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00d ffbb 	bl	800ec60 <memset>
	OLED_FLUSH(zeros);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f87b 	bl	8000de8 <OLED_FLUSH>

}
 8000cf2:	bf00      	nop
 8000cf4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <OLED_cmd+0x68>)
 8000d10:	f002 fb78 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <OLED_cmd+0x6c>)
 8000d1a:	f002 fb73 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000d1e:	f107 010f 	add.w	r1, r7, #15
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2201      	movs	r2, #1
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <OLED_cmd+0x70>)
 8000d2a:	f005 fafe 	bl	800632a <HAL_SPI_Transmit>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <OLED_cmd+0x68>)
 8000d3a:	f002 fb63 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 f8be 	bl	8002ec0 <HAL_Delay>
		return(HAL_ERROR);
 8000d44:	2301      	movs	r3, #1
 8000d46:	e008      	b.n	8000d5a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <OLED_cmd+0x68>)
 8000d4e:	f002 fb59 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f002 f8b4 	bl	8002ec0 <HAL_Delay>
		return(HAL_OK);
 8000d58:	2300      	movs	r3, #0
	}

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	200006ec 	.word	0x200006ec

08000d70 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <OLED_data+0x6c>)
 8000d82:	f002 fb3f 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <OLED_data+0x70>)
 8000d8c:	f002 fb3a 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <OLED_data+0x74>)
 8000d9c:	f005 fac5 	bl	800632a <HAL_SPI_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <OLED_data+0x70>)
 8000dac:	f002 fb2a 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <OLED_data+0x6c>)
 8000db6:	f002 fb25 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00a      	b.n	8000dd4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <OLED_data+0x70>)
 8000dc4:	f002 fb1e 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <OLED_data+0x6c>)
 8000dce:	f002 fb19 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000dd2:	2300      	movs	r3, #0
	}



}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	200006ec 	.word	0x200006ec

08000de8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e023      	b.n	8000e3e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b50      	subs	r3, #80	; 0x50
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ff79 	bl	8000cfc <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000e0a:	2010      	movs	r0, #16
 8000e0c:	f7ff ff76 	bl	8000cfc <OLED_cmd>
		for(int i=0;i<128;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	e00d      	b.n	8000e32 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	01da      	lsls	r2, r3, #7
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffa2 	bl	8000d70 <OLED_data>
		for(int i=0;i<128;i++){
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	ddee      	ble.n	8000e16 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	ddd8      	ble.n	8000df6 <OLED_FLUSH+0xe>
		}


	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	482f      	ldr	r0, [pc, #188]	; (8000f18 <OLED_INIT+0xc8>)
 8000e5c:	f002 fad2 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2108      	movs	r1, #8
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <OLED_INIT+0xc8>)
 8000e66:	f002 facd 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	482b      	ldr	r0, [pc, #172]	; (8000f1c <OLED_INIT+0xcc>)
 8000e70:	f002 fac8 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f002 f823 	bl	8002ec0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <OLED_INIT+0xc8>)
 8000e80:	f002 fac0 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f002 f81b 	bl	8002ec0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <OLED_INIT+0xc8>)
 8000e90:	f002 fab8 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f002 f813 	bl	8002ec0 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <OLED_INIT+0xd0>)
 8000e9c:	463c      	mov	r4, r7
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea8:	c403      	stmia	r4!, {r0, r1}
 8000eaa:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	e00c      	b.n	8000ecc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff1e 	bl	8000cfc <OLED_cmd>
		HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f001 fffd 	bl	8002ec0 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b18      	cmp	r3, #24
 8000ed0:	ddef      	ble.n	8000eb2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ed2:	20a7      	movs	r0, #167	; 0xa7
 8000ed4:	f7ff ff12 	bl	8000cfc <OLED_cmd>
	OLED_FLUSH(HVE);
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <OLED_INIT+0xd4>)
 8000eda:	f7ff ff85 	bl	8000de8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000ede:	20af      	movs	r0, #175	; 0xaf
 8000ee0:	f7ff ff0c 	bl	8000cfc <OLED_cmd>
	HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f001 ffea 	bl	8002ec0 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000eec:	20ae      	movs	r0, #174	; 0xae
 8000eee:	f7ff ff05 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f001 ffe4 	bl	8002ec0 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000ef8:	20a6      	movs	r0, #166	; 0xa6
 8000efa:	f7ff feff 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f001 ffde 	bl	8002ec0 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000f04:	20af      	movs	r0, #175	; 0xaf
 8000f06:	f7ff fef9 	bl	8000cfc <OLED_cmd>
	OLED_Clear();
 8000f0a:	f7ff fee3 	bl	8000cd4 <OLED_Clear>
	return HAL_OK;
 8000f0e:	2300      	movs	r3, #0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	0800f604 	.word	0x0800f604
 8000f24:	20000000 	.word	0x20000000

08000f28 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000f34:	2005      	movs	r0, #5
 8000f36:	f00d fe75 	bl	800ec24 <malloc>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e013      	b.n	8000f6c <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f1a3 0220 	sub.w	r2, r3, #32
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <OLED_InvChar+0x64>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	18ca      	adds	r2, r1, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	440b      	add	r3, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	dde8      	ble.n	8000f44 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f72:	2205      	movs	r2, #5
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f00d fe64 	bl	800ec44 <memcpy>
	free(temp);
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f00d fe59 	bl	800ec34 <free>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800f7e4 	.word	0x0800f7e4

08000f90 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	4613      	mov	r3, r2
 8000fac:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3b50      	subs	r3, #80	; 0x50
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fea1 	bl	8000cfc <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe9a 	bl	8000cfc <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe91 	bl	8000cfc <OLED_cmd>
	uint8_t* data=malloc(6);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f00d fe22 	bl	800ec24 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	f1a3 0220 	sub.w	r2, r3, #32
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <OLED_drawChar+0xa0>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f00d fe20 	bl	800ec44 <memcpy>
 8001004:	e004      	b.n	8001010 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff8c 	bl	8000f28 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3305      	adds	r3, #5
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001018:	2106      	movs	r1, #6
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fea8 	bl	8000d70 <OLED_data>
	free(data);
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f00d fe07 	bl	800ec34 <free>
	}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800f7e4 	.word	0x0800f7e4

08001034 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e014      	b.n	800107a <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b2d9      	uxtb	r1, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	79f8      	ldrb	r0, [r7, #7]
 8001070:	f7ff ff8e 	bl	8000f90 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8e3      	bhi.n	8001050 <OLED_Printlin+0x1c>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	6039      	str	r1, [r7, #0]
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4613      	mov	r3, r2
 80010a0:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f7ff f89c 	bl	80001e0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	0fda      	lsrs	r2, r3, #31
 80010b0:	4413      	add	r3, r2
 80010b2:	105b      	asrs	r3, r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	b2d9      	uxtb	r1, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	79f8      	ldrb	r0, [r7, #7]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	f7ff ffb1 	bl	8001034 <OLED_Printlin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b094      	sub	sp, #80	; 0x50
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80010e2:	2320      	movs	r3, #32
 80010e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
 80010fc:	e018      	b.n	8001130 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b20      	cmp	r3, #32
 800110e:	d10b      	bne.n	8001128 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
	                i++;
 8001120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001122:	3301      	adds	r3, #1
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001126:	e000      	b.n	800112a <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001128:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800112a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112c:	3301      	adds	r3, #1
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	2b15      	cmp	r3, #21
 8001134:	dde3      	ble.n	80010fe <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d102      	bne.n	8001148 <OLED_Print+0x6e>
	            last_ind++;
 8001142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001144:	3301      	adds	r3, #1
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f846 	bl	80001e0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	2b15      	cmp	r3, #21
 8001158:	d828      	bhi.n	80011ac <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800115a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f83d 	bl	80001e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800116a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	18d1      	adds	r1, r2, r3
 8001170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f00d fe92 	bl	800eea0 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 800117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117e:	f107 0220 	add.w	r2, r7, #32
 8001182:	18d0      	adds	r0, r2, r3
 8001184:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118a:	f1c3 0315 	rsb	r3, r3, #21
 800118e:	461a      	mov	r2, r3
 8001190:	f00d fd66 	bl	800ec60 <memset>
	            thisline[21]=' ';
 8001194:	2320      	movs	r3, #32
 8001196:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	f107 0220 	add.w	r2, r7, #32
 80011a2:	2300      	movs	r3, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	f7ff ff45 	bl	8001034 <OLED_Printlin>




	    }
}
 80011aa:	e05e      	b.n	800126a <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80011ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ae:	3314      	adds	r3, #20
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d03a      	beq.n	8001230 <OLED_Print+0x156>
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	3315      	adds	r3, #21
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d033      	beq.n	8001230 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	18d1      	adds	r1, r2, r3
 80011ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d0:	3b01      	subs	r3, #1
 80011d2:	3350      	adds	r3, #80	; 0x50
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011da:	461a      	mov	r2, r3
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fe5d 	bl	800eea0 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80011e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e8:	3b01      	subs	r3, #1
 80011ea:	3350      	adds	r3, #80	; 0x50
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	1898      	adds	r0, r3, r2
 80011fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001200:	3b01      	subs	r3, #1
 8001202:	3350      	adds	r3, #80	; 0x50
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800120a:	f1c3 0315 	rsb	r3, r3, #21
 800120e:	461a      	mov	r2, r3
 8001210:	f00d fd26 	bl	800ec60 <memset>
	            thisline[21]=' ';
 8001214:	2320      	movs	r3, #32
 8001216:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800121a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121c:	3b01      	subs	r3, #1
 800121e:	3350      	adds	r3, #80	; 0x50
 8001220:	443b      	add	r3, r7
 8001222:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001226:	461a      	mov	r2, r3
 8001228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122a:	4413      	add	r3, r2
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
 800122e:	e00e      	b.n	800124e <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d1      	adds	r1, r2, r3
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2215      	movs	r2, #21
 800123c:	4618      	mov	r0, r3
 800123e:	f00d fe2f 	bl	800eea0 <strncpy>
	            thisline[21]=' ';
 8001242:	2320      	movs	r3, #32
 8001244:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800124a:	3315      	adds	r3, #21
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	f107 0220 	add.w	r2, r7, #32
 800125a:	2300      	movs	r3, #0
 800125c:	2102      	movs	r1, #2
 800125e:	f7ff fee9 	bl	8001034 <OLED_Printlin>
	        line++;
 8001262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001264:	3301      	adds	r3, #1
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001268:	e746      	b.n	80010f8 <OLED_Print+0x1e>
}
 800126a:	3750      	adds	r7, #80	; 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 800127c:	f7ff fd2a 	bl	8000cd4 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff01 	bl	8001092 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e01a      	b.n	80012cc <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	7859      	ldrb	r1, [r3, #1]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	f7ff feb7 	bl	8001034 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbde      	blt.n	8001296 <OLED_SCREEN+0x26>
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	460b      	mov	r3, r1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	3302      	adds	r3, #2
 8001312:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	7818      	ldrb	r0, [r3, #0]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	2300      	movs	r3, #0
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	f7ff fe84 	bl	8001034 <OLED_Printlin>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001342:	4a46      	ldr	r2, [pc, #280]	; (800145c <OLED_SELECT+0x128>)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	8019      	strh	r1, [r3, #0]
 800134e:	3302      	adds	r3, #2
 8001350:	0c12      	lsrs	r2, r2, #16
 8001352:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

	    if(selopt==0){
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d124      	bne.n	80013a4 <OLED_SELECT+0x70>
	        prevpage=screen->seldata[screen->selsize-1][0];
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001366:	3b01      	subs	r3, #1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800137c:	3b01      	subs	r3, #1
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	773b      	strb	r3, [r7, #28]
 80013a2:	e021      	b.n	80013e8 <OLED_SELECT+0xb4>
	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013ae:	3b01      	subs	r3, #1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	773b      	strb	r3, [r7, #28]

	    }
	    if(restore==OLED_RESTORE){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d122      	bne.n	8001434 <OLED_SELECT+0x100>
	    	if (selopt == 0) {
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d110      	bne.n	8001416 <OLED_SELECT+0xe2>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	689c      	ldr	r4, [r3, #8]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4619      	mov	r1, r3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f857 	bl	80014b8 <find_restore_string>
 800140a:	4603      	mov	r3, r0
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4423      	add	r3, r4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	e010      	b.n	8001438 <OLED_SELECT+0x104>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	689c      	ldr	r4, [r3, #8]
 800141a:	7afb      	ldrb	r3, [r7, #11]
 800141c:	3b01      	subs	r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f848 	bl	80014b8 <find_restore_string>
 8001428:	4603      	mov	r3, r0
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4423      	add	r3, r4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e001      	b.n	8001438 <OLED_SELECT+0x104>
	    	}
	    } else {
	    	rest = "  ";
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <OLED_SELECT+0x12c>)
 8001436:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001438:	7fb9      	ldrb	r1, [r7, #30]
 800143a:	7ff8      	ldrb	r0, [r7, #31]
 800143c:	2300      	movs	r3, #0
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	f7ff fdf8 	bl	8001034 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001444:	f107 0214 	add.w	r2, r7, #20
 8001448:	7f39      	ldrb	r1, [r7, #28]
 800144a:	7f78      	ldrb	r0, [r7, #29]
 800144c:	2300      	movs	r3, #0
 800144e:	f7ff fdf1 	bl	8001034 <OLED_Printlin>

}
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	0800f624 	.word	0x0800f624
 8001460:	0800f620 	.word	0x0800f620

08001464 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001470:	f001 f9aa 	bl	80027c8 <get_number_files>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <OLED_display_files+0x1a>
		return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e018      	b.n	80014b0 <OLED_display_files+0x4c>
	}
	char** file_names = malloc(get_number_files() * sizeof(char*));
 800147e:	f001 f9a3 	bl	80027c8 <get_number_files>
 8001482:	4603      	mov	r3, r0
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f00d fbcc 	bl	800ec24 <malloc>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f001 f9ba 	bl	800280a <get_all_files>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <OLED_display_files+0x3c>
		return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e007      	b.n	80014b0 <OLED_display_files+0x4c>
	}

	OLED_SCRNREF(screen, 1, file_names[0]);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	2101      	movs	r1, #1
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff1a 	bl	80012e2 <OLED_SCRNREF>
	return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	e021      	b.n	800150e <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6919      	ldr	r1, [r3, #16]
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d110      	bne.n	8001508 <find_restore_string+0x50>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	785a      	ldrb	r2, [r3, #1]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d102      	bne.n	8001508 <find_restore_string+0x50>
			index_of_string = i;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	73fb      	strb	r3, [r7, #15]
			break;
 8001506:	e007      	b.n	8001518 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3301      	adds	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbd8      	blt.n	80014ca <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001532:	230f      	movs	r3, #15
 8001534:	733b      	strb	r3, [r7, #12]
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	737b      	strb	r3, [r7, #13]
 800153a:	2300      	movs	r3, #0
 800153c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <STAT_READ+0x54>)
 8001546:	f001 ff5d 	bl	8003404 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800154a:	bf00      	nop
 800154c:	f107 0208 	add.w	r2, r7, #8
 8001550:	f107 010c 	add.w	r1, r7, #12
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2303      	movs	r3, #3
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <STAT_READ+0x58>)
 800155c:	f005 f821 	bl	80065a2 <HAL_SPI_TransmitReceive>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f2      	bne.n	800154c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <STAT_READ+0x54>)
 800156e:	f001 ff49 	bl	8003404 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 8001572:	7abb      	ldrb	r3, [r7, #10]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020000 	.word	0x40020000
 8001580:	20000744 	.word	0x20000744

08001584 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	460a      	mov	r2, r1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8001594:	231f      	movs	r3, #31
 8001596:	733b      	strb	r3, [r7, #12]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	737b      	strb	r3, [r7, #13]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <STAT_WRITE+0x4c>)
 80015a8:	f001 ff2c 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015ac:	f107 010c 	add.w	r1, r7, #12
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	2203      	movs	r2, #3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <STAT_WRITE+0x50>)
 80015b6:	f004 feb8 	bl	800632a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <STAT_WRITE+0x4c>)
 80015c2:	f001 ff1f 	bl	8003404 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40020000 	.word	0x40020000
 80015d4:	20000744 	.word	0x20000744

080015d8 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80015de:	2306      	movs	r3, #6
 80015e0:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80015e2:	f000 f825 	bl	8001630 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80015e6:	e011      	b.n	800160c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <WRIT_EN+0x50>)
 80015f0:	f001 ff08 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80015f4:	1df9      	adds	r1, r7, #7
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	2201      	movs	r2, #1
 80015fa:	480c      	ldr	r0, [pc, #48]	; (800162c <WRIT_EN+0x54>)
 80015fc:	f004 fe95 	bl	800632a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <WRIT_EN+0x50>)
 8001608:	f001 fefc 	bl	8003404 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800160c:	20c0      	movs	r0, #192	; 0xc0
 800160e:	f7ff ff8b 	bl	8001528 <STAT_READ>
 8001612:	4603      	mov	r3, r0
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b02      	cmp	r3, #2
 800161a:	d1e5      	bne.n	80015e8 <WRIT_EN+0x10>
	}


}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40020000 	.word	0x40020000
 800162c:	20000744 	.word	0x20000744

08001630 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001636:	2304      	movs	r3, #4
 8001638:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800163a:	e011      	b.n	8001660 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <WRITE_DIS+0x4c>)
 8001644:	f001 fede 	bl	8003404 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001648:	1df9      	adds	r1, r7, #7
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2201      	movs	r2, #1
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <WRITE_DIS+0x50>)
 8001650:	f004 fe6b 	bl	800632a <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165a:	4808      	ldr	r0, [pc, #32]	; (800167c <WRITE_DIS+0x4c>)
 800165c:	f001 fed2 	bl	8003404 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001660:	20c0      	movs	r0, #192	; 0xc0
 8001662:	f7ff ff61 	bl	8001528 <STAT_READ>
 8001666:	4603      	mov	r3, r0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d0e5      	beq.n	800163c <WRITE_DIS+0xc>
		}
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020000 	.word	0x40020000
 8001680:	20000744 	.word	0x20000744

08001684 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8001694:	23d8      	movs	r3, #216	; 0xd8
 8001696:	723b      	strb	r3, [r7, #8]
 8001698:	2300      	movs	r3, #0
 800169a:	727b      	strb	r3, [r7, #9]
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	72bb      	strb	r3, [r7, #10]
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80016ac:	f7ff ff94 	bl	80015d8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <block_erase+0x70>)
 80016b8:	f001 fea4 	bl	8003404 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	2204      	movs	r2, #4
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <block_erase+0x74>)
 80016c6:	f004 fe30 	bl	800632a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <block_erase+0x70>)
 80016d2:	f001 fe97 	bl	8003404 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80016d6:	bf00      	nop
 80016d8:	20c0      	movs	r0, #192	; 0xc0
 80016da:	f7ff ff25 	bl	8001528 <STAT_READ>
 80016de:	4603      	mov	r3, r0
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d0f7      	beq.n	80016d8 <block_erase+0x54>
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020000 	.word	0x40020000
 80016f8:	20000744 	.word	0x20000744

080016fc <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	480a      	ldr	r0, [pc, #40]	; (8001730 <MEM_INIT+0x34>)
 8001708:	f001 fe7c 	bl	8003404 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 800170c:	2100      	movs	r1, #0
 800170e:	20a0      	movs	r0, #160	; 0xa0
 8001710:	f7ff ff38 	bl	8001584 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001714:	20a0      	movs	r0, #160	; 0xa0
 8001716:	f7ff ff07 	bl	8001528 <STAT_READ>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MEM_INIT+0x28>
		return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e002      	b.n	800172a <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001724:	f7ff ff84 	bl	8001630 <WRITE_DIS>
	return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020000 	.word	0x40020000

08001734 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4603      	mov	r3, r0
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	460b      	mov	r3, r1
 8001744:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3303      	adds	r3, #3
 800174a:	4618      	mov	r0, r3
 800174c:	f00d fa6a 	bl	800ec24 <malloc>
 8001750:	4603      	mov	r3, r0
 8001752:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001754:	2310      	movs	r3, #16
 8001756:	743b      	strb	r3, [r7, #16]
 8001758:	2300      	movs	r3, #0
 800175a:	747b      	strb	r3, [r7, #17]
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	74bb      	strb	r3, [r7, #18]
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001772:	89bb      	ldrh	r3, [r7, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3302      	adds	r3, #2
 8001784:	89ba      	ldrh	r2, [r7, #12]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3303      	adds	r3, #3
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	4618      	mov	r0, r3
 8001794:	f00d fa56 	bl	800ec44 <memcpy>

	WRIT_EN();
 8001798:	f7ff ff1e 	bl	80015d8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a2:	482a      	ldr	r0, [pc, #168]	; (800184c <MEM_WRITE+0x118>)
 80017a4:	f001 fe2e 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3303      	adds	r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2364      	movs	r3, #100	; 0x64
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	4826      	ldr	r0, [pc, #152]	; (8001850 <MEM_WRITE+0x11c>)
 80017b6:	f004 fdb8 	bl	800632a <HAL_SPI_Transmit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <MEM_WRITE+0x9c>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	4821      	ldr	r0, [pc, #132]	; (800184c <MEM_WRITE+0x118>)
 80017c8:	f001 fe1c 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80017cc:	2301      	movs	r3, #1
 80017ce:	e039      	b.n	8001844 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d6:	481d      	ldr	r0, [pc, #116]	; (800184c <MEM_WRITE+0x118>)
 80017d8:	f001 fe14 	bl	8003404 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80017dc:	bf00      	nop
 80017de:	20c0      	movs	r0, #192	; 0xc0
 80017e0:	f7ff fea2 	bl	8001528 <STAT_READ>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d0f7      	beq.n	80017de <MEM_WRITE+0xaa>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	4815      	ldr	r0, [pc, #84]	; (800184c <MEM_WRITE+0x118>)
 80017f6:	f001 fe05 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80017fa:	f107 0110 	add.w	r1, r7, #16
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	2204      	movs	r2, #4
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <MEM_WRITE+0x11c>)
 8001804:	f004 fd91 	bl	800632a <HAL_SPI_Transmit>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <MEM_WRITE+0xea>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MEM_WRITE+0x118>)
 8001816:	f001 fdf5 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800181a:	2301      	movs	r3, #1
 800181c:	e012      	b.n	8001844 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <MEM_WRITE+0x118>)
 8001826:	f001 fded 	bl	8003404 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800182a:	bf00      	nop
 800182c:	20c0      	movs	r0, #192	; 0xc0
 800182e:	f7ff fe7b 	bl	8001528 <STAT_READ>
 8001832:	4603      	mov	r3, r0
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d0f7      	beq.n	800182c <MEM_WRITE+0xf8>
	free(setup);
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f00d f9f9 	bl	800ec34 <free>
	return(HAL_OK);
 8001842:	2300      	movs	r3, #0

}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40020000 	.word	0x40020000
 8001850:	20000744 	.word	0x20000744

08001854 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af02      	add	r7, sp, #8
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4603      	mov	r3, r0
 8001860:	81fb      	strh	r3, [r7, #14]
 8001862:	460b      	mov	r3, r1
 8001864:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001866:	2313      	movs	r3, #19
 8001868:	753b      	strb	r3, [r7, #20]
 800186a:	2300      	movs	r3, #0
 800186c:	757b      	strb	r3, [r7, #21]
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	75bb      	strb	r3, [r7, #22]
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 800187e:	2304      	movs	r3, #4
 8001880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001884:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00d f9c9 	bl	800ec24 <malloc>
 8001892:	4603      	mov	r3, r0
 8001894:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8001896:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f00d f9c0 	bl	800ec24 <malloc>
 80018a4:	4603      	mov	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80018a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	69f8      	ldr	r0, [r7, #28]
 80018b6:	f00d f9d3 	bl	800ec60 <memset>
	read_command[0]=READ_BUF;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2203      	movs	r2, #3
 80018be:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80018c0:	89bb      	ldrh	r3, [r7, #12]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3302      	adds	r3, #2
 80018d2:	89ba      	ldrh	r2, [r7, #12]
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	3303      	adds	r3, #3
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	483c      	ldr	r0, [pc, #240]	; (80019d8 <MEM_READPAGE+0x184>)
 80018e8:	f001 fd8c 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80018ec:	f107 0114 	add.w	r1, r7, #20
 80018f0:	2364      	movs	r3, #100	; 0x64
 80018f2:	2204      	movs	r2, #4
 80018f4:	4839      	ldr	r0, [pc, #228]	; (80019dc <MEM_READPAGE+0x188>)
 80018f6:	f004 fd18 	bl	800632a <HAL_SPI_Transmit>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <MEM_READPAGE+0xbc>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001906:	4834      	ldr	r0, [pc, #208]	; (80019d8 <MEM_READPAGE+0x184>)
 8001908:	f001 fd7c 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800190c:	2301      	movs	r3, #1
 800190e:	e05e      	b.n	80019ce <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	4830      	ldr	r0, [pc, #192]	; (80019d8 <MEM_READPAGE+0x184>)
 8001918:	f001 fd74 	bl	8003404 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 800191c:	bf00      	nop
 800191e:	20c0      	movs	r0, #192	; 0xc0
 8001920:	f7ff fe02 	bl	8001528 <STAT_READ>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d0f7      	beq.n	800191e <MEM_READPAGE+0xca>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	4828      	ldr	r0, [pc, #160]	; (80019d8 <MEM_READPAGE+0x184>)
 8001936:	f001 fd65 	bl	8003404 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 800193a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800193e:	b29a      	uxth	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	2264      	movs	r2, #100	; 0x64
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	69f9      	ldr	r1, [r7, #28]
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <MEM_READPAGE+0x188>)
 8001952:	f004 fe26 	bl	80065a2 <HAL_SPI_TransmitReceive>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <MEM_READPAGE+0x118>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001962:	481d      	ldr	r0, [pc, #116]	; (80019d8 <MEM_READPAGE+0x184>)
 8001964:	f001 fd4e 	bl	8003404 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001968:	2301      	movs	r3, #1
 800196a:	e030      	b.n	80019ce <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001972:	4819      	ldr	r0, [pc, #100]	; (80019d8 <MEM_READPAGE+0x184>)
 8001974:	f001 fd46 	bl	8003404 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001978:	bf00      	nop
 800197a:	20c0      	movs	r0, #192	; 0xc0
 800197c:	f7ff fdd4 	bl	8001528 <STAT_READ>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d0f7      	beq.n	800197a <MEM_READPAGE+0x126>

	if (bytes == 1) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d104      	bne.n	800199a <MEM_READPAGE+0x146>
		*data = rec_data[4];
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	791a      	ldrb	r2, [r3, #4]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e012      	b.n	80019c0 <MEM_READPAGE+0x16c>
	} else {
		for(int i = 0; i < bytes; i++){
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	e00b      	b.n	80019b8 <MEM_READPAGE+0x164>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3304      	adds	r3, #4
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	441a      	add	r2, r3
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	440b      	add	r3, r1
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	3301      	adds	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8ef      	bhi.n	80019a0 <MEM_READPAGE+0x14c>
		}
	}
	free(read_command);
 80019c0:	69f8      	ldr	r0, [r7, #28]
 80019c2:	f00d f937 	bl	800ec34 <free>
	free(rec_data);
 80019c6:	69b8      	ldr	r0, [r7, #24]
 80019c8:	f00d f934 	bl	800ec34 <free>
	return(HAL_OK);
 80019cc:	2300      	movs	r3, #0

}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020000 	.word	0x40020000
 80019dc:	20000744 	.word	0x20000744

080019e0 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019e4:	2108      	movs	r1, #8
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <BUZZ+0x20>)
 80019e8:	f005 f9d6 	bl	8006d98 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80019ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f0:	f001 fa66 	bl	8002ec0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80019f4:	2108      	movs	r1, #8
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <BUZZ+0x20>)
 80019f8:	f005 fa7e 	bl	8006ef8 <HAL_TIM_PWM_Stop>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000079c 	.word	0x2000079c

08001a04 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a12:	2102      	movs	r1, #2
 8001a14:	4820      	ldr	r0, [pc, #128]	; (8001a98 <choose+0x94>)
 8001a16:	f001 fcdd 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d136      	bne.n	8001a8e <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <choose+0x98>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a28:	e012      	b.n	8001a50 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001a2a:	481c      	ldr	r0, [pc, #112]	; (8001a9c <choose+0x98>)
 8001a2c:	f005 f876 	bl	8006b1c <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <choose+0x98>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d108      	bne.n	8001a50 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001a3e:	4817      	ldr	r0, [pc, #92]	; (8001a9c <choose+0x98>)
 8001a40:	f005 f8c6 	bl	8006bd0 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	e01e      	b.n	8001a8e <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a50:	2102      	movs	r1, #2
 8001a52:	4811      	ldr	r0, [pc, #68]	; (8001a98 <choose+0x94>)
 8001a54:	f001 fcbe 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0e5      	beq.n	8001a2a <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d102      	bne.n	8001a78 <choose+0x74>
	 	    	*count = 0;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4619      	mov	r1, r3
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff fc56 	bl	8001334 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <choose+0x98>)
 8001a8a:	f005 f8a1 	bl	8006bd0 <HAL_TIM_Base_Stop>
	 	}
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	200007e4 	.word	0x200007e4

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa4:	f001 f9ca 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa8:	f000 f872 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aac:	f000 fa3a 	bl	8001f24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ab0:	f000 f8d8 	bl	8001c64 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ab4:	f000 f904 	bl	8001cc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ab8:	f000 f93a 	bl	8001d30 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001abc:	f000 f96e 	bl	8001d9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ac0:	f000 f9e2 	bl	8001e88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ac4:	f009 fc98 	bl	800b3f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <main+0xa0>)
 8001aca:	2104      	movs	r1, #4
 8001acc:	2001      	movs	r0, #1
 8001ace:	f009 fd8b 	bl	800b5e8 <osMessageQueueNew>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <main+0xa4>)
 8001ad6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <main+0xa8>)
 8001ada:	2100      	movs	r1, #0
 8001adc:	481b      	ldr	r0, [pc, #108]	; (8001b4c <main+0xac>)
 8001ade:	f009 fcd5 	bl	800b48c <osThreadNew>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <main+0xb0>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <main+0xb4>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	481a      	ldr	r0, [pc, #104]	; (8001b58 <main+0xb8>)
 8001aee:	f009 fccd 	bl	800b48c <osThreadNew>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <main+0xbc>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <main+0xc0>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4819      	ldr	r0, [pc, #100]	; (8001b64 <main+0xc4>)
 8001afe:	f009 fcc5 	bl	800b48c <osThreadNew>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <main+0xc8>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <main+0xcc>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4818      	ldr	r0, [pc, #96]	; (8001b70 <main+0xd0>)
 8001b0e:	f009 fcbd 	bl	800b48c <osThreadNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <main+0xd4>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <main+0xd8>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4817      	ldr	r0, [pc, #92]	; (8001b7c <main+0xdc>)
 8001b1e:	f009 fcb5 	bl	800b48c <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <main+0xe0>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <main+0xe4>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4816      	ldr	r0, [pc, #88]	; (8001b88 <main+0xe8>)
 8001b2e:	f009 fcad 	bl	800b48c <osThreadNew>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <main+0xec>)
 8001b36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b38:	f009 fc82 	bl	800b440 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <main+0x9c>
 8001b3e:	bf00      	nop
 8001b40:	0800fa9c 	.word	0x0800fa9c
 8001b44:	20000844 	.word	0x20000844
 8001b48:	0800f9c4 	.word	0x0800f9c4
 8001b4c:	0800200d 	.word	0x0800200d
 8001b50:	2000082c 	.word	0x2000082c
 8001b54:	0800f9e8 	.word	0x0800f9e8
 8001b58:	080020ad 	.word	0x080020ad
 8001b5c:	20000830 	.word	0x20000830
 8001b60:	0800fa0c 	.word	0x0800fa0c
 8001b64:	08002131 	.word	0x08002131
 8001b68:	20000834 	.word	0x20000834
 8001b6c:	0800fa30 	.word	0x0800fa30
 8001b70:	0800215d 	.word	0x0800215d
 8001b74:	20000838 	.word	0x20000838
 8001b78:	0800fa54 	.word	0x0800fa54
 8001b7c:	08002201 	.word	0x08002201
 8001b80:	2000083c 	.word	0x2000083c
 8001b84:	0800fa78 	.word	0x0800fa78
 8001b88:	080022d1 	.word	0x080022d1
 8001b8c:	20000840 	.word	0x20000840

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	2230      	movs	r2, #48	; 0x30
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00d f85e 	bl	800ec60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <SystemClock_Config+0xd0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c04:	2308      	movs	r3, #8
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c08:	23a8      	movs	r3, #168	; 0xa8
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c10:	2307      	movs	r3, #7
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fe49 	bl	80058b0 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c24:	f000 fbbe 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 f8ab 	bl	8005da0 <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c50:	f000 fba8 	bl	80023a4 <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <MX_I2C1_Init+0x54>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x58>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001ca2:	f001 fbc9 	bl	8003438 <HAL_I2C_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cac:	f000 fb7a 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000698 	.word	0x20000698
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	000186a0 	.word	0x000186a0

08001cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <MX_SPI1_Init+0x6c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cd8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cf6:	2218      	movs	r2, #24
 8001cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001d0e:	220a      	movs	r2, #10
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_SPI1_Init+0x68>)
 8001d14:	f004 fa80 	bl	8006218 <HAL_SPI_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d1e:	f000 fb41 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200006ec 	.word	0x200006ec
 8001d2c:	40013000 	.word	0x40013000

08001d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <MX_SPI2_Init+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d7c:	220a      	movs	r2, #10
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_SPI2_Init+0x64>)
 8001d82:	f004 fa49 	bl	8006218 <HAL_SPI_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d8c:	f000 fb0a 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000744 	.word	0x20000744
 8001d98:	40003800 	.word	0x40003800

08001d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dd6:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001de4:	2231      	movs	r2, #49	; 0x31
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df4:	4823      	ldr	r0, [pc, #140]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001df6:	f004 fe41 	bl	8006a7c <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e00:	f000 fad0 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e12:	f005 fa9f 	bl	8007354 <HAL_TIM_ConfigClockSource>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e1c:	f000 fac2 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e20:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e22:	f004 ff5f 	bl	8006ce4 <HAL_TIM_PWM_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e2c:	f000 faba 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e40:	f005 fe44 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e4a:	f000 faab 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4e:	2360      	movs	r3, #96	; 0x60
 8001e50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001e52:	2318      	movs	r3, #24
 8001e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2208      	movs	r2, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e66:	f005 f9b3 	bl	80071d0 <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e70:	f000 fa98 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM2_Init+0xe8>)
 8001e76:	f000 fe91 	bl	8002b9c <HAL_TIM_MspPostInit>

}
 8001e7a:	bf00      	nop
 8001e7c:	3738      	adds	r7, #56	; 0x38
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000079c 	.word	0x2000079c

08001e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <MX_TIM3_Init+0x98>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001eac:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001eb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001ece:	f004 fdd5 	bl	8006a7c <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ed8:	f000 fa64 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001eea:	f005 fa33 	bl	8007354 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ef4:	f000 fa56 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM3_Init+0x94>)
 8001f06:	f005 fde1 	bl	8007acc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f000 fa48 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200007e4 	.word	0x200007e4
 8001f20:	40000400 	.word	0x40000400

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_GPIO_Init+0xdc>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f94:	481b      	ldr	r0, [pc, #108]	; (8002004 <MX_GPIO_Init+0xe0>)
 8001f96:	f001 fa35 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2122      	movs	r1, #34	; 0x22
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <MX_GPIO_Init+0xe4>)
 8001fa0:	f001 fa30 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <MX_GPIO_Init+0xe0>)
 8001fb8:	f001 f888 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001fbc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <MX_GPIO_Init+0xe0>)
 8001fd6:	f001 f879 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001fda:	2322      	movs	r3, #34	; 0x22
 8001fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_GPIO_Init+0xe4>)
 8001ff2:	f001 f86b 	bl	80030cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400

0800200c <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002014:	f00c f8f2 	bl	800e1fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <Start_Init+0x84>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f00a fb3b 	bl	800c698 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <Start_Init+0x88>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f00a fb36 	bl	800c698 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <Start_Init+0x8c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f00a fb31 	bl	800c698 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <Start_Init+0x90>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f00a fb2c 	bl	800c698 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <Start_Init+0x94>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f00a fb27 	bl	800c698 <vTaskSuspend>

    MFRC_INIT();
 800204a:	f7fe fbc5 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 800204e:	f7fe fb7b 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8002052:	f7fe fefd 	bl	8000e50 <OLED_INIT>
    OLED_Print(TC);
 8002056:	4813      	ldr	r0, [pc, #76]	; (80020a4 <Start_Init+0x98>)
 8002058:	f7ff f83f 	bl	80010da <OLED_Print>
    MEM_INIT();
 800205c:	f7ff fb4e 	bl	80016fc <MEM_INIT>
    block_erase(0x0000);
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff fb0f 	bl	8001684 <block_erase>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002066:	bf00      	nop
 8002068:	2102      	movs	r1, #2
 800206a:	480f      	ldr	r0, [pc, #60]	; (80020a8 <Start_Init+0x9c>)
 800206c:	f001 f9b2 	bl	80033d4 <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f8      	bne.n	8002068 <Start_Init+0x5c>
    vTaskResume(HomeHandle);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <Start_Init+0x8c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f00a fbb4 	bl	800c7e8 <vTaskResume>
    osDelay(10);
 8002080:	200a      	movs	r0, #10
 8002082:	f009 fa96 	bl	800b5b2 <osDelay>
    vTaskSuspend(NULL);
 8002086:	2000      	movs	r0, #0
 8002088:	f00a fb06 	bl	800c698 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 800208c:	e7c4      	b.n	8002018 <Start_Init+0xc>
 800208e:	bf00      	nop
 8002090:	20000830 	.word	0x20000830
 8002094:	20000834 	.word	0x20000834
 8002098:	20000838 	.word	0x20000838
 800209c:	2000083c 	.word	0x2000083c
 80020a0:	20000840 	.word	0x20000840
 80020a4:	20000400 	.word	0x20000400
 80020a8:	40020000 	.word	0x40020000

080020ac <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 80020b4:	201c      	movs	r0, #28
 80020b6:	f00c fdb5 	bl	800ec24 <malloc>
 80020ba:	4603      	mov	r3, r0
 80020bc:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 80020c6:	f7fe fb05 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 80020d0:	2100      	movs	r1, #0
 80020d2:	4814      	ldr	r0, [pc, #80]	; (8002124 <StartReadCard+0x78>)
 80020d4:	f7ff f8cc 	bl	8001270 <OLED_SCREEN>
		ranonce++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fd6b 	bl	8000bbc <UL_readcard>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2bcc      	cmp	r3, #204	; 0xcc
 80020ea:	d10d      	bne.n	8002108 <StartReadCard+0x5c>
			BUZZ();
 80020ec:	f7ff fc78 	bl	80019e0 <BUZZ>
			MFRC_ANTOFF();
 80020f0:	f7fe fb2a 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <StartReadCard+0x7c>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f107 010c 	add.w	r1, r7, #12
 80020fc:	2300      	movs	r3, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	f009 fd0c 	bl	800bb1c <xQueueGenericSend>
			suspend = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d1d9      	bne.n	80020c2 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <StartReadCard+0x80>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f00a fb68 	bl	800c7e8 <vTaskResume>
		ranonce = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 800211c:	2000      	movs	r0, #0
 800211e:	f00a fabb 	bl	800c698 <vTaskSuspend>
  {
 8002122:	e7ce      	b.n	80020c2 <StartReadCard+0x16>
 8002124:	0800fb34 	.word	0x0800fb34
 8002128:	20000844 	.word	0x20000844
 800212c:	2000083c 	.word	0x2000083c

08002130 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002142:	2100      	movs	r1, #0
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <StartWriteCard+0x28>)
 8002146:	f7ff f893 	bl	8001270 <OLED_SCREEN>
	  	ranonce++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8002150:	2001      	movs	r0, #1
 8002152:	f009 fa2e 	bl	800b5b2 <osDelay>
	  if (ranonce == 0){
 8002156:	e7f1      	b.n	800213c <StartWriteCard+0xc>
 8002158:	0800fb5c 	.word	0x0800fb5c

0800215c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002176:	2100      	movs	r1, #0
 8002178:	481d      	ldr	r0, [pc, #116]	; (80021f0 <StartHome+0x94>)
 800217a:	f7ff f879 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	481a      	ldr	r0, [pc, #104]	; (80021f0 <StartHome+0x94>)
 8002188:	f7ff f8d4 	bl	8001334 <OLED_SELECT>
		  ranonce++;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8002192:	f107 0210 	add.w	r2, r7, #16
 8002196:	f107 010c 	add.w	r1, r7, #12
 800219a:	2301      	movs	r3, #1
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2306      	movs	r3, #6
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <StartHome+0x94>)
 80021a2:	f7ff fc2f 	bl	8001a04 <choose>
	  if (suspend == 1) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d1df      	bne.n	800216c <StartHome+0x10>
		switch(count) {
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d012      	beq.n	80021d8 <StartHome+0x7c>
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d816      	bhi.n	80021e4 <StartHome+0x88>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <StartHome+0x64>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d006      	beq.n	80021cc <StartHome+0x70>
 80021be:	e011      	b.n	80021e4 <StartHome+0x88>
			case 0:
				vTaskResume(ReadCardHandle);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <StartHome+0x98>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00a fb0f 	bl	800c7e8 <vTaskResume>
				break;
 80021ca:	e00b      	b.n	80021e4 <StartHome+0x88>
			case 1:
				vTaskResume(WriteCardHandle);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <StartHome+0x9c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00a fb09 	bl	800c7e8 <vTaskResume>
				break;
 80021d6:	e005      	b.n	80021e4 <StartHome+0x88>
			case 2:
				vTaskResume(ShowFilesHandle);
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <StartHome+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f00a fb03 	bl	800c7e8 <vTaskResume>
				break;
 80021e2:	bf00      	nop
		}
		ranonce = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f00a fa55 	bl	800c698 <vTaskSuspend>
  {
 80021ee:	e7bd      	b.n	800216c <StartHome+0x10>
 80021f0:	0800fb20 	.word	0x0800fb20
 80021f4:	20000830 	.word	0x20000830
 80021f8:	20000834 	.word	0x20000834
 80021fc:	20000840 	.word	0x20000840

08002200 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
	 int ranonce = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d131      	bne.n	800227e <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 800221a:	bf00      	nop
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <CardFoundStart+0xc4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f107 0110 	add.w	r1, r7, #16
 8002224:	2200      	movs	r2, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f009 fe12 	bl	800be50 <xQueueReceive>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d1f4      	bne.n	800221c <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fcff 	bl	8000c40 <uid_tostring>
 8002242:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8002244:	2100      	movs	r1, #0
 8002246:	4820      	ldr	r0, [pc, #128]	; (80022c8 <CardFoundStart+0xc8>)
 8002248:	f7ff f812 	bl	8001270 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, UID_LOC, uid_str);
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	2101      	movs	r1, #1
 8002250:	481d      	ldr	r0, [pc, #116]	; (80022c8 <CardFoundStart+0xc8>)
 8002252:	f7ff f846 	bl	80012e2 <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, CARDTYPE_LOC, read_card->type);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	461a      	mov	r2, r3
 800225c:	2102      	movs	r1, #2
 800225e:	481a      	ldr	r0, [pc, #104]	; (80022c8 <CardFoundStart+0xc8>)
 8002260:	f7ff f83f 	bl	80012e2 <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4816      	ldr	r0, [pc, #88]	; (80022c8 <CardFoundStart+0xc8>)
 800226e:	f7ff f861 	bl	8001334 <OLED_SELECT>
		ranonce++;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8002278:	69b8      	ldr	r0, [r7, #24]
 800227a:	f00c fcdb 	bl	800ec34 <free>
	}

	choose(&SCRN_CardFound, &suspend, &count, 2, OLED_NORESTORE);
 800227e:	f107 0214 	add.w	r2, r7, #20
 8002282:	f107 010c 	add.w	r1, r7, #12
 8002286:	2300      	movs	r3, #0
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2302      	movs	r3, #2
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <CardFoundStart+0xc8>)
 800228e:	f7ff fbb9 	bl	8001a04 <choose>
 	if (suspend == 1) {
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d1bb      	bne.n	8002210 <CardFoundStart+0x10>
 		vTaskResume(HomeHandle);
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <CardFoundStart+0xcc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f00a faa3 	bl	800c7e8 <vTaskResume>
 		if (count == 0) {
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <CardFoundStart+0xb2>
 			enter_card(read_card, 0);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f87e 	bl	80023ae <enter_card>
 		}
 		ranonce = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 		count = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 		vTaskSuspend(NULL);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f00a f9ec 	bl	800c698 <vTaskSuspend>
  {
 80022c0:	e7a6      	b.n	8002210 <CardFoundStart+0x10>
 80022c2:	bf00      	nop
 80022c4:	20000844 	.word	0x20000844
 80022c8:	0800fb48 	.word	0x0800fb48
 80022cc:	20000838 	.word	0x20000838

080022d0 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
  int count = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  int ranonce = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <StartShowFiles+0x3a>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 80022ea:	2100      	movs	r1, #0
 80022ec:	4821      	ldr	r0, [pc, #132]	; (8002374 <StartShowFiles+0xa4>)
 80022ee:	f7fe ffbf 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2100      	movs	r1, #0
 80022f6:	481f      	ldr	r0, [pc, #124]	; (8002374 <StartShowFiles+0xa4>)
 80022f8:	f7ff f81c 	bl	8001334 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 80022fc:	2100      	movs	r1, #0
 80022fe:	481d      	ldr	r0, [pc, #116]	; (8002374 <StartShowFiles+0xa4>)
 8002300:	f7ff f8b0 	bl	8001464 <OLED_display_files>
		  ranonce++;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_ShowFiles, &suspend, &count, 4, OLED_RESTORE);
 800230a:	f107 0210 	add.w	r2, r7, #16
 800230e:	f107 010c 	add.w	r1, r7, #12
 8002312:	2301      	movs	r3, #1
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2304      	movs	r3, #4
 8002318:	4816      	ldr	r0, [pc, #88]	; (8002374 <StartShowFiles+0xa4>)
 800231a:	f7ff fb73 	bl	8001a04 <choose>
	  if (suspend == 1) {
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d1dd      	bne.n	80022e0 <StartShowFiles+0x10>
		  if (count == 3) {
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d10b      	bne.n	8002342 <StartShowFiles+0x72>
			  vTaskResume(HomeHandle);
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <StartShowFiles+0xa8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f00a fa5a 	bl	800c7e8 <vTaskResume>
			  count = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
			  ranonce = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
			  vTaskSuspend(NULL);
 800233c:	2000      	movs	r0, #0
 800233e:	f00a f9ab 	bl	800c698 <vTaskSuspend>
		  }
		  if (count == 0) {
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1cb      	bne.n	80022e0 <StartShowFiles+0x10>
			  OLED_SCREEN(&SCRN_FileData, NORMAL);
 8002348:	2100      	movs	r1, #0
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <StartShowFiles+0xac>)
 800234c:	f7fe ff90 	bl	8001270 <OLED_SCREEN>
			  OLED_SCRNREF(&SCRN_FileData, 0, get_file_name(count));
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f000 facb 	bl	80028f0 <get_file_name>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <StartShowFiles+0xac>)
 8002362:	f7fe ffbe 	bl	80012e2 <OLED_SCRNREF>
			  OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	4804      	ldr	r0, [pc, #16]	; (800237c <StartShowFiles+0xac>)
 800236c:	f7fe ffe2 	bl	8001334 <OLED_SELECT>
  {
 8002370:	e7b6      	b.n	80022e0 <StartShowFiles+0x10>
 8002372:	bf00      	nop
 8002374:	0800fb70 	.word	0x0800fb70
 8002378:	20000838 	.word	0x20000838
 800237c:	0800fb84 	.word	0x0800fb84

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002392:	f000 fd75 	bl	8002e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40000c00 	.word	0x40000c00

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	e7fe      	b.n	80023ac <Error_Handler+0x8>

080023ae <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 80023ae:	b5b0      	push	{r4, r5, r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	019b      	lsls	r3, r3, #6
 80023be:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f95e 	bl	8001684 <block_erase>
	enter_metadata(card, entry);
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f83f 	bl	8002450 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	3301      	adds	r3, #1
 80023d6:	b29c      	uxth	r4, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689d      	ldr	r5, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd fefd 	bl	80001e0 <strlen>
 80023e6:	4603      	mov	r3, r0
 80023e8:	462a      	mov	r2, r5
 80023ea:	2100      	movs	r1, #0
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7ff f9a1 	bl	8001734 <MEM_WRITE>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 80023f8:	2304      	movs	r3, #4
 80023fa:	e025      	b.n	8002448 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	3301      	adds	r3, #1
 8002400:	b29c      	uxth	r4, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd feea 	bl	80001e0 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	b299      	uxth	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff f98b 	bl	8001734 <MEM_WRITE>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 8002424:	2304      	movs	r3, #4
 8002426:	e00f      	b.n	8002448 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	3302      	adds	r3, #2
 800242c:	b298      	uxth	r0, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8b1b      	ldrh	r3, [r3, #24]
 8002436:	2100      	movs	r1, #0
 8002438:	f7ff f97c 	bl	8001734 <MEM_WRITE>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <enter_card+0x98>
		return RFS_WRITE_ERROR;
 8002442:	2304      	movs	r3, #4
 8002444:	e000      	b.n	8002448 <enter_card+0x9a>
	}

	return RFS_OK;
 8002446:	2300      	movs	r3, #0

}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bdb0      	pop	{r4, r5, r7, pc}

08002450 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8b1b      	ldrh	r3, [r3, #24]
 8002460:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7c1b      	ldrb	r3, [r3, #16]
 8002466:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	791b      	ldrb	r3, [r3, #4]
 800246c:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd feb4 	bl	80001e0 <strlen>
 8002478:	4603      	mov	r3, r0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3303      	adds	r3, #3
 800247e:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f00c fbce 	bl	800ec24 <malloc>
 8002488:	4603      	mov	r3, r0
 800248a:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68dc      	ldr	r4, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd fea3 	bl	80001e0 <strlen>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	68b8      	ldr	r0, [r7, #8]
 80024a2:	f00c fbcf 	bl	800ec44 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe98 	bl	80001e0 <strlen>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	3301      	adds	r3, #1
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4413      	add	r3, r2
 80024cc:	7b7a      	ldrb	r2, [r7, #13]
 80024ce:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fe83 	bl	80001e0 <strlen>
 80024da:	4603      	mov	r3, r0
 80024dc:	3302      	adds	r3, #2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4413      	add	r3, r2
 80024e2:	7bba      	ldrb	r2, [r7, #14]
 80024e4:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	b298      	uxth	r0, r3
 80024ec:	7b3b      	ldrb	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	2100      	movs	r1, #0
 80024f2:	f7ff f91f 	bl	8001734 <MEM_WRITE>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <enter_metadata+0xb6>
		free(metadata);
 80024fc:	68b8      	ldr	r0, [r7, #8]
 80024fe:	f00c fb99 	bl	800ec34 <free>
		return RFS_WRITE_ERROR;
 8002502:	2304      	movs	r3, #4
 8002504:	e003      	b.n	800250e <enter_metadata+0xbe>
	}
	free(metadata);
 8002506:	68b8      	ldr	r0, [r7, #8]
 8002508:	f00c fb94 	bl	800ec34 <free>
	return RFS_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8002520:	201c      	movs	r0, #28
 8002522:	f00c fb7f 	bl	800ec24 <malloc>
 8002526:	4603      	mov	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	4619      	mov	r1, r3
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f81e 	bl	8002570 <read_metadata>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <read_card_entry+0x28>
		return NULL;
 800253a:	2300      	movs	r3, #0
 800253c:	e014      	b.n	8002568 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f881 	bl	800264a <read_nameuid>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <read_card_entry+0x3c>
		return NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	e00a      	b.n	8002568 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4619      	mov	r1, r3
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f8e2 	bl	8002720 <read_cardcontents>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <read_card_entry+0x50>
		return NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <read_card_entry+0x52>
	}

	return result;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f8f5 	bl	8002770 <get_datasize>
 8002586:	4603      	mov	r3, r0
 8002588:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 800258a:	8afb      	ldrh	r3, [r7, #22]
 800258c:	4618      	mov	r0, r3
 800258e:	f00c fb49 	bl	800ec24 <malloc>
 8002592:	4603      	mov	r3, r0
 8002594:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8002596:	8afb      	ldrh	r3, [r7, #22]
 8002598:	3b02      	subs	r3, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f00c fb42 	bl	800ec24 <malloc>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	b298      	uxth	r0, r3
 80025aa:	8afb      	ldrh	r3, [r7, #22]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	2100      	movs	r1, #0
 80025b0:	f7ff f950 	bl	8001854 <MEM_READPAGE>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <read_metadata+0x54>
		free(metadata);
 80025ba:	6938      	ldr	r0, [r7, #16]
 80025bc:	f00c fb3a 	bl	800ec34 <free>
		return RFS_READ_ERROR;
 80025c0:	2305      	movs	r3, #5
 80025c2:	e03e      	b.n	8002642 <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	d104      	bne.n	80025d6 <read_metadata+0x66>
		free(metadata);
 80025cc:	6938      	ldr	r0, [r7, #16]
 80025ce:	f00c fb31 	bl	800ec34 <free>
		return RFS_NO_CARD;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e035      	b.n	8002642 <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 80025d6:	8afb      	ldrh	r3, [r7, #22]
 80025d8:	3b03      	subs	r3, #3
 80025da:	461a      	mov	r2, r3
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f00c fb30 	bl	800ec44 <memcpy>
	type[metadata_size - 3] = '\0';
 80025e4:	8afb      	ldrh	r3, [r7, #22]
 80025e6:	3b03      	subs	r3, #3
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80025f6:	8afb      	ldrh	r3, [r7, #22]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 8002606:	8afb      	ldrh	r3, [r7, #22]
 8002608:	3b02      	subs	r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8002614:	8afb      	ldrh	r3, [r7, #22]
 8002616:	3b01      	subs	r3, #1
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d104      	bne.n	800262c <read_metadata+0xbc>
		free(metadata);
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f00c fb06 	bl	800ec34 <free>
		return RFS_CARD_PROTECTED;
 8002628:	2303      	movs	r3, #3
 800262a:	e00a      	b.n	8002642 <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	3b01      	subs	r3, #1
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	741a      	strb	r2, [r3, #16]
	free(metadata);
 800263a:	6938      	ldr	r0, [r7, #16]
 800263c:	f00c fafa 	bl	800ec34 <free>

	return RFS_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f888 	bl	8002770 <get_datasize>
 8002660:	4603      	mov	r3, r0
 8002662:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8002664:	8afb      	ldrh	r3, [r7, #22]
 8002666:	4618      	mov	r0, r3
 8002668:	f00c fadc 	bl	800ec24 <malloc>
 800266c:	4603      	mov	r3, r0
 800266e:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8002670:	8afb      	ldrh	r3, [r7, #22]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	7912      	ldrb	r2, [r2, #4]
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	3301      	adds	r3, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f00c fad2 	bl	800ec24 <malloc>
 8002680:	4603      	mov	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	4618      	mov	r0, r3
 800268a:	f00c facb 	bl	800ec24 <malloc>
 800268e:	4603      	mov	r3, r0
 8002690:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	b29b      	uxth	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	b298      	uxth	r0, r3
 800269c:	8afb      	ldrh	r3, [r7, #22]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	2100      	movs	r1, #0
 80026a2:	f7ff f8d7 	bl	8001854 <MEM_READPAGE>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <read_nameuid+0x6c>
		free(raw_data);
 80026ac:	6938      	ldr	r0, [r7, #16]
 80026ae:	f00c fac1 	bl	800ec34 <free>
		return RFS_READ_ERROR;
 80026b2:	2305      	movs	r3, #5
 80026b4:	e030      	b.n	8002718 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d104      	bne.n	80026c8 <read_nameuid+0x7e>
		free(raw_data);
 80026be:	6938      	ldr	r0, [r7, #16]
 80026c0:	f00c fab8 	bl	800ec34 <free>
		return RFS_NO_CARD;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e027      	b.n	8002718 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 80026c8:	8afb      	ldrh	r3, [r7, #22]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	7912      	ldrb	r2, [r2, #4]
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f00c fab5 	bl	800ec44 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80026da:	8afb      	ldrh	r3, [r7, #22]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	7912      	ldrb	r2, [r2, #4]
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd fd74 	bl	80001e0 <strlen>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1899      	adds	r1, r3, r2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	791b      	ldrb	r3, [r3, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	68b8      	ldr	r0, [r7, #8]
 8002706:	f00c fa9d 	bl	800ec44 <memcpy>
	result->uid = uid;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8002710:	6938      	ldr	r0, [r7, #16]
 8002712:	f00c fa8f 	bl	800ec34 <free>

	return RFS_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8b1b      	ldrh	r3, [r3, #24]
 8002730:	4618      	mov	r0, r3
 8002732:	f00c fa77 	bl	800ec24 <malloc>
 8002736:	4603      	mov	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	019b      	lsls	r3, r3, #6
 800273e:	b29b      	uxth	r3, r3
 8002740:	3302      	adds	r3, #2
 8002742:	b298      	uxth	r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8b1b      	ldrh	r3, [r3, #24]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	2100      	movs	r1, #0
 800274c:	f7ff f882 	bl	8001854 <MEM_READPAGE>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <read_cardcontents+0x40>
		free(contents);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f00c fa6c 	bl	800ec34 <free>
		return RFS_READ_ERROR;
 800275c:	2305      	movs	r3, #5
 800275e:	e003      	b.n	8002768 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	460a      	mov	r2, r1
 800277a:	80fb      	strh	r3, [r7, #6]
 800277c:	4613      	mov	r3, r2
 800277e:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8002784:	2300      	movs	r3, #0
 8002786:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002788:	e014      	b.n	80027b4 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	b29a      	uxth	r2, r3
 8002790:	797b      	ldrb	r3, [r7, #5]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4413      	add	r3, r2
 8002796:	b298      	uxth	r0, r3
 8002798:	f107 020d 	add.w	r2, r7, #13
 800279c:	89f9      	ldrh	r1, [r7, #14]
 800279e:	2301      	movs	r3, #1
 80027a0:	f7ff f858 	bl	8001854 <MEM_READPAGE>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 80027aa:	2300      	movs	r3, #0
 80027ac:	e008      	b.n	80027c0 <get_datasize+0x50>
		}
		size++;
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	3301      	adds	r3, #1
 80027b2:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	2bff      	cmp	r3, #255	; 0xff
 80027b8:	d1e7      	bne.n	800278a <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29b      	uxth	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
	int count = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	e00d      	b.n	80027f4 <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f86a 	bl	80028b6 <entry_present>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <get_number_files+0x36>
			count++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	dbed      	blt.n	80027d8 <get_number_files+0x10>
 80027fc:	e000      	b.n	8002800 <get_number_files+0x38>
		} else {
			break;
 80027fe:	bf00      	nop
		}

	}

	return count;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 800280a:	b5b0      	push	{r4, r5, r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	e040      	b.n	800289a <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f84a 	bl	80028b6 <entry_present>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d13d      	bne.n	80028a4 <get_all_files+0x9a>
			work = read_card_entry(i);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fe72 	bl	8002516 <read_card_entry>
 8002832:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fcd1 	bl	80001e0 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	18d4      	adds	r4, r2, r3
 800284a:	4608      	mov	r0, r1
 800284c:	f00c f9ea 	bl	800ec24 <malloc>
 8002850:	4603      	mov	r3, r0
 8002852:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	681c      	ldr	r4, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689d      	ldr	r5, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fcba 	bl	80001e0 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4629      	mov	r1, r5
 8002872:	4620      	mov	r0, r4
 8002874:	f00c f9e6 	bl	800ec44 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	681c      	ldr	r4, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fcaa 	bl	80001e0 <strlen>
 800288c:	4603      	mov	r3, r0
 800288e:	4423      	add	r3, r4
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	3301      	adds	r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	dbba      	blt.n	8002818 <get_all_files+0xe>
 80028a2:	e000      	b.n	80028a6 <get_all_files+0x9c>
		} else {
			break;
 80028a4:	bf00      	nop
		}
	}

	free(work);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f00c f9c4 	bl	800ec34 <free>
	return RFS_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bdb0      	pop	{r4, r5, r7, pc}

080028b6 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	b298      	uxth	r0, r3
 80028c6:	f107 020f 	add.w	r2, r7, #15
 80028ca:	2301      	movs	r3, #1
 80028cc:	2100      	movs	r1, #0
 80028ce:	f7fe ffc1 	bl	8001854 <MEM_READPAGE>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <entry_present+0x26>
		return RFS_READ_ERROR;
 80028d8:	2305      	movs	r3, #5
 80028da:	e005      	b.n	80028e8 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d101      	bne.n	80028e6 <entry_present+0x30>
		return RFS_NO_CARD;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <entry_present+0x32>
	}

	return RFS_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ffda 	bl	80028b6 <entry_present>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <get_file_name+0x1c>
		return NULL;
 8002908:	2300      	movs	r3, #0
 800290a:	e01a      	b.n	8002942 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fe01 	bl	8002516 <read_card_entry>
 8002914:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fc60 	bl	80001e0 <strlen>
 8002920:	4603      	mov	r3, r0
 8002922:	3301      	adds	r3, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f00c f97d 	bl	800ec24 <malloc>
 800292a:	4603      	mov	r3, r0
 800292c:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4619      	mov	r1, r3
 8002934:	68b8      	ldr	r0, [r7, #8]
 8002936:	f00c faab 	bl	800ee90 <strcpy>
	free(work);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f00c f97a 	bl	800ec34 <free>

	return name;
 8002940:	68bb      	ldr	r3, [r7, #8]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_MspInit+0x54>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_MspInit+0x54>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_MspInit+0x54>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_MspInit+0x54>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_MspInit+0x54>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_MspInit+0x54>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	210f      	movs	r1, #15
 800298e:	f06f 0001 	mvn.w	r0, #1
 8002992:	f000 fb71 	bl	8003078 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_I2C_MspInit+0x84>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d12b      	bne.n	8002a1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e2:	23c0      	movs	r3, #192	; 0xc0
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e6:	2312      	movs	r3, #18
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f2:	2304      	movs	r3, #4
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	480c      	ldr	r0, [pc, #48]	; (8002a30 <HAL_I2C_MspInit+0x8c>)
 80029fe:	f000 fb65 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 8002a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_I2C_MspInit+0x88>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40005400 	.word	0x40005400
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020400 	.word	0x40020400

08002a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_SPI_MspInit+0xe8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12c      	bne.n	8002ab0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a8e:	23a0      	movs	r3, #160	; 0xa0
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481e      	ldr	r0, [pc, #120]	; (8002b24 <HAL_SPI_MspInit+0xf0>)
 8002aaa:	f000 fb0f 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aae:	e031      	b.n	8002b14 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_SPI_MspInit+0xf4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12c      	bne.n	8002b14 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_SPI_MspInit+0xec>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002af2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b04:	2305      	movs	r3, #5
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <HAL_SPI_MspInit+0xf8>)
 8002b10:	f000 fadc 	bl	80030cc <HAL_GPIO_Init>
}
 8002b14:	bf00      	nop
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40013000 	.word	0x40013000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40003800 	.word	0x40003800
 8002b2c:	40020400 	.word	0x40020400

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b5e:	e012      	b.n	8002b86 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_TIM_Base_MspInit+0x68>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10d      	bne.n	8002b86 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_TIM_Base_MspInit+0x64>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40000400 	.word	0x40000400

08002b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d11d      	bne.n	8002bfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_TIM_MspPostInit+0x68>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_TIM_MspPostInit+0x68>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_TIM_MspPostInit+0x68>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bf6:	f000 fa69 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000

08002c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	4b33      	ldr	r3, [pc, #204]	; (8002cf0 <HAL_InitTick+0xe4>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a32      	ldr	r2, [pc, #200]	; (8002cf0 <HAL_InitTick+0xe4>)
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_InitTick+0xe4>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fab6 	bl	80061b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c52:	f003 fa9b 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8002c56:	6378      	str	r0, [r7, #52]	; 0x34
 8002c58:	e004      	b.n	8002c64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c5a:	f003 fa97 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_InitTick+0xe8>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_InitTick+0xf0>)
 8002c76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002c98:	4817      	ldr	r0, [pc, #92]	; (8002cf8 <HAL_InitTick+0xec>)
 8002c9a:	f003 feef 	bl	8006a7c <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11b      	bne.n	8002ce4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002cac:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <HAL_InitTick+0xec>)
 8002cae:	f003 ffb7 	bl	8006c20 <HAL_TIM_Base_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cc0:	2032      	movs	r0, #50	; 0x32
 8002cc2:	f000 f9f5 	bl	80030b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d808      	bhi.n	8002cde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	2032      	movs	r0, #50	; 0x32
 8002cd2:	f000 f9d1 	bl	8003078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_InitTick+0xf4>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e002      	b.n	8002ce4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3738      	adds	r7, #56	; 0x38
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	20000848 	.word	0x20000848
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	2000051c 	.word	0x2000051c

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler+0x4>

08002d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <MemManage_Handler+0x4>

08002d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <TIM5_IRQHandler+0x10>)
 8002d36:	f004 f943 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000848 	.word	0x20000848

08002d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <OTG_FS_IRQHandler+0x10>)
 8002d4a:	f001 fc84 	bl	8004656 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200064e8 	.word	0x200064e8

08002d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <_sbrk+0x5c>)
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <_sbrk+0x60>)
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_sbrk+0x64>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <_sbrk+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d88:	f00b ff22 	bl	800ebd0 <__errno>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	e009      	b.n	8002dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <_sbrk+0x64>)
 8002da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20010000 	.word	0x20010000
 8002db8:	00000400 	.word	0x00000400
 8002dbc:	20000890 	.word	0x20000890
 8002dc0:	20006c28 	.word	0x20006c28

08002dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <SystemInit+0x20>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <SystemInit+0x20>)
 8002dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dee:	490e      	ldr	r1, [pc, #56]	; (8002e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a0b      	ldr	r2, [pc, #44]	; (8002e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e04:	4c0b      	ldr	r4, [pc, #44]	; (8002e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e12:	f7ff ffd7 	bl	8002dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e16:	f00b fee1 	bl	800ebdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e1a:	f7fe fe41 	bl	8001aa0 <main>
  bx  lr    
 8002e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	2000067c 	.word	0x2000067c
  ldr r2, =_sidata
 8002e2c:	0800fbf4 	.word	0x0800fbf4
  ldr r2, =_sbss
 8002e30:	2000067c 	.word	0x2000067c
  ldr r4, =_ebss
 8002e34:	20006c24 	.word	0x20006c24

08002e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_Init+0x40>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_Init+0x40>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_Init+0x40>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f000 f8fc 	bl	8003062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6a:	200f      	movs	r0, #15
 8002e6c:	f7ff fece 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e70:	f7ff fd6c 	bl	800294c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000520 	.word	0x20000520
 8002ea4:	20000894 	.word	0x20000894

08002ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000894 	.word	0x20000894

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_Delay+0x44>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000520 	.word	0x20000520

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff4c 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800308a:	f7ff ff61 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 800308e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	f7ff ffb1 	bl	8002ffc <NVIC_EncodePriority>
 800309a:	4602      	mov	r2, r0
 800309c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff80 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff54 	bl	8002f6c <__NVIC_EnableIRQ>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e159      	b.n	800339c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8148 	bne.w	8003396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a2 	beq.w	8003396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4a56      	ldr	r2, [pc, #344]	; (80033b4 <HAL_GPIO_Init+0x2e8>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a52      	ldr	r2, [pc, #328]	; (80033b8 <HAL_GPIO_Init+0x2ec>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a49      	ldr	r2, [pc, #292]	; (80033bc <HAL_GPIO_Init+0x2f0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x202>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a48      	ldr	r2, [pc, #288]	; (80033c0 <HAL_GPIO_Init+0x2f4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x1fe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a47      	ldr	r2, [pc, #284]	; (80033c4 <HAL_GPIO_Init+0x2f8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x1fa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a46      	ldr	r2, [pc, #280]	; (80033c8 <HAL_GPIO_Init+0x2fc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x1f6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_GPIO_Init+0x300>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x1f2>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e008      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032be:	2307      	movs	r3, #7
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e004      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ce:	2300      	movs	r3, #0
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f002 0203 	and.w	r2, r2, #3
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	4093      	lsls	r3, r2
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e0:	4935      	ldr	r1, [pc, #212]	; (80033b8 <HAL_GPIO_Init+0x2ec>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_GPIO_Init+0x304>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a2f      	ldr	r2, [pc, #188]	; (80033d0 <HAL_GPIO_Init+0x304>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_GPIO_Init+0x304>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <HAL_GPIO_Init+0x304>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003342:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <HAL_GPIO_Init+0x304>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003366:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_GPIO_Init+0x304>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_GPIO_Init+0x304>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_GPIO_Init+0x304>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	f67f aea2 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e001      	b.n	80033f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e12b      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff faa0 	bl	80029a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800349c:	f002 fe76 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a81      	ldr	r2, [pc, #516]	; (80036ac <HAL_I2C_Init+0x274>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d807      	bhi.n	80034bc <HAL_I2C_Init+0x84>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a80      	ldr	r2, [pc, #512]	; (80036b0 <HAL_I2C_Init+0x278>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e006      	b.n	80034ca <HAL_I2C_Init+0x92>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a7d      	ldr	r2, [pc, #500]	; (80036b4 <HAL_I2C_Init+0x27c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e7      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a78      	ldr	r2, [pc, #480]	; (80036b8 <HAL_I2C_Init+0x280>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9b      	lsrs	r3, r3, #18
 80034dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_I2C_Init+0x274>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d802      	bhi.n	800350c <HAL_I2C_Init+0xd4>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	e009      	b.n	8003520 <HAL_I2C_Init+0xe8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a69      	ldr	r2, [pc, #420]	; (80036bc <HAL_I2C_Init+0x284>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	495c      	ldr	r1, [pc, #368]	; (80036ac <HAL_I2C_Init+0x274>)
 800353c:	428b      	cmp	r3, r1
 800353e:	d819      	bhi.n	8003574 <HAL_I2C_Init+0x13c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e59      	subs	r1, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fbb1 f3f3 	udiv	r3, r1, r3
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003554:	400b      	ands	r3, r1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_I2C_Init+0x138>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e59      	subs	r1, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fbb1 f3f3 	udiv	r3, r1, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356e:	e051      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003570:	2304      	movs	r3, #4
 8003572:	e04f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <HAL_I2C_Init+0x168>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e012      	b.n	80035c6 <HAL_I2C_Init+0x18e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Init+0x196>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10e      	bne.n	80035f4 <HAL_I2C_Init+0x1bc>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e58      	subs	r0, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	440b      	add	r3, r1
 80035e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	6809      	ldr	r1, [r1, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6911      	ldr	r1, [r2, #16]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68d2      	ldr	r2, [r2, #12]
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	000186a0 	.word	0x000186a0
 80036b0:	001e847f 	.word	0x001e847f
 80036b4:	003d08ff 	.word	0x003d08ff
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	817b      	strh	r3, [r7, #10]
 80036d2:	460b      	mov	r3, r1
 80036d4:	813b      	strh	r3, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036da:	f7ff fbe5 	bl	8002ea8 <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f040 80d9 	bne.w	80038a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2319      	movs	r3, #25
 80036f4:	2201      	movs	r2, #1
 80036f6:	496d      	ldr	r1, [pc, #436]	; (80038ac <HAL_I2C_Mem_Write+0x1ec>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fc7f 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
 8003706:	e0cc      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Mem_Write+0x56>
 8003712:	2302      	movs	r3, #2
 8003714:	e0c5      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d007      	beq.n	800373c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2221      	movs	r2, #33	; 0x21
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a4d      	ldr	r2, [pc, #308]	; (80038b0 <HAL_I2C_Mem_Write+0x1f0>)
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377e:	88f8      	ldrh	r0, [r7, #6]
 8003780:	893a      	ldrh	r2, [r7, #8]
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4603      	mov	r3, r0
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fab6 	bl	8003d00 <I2C_RequestMemoryWrite>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d052      	beq.n	8003840 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e081      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fd00 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06b      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11b      	bne.n	8003840 <HAL_I2C_Mem_Write+0x180>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d017      	beq.n	8003840 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1aa      	bne.n	800379e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fcec 	bl	800422a <I2C_WaitOnBTFFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e016      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	00100002 	.word	0x00100002
 80038b0:	ffff0000 	.word	0xffff0000

080038b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	; 0x30
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	817b      	strh	r3, [r7, #10]
 80038c6:	460b      	mov	r3, r1
 80038c8:	813b      	strh	r3, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ce:	f7ff faeb 	bl	8002ea8 <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	f040 8208 	bne.w	8003cf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2319      	movs	r3, #25
 80038e8:	2201      	movs	r2, #1
 80038ea:	497b      	ldr	r1, [pc, #492]	; (8003ad8 <HAL_I2C_Mem_Read+0x224>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fb85 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
 80038fa:	e1fb      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_I2C_Mem_Read+0x56>
 8003906:	2302      	movs	r3, #2
 8003908:	e1f4      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d007      	beq.n	8003930 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2222      	movs	r2, #34	; 0x22
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a5b      	ldr	r2, [pc, #364]	; (8003adc <HAL_I2C_Mem_Read+0x228>)
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003972:	88f8      	ldrh	r0, [r7, #6]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	8979      	ldrh	r1, [r7, #10]
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4603      	mov	r3, r0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fa52 	bl	8003e2c <I2C_RequestMemoryRead>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1b0      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e184      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d11b      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e164      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d11b      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	e144      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a58:	e138      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	f200 80f1 	bhi.w	8003c46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d123      	bne.n	8003ab4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fc1b 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e139      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab2:	e10b      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d14e      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <HAL_I2C_Mem_Read+0x22c>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa98 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e10e      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
 8003ad6:	bf00      	nop
 8003ad8:	00100002 	.word	0x00100002
 8003adc:	ffff0000 	.word	0xffff0000
 8003ae0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b58:	e0b8      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2200      	movs	r2, #0
 8003b62:	4966      	ldr	r1, [pc, #408]	; (8003cfc <HAL_I2C_Mem_Read+0x448>)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fa49 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0bf      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	494f      	ldr	r1, [pc, #316]	; (8003cfc <HAL_I2C_Mem_Read+0x448>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fa1b 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e091      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c44:	e042      	b.n	8003ccc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fb2e 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e04c      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d118      	bne.n	8003ccc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f aec2 	bne.w	8003a5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3728      	adds	r7, #40	; 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00010004 	.word	0x00010004

08003d00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	460b      	mov	r3, r1
 8003d14:	813b      	strh	r3, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f960 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d103      	bne.n	8003d5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e05f      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	492d      	ldr	r1, [pc, #180]	; (8003e28 <I2C_RequestMemoryWrite+0x128>)
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f998 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e04c      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fa02 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e02b      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]
 8003dd6:	e021      	b.n	8003e1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f9dc 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e005      	b.n	8003e1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e12:	893b      	ldrh	r3, [r7, #8]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00010002 	.word	0x00010002

08003e2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	817b      	strh	r3, [r7, #10]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	813b      	strh	r3, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f8c2 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d103      	bne.n	8003e96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0aa      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9a:	897b      	ldrh	r3, [r7, #10]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	4952      	ldr	r1, [pc, #328]	; (8003ff8 <I2C_RequestMemoryRead+0x1cc>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f8fa 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e097      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f964 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e076      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e021      	b.n	8003f58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f93e 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e050      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f4e:	893b      	ldrh	r3, [r7, #8]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	6a39      	ldr	r1, [r7, #32]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f923 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e035      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f82b 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	d103      	bne.n	8003fc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e013      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	4906      	ldr	r1, [pc, #24]	; (8003ff8 <I2C_RequestMemoryRead+0x1cc>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f863 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010002 	.word	0x00010002

08003ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400c:	e025      	b.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d021      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe ff47 	bl	8002ea8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e023      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10d      	bne.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	e00c      	b.n	800409a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0b6      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b8:	e051      	b.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d123      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e046      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fec5 	bl	8002ea8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e020      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10c      	bne.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e00b      	b.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	43da      	mvns	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d18d      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b4:	e02d      	b.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8ce 	bl	8004358 <I2C_IsAcknowledgeFailed>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e02d      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d021      	beq.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fe6b 	bl	8002ea8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d1ca      	bne.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004236:	e02d      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f88d 	bl	8004358 <I2C_IsAcknowledgeFailed>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e02d      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d021      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004250:	f7fe fe2a 	bl	8002ea8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e007      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d1ca      	bne.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b8:	e042      	b.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d119      	bne.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e029      	b.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fc:	f7fe fdd4 	bl	8002ea8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e007      	b.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d1b5      	bne.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d11b      	bne.n	80043a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0204 	orr.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b8:	b08f      	sub	sp, #60	; 0x3c
 80043ba:	af0a      	add	r7, sp, #40	; 0x28
 80043bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e10f      	b.n	80045e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f00a f8ea 	bl	800e5bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2203      	movs	r2, #3
 80043ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f003 fcf7 	bl	8007dfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	687e      	ldr	r6, [r7, #4]
 8004414:	466d      	mov	r5, sp
 8004416:	f106 0410 	add.w	r4, r6, #16
 800441a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800441c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800441e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004426:	e885 0003 	stmia.w	r5, {r0, r1}
 800442a:	1d33      	adds	r3, r6, #4
 800442c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800442e:	6838      	ldr	r0, [r7, #0]
 8004430:	f003 fbce 	bl	8007bd0 <USB_CoreInit>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0d0      	b.n	80045e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f003 fce5 	bl	8007e1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e04a      	b.n	80044ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	333d      	adds	r3, #61	; 0x3d
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	333c      	adds	r3, #60	; 0x3c
 800447c:	7bfa      	ldrb	r2, [r7, #15]
 800447e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	b298      	uxth	r0, r3
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3344      	adds	r3, #68	; 0x44
 8004494:	4602      	mov	r2, r0
 8004496:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3340      	adds	r3, #64	; 0x40
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	3348      	adds	r3, #72	; 0x48
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334c      	adds	r3, #76	; 0x4c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3354      	adds	r3, #84	; 0x54
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	3301      	adds	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3af      	bcc.n	8004458 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e044      	b.n	8004588 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	3301      	adds	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d3b5      	bcc.n	80044fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	687e      	ldr	r6, [r7, #4]
 800459a:	466d      	mov	r5, sp
 800459c:	f106 0410 	add.w	r4, r6, #16
 80045a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80045b0:	1d33      	adds	r3, r6, #4
 80045b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b4:	6838      	ldr	r0, [r7, #0]
 80045b6:	f003 fc7d 	bl	8007eb4 <USB_DevInit>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e00d      	b.n	80045e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 fdcc 	bl	800917e <USB_DevDisconnect>

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_PCD_Start+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e020      	b.n	800464e <HAL_PCD_Start+0x5e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b01      	cmp	r3, #1
 800461a:	d109      	bne.n	8004630 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004620:	2b01      	cmp	r3, #1
 8004622:	d005      	beq.n	8004630 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f003 fbcf 	bl	8007dd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f004 fd7c 	bl	800913c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004656:	b590      	push	{r4, r7, lr}
 8004658:	b08d      	sub	sp, #52	; 0x34
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f004 fe3a 	bl	80092e6 <USB_GetMode>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	f040 848a 	bne.w	8004f8e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fd9e 	bl	80091c0 <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8480 	beq.w	8004f8c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 fd8b 	bl	80091c0 <USB_ReadInterrupts>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d107      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f002 0202 	and.w	r2, r2, #2
 80046c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f004 fd79 	bl	80091c0 <USB_ReadInterrupts>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d161      	bne.n	800479c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0210 	bic.w	r2, r2, #16
 80046e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	3304      	adds	r3, #4
 8004706:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	0c5b      	lsrs	r3, r3, #17
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2b02      	cmp	r3, #2
 8004712:	d124      	bne.n	800475e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d035      	beq.n	800478c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800472a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6a38      	ldr	r0, [r7, #32]
 8004734:	f004 fbb0 	bl	8008e98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004744:	441a      	add	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004756:	441a      	add	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e016      	b.n	800478c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	0c5b      	lsrs	r3, r3, #17
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	2b06      	cmp	r3, #6
 8004768:	d110      	bne.n	800478c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004770:	2208      	movs	r2, #8
 8004772:	4619      	mov	r1, r3
 8004774:	6a38      	ldr	r0, [r7, #32]
 8004776:	f004 fb8f 	bl	8008e98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004786:	441a      	add	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0210 	orr.w	r2, r2, #16
 800479a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f004 fd0d 	bl	80091c0 <USB_ReadInterrupts>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047b0:	f040 80a7 	bne.w	8004902 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fd12 	bl	80091e6 <USB_ReadDevAllOutEpInterrupt>
 80047c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80047c4:	e099      	b.n	80048fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 808e 	beq.w	80048ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fd36 	bl	800924e <USB_ReadDevOutEPInterrupt>
 80047e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	2301      	movs	r3, #1
 80047fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fec2 	bl	800558c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	2308      	movs	r3, #8
 8004822:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 ff98 	bl	800575c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	2310      	movs	r3, #16
 8004846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d030      	beq.n	80048b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d109      	bne.n	8004872 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004870:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	78db      	ldrb	r3, [r3, #3]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d108      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2200      	movs	r2, #0
 8004894:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f009 ff89 	bl	800e7b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	461a      	mov	r2, r3
 80048b0:	2302      	movs	r3, #2
 80048b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	461a      	mov	r2, r3
 80048cc:	2320      	movs	r3, #32
 80048ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f47f af62 	bne.w	80047c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f004 fc5a 	bl	80091c0 <USB_ReadInterrupts>
 800490c:	4603      	mov	r3, r0
 800490e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004912:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004916:	f040 80db 	bne.w	8004ad0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f004 fc7b 	bl	800921a <USB_ReadDevAllInEpInterrupt>
 8004924:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800492a:	e0cd      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80c2 	beq.w	8004abc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f004 fca1 	bl	800928a <USB_ReadDevInEPInterrupt>
 8004948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d057      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	2201      	movs	r2, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	43db      	mvns	r3, r3
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004974:	4013      	ands	r3, r2
 8004976:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	2301      	movs	r3, #1
 8004988:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d132      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	334c      	adds	r3, #76	; 0x4c
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4403      	add	r3, r0
 80049b2:	3348      	adds	r3, #72	; 0x48
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4419      	add	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4403      	add	r3, r0
 80049c6:	334c      	adds	r3, #76	; 0x4c
 80049c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d113      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x3a2>
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3354      	adds	r3, #84	; 0x54
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049f0:	461a      	mov	r2, r3
 80049f2:	2101      	movs	r1, #1
 80049f4:	f004 fca8 	bl	8009348 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f009 fe5d 	bl	800e6be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	2310      	movs	r3, #16
 8004a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	461a      	mov	r2, r3
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d023      	beq.n	8004aaa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a64:	6a38      	ldr	r0, [r7, #32]
 8004a66:	f003 fb89 	bl	800817c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	3338      	adds	r3, #56	; 0x38
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	78db      	ldrb	r3, [r3, #3]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f009 fea0 	bl	800e7d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fcdb 	bl	8005472 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	3301      	adds	r3, #1
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f47f af2e 	bne.w	800492c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f004 fb73 	bl	80091c0 <USB_ReadInterrupts>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae4:	d122      	bne.n	8004b2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d108      	bne.n	8004b16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fec2 	bl	8005898 <HAL_PCDEx_LPM_Callback>
 8004b14:	e002      	b.n	8004b1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f009 fe3e 	bl	800e798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fb45 	bl	80091c0 <USB_ReadInterrupts>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d112      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f009 fdfa 	bl	800e74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f004 fb27 	bl	80091c0 <USB_ReadInterrupts>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	f040 80b7 	bne.w	8004cee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2110      	movs	r1, #16
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 faee 	bl	800817c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba4:	e046      	b.n	8004c34 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	461a      	mov	r2, r3
 8004be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	3301      	adds	r3, #1
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d3b3      	bcc.n	8004ba6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6a:	f043 030b 	orr.w	r3, r3, #11
 8004c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c80:	f043 030b 	orr.w	r3, r3, #11
 8004c84:	6453      	str	r3, [r2, #68]	; 0x44
 8004c86:	e015      	b.n	8004cb4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c9a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cae:	f043 030b 	orr.w	r3, r3, #11
 8004cb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f004 fb35 	bl	8009348 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fa64 	bl	80091c0 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	d124      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fafa 	bl	8009302 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 faaf 	bl	8008276 <USB_GetDevSpeed>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681c      	ldr	r4, [r3, #0]
 8004d24:	f001 fa26 	bl	8006174 <HAL_RCC_GetHCLKFreq>
 8004d28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	4620      	mov	r0, r4
 8004d34:	f002 ffae 	bl	8007c94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f009 fce8 	bl	800e70e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 fa34 	bl	80091c0 <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d10a      	bne.n	8004d78 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f009 fcc5 	bl	800e6f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f002 0208 	and.w	r2, r2, #8
 8004d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f004 fa1f 	bl	80091c0 <USB_ReadInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d122      	bne.n	8004dd2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9c:	e014      	b.n	8004dc8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fb27 	bl	8005410 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3e5      	bcc.n	8004d9e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 f9f2 	bl	80091c0 <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de6:	d13b      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004de8:	2301      	movs	r3, #1
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	e02b      	b.n	8004e46 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3340      	adds	r3, #64	; 0x40
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d115      	bne.n	8004e40 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da12      	bge.n	8004e40 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	333f      	adds	r3, #63	; 0x3f
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fae8 	bl	8005410 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	3301      	adds	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d3ce      	bcc.n	8004dee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 f9ab 	bl	80091c0 <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e74:	d155      	bne.n	8004f22 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e76:	2301      	movs	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7a:	e045      	b.n	8004f08 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d12e      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da2b      	bge.n	8004f02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004eb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d121      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004efe:	6053      	str	r3, [r2, #4]
            break;
 8004f00:	e007      	b.n	8004f12 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	3301      	adds	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d3b4      	bcc.n	8004e7c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f004 f94a 	bl	80091c0 <USB_ReadInterrupts>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d10a      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f009 fc5f 	bl	800e7fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 f934 	bl	80091c0 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d115      	bne.n	8004f8e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f009 fc4f 	bl	800e818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	e000      	b.n	8004f8e <HAL_PCD_IRQHandler+0x938>
      return;
 8004f8c:	bf00      	nop
    }
  }
}
 8004f8e:	3734      	adds	r7, #52	; 0x34
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}

08004f94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_PCD_SetAddress+0x1a>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e013      	b.n	8004fd6 <HAL_PCD_SetAddress+0x42>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f004 f892 	bl	80090f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	4611      	mov	r1, r2
 8004fea:	461a      	mov	r2, r3
 8004fec:	4603      	mov	r3, r0
 8004fee:	70fb      	strb	r3, [r7, #3]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	803b      	strh	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005000:	2b00      	cmp	r3, #0
 8005002:	da0f      	bge.n	8005024 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	3338      	adds	r3, #56	; 0x38
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	3304      	adds	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	705a      	strb	r2, [r3, #1]
 8005022:	e00f      	b.n	8005044 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 020f 	and.w	r2, r3, #15
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	3304      	adds	r3, #4
 800503c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005050:	883a      	ldrh	r2, [r7, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	78ba      	ldrb	r2, [r7, #2]
 800505a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800506e:	78bb      	ldrb	r3, [r7, #2]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d102      	bne.n	800507a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_PCD_EP_Open+0xaa>
 8005084:	2302      	movs	r3, #2
 8005086:	e00e      	b.n	80050a6 <HAL_PCD_EP_Open+0xc8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	f003 f912 	bl	80082c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80050a4:	7afb      	ldrb	r3, [r7, #11]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da0f      	bge.n	80050e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	3304      	adds	r3, #4
 80050d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	705a      	strb	r2, [r3, #1]
 80050e0:	e00f      	b.n	8005102 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4413      	add	r3, r2
 80050f8:	3304      	adds	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_PCD_EP_Close+0x6e>
 8005118:	2302      	movs	r3, #2
 800511a:	e00e      	b.n	800513a <HAL_PCD_EP_Close+0x8c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f003 f950 	bl	80083d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	460b      	mov	r3, r1
 8005150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005184:	7afb      	ldrb	r3, [r7, #11]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	b2da      	uxtb	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d102      	bne.n	800519e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	f003 fc2f 	bl	8008a18 <USB_EP0StartXfer>
 80051ba:	e008      	b.n	80051ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	f003 f9dd 	bl	8008588 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	460b      	mov	r3, r1
 8005216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	f003 020f 	and.w	r2, r3, #15
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	3338      	adds	r3, #56	; 0x38
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	3304      	adds	r3, #4
 800522e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2201      	movs	r2, #1
 8005246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	b2da      	uxtb	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	f003 fbcd 	bl	8008a18 <USB_EP0StartXfer>
 800527e:	e008      	b.n	8005292 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	6979      	ldr	r1, [r7, #20]
 800528e:	f003 f97b 	bl	8008588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	f003 020f 	and.w	r2, r3, #15
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d901      	bls.n	80052ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e050      	b.n	800535c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da0f      	bge.n	80052e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 020f 	and.w	r2, r3, #15
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	3338      	adds	r3, #56	; 0x38
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	3304      	adds	r3, #4
 80052d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	705a      	strb	r2, [r3, #1]
 80052e0:	e00d      	b.n	80052fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_PCD_EP_SetStall+0x82>
 800531a:	2302      	movs	r3, #2
 800531c:	e01e      	b.n	800535c <HAL_PCD_EP_SetStall+0xc0>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	4618      	mov	r0, r3
 800532e:	f003 fe0b 	bl	8008f48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	b2d9      	uxtb	r1, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800534c:	461a      	mov	r2, r3
 800534e:	f003 fffb 	bl	8009348 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 020f 	and.w	r2, r3, #15
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d901      	bls.n	8005382 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e042      	b.n	8005408 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005386:	2b00      	cmp	r3, #0
 8005388:	da0f      	bge.n	80053aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	3338      	adds	r3, #56	; 0x38
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	3304      	adds	r3, #4
 80053a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	705a      	strb	r2, [r3, #1]
 80053a8:	e00f      	b.n	80053ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	3304      	adds	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_PCD_EP_ClrStall+0x86>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e00e      	b.n	8005408 <HAL_PCD_EP_ClrStall+0xa4>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f003 fe13 	bl	8009024 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800541c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005420:	2b00      	cmp	r3, #0
 8005422:	da0c      	bge.n	800543e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	3338      	adds	r3, #56	; 0x38
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4413      	add	r3, r2
 8005438:	3304      	adds	r3, #4
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e00c      	b.n	8005458 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	4618      	mov	r0, r3
 8005460:	f003 fc32 	bl	8008cc8 <USB_EPStopXfer>
 8005464:	4603      	mov	r3, r0
 8005466:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005468:	7afb      	ldrb	r3, [r7, #11]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b08a      	sub	sp, #40	; 0x28
 8005476:	af02      	add	r7, sp, #8
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	3338      	adds	r3, #56	; 0x38
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	3304      	adds	r3, #4
 8005498:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d901      	bls.n	80054aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e06c      	b.n	8005584 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d902      	bls.n	80054c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3303      	adds	r3, #3
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054ce:	e02b      	b.n	8005528 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d902      	bls.n	80054ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3303      	adds	r3, #3
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6919      	ldr	r1, [r3, #16]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005504:	b2db      	uxtb	r3, r3
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4603      	mov	r3, r0
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f003 fc86 	bl	8008e1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	441a      	add	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	b29b      	uxth	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	429a      	cmp	r2, r3
 800553c:	d809      	bhi.n	8005552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005546:	429a      	cmp	r2, r3
 8005548:	d203      	bcs.n	8005552 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1be      	bne.n	80054d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	429a      	cmp	r2, r3
 800555c:	d811      	bhi.n	8005582 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2201      	movs	r2, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	43db      	mvns	r3, r3
 8005578:	6939      	ldr	r1, [r7, #16]
 800557a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557e:	4013      	ands	r3, r2
 8005580:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	333c      	adds	r3, #60	; 0x3c
 80055a4:	3304      	adds	r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d17b      	bne.n	80056ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4a61      	ldr	r2, [pc, #388]	; (8005754 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	f240 80b9 	bls.w	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80b3 	beq.w	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f4:	6093      	str	r3, [r2, #8]
 80055f6:	e0a7      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	461a      	mov	r2, r3
 8005610:	2320      	movs	r3, #32
 8005612:	6093      	str	r3, [r2, #8]
 8005614:	e098      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 8093 	bne.w	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4a4b      	ldr	r2, [pc, #300]	; (8005754 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d90f      	bls.n	800564a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	461a      	mov	r2, r3
 8005642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005646:	6093      	str	r3, [r2, #8]
 8005648:	e07e      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4413      	add	r3, r2
 800565c:	3304      	adds	r3, #4
 800565e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	0159      	lsls	r1, r3, #5
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	440b      	add	r3, r1
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d114      	bne.n	80056ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005694:	461a      	mov	r2, r3
 8005696:	2101      	movs	r1, #1
 8005698:	f003 fe56 	bl	8009348 <USB_EP0_OutStart>
 800569c:	e006      	b.n	80056ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f008 ffe8 	bl	800e688 <HAL_PCD_DataOutStageCallback>
 80056b8:	e046      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d124      	bne.n	800570c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056de:	6093      	str	r3, [r2, #8]
 80056e0:	e032      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2320      	movs	r3, #32
 80056fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f008 ffbf 	bl	800e688 <HAL_PCD_DataOutStageCallback>
 800570a:	e01d      	b.n	8005748 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d114      	bne.n	800573c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005734:	461a      	mov	r2, r3
 8005736:	2100      	movs	r1, #0
 8005738:	f003 fe06 	bl	8009348 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f008 ffa0 	bl	800e688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	4f54300a 	.word	0x4f54300a
 8005758:	4f54310a 	.word	0x4f54310a

0800575c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	333c      	adds	r3, #60	; 0x3c
 8005774:	3304      	adds	r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d90e      	bls.n	80057b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f008 ff57 	bl	800e664 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d90c      	bls.n	80057d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d108      	bne.n	80057d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057d0:	461a      	mov	r2, r3
 80057d2:	2101      	movs	r1, #1
 80057d4:	f003 fdb8 	bl	8009348 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	4f54300a 	.word	0x4f54300a

080057e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
 80057f4:	4613      	mov	r3, r2
 80057f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005806:	883b      	ldrh	r3, [r7, #0]
 8005808:	0419      	lsls	r1, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	430a      	orrs	r2, r1
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
 8005814:	e028      	b.n	8005868 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e00d      	b.n	8005846 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	3340      	adds	r3, #64	; 0x40
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	3301      	adds	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	7bfa      	ldrb	r2, [r7, #15]
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	3b01      	subs	r3, #1
 800584c:	429a      	cmp	r2, r3
 800584e:	d3ec      	bcc.n	800582a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005850:	883b      	ldrh	r3, [r7, #0]
 8005852:	0418      	lsls	r0, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	3b01      	subs	r3, #1
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4302      	orrs	r2, r0
 8005860:	3340      	adds	r3, #64	; 0x40
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e267      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d075      	beq.n	80059ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d00c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058da:	4b85      	ldr	r3, [pc, #532]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d112      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e6:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f2:	d10b      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	4b7e      	ldr	r3, [pc, #504]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05b      	beq.n	80059b8 <HAL_RCC_OscConfig+0x108>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d157      	bne.n	80059b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e242      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d106      	bne.n	8005924 <HAL_RCC_OscConfig+0x74>
 8005916:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a75      	ldr	r2, [pc, #468]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01d      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x98>
 800592e:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a6f      	ldr	r2, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4b6d      	ldr	r3, [pc, #436]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a6c      	ldr	r2, [pc, #432]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005948:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a65      	ldr	r2, [pc, #404]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fd fa9e 	bl	8002ea8 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005970:	f7fd fa9a 	bl	8002ea8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e207      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xc0>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fd fa8a 	bl	8002ea8 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd fa86 	bl	8002ea8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1f3      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0xe8>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d11c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059de:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ea:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1c7      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4937      	ldr	r1, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	e03a      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <HAL_RCC_OscConfig+0x244>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fd fa3f 	bl	8002ea8 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2e:	f7fd fa3b 	bl	8002ea8 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1a8      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4925      	ldr	r1, [pc, #148]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_RCC_OscConfig+0x244>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fd fa1e 	bl	8002ea8 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a70:	f7fd fa1a 	bl	8002ea8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e187      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d036      	beq.n	8005b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_RCC_OscConfig+0x248>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa8:	f7fd f9fe 	bl	8002ea8 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab0:	f7fd f9fa 	bl	8002ea8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e167      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x200>
 8005ace:	e01b      	b.n	8005b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_OscConfig+0x248>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad6:	f7fd f9e7 	bl	8002ea8 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005adc:	e00e      	b.n	8005afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ade:	f7fd f9e3 	bl	8002ea8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d907      	bls.n	8005afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e150      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	42470000 	.word	0x42470000
 8005af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ea      	bne.n	8005ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8097 	beq.w	8005c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1a:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10f      	bne.n	8005b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	4b7d      	ldr	r3, [pc, #500]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a7c      	ldr	r2, [pc, #496]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	4b7a      	ldr	r3, [pc, #488]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b46:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d118      	bne.n	8005b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b52:	4b74      	ldr	r3, [pc, #464]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a73      	ldr	r2, [pc, #460]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5e:	f7fd f9a3 	bl	8002ea8 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b66:	f7fd f99f 	bl	8002ea8 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e10c      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	4b6a      	ldr	r3, [pc, #424]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <HAL_RCC_OscConfig+0x2ea>
 8005b8c:	4b64      	ldr	r3, [pc, #400]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a63      	ldr	r2, [pc, #396]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x324>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x30c>
 8005ba2:	4b5f      	ldr	r3, [pc, #380]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a5e      	ldr	r2, [pc, #376]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	4b5c      	ldr	r3, [pc, #368]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a5b      	ldr	r2, [pc, #364]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x324>
 8005bbc:	4b58      	ldr	r3, [pc, #352]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a57      	ldr	r2, [pc, #348]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	4b55      	ldr	r3, [pc, #340]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a54      	ldr	r2, [pc, #336]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bce:	f023 0304 	bic.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fd f964 	bl	8002ea8 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be4:	f7fd f960 	bl	8002ea8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0cb      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	4b49      	ldr	r3, [pc, #292]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ee      	beq.n	8005be4 <HAL_RCC_OscConfig+0x334>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c08:	f7fd f94e 	bl	8002ea8 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7fd f94a 	bl	8002ea8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0b5      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ee      	bne.n	8005c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c38:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	4a38      	ldr	r2, [pc, #224]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80a1 	beq.w	8005d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4e:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d05c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d141      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c62:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fd f91e 	bl	8002ea8 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fd f91a 	bl	8002ea8 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e087      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	491b      	ldr	r1, [pc, #108]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbe:	f7fd f8f3 	bl	8002ea8 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc6:	f7fd f8ef 	bl	8002ea8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e05c      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x416>
 8005ce4:	e054      	b.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7fd f8dc 	bl	8002ea8 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fd f8d8 	bl	8002ea8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e045      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x444>
 8005d12:	e03d      	b.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e038      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
 8005d20:	40023800 	.word	0x40023800
 8005d24:	40007000 	.word	0x40007000
 8005d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <HAL_RCC_OscConfig+0x4ec>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d028      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d121      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d11a      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d111      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023800 	.word	0x40023800

08005da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0cc      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db4:	4b68      	ldr	r3, [pc, #416]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d90c      	bls.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0b8      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df4:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a52      	ldr	r2, [pc, #328]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	494d      	ldr	r1, [pc, #308]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d044      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d119      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5e:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e06f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e067      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4934      	ldr	r1, [pc, #208]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e90:	f7fd f80a 	bl	8002ea8 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7fd f806 	bl	8002ea8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e04f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20c      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e032      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4916      	ldr	r1, [pc, #88]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	490e      	ldr	r1, [pc, #56]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f26:	f000 f821 	bl	8005f6c <HAL_RCC_GetSysClockFreq>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	490a      	ldr	r1, [pc, #40]	; (8005f60 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	5ccb      	ldrb	r3, [r1, r3]
 8005f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1c4>)
 8005f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x1c8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc fe60 	bl	8002c0c <HAL_InitTick>

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40023c00 	.word	0x40023c00
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	0800fb98 	.word	0x0800fb98
 8005f64:	20000518 	.word	0x20000518
 8005f68:	2000051c 	.word	0x2000051c

08005f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b094      	sub	sp, #80	; 0x50
 8005f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	647b      	str	r3, [r7, #68]	; 0x44
 8005f78:	2300      	movs	r3, #0
 8005f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f84:	4b79      	ldr	r3, [pc, #484]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 030c 	and.w	r3, r3, #12
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d00d      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x40>
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	f200 80e1 	bhi.w	8006158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f9e:	e0db      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa0:	4b73      	ldr	r3, [pc, #460]	; (8006170 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fa4:	e0db      	b.n	800615e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fa6:	4b72      	ldr	r3, [pc, #456]	; (8006170 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005faa:	e0d8      	b.n	800615e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fac:	4b6f      	ldr	r3, [pc, #444]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fb6:	4b6d      	ldr	r3, [pc, #436]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d063      	beq.n	800608a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc2:	4b6a      	ldr	r3, [pc, #424]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	2200      	movs	r2, #0
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fde:	4622      	mov	r2, r4
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f04f 0100 	mov.w	r1, #0
 8005fea:	0159      	lsls	r1, r3, #5
 8005fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff0:	0150      	lsls	r0, r2, #5
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	1a51      	subs	r1, r2, r1
 8005ffa:	6139      	str	r1, [r7, #16]
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006010:	4659      	mov	r1, fp
 8006012:	018b      	lsls	r3, r1, #6
 8006014:	4651      	mov	r1, sl
 8006016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800601a:	4651      	mov	r1, sl
 800601c:	018a      	lsls	r2, r1, #6
 800601e:	4651      	mov	r1, sl
 8006020:	ebb2 0801 	subs.w	r8, r2, r1
 8006024:	4659      	mov	r1, fp
 8006026:	eb63 0901 	sbc.w	r9, r3, r1
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800603a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800603e:	4690      	mov	r8, r2
 8006040:	4699      	mov	r9, r3
 8006042:	4623      	mov	r3, r4
 8006044:	eb18 0303 	adds.w	r3, r8, r3
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	462b      	mov	r3, r5
 800604c:	eb49 0303 	adc.w	r3, r9, r3
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800605e:	4629      	mov	r1, r5
 8006060:	028b      	lsls	r3, r1, #10
 8006062:	4621      	mov	r1, r4
 8006064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006068:	4621      	mov	r1, r4
 800606a:	028a      	lsls	r2, r1, #10
 800606c:	4610      	mov	r0, r2
 800606e:	4619      	mov	r1, r3
 8006070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006072:	2200      	movs	r2, #0
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800607c:	f7fa f908 	bl	8000290 <__aeabi_uldivmod>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4613      	mov	r3, r2
 8006086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006088:	e058      	b.n	800613c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608a:	4b38      	ldr	r3, [pc, #224]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	2200      	movs	r2, #0
 8006092:	4618      	mov	r0, r3
 8006094:	4611      	mov	r1, r2
 8006096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
 80060a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	f04f 0000 	mov.w	r0, #0
 80060ac:	f04f 0100 	mov.w	r1, #0
 80060b0:	0159      	lsls	r1, r3, #5
 80060b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060b6:	0150      	lsls	r0, r2, #5
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4641      	mov	r1, r8
 80060be:	ebb2 0a01 	subs.w	sl, r2, r1
 80060c2:	4649      	mov	r1, r9
 80060c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060dc:	ebb2 040a 	subs.w	r4, r2, sl
 80060e0:	eb63 050b 	sbc.w	r5, r3, fp
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	00eb      	lsls	r3, r5, #3
 80060ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	18e3      	adds	r3, r4, r3
 80060fc:	603b      	str	r3, [r7, #0]
 80060fe:	464b      	mov	r3, r9
 8006100:	eb45 0303 	adc.w	r3, r5, r3
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006112:	4629      	mov	r1, r5
 8006114:	028b      	lsls	r3, r1, #10
 8006116:	4621      	mov	r1, r4
 8006118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800611c:	4621      	mov	r1, r4
 800611e:	028a      	lsls	r2, r1, #10
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	2200      	movs	r2, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	61fa      	str	r2, [r7, #28]
 800612c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006130:	f7fa f8ae 	bl	8000290 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4613      	mov	r3, r2
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RCC_GetSysClockFreq+0x200>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800614c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006156:	e002      	b.n	800615e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_RCC_GetSysClockFreq+0x204>)
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800615c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800615e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006160:	4618      	mov	r0, r3
 8006162:	3750      	adds	r7, #80	; 0x50
 8006164:	46bd      	mov	sp, r7
 8006166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616a:	bf00      	nop
 800616c:	40023800 	.word	0x40023800
 8006170:	00f42400 	.word	0x00f42400

08006174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006178:	4b03      	ldr	r3, [pc, #12]	; (8006188 <HAL_RCC_GetHCLKFreq+0x14>)
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000518 	.word	0x20000518

0800618c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006190:	f7ff fff0 	bl	8006174 <HAL_RCC_GetHCLKFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	0a9b      	lsrs	r3, r3, #10
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4903      	ldr	r1, [pc, #12]	; (80061b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40023800 	.word	0x40023800
 80061b0:	0800fba8 	.word	0x0800fba8

080061b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	220f      	movs	r2, #15
 80061c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061c4:	4b12      	ldr	r3, [pc, #72]	; (8006210 <HAL_RCC_GetClockConfig+0x5c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f003 0203 	and.w	r2, r3, #3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <HAL_RCC_GetClockConfig+0x5c>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <HAL_RCC_GetClockConfig+0x5c>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061e8:	4b09      	ldr	r3, [pc, #36]	; (8006210 <HAL_RCC_GetClockConfig+0x5c>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	08db      	lsrs	r3, r3, #3
 80061ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061f6:	4b07      	ldr	r3, [pc, #28]	; (8006214 <HAL_RCC_GetClockConfig+0x60>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0207 	and.w	r2, r3, #7
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	601a      	str	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40023800 	.word	0x40023800
 8006214:	40023c00 	.word	0x40023c00

08006218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e07b      	b.n	8006322 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d108      	bne.n	8006244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800623a:	d009      	beq.n	8006250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	61da      	str	r2, [r3, #28]
 8006242:	e005      	b.n	8006250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fc fbe2 	bl	8002a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006286:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d4:	ea42 0103 	orr.w	r1, r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	0c1b      	lsrs	r3, r3, #16
 80062ee:	f003 0104 	and.w	r1, r3, #4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	f003 0210 	and.w	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006310:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b088      	sub	sp, #32
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_SPI_Transmit+0x22>
 8006348:	2302      	movs	r3, #2
 800634a:	e126      	b.n	800659a <HAL_SPI_Transmit+0x270>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006354:	f7fc fda8 	bl	8002ea8 <HAL_GetTick>
 8006358:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b01      	cmp	r3, #1
 8006368:	d002      	beq.n	8006370 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800636e:	e10b      	b.n	8006588 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_SPI_Transmit+0x52>
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006380:	e102      	b.n	8006588 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2203      	movs	r2, #3
 8006386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c8:	d10f      	bne.n	80063ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d007      	beq.n	8006408 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006410:	d14b      	bne.n	80064aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Transmit+0xf6>
 800641a:	8afb      	ldrh	r3, [r7, #22]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d13e      	bne.n	800649e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	881a      	ldrh	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	1c9a      	adds	r2, r3, #2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006444:	e02b      	b.n	800649e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d112      	bne.n	800647a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	881a      	ldrh	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	86da      	strh	r2, [r3, #54]	; 0x36
 8006478:	e011      	b.n	800649e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647a:	f7fc fd15 	bl	8002ea8 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d803      	bhi.n	8006492 <HAL_SPI_Transmit+0x168>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d102      	bne.n	8006498 <HAL_SPI_Transmit+0x16e>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800649c:	e074      	b.n	8006588 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ce      	bne.n	8006446 <HAL_SPI_Transmit+0x11c>
 80064a8:	e04c      	b.n	8006544 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_SPI_Transmit+0x18e>
 80064b2:	8afb      	ldrh	r3, [r7, #22]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d140      	bne.n	800653a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064de:	e02c      	b.n	800653a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d113      	bne.n	8006516 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	7812      	ldrb	r2, [r2, #0]
 80064fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	86da      	strh	r2, [r3, #54]	; 0x36
 8006514:	e011      	b.n	800653a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fc fcc7 	bl	8002ea8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Transmit+0x204>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Transmit+0x20a>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006538:	e026      	b.n	8006588 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1cd      	bne.n	80064e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa55 	bl	80069f8 <SPI_EndRxTxTransaction>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e000      	b.n	8006588 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006586:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006598:	7ffb      	ldrb	r3, [r7, #31]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b08c      	sub	sp, #48	; 0x30
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065b0:	2301      	movs	r3, #1
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x26>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e18a      	b.n	80068de <HAL_SPI_TransmitReceive+0x33c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065d0:	f7fc fc6a 	bl	8002ea8 <HAL_GetTick>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065e6:	887b      	ldrh	r3, [r7, #2]
 80065e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d00f      	beq.n	8006612 <HAL_SPI_TransmitReceive+0x70>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f8:	d107      	bne.n	800660a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <HAL_SPI_TransmitReceive+0x68>
 8006602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006606:	2b04      	cmp	r3, #4
 8006608:	d003      	beq.n	8006612 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800660a:	2302      	movs	r3, #2
 800660c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006610:	e15b      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x82>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_SPI_TransmitReceive+0x82>
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800662a:	e14e      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b04      	cmp	r3, #4
 8006636:	d003      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2205      	movs	r2, #5
 800663c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	887a      	ldrh	r2, [r7, #2]
 8006656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	887a      	ldrh	r2, [r7, #2]
 8006662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	887a      	ldrh	r2, [r7, #2]
 8006668:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d007      	beq.n	8006694 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669c:	d178      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_TransmitReceive+0x10a>
 80066a6:	8b7b      	ldrh	r3, [r7, #26]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d166      	bne.n	800677a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d0:	e053      	b.n	800677a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d11b      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x176>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d016      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x176>
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d113      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	881a      	ldrh	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	1c9a      	adds	r2, r3, #2
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b01      	cmp	r3, #1
 8006724:	d119      	bne.n	800675a <HAL_SPI_TransmitReceive+0x1b8>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d014      	beq.n	800675a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	b292      	uxth	r2, r2
 800673c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	1c9a      	adds	r2, r3, #2
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006756:	2301      	movs	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800675a:	f7fc fba5 	bl	8002ea8 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006766:	429a      	cmp	r2, r3
 8006768:	d807      	bhi.n	800677a <HAL_SPI_TransmitReceive+0x1d8>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d003      	beq.n	800677a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006778:	e0a7      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1a6      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x130>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1a1      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x130>
 800678e:	e07c      	b.n	800688a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_SPI_TransmitReceive+0x1fc>
 8006798:	8b7b      	ldrh	r3, [r7, #26]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d16b      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c4:	e057      	b.n	8006876 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d11c      	bne.n	800680e <HAL_SPI_TransmitReceive+0x26c>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d017      	beq.n	800680e <HAL_SPI_TransmitReceive+0x26c>
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d114      	bne.n	800680e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	d119      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2ae>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d014      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800684c:	2301      	movs	r3, #1
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006850:	f7fc fb2a 	bl	8002ea8 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685c:	429a      	cmp	r2, r3
 800685e:	d803      	bhi.n	8006868 <HAL_SPI_TransmitReceive+0x2c6>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d102      	bne.n	800686e <HAL_SPI_TransmitReceive+0x2cc>
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006874:	e029      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1a2      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x224>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d19d      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f8b2 	bl	80069f8 <SPI_EndRxTxTransaction>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068a6:	e010      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	e000      	b.n	80068ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3730      	adds	r7, #48	; 0x30
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068f8:	f7fc fad6 	bl	8002ea8 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	4413      	add	r3, r2
 8006906:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006908:	f7fc face 	bl	8002ea8 <HAL_GetTick>
 800690c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800690e:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	015b      	lsls	r3, r3, #5
 8006914:	0d1b      	lsrs	r3, r3, #20
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800691e:	e054      	b.n	80069ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d050      	beq.n	80069ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006928:	f7fc fabe 	bl	8002ea8 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	429a      	cmp	r2, r3
 8006936:	d902      	bls.n	800693e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d13d      	bne.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800694c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006956:	d111      	bne.n	800697c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006960:	d004      	beq.n	800696c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696a:	d107      	bne.n	800697c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006984:	d10f      	bne.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e017      	b.n	80069ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4013      	ands	r3, r2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	bf0c      	ite	eq
 80069da:	2301      	moveq	r3, #1
 80069dc:	2300      	movne	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d19b      	bne.n	8006920 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000518 	.word	0x20000518

080069f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <SPI_EndRxTxTransaction+0x7c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <SPI_EndRxTxTransaction+0x80>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	0d5b      	lsrs	r3, r3, #21
 8006a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a14:	fb02 f303 	mul.w	r3, r2, r3
 8006a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a22:	d112      	bne.n	8006a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2180      	movs	r1, #128	; 0x80
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff ff5a 	bl	80068e8 <SPI_WaitFlagStateUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e00f      	b.n	8006a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d0f2      	beq.n	8006a4a <SPI_EndRxTxTransaction+0x52>
 8006a64:	e000      	b.n	8006a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a66:	bf00      	nop
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000518 	.word	0x20000518
 8006a78:	165e9f81 	.word	0x165e9f81

08006a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e041      	b.n	8006b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fc f844 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f000 fd3a 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d001      	beq.n	8006b34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e03c      	b.n	8006bae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_TIM_Base_Start+0xa0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_TIM_Base_Start+0x5c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d013      	beq.n	8006b78 <HAL_TIM_Base_Start+0x5c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_TIM_Base_Start+0xa4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_TIM_Base_Start+0x5c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_TIM_Base_Start+0xa8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_TIM_Base_Start+0x5c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <HAL_TIM_Base_Start+0xac>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIM_Base_Start+0x5c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <HAL_TIM_Base_Start+0xb0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d010      	beq.n	8006bac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	e007      	b.n	8006bac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40014000 	.word	0x40014000

08006bd0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	f241 1311 	movw	r3, #4369	; 0x1111
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <HAL_TIM_Base_Stop+0x38>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	f240 4344 	movw	r3, #1092	; 0x444
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_TIM_Base_Stop+0x38>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d001      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e044      	b.n	8006cc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c62:	d013      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d111      	bne.n	8006cb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d010      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	e007      	b.n	8006cc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40000400 	.word	0x40000400
 8006cd8:	40000800 	.word	0x40000800
 8006cdc:	40000c00 	.word	0x40000c00
 8006ce0:	40014000 	.word	0x40014000

08006ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e041      	b.n	8006d7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f839 	bl	8006d82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f000 fc06 	bl	8007534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <HAL_TIM_PWM_Start+0x24>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	e022      	b.n	8006e02 <HAL_TIM_PWM_Start+0x6a>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d109      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0x3e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e015      	b.n	8006e02 <HAL_TIM_PWM_Start+0x6a>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d109      	bne.n	8006df0 <HAL_TIM_PWM_Start+0x58>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e008      	b.n	8006e02 <HAL_TIM_PWM_Start+0x6a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e068      	b.n	8006edc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_PWM_Start+0x82>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e18:	e013      	b.n	8006e42 <HAL_TIM_PWM_Start+0xaa>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d104      	bne.n	8006e2a <HAL_TIM_PWM_Start+0x92>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e28:	e00b      	b.n	8006e42 <HAL_TIM_PWM_Start+0xaa>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_PWM_Start+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e38:	e003      	b.n	8006e42 <HAL_TIM_PWM_Start+0xaa>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2201      	movs	r2, #1
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fe18 	bl	8007a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a23      	ldr	r2, [pc, #140]	; (8006ee4 <HAL_TIM_PWM_Start+0x14c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d107      	bne.n	8006e6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_TIM_PWM_Start+0x14c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x10e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d013      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x10e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <HAL_TIM_PWM_Start+0x150>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x10e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a17      	ldr	r2, [pc, #92]	; (8006eec <HAL_TIM_PWM_Start+0x154>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x10e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <HAL_TIM_PWM_Start+0x158>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIM_PWM_Start+0x10e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <HAL_TIM_PWM_Start+0x15c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d111      	bne.n	8006eca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b06      	cmp	r3, #6
 8006eb6:	d010      	beq.n	8006eda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec8:	e007      	b.n	8006eda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40014000 	.word	0x40014000

08006ef8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2200      	movs	r2, #0
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fdb8 	bl	8007a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <HAL_TIM_PWM_Stop+0xc4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d117      	bne.n	8006f4a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a1a      	ldr	r2, [r3, #32]
 8006f20:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <HAL_TIM_PWM_Stop+0x52>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a1a      	ldr	r2, [r3, #32]
 8006f30:	f240 4344 	movw	r3, #1092	; 0x444
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <HAL_TIM_PWM_Stop+0x52>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6a1a      	ldr	r2, [r3, #32]
 8006f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <HAL_TIM_PWM_Stop+0x82>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	f240 4344 	movw	r3, #1092	; 0x444
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <HAL_TIM_PWM_Stop+0x82>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0201 	bic.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Stop+0x92>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f88:	e013      	b.n	8006fb2 <HAL_TIM_PWM_Stop+0xba>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Stop+0xa2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f98:	e00b      	b.n	8006fb2 <HAL_TIM_PWM_Stop+0xba>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Stop+0xb2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	e003      	b.n	8006fb2 <HAL_TIM_PWM_Stop+0xba>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40010000 	.word	0x40010000

08006fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0202 	mvn.w	r2, #2
 8006fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa77 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa69 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa7a 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0204 	mvn.w	r2, #4
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa4d 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa3f 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa50 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b08      	cmp	r3, #8
 800707c:	d122      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b08      	cmp	r3, #8
 800708a:	d11b      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0208 	mvn.w	r2, #8
 8007094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2204      	movs	r2, #4
 800709a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa23 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 80070b0:	e005      	b.n	80070be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa15 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa26 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d122      	bne.n	8007118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0210 	mvn.w	r2, #16
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2208      	movs	r2, #8
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9f9 	bl	80074f6 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9eb 	bl	80074e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f9fc 	bl	800750a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d107      	bne.n	8007144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0201 	mvn.w	r2, #1
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fb f91e 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d10e      	bne.n	8007170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b80      	cmp	r3, #128	; 0x80
 800715e:	d107      	bne.n	8007170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fd26 	bl	8007bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d10e      	bne.n	800719c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d107      	bne.n	800719c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9c1 	bl	800751e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d10e      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d107      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0220 	mvn.w	r2, #32
 80071c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fcf0 	bl	8007ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0ae      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b0c      	cmp	r3, #12
 80071fa:	f200 809f 	bhi.w	800733c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007239 	.word	0x08007239
 8007208:	0800733d 	.word	0x0800733d
 800720c:	0800733d 	.word	0x0800733d
 8007210:	0800733d 	.word	0x0800733d
 8007214:	08007279 	.word	0x08007279
 8007218:	0800733d 	.word	0x0800733d
 800721c:	0800733d 	.word	0x0800733d
 8007220:	0800733d 	.word	0x0800733d
 8007224:	080072bb 	.word	0x080072bb
 8007228:	0800733d 	.word	0x0800733d
 800722c:	0800733d 	.word	0x0800733d
 8007230:	0800733d 	.word	0x0800733d
 8007234:	080072fb 	.word	0x080072fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f9f8 	bl	8007634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0208 	orr.w	r2, r2, #8
 8007252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0204 	bic.w	r2, r2, #4
 8007262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6999      	ldr	r1, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	619a      	str	r2, [r3, #24]
      break;
 8007276:	e064      	b.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa3e 	bl	8007700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6999      	ldr	r1, [r3, #24]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	619a      	str	r2, [r3, #24]
      break;
 80072b8:	e043      	b.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fa89 	bl	80077d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0208 	orr.w	r2, r2, #8
 80072d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0204 	bic.w	r2, r2, #4
 80072e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	61da      	str	r2, [r3, #28]
      break;
 80072f8:	e023      	b.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fad3 	bl	80078ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69d9      	ldr	r1, [r3, #28]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	021a      	lsls	r2, r3, #8
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	61da      	str	r2, [r3, #28]
      break;
 800733a:	e002      	b.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      break;
 8007340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_TIM_ConfigClockSource+0x1c>
 800736c:	2302      	movs	r3, #2
 800736e:	e0b4      	b.n	80074da <HAL_TIM_ConfigClockSource+0x186>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800738e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a8:	d03e      	beq.n	8007428 <HAL_TIM_ConfigClockSource+0xd4>
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	f200 8087 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b6:	f000 8086 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x172>
 80073ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073be:	d87f      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b70      	cmp	r3, #112	; 0x70
 80073c2:	d01a      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0xa6>
 80073c4:	2b70      	cmp	r3, #112	; 0x70
 80073c6:	d87b      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b60      	cmp	r3, #96	; 0x60
 80073ca:	d050      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x11a>
 80073cc:	2b60      	cmp	r3, #96	; 0x60
 80073ce:	d877      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b50      	cmp	r3, #80	; 0x50
 80073d2:	d03c      	beq.n	800744e <HAL_TIM_ConfigClockSource+0xfa>
 80073d4:	2b50      	cmp	r3, #80	; 0x50
 80073d6:	d873      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b40      	cmp	r3, #64	; 0x40
 80073da:	d058      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x13a>
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d86f      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b30      	cmp	r3, #48	; 0x30
 80073e2:	d064      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x15a>
 80073e4:	2b30      	cmp	r3, #48	; 0x30
 80073e6:	d86b      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d060      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x15a>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d867      	bhi.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d05c      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d05a      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x15a>
 80073f8:	e062      	b.n	80074c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6899      	ldr	r1, [r3, #8]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f000 fb19 	bl	8007a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800741c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	609a      	str	r2, [r3, #8]
      break;
 8007426:	e04f      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6899      	ldr	r1, [r3, #8]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f000 fb02 	bl	8007a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800744a:	609a      	str	r2, [r3, #8]
      break;
 800744c:	e03c      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fa76 	bl	800794c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2150      	movs	r1, #80	; 0x50
 8007466:	4618      	mov	r0, r3
 8007468:	f000 facf 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 800746c:	e02c      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 fa95 	bl	80079aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2160      	movs	r1, #96	; 0x60
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fabf 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 800748c:	e01c      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	461a      	mov	r2, r3
 800749c:	f000 fa56 	bl	800794c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 faaf 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 80074ac:	e00c      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f000 faa6 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 80074be:	e003      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
      break;
 80074c4:	e000      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a34      	ldr	r2, [pc, #208]	; (8007618 <TIM_Base_SetConfig+0xe4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00f      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d00b      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a31      	ldr	r2, [pc, #196]	; (800761c <TIM_Base_SetConfig+0xe8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a30      	ldr	r2, [pc, #192]	; (8007620 <TIM_Base_SetConfig+0xec>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x38>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a2f      	ldr	r2, [pc, #188]	; (8007624 <TIM_Base_SetConfig+0xf0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a25      	ldr	r2, [pc, #148]	; (8007618 <TIM_Base_SetConfig+0xe4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01b      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d017      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a22      	ldr	r2, [pc, #136]	; (800761c <TIM_Base_SetConfig+0xe8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a21      	ldr	r2, [pc, #132]	; (8007620 <TIM_Base_SetConfig+0xec>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a20      	ldr	r2, [pc, #128]	; (8007624 <TIM_Base_SetConfig+0xf0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1f      	ldr	r2, [pc, #124]	; (8007628 <TIM_Base_SetConfig+0xf4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1e      	ldr	r2, [pc, #120]	; (800762c <TIM_Base_SetConfig+0xf8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0x8a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1d      	ldr	r2, [pc, #116]	; (8007630 <TIM_Base_SetConfig+0xfc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a08      	ldr	r2, [pc, #32]	; (8007618 <TIM_Base_SetConfig+0xe4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d103      	bne.n	8007604 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	615a      	str	r2, [r3, #20]
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40014000 	.word	0x40014000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800

08007634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f023 0201 	bic.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f023 0302 	bic.w	r3, r3, #2
 800767c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a1c      	ldr	r2, [pc, #112]	; (80076fc <TIM_OC1_SetConfig+0xc8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d10c      	bne.n	80076aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0308 	bic.w	r3, r3, #8
 8007696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 0304 	bic.w	r3, r3, #4
 80076a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a13      	ldr	r2, [pc, #76]	; (80076fc <TIM_OC1_SetConfig+0xc8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40010000 	.word	0x40010000

08007700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0210 	bic.w	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0320 	bic.w	r3, r3, #32
 800774a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <TIM_OC2_SetConfig+0xd4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10d      	bne.n	800777c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <TIM_OC2_SetConfig+0xd4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d113      	bne.n	80077ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40010000 	.word	0x40010000

080077d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <TIM_OC3_SetConfig+0xd0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d10d      	bne.n	8007852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800783c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <TIM_OC3_SetConfig+0xd0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d113      	bne.n	8007882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40010000 	.word	0x40010000

080078ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	031b      	lsls	r3, r3, #12
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a10      	ldr	r2, [pc, #64]	; (8007948 <TIM_OC4_SetConfig+0x9c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d109      	bne.n	8007920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	019b      	lsls	r3, r3, #6
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000

0800794c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f023 0201 	bic.w	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f023 030a 	bic.w	r3, r3, #10
 8007988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	621a      	str	r2, [r3, #32]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b087      	sub	sp, #28
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f023 0210 	bic.w	r2, r3, #16
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	031b      	lsls	r3, r3, #12
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f043 0307 	orr.w	r3, r3, #7
 8007a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	021a      	lsls	r2, r3, #8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	609a      	str	r2, [r3, #8]
}
 8007a74:	bf00      	nop
 8007a76:	371c      	adds	r7, #28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	2201      	movs	r2, #1
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e050      	b.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d018      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d013      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00e      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d009      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d004      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a13      	ldr	r2, [pc, #76]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10c      	bne.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40000c00 	.word	0x40000c00
 8007ba4:	40014000 	.word	0x40014000

08007ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	f107 001c 	add.w	r0, r7, #28
 8007bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d122      	bne.n	8007c2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d105      	bne.n	8007c22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fbee 	bl	8009404 <USB_CoreReset>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
 8007c2c:	e01a      	b.n	8007c64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fbe2 	bl	8009404 <USB_CoreReset>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
 8007c56:	e005      	b.n	8007c64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d10b      	bne.n	8007c82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f043 0206 	orr.w	r2, r3, #6
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f043 0220 	orr.w	r2, r3, #32
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c8e:	b004      	add	sp, #16
 8007c90:	4770      	bx	lr
	...

08007c94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d165      	bne.n	8007d74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a41      	ldr	r2, [pc, #260]	; (8007db0 <USB_SetTurnaroundTime+0x11c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0x2a>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a40      	ldr	r2, [pc, #256]	; (8007db4 <USB_SetTurnaroundTime+0x120>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cb8:	230f      	movs	r3, #15
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e062      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <USB_SetTurnaroundTime+0x120>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d306      	bcc.n	8007cd4 <USB_SetTurnaroundTime+0x40>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <USB_SetTurnaroundTime+0x124>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d202      	bcs.n	8007cd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007cce:	230e      	movs	r3, #14
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	e057      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4a38      	ldr	r2, [pc, #224]	; (8007db8 <USB_SetTurnaroundTime+0x124>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d306      	bcc.n	8007cea <USB_SetTurnaroundTime+0x56>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4a37      	ldr	r2, [pc, #220]	; (8007dbc <USB_SetTurnaroundTime+0x128>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d202      	bcs.n	8007cea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ce4:	230d      	movs	r3, #13
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	e04c      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a33      	ldr	r2, [pc, #204]	; (8007dbc <USB_SetTurnaroundTime+0x128>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d306      	bcc.n	8007d00 <USB_SetTurnaroundTime+0x6c>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	4a32      	ldr	r2, [pc, #200]	; (8007dc0 <USB_SetTurnaroundTime+0x12c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d802      	bhi.n	8007d00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	e041      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4a2f      	ldr	r2, [pc, #188]	; (8007dc0 <USB_SetTurnaroundTime+0x12c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d906      	bls.n	8007d16 <USB_SetTurnaroundTime+0x82>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4a2e      	ldr	r2, [pc, #184]	; (8007dc4 <USB_SetTurnaroundTime+0x130>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d802      	bhi.n	8007d16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d10:	230b      	movs	r3, #11
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e036      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4a2a      	ldr	r2, [pc, #168]	; (8007dc4 <USB_SetTurnaroundTime+0x130>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d906      	bls.n	8007d2c <USB_SetTurnaroundTime+0x98>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <USB_SetTurnaroundTime+0x134>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d802      	bhi.n	8007d2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d26:	230a      	movs	r3, #10
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	e02b      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <USB_SetTurnaroundTime+0x134>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d906      	bls.n	8007d42 <USB_SetTurnaroundTime+0xae>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <USB_SetTurnaroundTime+0x138>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d202      	bcs.n	8007d42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d3c:	2309      	movs	r3, #9
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e020      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <USB_SetTurnaroundTime+0x138>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d306      	bcc.n	8007d58 <USB_SetTurnaroundTime+0xc4>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4a20      	ldr	r2, [pc, #128]	; (8007dd0 <USB_SetTurnaroundTime+0x13c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d802      	bhi.n	8007d58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d52:	2308      	movs	r3, #8
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e015      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <USB_SetTurnaroundTime+0x13c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d906      	bls.n	8007d6e <USB_SetTurnaroundTime+0xda>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <USB_SetTurnaroundTime+0x140>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d202      	bcs.n	8007d6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d68:	2307      	movs	r3, #7
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e00a      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d6e:	2306      	movs	r3, #6
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	e007      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d7a:	2309      	movs	r3, #9
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e001      	b.n	8007d84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d80:	2309      	movs	r3, #9
 8007d82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	029b      	lsls	r3, r3, #10
 8007d98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	00d8acbf 	.word	0x00d8acbf
 8007db4:	00e4e1c0 	.word	0x00e4e1c0
 8007db8:	00f42400 	.word	0x00f42400
 8007dbc:	01067380 	.word	0x01067380
 8007dc0:	011a499f 	.word	0x011a499f
 8007dc4:	01312cff 	.word	0x01312cff
 8007dc8:	014ca43f 	.word	0x014ca43f
 8007dcc:	016e3600 	.word	0x016e3600
 8007dd0:	01a6ab1f 	.word	0x01a6ab1f
 8007dd4:	01e84800 	.word	0x01e84800

08007dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f043 0201 	orr.w	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d115      	bne.n	8007e6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	f7fb f838 	bl	8002ec0 <HAL_Delay>
      ms++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fa45 	bl	80092e6 <USB_GetMode>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d01e      	beq.n	8007ea0 <USB_SetCurrentMode+0x84>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b31      	cmp	r3, #49	; 0x31
 8007e66:	d9f0      	bls.n	8007e4a <USB_SetCurrentMode+0x2e>
 8007e68:	e01a      	b.n	8007ea0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d115      	bne.n	8007e9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	f7fb f81f 	bl	8002ec0 <HAL_Delay>
      ms++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fa2c 	bl	80092e6 <USB_GetMode>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <USB_SetCurrentMode+0x84>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b31      	cmp	r3, #49	; 0x31
 8007e98:	d9f0      	bls.n	8007e7c <USB_SetCurrentMode+0x60>
 8007e9a:	e001      	b.n	8007ea0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e005      	b.n	8007eac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b32      	cmp	r3, #50	; 0x32
 8007ea4:	d101      	bne.n	8007eaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	e009      	b.n	8007ee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3340      	adds	r3, #64	; 0x40
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b0e      	cmp	r3, #14
 8007eec:	d9f2      	bls.n	8007ed4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11c      	bne.n	8007f2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f02:	f043 0302 	orr.w	r3, r3, #2
 8007f06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8007f2c:	e00b      	b.n	8007f46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	4619      	mov	r1, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	461a      	mov	r2, r3
 8007f62:	680b      	ldr	r3, [r1, #0]
 8007f64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10c      	bne.n	8007f86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f72:	2100      	movs	r1, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f965 	bl	8008244 <USB_SetDevSpeed>
 8007f7a:	e008      	b.n	8007f8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f960 	bl	8008244 <USB_SetDevSpeed>
 8007f84:	e003      	b.n	8007f8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f86:	2103      	movs	r1, #3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f95b 	bl	8008244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f8e:	2110      	movs	r1, #16
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8f3 	bl	800817c <USB_FlushTxFifo>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f91f 	bl	80081e4 <USB_FlushRxFifo>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fce:	461a      	mov	r2, r3
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	e043      	b.n	8008062 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff0:	d118      	bne.n	8008024 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	461a      	mov	r2, r3
 8008006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	e013      	b.n	8008036 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	461a      	mov	r2, r3
 800801c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e008      	b.n	8008036 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	461a      	mov	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	461a      	mov	r2, r3
 8008044:	2300      	movs	r3, #0
 8008046:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	461a      	mov	r2, r3
 8008056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800805a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3301      	adds	r3, #1
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	429a      	cmp	r2, r3
 8008068:	d3b7      	bcc.n	8007fda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800806a:	2300      	movs	r3, #0
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	e043      	b.n	80080f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008086:	d118      	bne.n	80080ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809a:	461a      	mov	r2, r3
 800809c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e013      	b.n	80080cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b0:	461a      	mov	r2, r3
 80080b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e008      	b.n	80080cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c6:	461a      	mov	r2, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	461a      	mov	r2, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	461a      	mov	r2, r3
 80080ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3301      	adds	r3, #1
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d3b7      	bcc.n	8008070 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008112:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008120:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	2b00      	cmp	r3, #0
 8008126:	d105      	bne.n	8008134 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f043 0210 	orr.w	r2, r3, #16
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <USB_DevInit+0x2c4>)
 800813a:	4313      	orrs	r3, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f043 0208 	orr.w	r2, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d107      	bne.n	8008168 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008160:	f043 0304 	orr.w	r3, r3, #4
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008174:	b004      	add	sp, #16
 8008176:	4770      	bx	lr
 8008178:	803c3800 	.word	0x803c3800

0800817c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <USB_FlushTxFifo+0x64>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d901      	bls.n	800819c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e01b      	b.n	80081d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	daf2      	bge.n	800818a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	019b      	lsls	r3, r3, #6
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <USB_FlushTxFifo+0x64>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d901      	bls.n	80081c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e006      	b.n	80081d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d0f0      	beq.n	80081b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	00030d40 	.word	0x00030d40

080081e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a11      	ldr	r2, [pc, #68]	; (8008240 <USB_FlushRxFifo+0x5c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e018      	b.n	8008234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	daf2      	bge.n	80081f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2210      	movs	r2, #16
 8008212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4a08      	ldr	r2, [pc, #32]	; (8008240 <USB_FlushRxFifo+0x5c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d901      	bls.n	8008226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e006      	b.n	8008234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0310 	and.w	r3, r3, #16
 800822e:	2b10      	cmp	r3, #16
 8008230:	d0f0      	beq.n	8008214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	00030d40 	.word	0x00030d40

08008244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008264:	4313      	orrs	r3, r2
 8008266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008276:	b480      	push	{r7}
 8008278:	b087      	sub	sp, #28
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0306 	and.w	r3, r3, #6
 800828e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
 800829a:	e00a      	b.n	80082b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d002      	beq.n	80082a8 <USB_GetDevSpeed+0x32>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b06      	cmp	r3, #6
 80082a6:	d102      	bne.n	80082ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80082a8:	2302      	movs	r3, #2
 80082aa:	75fb      	strb	r3, [r7, #23]
 80082ac:	e001      	b.n	80082b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80082ae:	230f      	movs	r3, #15
 80082b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d13a      	bne.n	8008352 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	2101      	movs	r1, #1
 80082ee:	fa01 f303 	lsl.w	r3, r1, r3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d155      	bne.n	80083c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	059b      	lsls	r3, r3, #22
 8008336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008338:	4313      	orrs	r3, r2
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	e036      	b.n	80083c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	2101      	movs	r1, #1
 8008364:	fa01 f303 	lsl.w	r3, r1, r3
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008370:	4313      	orrs	r3, r2
 8008372:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d11a      	bne.n	80083c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	791b      	ldrb	r3, [r3, #4]
 80083a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083a6:	430b      	orrs	r3, r1
 80083a8:	4313      	orrs	r3, r2
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
	...

080083d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d161      	bne.n	80084b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008402:	d11f      	bne.n	8008444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	2101      	movs	r1, #1
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	b29b      	uxth	r3, r3
 800845c:	43db      	mvns	r3, r3
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008464:	4013      	ands	r3, r2
 8008466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	2101      	movs	r1, #1
 800847a:	fa01 f303 	lsl.w	r3, r1, r3
 800847e:	b29b      	uxth	r3, r3
 8008480:	43db      	mvns	r3, r3
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008488:	4013      	ands	r3, r2
 800848a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	0159      	lsls	r1, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	440b      	add	r3, r1
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	4619      	mov	r1, r3
 80084a8:	4b35      	ldr	r3, [pc, #212]	; (8008580 <USB_DeactivateEndpoint+0x1b0>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	600b      	str	r3, [r1, #0]
 80084ae:	e060      	b.n	8008572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c6:	d11f      	bne.n	8008508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	2101      	movs	r1, #1
 800851a:	fa01 f303 	lsl.w	r3, r1, r3
 800851e:	041b      	lsls	r3, r3, #16
 8008520:	43db      	mvns	r3, r3
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008528:	4013      	ands	r3, r2
 800852a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	43db      	mvns	r3, r3
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800854c:	4013      	ands	r3, r2
 800854e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	0159      	lsls	r1, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	440b      	add	r3, r1
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	4619      	mov	r1, r3
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <USB_DeactivateEndpoint+0x1b4>)
 800856e:	4013      	ands	r3, r2
 8008570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	ec337800 	.word	0xec337800
 8008584:	eff37800 	.word	0xeff37800

08008588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	f040 815c 	bne.w	8008862 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d132      	bne.n	8008618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008610:	0cdb      	lsrs	r3, r3, #19
 8008612:	04db      	lsls	r3, r3, #19
 8008614:	6113      	str	r3, [r2, #16]
 8008616:	e074      	b.n	8008702 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	0151      	lsls	r1, r2, #5
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	440a      	add	r2, r1
 800862e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008632:	0cdb      	lsrs	r3, r3, #19
 8008634:	04db      	lsls	r3, r3, #19
 8008636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	440a      	add	r2, r1
 800864e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008652:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008656:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800865a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008668:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6999      	ldr	r1, [r3, #24]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	440b      	add	r3, r1
 8008674:	1e59      	subs	r1, r3, #1
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	fbb1 f3f3 	udiv	r3, r1, r3
 800867e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008680:	4b9d      	ldr	r3, [pc, #628]	; (80088f8 <USB_EPStartXfer+0x370>)
 8008682:	400b      	ands	r3, r1
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	0148      	lsls	r0, r1, #5
 8008688:	69f9      	ldr	r1, [r7, #28]
 800868a:	4401      	add	r1, r0
 800868c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008690:	4313      	orrs	r3, r2
 8008692:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	0148      	lsls	r0, r1, #5
 80086ae:	69f9      	ldr	r1, [r7, #28]
 80086b0:	4401      	add	r1, r0
 80086b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086b6:	4313      	orrs	r3, r2
 80086b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d11f      	bne.n	8008702 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80086e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008700:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d14b      	bne.n	80087a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	791b      	ldrb	r3, [r3, #4]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d128      	bne.n	800877e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008738:	2b00      	cmp	r3, #0
 800873a:	d110      	bne.n	800875e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	440a      	add	r2, r1
 8008752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e00f      	b.n	800877e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800877c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	e133      	b.n	8008a08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	791b      	ldrb	r3, [r3, #4]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d015      	beq.n	80087f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 811b 	beq.w	8008a08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	2101      	movs	r1, #1
 80087e4:	fa01 f303 	lsl.w	r3, r1, r3
 80087e8:	69f9      	ldr	r1, [r7, #28]
 80087ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ee:	4313      	orrs	r3, r2
 80087f0:	634b      	str	r3, [r1, #52]	; 0x34
 80087f2:	e109      	b.n	8008a08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008800:	2b00      	cmp	r3, #0
 8008802:	d110      	bne.n	8008826 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e00f      	b.n	8008846 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	440a      	add	r2, r1
 800883c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008844:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6919      	ldr	r1, [r3, #16]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	b298      	uxth	r0, r3
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	4603      	mov	r3, r0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 fade 	bl	8008e1c <USB_WritePacket>
 8008860:	e0d2      	b.n	8008a08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	0151      	lsls	r1, r2, #5
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	440a      	add	r2, r1
 8008878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887c:	0cdb      	lsrs	r3, r3, #19
 800887e:	04db      	lsls	r3, r3, #19
 8008880:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d126      	bne.n	80088fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	0148      	lsls	r0, r1, #5
 80088c8:	69f9      	ldr	r1, [r7, #28]
 80088ca:	4401      	add	r1, r0
 80088cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088d0:	4313      	orrs	r3, r2
 80088d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f2:	6113      	str	r3, [r2, #16]
 80088f4:	e03a      	b.n	800896c <USB_EPStartXfer+0x3e4>
 80088f6:	bf00      	nop
 80088f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4413      	add	r3, r2
 8008906:	1e5a      	subs	r2, r3, #1
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008910:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	8afa      	ldrh	r2, [r7, #22]
 8008918:	fb03 f202 	mul.w	r2, r3, r2
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892c:	691a      	ldr	r2, [r3, #16]
 800892e:	8afb      	ldrh	r3, [r7, #22]
 8008930:	04d9      	lsls	r1, r3, #19
 8008932:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <USB_EPStartXfer+0x48c>)
 8008934:	400b      	ands	r3, r1
 8008936:	69b9      	ldr	r1, [r7, #24]
 8008938:	0148      	lsls	r0, r1, #5
 800893a:	69f9      	ldr	r1, [r7, #28]
 800893c:	4401      	add	r1, r0
 800893e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008942:	4313      	orrs	r3, r2
 8008944:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	0148      	lsls	r0, r1, #5
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	4401      	add	r1, r0
 8008964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008968:	4313      	orrs	r3, r2
 800896a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10d      	bne.n	800898e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6919      	ldr	r1, [r3, #16]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	460a      	mov	r2, r1
 800898c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	791b      	ldrb	r3, [r3, #4]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d128      	bne.n	80089e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d110      	bne.n	80089c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	e00f      	b.n	80089e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	1ff80000 	.word	0x1ff80000

08008a18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f040 80ce 	bne.w	8008bd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d132      	bne.n	8008aa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa0:	0cdb      	lsrs	r3, r3, #19
 8008aa2:	04db      	lsls	r3, r3, #19
 8008aa4:	6113      	str	r3, [r2, #16]
 8008aa6:	e04e      	b.n	8008b46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac2:	0cdb      	lsrs	r3, r3, #19
 8008ac4:	04db      	lsls	r3, r3, #19
 8008ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008aea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	699a      	ldr	r2, [r3, #24]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d903      	bls.n	8008b00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b36:	6939      	ldr	r1, [r7, #16]
 8008b38:	0148      	lsls	r0, r1, #5
 8008b3a:	6979      	ldr	r1, [r7, #20]
 8008b3c:	4401      	add	r1, r0
 8008b3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d11e      	bne.n	8008b8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	461a      	mov	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	e097      	b.n	8008cba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ba8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 8083 	beq.w	8008cba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bca:	6979      	ldr	r1, [r7, #20]
 8008bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	634b      	str	r3, [r1, #52]	; 0x34
 8008bd4:	e071      	b.n	8008cba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf0:	0cdb      	lsrs	r3, r3, #19
 8008bf2:	04db      	lsls	r3, r3, #19
 8008bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c68:	6939      	ldr	r1, [r7, #16]
 8008c6a:	0148      	lsls	r0, r1, #5
 8008c6c:	6979      	ldr	r1, [r7, #20]
 8008c6e:	4401      	add	r1, r0
 8008c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c74:	4313      	orrs	r3, r2
 8008c76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d10d      	bne.n	8008c9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6919      	ldr	r1, [r3, #16]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c96:	460a      	mov	r2, r1
 8008c98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	785b      	ldrb	r3, [r3, #1]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d14a      	bne.n	8008d7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cfe:	f040 8086 	bne.w	8008e0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	0151      	lsls	r1, r2, #5
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	7812      	ldrb	r2, [r2, #0]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d902      	bls.n	8008d60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d5e:	e056      	b.n	8008e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d78:	d0e7      	beq.n	8008d4a <USB_EPStopXfer+0x82>
 8008d7a:	e048      	b.n	8008e0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d94:	d13b      	bne.n	8008e0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	7812      	ldrb	r2, [r2, #0]
 8008daa:	0151      	lsls	r1, r2, #5
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	440a      	add	r2, r1
 8008db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008db8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	7812      	ldrb	r2, [r2, #0]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ddc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d902      	bls.n	8008df4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
          break;
 8008df2:	e00c      	b.n	8008e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e0c:	d0e7      	beq.n	8008dde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	; 0x24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	71fb      	strb	r3, [r7, #7]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d123      	bne.n	8008e8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e42:	88bb      	ldrh	r3, [r7, #4]
 8008e44:	3303      	adds	r3, #3
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	e018      	b.n	8008e82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	031a      	lsls	r2, r3, #12
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	3301      	adds	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	3301      	adds	r3, #1
 8008e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d3e2      	bcc.n	8008e50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3724      	adds	r7, #36	; 0x24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b08b      	sub	sp, #44	; 0x2c
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	623b      	str	r3, [r7, #32]
 8008ec2:	e014      	b.n	8008eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	3301      	adds	r3, #1
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	3301      	adds	r3, #1
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	3301      	adds	r3, #1
 8008eec:	623b      	str	r3, [r7, #32]
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d3e6      	bcc.n	8008ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ef6:	8bfb      	ldrh	r3, [r7, #30]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01e      	beq.n	8008f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f06:	461a      	mov	r2, r3
 8008f08:	f107 0310 	add.w	r3, r7, #16
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	701a      	strb	r2, [r3, #0]
      i++;
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	3301      	adds	r3, #1
 8008f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f2e:	8bfb      	ldrh	r3, [r7, #30]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f34:	8bfb      	ldrh	r3, [r7, #30]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1ea      	bne.n	8008f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	372c      	adds	r7, #44	; 0x2c
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d12c      	bne.n	8008fbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	db12      	blt.n	8008f9c <USB_EPSetStall+0x54>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00f      	beq.n	8008f9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	e02b      	b.n	8009016 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	db12      	blt.n	8008ff6 <USB_EPSetStall+0xae>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00f      	beq.n	8008ff6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ff4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d128      	bne.n	8009092 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	440a      	add	r2, r1
 8009056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800905a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800905e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	2b03      	cmp	r3, #3
 8009066:	d003      	beq.n	8009070 <USB_EPClearStall+0x4c>
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	791b      	ldrb	r3, [r3, #4]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d138      	bne.n	80090e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	440a      	add	r2, r1
 8009086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e027      	b.n	80090e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	791b      	ldrb	r3, [r3, #4]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d003      	beq.n	80090c2 <USB_EPClearStall+0x9e>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	791b      	ldrb	r3, [r3, #4]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d10f      	bne.n	80090e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800910e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009112:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916a:	f023 0302 	bic.w	r3, r3, #2
 800916e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ac:	f043 0302 	orr.w	r3, r3, #2
 80091b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4013      	ands	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091d8:	68fb      	ldr	r3, [r7, #12]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	4013      	ands	r3, r2
 8009208:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	0c1b      	lsrs	r3, r3, #16
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	4013      	ands	r3, r2
 800923c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	b29b      	uxth	r3, r3
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800924e:	b480      	push	{r7}
 8009250:	b085      	sub	sp, #20
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	4013      	ands	r3, r2
 800927a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800927c:	68bb      	ldr	r3, [r7, #8]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800928a:	b480      	push	{r7}
 800928c:	b087      	sub	sp, #28
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ba:	01db      	lsls	r3, r3, #7
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	4013      	ands	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092d8:	68bb      	ldr	r3, [r7, #8]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f003 0301 	and.w	r3, r3, #1
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009302:	b480      	push	{r7}
 8009304:	b085      	sub	sp, #20
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	460b      	mov	r3, r1
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	333c      	adds	r3, #60	; 0x3c
 800935e:	3304      	adds	r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4a26      	ldr	r2, [pc, #152]	; (8009400 <USB_EP0_OutStart+0xb8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d90a      	bls.n	8009382 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937c:	d101      	bne.n	8009382 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e037      	b.n	80093f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	461a      	mov	r2, r3
 800938a:	2300      	movs	r3, #0
 800938c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800939c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b0:	f043 0318 	orr.w	r3, r3, #24
 80093b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10f      	bne.n	80093f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	461a      	mov	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	4f54300a 	.word	0x4f54300a

08009404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4a13      	ldr	r2, [pc, #76]	; (8009468 <USB_CoreReset+0x64>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d901      	bls.n	8009422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e01b      	b.n	800945a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	daf2      	bge.n	8009410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f043 0201 	orr.w	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a09      	ldr	r2, [pc, #36]	; (8009468 <USB_CoreReset+0x64>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d901      	bls.n	800944c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e006      	b.n	800945a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d0f0      	beq.n	800943a <USB_CoreReset+0x36>

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	00030d40 	.word	0x00030d40

0800946c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009478:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800947c:	f005 fb64 	bl	800eb48 <USBD_static_malloc>
 8009480:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d109      	bne.n	800949c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	32b0      	adds	r2, #176	; 0xb0
 8009492:	2100      	movs	r1, #0
 8009494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009498:	2302      	movs	r3, #2
 800949a:	e0d4      	b.n	8009646 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800949c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f005 fbdc 	bl	800ec60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32b0      	adds	r2, #176	; 0xb0
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32b0      	adds	r2, #176	; 0xb0
 80094c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7c1b      	ldrb	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d138      	bne.n	8009546 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094d4:	4b5e      	ldr	r3, [pc, #376]	; (8009650 <USBD_CDC_Init+0x1e4>)
 80094d6:	7819      	ldrb	r1, [r3, #0]
 80094d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094dc:	2202      	movs	r2, #2
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f005 fa0f 	bl	800e902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094e4:	4b5a      	ldr	r3, [pc, #360]	; (8009650 <USBD_CDC_Init+0x1e4>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	3324      	adds	r3, #36	; 0x24
 80094fa:	2201      	movs	r2, #1
 80094fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094fe:	4b55      	ldr	r3, [pc, #340]	; (8009654 <USBD_CDC_Init+0x1e8>)
 8009500:	7819      	ldrb	r1, [r3, #0]
 8009502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009506:	2202      	movs	r2, #2
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f005 f9fa 	bl	800e902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800950e:	4b51      	ldr	r3, [pc, #324]	; (8009654 <USBD_CDC_Init+0x1e8>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 020f 	and.w	r2, r3, #15
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009526:	2201      	movs	r2, #1
 8009528:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800952a:	4b4b      	ldr	r3, [pc, #300]	; (8009658 <USBD_CDC_Init+0x1ec>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3326      	adds	r3, #38	; 0x26
 8009540:	2210      	movs	r2, #16
 8009542:	801a      	strh	r2, [r3, #0]
 8009544:	e035      	b.n	80095b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009546:	4b42      	ldr	r3, [pc, #264]	; (8009650 <USBD_CDC_Init+0x1e4>)
 8009548:	7819      	ldrb	r1, [r3, #0]
 800954a:	2340      	movs	r3, #64	; 0x40
 800954c:	2202      	movs	r2, #2
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f005 f9d7 	bl	800e902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009554:	4b3e      	ldr	r3, [pc, #248]	; (8009650 <USBD_CDC_Init+0x1e4>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3324      	adds	r3, #36	; 0x24
 800956a:	2201      	movs	r2, #1
 800956c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800956e:	4b39      	ldr	r3, [pc, #228]	; (8009654 <USBD_CDC_Init+0x1e8>)
 8009570:	7819      	ldrb	r1, [r3, #0]
 8009572:	2340      	movs	r3, #64	; 0x40
 8009574:	2202      	movs	r2, #2
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f005 f9c3 	bl	800e902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800957c:	4b35      	ldr	r3, [pc, #212]	; (8009654 <USBD_CDC_Init+0x1e8>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 020f 	and.w	r2, r3, #15
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009594:	2201      	movs	r2, #1
 8009596:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009598:	4b2f      	ldr	r3, [pc, #188]	; (8009658 <USBD_CDC_Init+0x1ec>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	f003 020f 	and.w	r2, r3, #15
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	3326      	adds	r3, #38	; 0x26
 80095ae:	2210      	movs	r2, #16
 80095b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095b2:	4b29      	ldr	r3, [pc, #164]	; (8009658 <USBD_CDC_Init+0x1ec>)
 80095b4:	7819      	ldrb	r1, [r3, #0]
 80095b6:	2308      	movs	r3, #8
 80095b8:	2203      	movs	r2, #3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f005 f9a1 	bl	800e902 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80095c0:	4b25      	ldr	r3, [pc, #148]	; (8009658 <USBD_CDC_Init+0x1ec>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	3324      	adds	r3, #36	; 0x24
 80095d6:	2201      	movs	r2, #1
 80095d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	33b0      	adds	r3, #176	; 0xb0
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009610:	2302      	movs	r3, #2
 8009612:	e018      	b.n	8009646 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7c1b      	ldrb	r3, [r3, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800961c:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <USBD_CDC_Init+0x1e8>)
 800961e:	7819      	ldrb	r1, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f005 fa58 	bl	800eae0 <USBD_LL_PrepareReceive>
 8009630:	e008      	b.n	8009644 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009632:	4b08      	ldr	r3, [pc, #32]	; (8009654 <USBD_CDC_Init+0x1e8>)
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800963c:	2340      	movs	r3, #64	; 0x40
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f005 fa4e 	bl	800eae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	200005ab 	.word	0x200005ab
 8009654:	200005ac 	.word	0x200005ac
 8009658:	200005ad 	.word	0x200005ad

0800965c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009668:	4b3a      	ldr	r3, [pc, #232]	; (8009754 <USBD_CDC_DeInit+0xf8>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f005 f96d 	bl	800e94e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009674:	4b37      	ldr	r3, [pc, #220]	; (8009754 <USBD_CDC_DeInit+0xf8>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 020f 	and.w	r2, r3, #15
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	3324      	adds	r3, #36	; 0x24
 800968a:	2200      	movs	r2, #0
 800968c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800968e:	4b32      	ldr	r3, [pc, #200]	; (8009758 <USBD_CDC_DeInit+0xfc>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f005 f95a 	bl	800e94e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <USBD_CDC_DeInit+0xfc>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	f003 020f 	and.w	r2, r3, #15
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096b2:	2200      	movs	r2, #0
 80096b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80096b6:	4b29      	ldr	r3, [pc, #164]	; (800975c <USBD_CDC_DeInit+0x100>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f005 f946 	bl	800e94e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80096c2:	4b26      	ldr	r3, [pc, #152]	; (800975c <USBD_CDC_DeInit+0x100>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	f003 020f 	and.w	r2, r3, #15
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4613      	mov	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	3324      	adds	r3, #36	; 0x24
 80096d8:	2200      	movs	r2, #0
 80096da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80096dc:	4b1f      	ldr	r3, [pc, #124]	; (800975c <USBD_CDC_DeInit+0x100>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 020f 	and.w	r2, r3, #15
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	440b      	add	r3, r1
 80096f0:	3326      	adds	r3, #38	; 0x26
 80096f2:	2200      	movs	r2, #0
 80096f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	32b0      	adds	r2, #176	; 0xb0
 8009700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01f      	beq.n	8009748 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	33b0      	adds	r3, #176	; 0xb0
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	32b0      	adds	r2, #176	; 0xb0
 8009726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972a:	4618      	mov	r0, r3
 800972c:	f005 fa1a 	bl	800eb64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	32b0      	adds	r2, #176	; 0xb0
 800973a:	2100      	movs	r1, #0
 800973c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200005ab 	.word	0x200005ab
 8009758:	200005ac 	.word	0x200005ac
 800975c:	200005ad 	.word	0x200005ad

08009760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	32b0      	adds	r2, #176	; 0xb0
 8009774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009778:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800978c:	2303      	movs	r3, #3
 800978e:	e0bf      	b.n	8009910 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009798:	2b00      	cmp	r3, #0
 800979a:	d050      	beq.n	800983e <USBD_CDC_Setup+0xde>
 800979c:	2b20      	cmp	r3, #32
 800979e:	f040 80af 	bne.w	8009900 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	88db      	ldrh	r3, [r3, #6]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d03a      	beq.n	8009820 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b25b      	sxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da1b      	bge.n	80097ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	33b0      	adds	r3, #176	; 0xb0
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80097ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	88d2      	ldrh	r2, [r2, #6]
 80097d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b07      	cmp	r3, #7
 80097d8:	bf28      	it	cs
 80097da:	2307      	movcs	r3, #7
 80097dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	89fa      	ldrh	r2, [r7, #14]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fd43 	bl	800b270 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80097ea:	e090      	b.n	800990e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	785a      	ldrb	r2, [r3, #1]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	88db      	ldrh	r3, [r3, #6]
 80097fa:	2b3f      	cmp	r3, #63	; 0x3f
 80097fc:	d803      	bhi.n	8009806 <USBD_CDC_Setup+0xa6>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	88db      	ldrh	r3, [r3, #6]
 8009802:	b2da      	uxtb	r2, r3
 8009804:	e000      	b.n	8009808 <USBD_CDC_Setup+0xa8>
 8009806:	2240      	movs	r2, #64	; 0x40
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800980e:	6939      	ldr	r1, [r7, #16]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009816:	461a      	mov	r2, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 fd55 	bl	800b2c8 <USBD_CtlPrepareRx>
      break;
 800981e:	e076      	b.n	800990e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	33b0      	adds	r3, #176	; 0xb0
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	7850      	ldrb	r0, [r2, #1]
 8009836:	2200      	movs	r2, #0
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	4798      	blx	r3
      break;
 800983c:	e067      	b.n	800990e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	2b0b      	cmp	r3, #11
 8009844:	d851      	bhi.n	80098ea <USBD_CDC_Setup+0x18a>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <USBD_CDC_Setup+0xec>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800987d 	.word	0x0800987d
 8009850:	080098f9 	.word	0x080098f9
 8009854:	080098eb 	.word	0x080098eb
 8009858:	080098eb 	.word	0x080098eb
 800985c:	080098eb 	.word	0x080098eb
 8009860:	080098eb 	.word	0x080098eb
 8009864:	080098eb 	.word	0x080098eb
 8009868:	080098eb 	.word	0x080098eb
 800986c:	080098eb 	.word	0x080098eb
 8009870:	080098eb 	.word	0x080098eb
 8009874:	080098a7 	.word	0x080098a7
 8009878:	080098d1 	.word	0x080098d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b03      	cmp	r3, #3
 8009886:	d107      	bne.n	8009898 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009888:	f107 030a 	add.w	r3, r7, #10
 800988c:	2202      	movs	r2, #2
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 fced 	bl	800b270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009896:	e032      	b.n	80098fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 fc77 	bl	800b18e <USBD_CtlError>
            ret = USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	75fb      	strb	r3, [r7, #23]
          break;
 80098a4:	e02b      	b.n	80098fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d107      	bne.n	80098c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098b2:	f107 030d 	add.w	r3, r7, #13
 80098b6:	2201      	movs	r2, #1
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fcd8 	bl	800b270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098c0:	e01d      	b.n	80098fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 fc62 	bl	800b18e <USBD_CtlError>
            ret = USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	75fb      	strb	r3, [r7, #23]
          break;
 80098ce:	e016      	b.n	80098fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d00f      	beq.n	80098fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 fc55 	bl	800b18e <USBD_CtlError>
            ret = USBD_FAIL;
 80098e4:	2303      	movs	r3, #3
 80098e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098e8:	e008      	b.n	80098fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fc4e 	bl	800b18e <USBD_CtlError>
          ret = USBD_FAIL;
 80098f2:	2303      	movs	r3, #3
 80098f4:	75fb      	strb	r3, [r7, #23]
          break;
 80098f6:	e002      	b.n	80098fe <USBD_CDC_Setup+0x19e>
          break;
 80098f8:	bf00      	nop
 80098fa:	e008      	b.n	800990e <USBD_CDC_Setup+0x1ae>
          break;
 80098fc:	bf00      	nop
      }
      break;
 80098fe:	e006      	b.n	800990e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fc43 	bl	800b18e <USBD_CtlError>
      ret = USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	75fb      	strb	r3, [r7, #23]
      break;
 800990c:	bf00      	nop
  }

  return (uint8_t)ret;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800992a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	32b0      	adds	r2, #176	; 0xb0
 8009936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	e065      	b.n	8009a0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	32b0      	adds	r2, #176	; 0xb0
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	f003 020f 	and.w	r2, r3, #15
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	440b      	add	r3, r1
 8009964:	3318      	adds	r3, #24
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02f      	beq.n	80099cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	f003 020f 	and.w	r2, r3, #15
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	3318      	adds	r3, #24
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	f003 010f 	and.w	r1, r3, #15
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	460b      	mov	r3, r1
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	440b      	add	r3, r1
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4403      	add	r3, r0
 8009994:	3348      	adds	r3, #72	; 0x48
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	fbb2 f1f3 	udiv	r1, r2, r3
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d112      	bne.n	80099cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3318      	adds	r3, #24
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099be:	78f9      	ldrb	r1, [r7, #3]
 80099c0:	2300      	movs	r3, #0
 80099c2:	2200      	movs	r2, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f005 f86a 	bl	800ea9e <USBD_LL_Transmit>
 80099ca:	e01f      	b.n	8009a0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	33b0      	adds	r3, #176	; 0xb0
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d010      	beq.n	8009a0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	33b0      	adds	r3, #176	; 0xb0
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32b0      	adds	r2, #176	; 0xb0
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	32b0      	adds	r2, #176	; 0xb0
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e01a      	b.n	8009a7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f005 f868 	bl	800eb22 <USBD_LL_GetRxDataSize>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	33b0      	adds	r3, #176	; 0xb0
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	32b0      	adds	r2, #176	; 0xb0
 8009a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e025      	b.n	8009af4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	33b0      	adds	r3, #176	; 0xb0
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01a      	beq.n	8009af2 <USBD_CDC_EP0_RxReady+0x6c>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ac2:	2bff      	cmp	r3, #255	; 0xff
 8009ac4:	d015      	beq.n	8009af2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	33b0      	adds	r3, #176	; 0xb0
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009ade:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	22ff      	movs	r2, #255	; 0xff
 8009aee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b04:	2182      	movs	r1, #130	; 0x82
 8009b06:	4818      	ldr	r0, [pc, #96]	; (8009b68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b08:	f000 fd09 	bl	800a51e <USBD_GetEpDesc>
 8009b0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b0e:	2101      	movs	r1, #1
 8009b10:	4815      	ldr	r0, [pc, #84]	; (8009b68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b12:	f000 fd04 	bl	800a51e <USBD_GetEpDesc>
 8009b16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b18:	2181      	movs	r1, #129	; 0x81
 8009b1a:	4813      	ldr	r0, [pc, #76]	; (8009b68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b1c:	f000 fcff 	bl	800a51e <USBD_GetEpDesc>
 8009b20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2210      	movs	r2, #16
 8009b2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d006      	beq.n	8009b42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b3c:	711a      	strb	r2, [r3, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d006      	beq.n	8009b56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b50:	711a      	strb	r2, [r3, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2243      	movs	r2, #67	; 0x43
 8009b5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000568 	.word	0x20000568

08009b6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b74:	2182      	movs	r1, #130	; 0x82
 8009b76:	4818      	ldr	r0, [pc, #96]	; (8009bd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b78:	f000 fcd1 	bl	800a51e <USBD_GetEpDesc>
 8009b7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b7e:	2101      	movs	r1, #1
 8009b80:	4815      	ldr	r0, [pc, #84]	; (8009bd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b82:	f000 fccc 	bl	800a51e <USBD_GetEpDesc>
 8009b86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b88:	2181      	movs	r1, #129	; 0x81
 8009b8a:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b8c:	f000 fcc7 	bl	800a51e <USBD_GetEpDesc>
 8009b90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2210      	movs	r2, #16
 8009b9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d006      	beq.n	8009bb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	711a      	strb	r2, [r3, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f042 0202 	orr.w	r2, r2, #2
 8009bb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	711a      	strb	r2, [r3, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f042 0202 	orr.w	r2, r2, #2
 8009bc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2243      	movs	r2, #67	; 0x43
 8009bca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000568 	.word	0x20000568

08009bdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009be4:	2182      	movs	r1, #130	; 0x82
 8009be6:	4818      	ldr	r0, [pc, #96]	; (8009c48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009be8:	f000 fc99 	bl	800a51e <USBD_GetEpDesc>
 8009bec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bee:	2101      	movs	r1, #1
 8009bf0:	4815      	ldr	r0, [pc, #84]	; (8009c48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bf2:	f000 fc94 	bl	800a51e <USBD_GetEpDesc>
 8009bf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bf8:	2181      	movs	r1, #129	; 0x81
 8009bfa:	4813      	ldr	r0, [pc, #76]	; (8009c48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bfc:	f000 fc8f 	bl	800a51e <USBD_GetEpDesc>
 8009c00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2210      	movs	r2, #16
 8009c0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d006      	beq.n	8009c22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c1c:	711a      	strb	r2, [r3, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d006      	beq.n	8009c36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c30:	711a      	strb	r2, [r3, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2243      	movs	r2, #67	; 0x43
 8009c3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000568 	.word	0x20000568

08009c4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	220a      	movs	r2, #10
 8009c58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c5a:	4b03      	ldr	r3, [pc, #12]	; (8009c68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20000524 	.word	0x20000524

08009c6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e009      	b.n	8009c94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	33b0      	adds	r3, #176	; 0xb0
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	32b0      	adds	r2, #176	; 0xb0
 8009cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e008      	b.n	8009cd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32b0      	adds	r2, #176	; 0xb0
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e004      	b.n	8009d12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
	...

08009d20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	32b0      	adds	r2, #176	; 0xb0
 8009d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	; 0xb0
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e018      	b.n	8009d80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7c1b      	ldrb	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d56:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <USBD_CDC_ReceivePacket+0x68>)
 8009d58:	7819      	ldrb	r1, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f004 febb 	bl	800eae0 <USBD_LL_PrepareReceive>
 8009d6a:	e008      	b.n	8009d7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d6c:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <USBD_CDC_ReceivePacket+0x68>)
 8009d6e:	7819      	ldrb	r1, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f004 feb1 	bl	800eae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	200005ac 	.word	0x200005ac

08009d8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e01f      	b.n	8009de4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	79fa      	ldrb	r2, [r7, #7]
 8009dd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f004 fd2b 	bl	800e834 <USBD_LL_Init>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e025      	b.n	8009e50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	32ae      	adds	r2, #174	; 0xae
 8009e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00f      	beq.n	8009e40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32ae      	adds	r2, #174	; 0xae
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	f107 020e 	add.w	r2, r7, #14
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	4602      	mov	r2, r0
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f004 fd33 	bl	800e8cc <USBD_LL_Start>
 8009e66:	4603      	mov	r3, r0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 f908 	bl	800b11a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f26:	f003 031f 	and.w	r3, r3, #31
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d01a      	beq.n	8009f64 <USBD_LL_SetupStage+0x72>
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d822      	bhi.n	8009f78 <USBD_LL_SetupStage+0x86>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <USBD_LL_SetupStage+0x4a>
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d00a      	beq.n	8009f50 <USBD_LL_SetupStage+0x5e>
 8009f3a:	e01d      	b.n	8009f78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fb5f 	bl	800a608 <USBD_StdDevReq>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4e:	e020      	b.n	8009f92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fbc7 	bl	800a6ec <USBD_StdItfReq>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
      break;
 8009f62:	e016      	b.n	8009f92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fc29 	bl	800a7c4 <USBD_StdEPReq>
 8009f72:	4603      	mov	r3, r0
 8009f74:	73fb      	strb	r3, [r7, #15]
      break;
 8009f76:	e00c      	b.n	8009f92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f004 fd00 	bl	800e98c <USBD_LL_StallEP>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f90:	bf00      	nop
  }

  return ret;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d16e      	bne.n	800a092 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009fba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	f040 8098 	bne.w	800a0f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d913      	bls.n	8009ffc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	1ad2      	subs	r2, r2, r3
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	4293      	cmp	r3, r2
 8009fec:	bf28      	it	cs
 8009fee:	4613      	movcs	r3, r2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f001 f984 	bl	800b302 <USBD_CtlContinueRx>
 8009ffa:	e07d      	b.n	800a0f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a002:	f003 031f 	and.w	r3, r3, #31
 800a006:	2b02      	cmp	r3, #2
 800a008:	d014      	beq.n	800a034 <USBD_LL_DataOutStage+0x98>
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d81d      	bhi.n	800a04a <USBD_LL_DataOutStage+0xae>
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <USBD_LL_DataOutStage+0x7c>
 800a012:	2b01      	cmp	r3, #1
 800a014:	d003      	beq.n	800a01e <USBD_LL_DataOutStage+0x82>
 800a016:	e018      	b.n	800a04a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	75bb      	strb	r3, [r7, #22]
            break;
 800a01c:	e018      	b.n	800a050 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a024:	b2db      	uxtb	r3, r3
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fa5e 	bl	800a4ea <USBD_CoreFindIF>
 800a02e:	4603      	mov	r3, r0
 800a030:	75bb      	strb	r3, [r7, #22]
            break;
 800a032:	e00d      	b.n	800a050 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4619      	mov	r1, r3
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fa60 	bl	800a504 <USBD_CoreFindEP>
 800a044:	4603      	mov	r3, r0
 800a046:	75bb      	strb	r3, [r7, #22]
            break;
 800a048:	e002      	b.n	800a050 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75bb      	strb	r3, [r7, #22]
            break;
 800a04e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a050:	7dbb      	ldrb	r3, [r7, #22]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d119      	bne.n	800a08a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d113      	bne.n	800a08a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a062:	7dba      	ldrb	r2, [r7, #22]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	32ae      	adds	r2, #174	; 0xae
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00b      	beq.n	800a08a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a072:	7dba      	ldrb	r2, [r7, #22]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a07a:	7dba      	ldrb	r2, [r7, #22]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	; 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f001 f94a 	bl	800b324 <USBD_CtlSendStatus>
 800a090:	e032      	b.n	800a0f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fa31 	bl	800a504 <USBD_CoreFindEP>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0a6:	7dbb      	ldrb	r3, [r7, #22]
 800a0a8:	2bff      	cmp	r3, #255	; 0xff
 800a0aa:	d025      	beq.n	800a0f8 <USBD_LL_DataOutStage+0x15c>
 800a0ac:	7dbb      	ldrb	r3, [r7, #22]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d122      	bne.n	800a0f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d117      	bne.n	800a0ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0be:	7dba      	ldrb	r2, [r7, #22]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	32ae      	adds	r2, #174	; 0xae
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00f      	beq.n	800a0ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0ce:	7dba      	ldrb	r2, [r7, #22]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0d6:	7dba      	ldrb	r2, [r7, #22]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	32ae      	adds	r2, #174	; 0xae
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	7afa      	ldrb	r2, [r7, #11]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	4798      	blx	r3
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	e000      	b.n	800a0fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b086      	sub	sp, #24
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	460b      	mov	r3, r1
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d16f      	bne.n	800a1f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3314      	adds	r3, #20
 800a11a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a122:	2b02      	cmp	r3, #2
 800a124:	d15a      	bne.n	800a1dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d914      	bls.n	800a15c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	1ad2      	subs	r2, r2, r3
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	461a      	mov	r2, r3
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f001 f8ac 	bl	800b2a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a14e:	2300      	movs	r3, #0
 800a150:	2200      	movs	r2, #0
 800a152:	2100      	movs	r1, #0
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f004 fcc3 	bl	800eae0 <USBD_LL_PrepareReceive>
 800a15a:	e03f      	b.n	800a1dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68da      	ldr	r2, [r3, #12]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	429a      	cmp	r2, r3
 800a166:	d11c      	bne.n	800a1a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a170:	429a      	cmp	r2, r3
 800a172:	d316      	bcc.n	800a1a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a17e:	429a      	cmp	r2, r3
 800a180:	d20f      	bcs.n	800a1a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a182:	2200      	movs	r2, #0
 800a184:	2100      	movs	r1, #0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f001 f88d 	bl	800b2a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a194:	2300      	movs	r3, #0
 800a196:	2200      	movs	r2, #0
 800a198:	2100      	movs	r1, #0
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f004 fca0 	bl	800eae0 <USBD_LL_PrepareReceive>
 800a1a0:	e01c      	b.n	800a1dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d10f      	bne.n	800a1ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ce:	2180      	movs	r1, #128	; 0x80
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f004 fbdb 	bl	800e98c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f001 f8b7 	bl	800b34a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d03a      	beq.n	800a25c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fe42 	bl	8009e70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1f4:	e032      	b.n	800a25c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f97f 	bl	800a504 <USBD_CoreFindEP>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2bff      	cmp	r3, #255	; 0xff
 800a20e:	d025      	beq.n	800a25c <USBD_LL_DataInStage+0x15a>
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d122      	bne.n	800a25c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d11c      	bne.n	800a25c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a222:	7dfa      	ldrb	r2, [r7, #23]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	32ae      	adds	r2, #174	; 0xae
 800a228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d014      	beq.n	800a25c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a232:	7dfa      	ldrb	r2, [r7, #23]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a23a:	7dfa      	ldrb	r2, [r7, #23]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	32ae      	adds	r2, #174	; 0xae
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	7afa      	ldrb	r2, [r7, #11]
 800a248:	4611      	mov	r1, r2
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a252:	7dbb      	ldrb	r3, [r7, #22]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a258:	7dbb      	ldrb	r3, [r7, #22]
 800a25a:	e000      	b.n	800a25e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d014      	beq.n	800a2cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00e      	beq.n	800a2cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6852      	ldr	r2, [r2, #4]
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	4611      	mov	r1, r2
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	4798      	blx	r3
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2cc:	2340      	movs	r3, #64	; 0x40
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f004 fb15 	bl	800e902 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2240      	movs	r2, #64	; 0x40
 800a2e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2180      	movs	r1, #128	; 0x80
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f004 fb07 	bl	800e902 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2240      	movs	r2, #64	; 0x40
 800a2fe:	621a      	str	r2, [r3, #32]

  return ret;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b04      	cmp	r3, #4
 800a368:	d106      	bne.n	800a378 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a370:	b2da      	uxtb	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b03      	cmp	r3, #3
 800a398:	d110      	bne.n	800a3bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	32ae      	adds	r2, #174	; 0xae
 800a3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e01c      	b.n	800a422 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d115      	bne.n	800a420 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	32ae      	adds	r2, #174	; 0xae
 800a3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32ae      	adds	r2, #174	; 0xae
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	4611      	mov	r1, r2
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	460b      	mov	r3, r1
 800a434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32ae      	adds	r2, #174	; 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	e01c      	b.n	800a486 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b03      	cmp	r3, #3
 800a456:	d115      	bne.n	800a484 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	; 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32ae      	adds	r2, #174	; 0xae
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	78fa      	ldrb	r2, [r7, #3]
 800a47e:	4611      	mov	r1, r2
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00e      	beq.n	800a4e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6852      	ldr	r2, [r2, #4]
 800a4ce:	b2d2      	uxtb	r2, r2
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a510:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	460b      	mov	r3, r1
 800a528:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	885b      	ldrh	r3, [r3, #2]
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	b29b      	uxth	r3, r3
 800a542:	429a      	cmp	r2, r3
 800a544:	d920      	bls.n	800a588 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a54e:	e013      	b.n	800a578 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a550:	f107 030a 	add.w	r3, r7, #10
 800a554:	4619      	mov	r1, r3
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f000 f81b 	bl	800a592 <USBD_GetNextDesc>
 800a55c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	2b05      	cmp	r3, #5
 800a564:	d108      	bne.n	800a578 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	789b      	ldrb	r3, [r3, #2]
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	429a      	cmp	r2, r3
 800a572:	d008      	beq.n	800a586 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	897b      	ldrh	r3, [r7, #10]
 800a580:	429a      	cmp	r2, r3
 800a582:	d8e5      	bhi.n	800a550 <USBD_GetEpDesc+0x32>
 800a584:	e000      	b.n	800a588 <USBD_GetEpDesc+0x6a>
          break;
 800a586:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a588:	693b      	ldr	r3, [r7, #16]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a592:	b480      	push	{r7}
 800a594:	b085      	sub	sp, #20
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	881a      	ldrh	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5be:	68fb      	ldr	r3, [r7, #12]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5ea:	8a3b      	ldrh	r3, [r7, #16]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	b21a      	sxth	r2, r3
 800a5f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	b21b      	sxth	r3, r3
 800a5f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5fa:	89fb      	ldrh	r3, [r7, #14]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a61e:	2b40      	cmp	r3, #64	; 0x40
 800a620:	d005      	beq.n	800a62e <USBD_StdDevReq+0x26>
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d857      	bhi.n	800a6d6 <USBD_StdDevReq+0xce>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <USBD_StdDevReq+0x42>
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d153      	bne.n	800a6d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	32ae      	adds	r2, #174	; 0xae
 800a638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
      break;
 800a648:	e04a      	b.n	800a6e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d83b      	bhi.n	800a6ca <USBD_StdDevReq+0xc2>
 800a652:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <USBD_StdDevReq+0x50>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a6ad 	.word	0x0800a6ad
 800a65c:	0800a6c1 	.word	0x0800a6c1
 800a660:	0800a6cb 	.word	0x0800a6cb
 800a664:	0800a6b7 	.word	0x0800a6b7
 800a668:	0800a6cb 	.word	0x0800a6cb
 800a66c:	0800a68b 	.word	0x0800a68b
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a6cb 	.word	0x0800a6cb
 800a678:	0800a6a3 	.word	0x0800a6a3
 800a67c:	0800a695 	.word	0x0800a695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fa3c 	bl	800ab00 <USBD_GetDescriptor>
          break;
 800a688:	e024      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fba1 	bl	800add4 <USBD_SetAddress>
          break;
 800a692:	e01f      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fbe0 	bl	800ae5c <USBD_SetConfig>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]
          break;
 800a6a0:	e018      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc83 	bl	800afb0 <USBD_GetConfig>
          break;
 800a6aa:	e013      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fcb4 	bl	800b01c <USBD_GetStatus>
          break;
 800a6b4:	e00e      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fce3 	bl	800b084 <USBD_SetFeature>
          break;
 800a6be:	e009      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fd07 	bl	800b0d6 <USBD_ClrFeature>
          break;
 800a6c8:	e004      	b.n	800a6d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fd5e 	bl	800b18e <USBD_CtlError>
          break;
 800a6d2:	bf00      	nop
      }
      break;
 800a6d4:	e004      	b.n	800a6e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fd58 	bl	800b18e <USBD_CtlError>
      break;
 800a6de:	bf00      	nop
  }

  return ret;
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop

0800a6ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a702:	2b40      	cmp	r3, #64	; 0x40
 800a704:	d005      	beq.n	800a712 <USBD_StdItfReq+0x26>
 800a706:	2b40      	cmp	r3, #64	; 0x40
 800a708:	d852      	bhi.n	800a7b0 <USBD_StdItfReq+0xc4>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <USBD_StdItfReq+0x26>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d14e      	bne.n	800a7b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	3b01      	subs	r3, #1
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d840      	bhi.n	800a7a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	889b      	ldrh	r3, [r3, #4]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b01      	cmp	r3, #1
 800a728:	d836      	bhi.n	800a798 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	889b      	ldrh	r3, [r3, #4]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fed9 	bl	800a4ea <USBD_CoreFindIF>
 800a738:	4603      	mov	r3, r0
 800a73a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2bff      	cmp	r3, #255	; 0xff
 800a740:	d01d      	beq.n	800a77e <USBD_StdItfReq+0x92>
 800a742:	7bbb      	ldrb	r3, [r7, #14]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11a      	bne.n	800a77e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a748:	7bba      	ldrb	r2, [r7, #14]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	32ae      	adds	r2, #174	; 0xae
 800a74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a758:	7bba      	ldrb	r2, [r7, #14]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a760:	7bba      	ldrb	r2, [r7, #14]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	; 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	4798      	blx	r3
 800a772:	4603      	mov	r3, r0
 800a774:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a776:	e004      	b.n	800a782 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a778:	2303      	movs	r3, #3
 800a77a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a77c:	e001      	b.n	800a782 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a77e:	2303      	movs	r3, #3
 800a780:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	88db      	ldrh	r3, [r3, #6]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d110      	bne.n	800a7ac <USBD_StdItfReq+0xc0>
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10d      	bne.n	800a7ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fdc7 	bl	800b324 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a796:	e009      	b.n	800a7ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fcf7 	bl	800b18e <USBD_CtlError>
          break;
 800a7a0:	e004      	b.n	800a7ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fcf2 	bl	800b18e <USBD_CtlError>
          break;
 800a7aa:	e000      	b.n	800a7ae <USBD_StdItfReq+0xc2>
          break;
 800a7ac:	bf00      	nop
      }
      break;
 800a7ae:	e004      	b.n	800a7ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fceb 	bl	800b18e <USBD_CtlError>
      break;
 800a7b8:	bf00      	nop
  }

  return ret;
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	889b      	ldrh	r3, [r3, #4]
 800a7d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d007      	beq.n	800a7f4 <USBD_StdEPReq+0x30>
 800a7e4:	2b40      	cmp	r3, #64	; 0x40
 800a7e6:	f200 817f 	bhi.w	800aae8 <USBD_StdEPReq+0x324>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d02a      	beq.n	800a844 <USBD_StdEPReq+0x80>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	f040 817a 	bne.w	800aae8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff fe83 	bl	800a504 <USBD_CoreFindEP>
 800a7fe:	4603      	mov	r3, r0
 800a800:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a802:	7b7b      	ldrb	r3, [r7, #13]
 800a804:	2bff      	cmp	r3, #255	; 0xff
 800a806:	f000 8174 	beq.w	800aaf2 <USBD_StdEPReq+0x32e>
 800a80a:	7b7b      	ldrb	r3, [r7, #13]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f040 8170 	bne.w	800aaf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a812:	7b7a      	ldrb	r2, [r7, #13]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a81a:	7b7a      	ldrb	r2, [r7, #13]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	32ae      	adds	r2, #174	; 0xae
 800a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 8163 	beq.w	800aaf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a82c:	7b7a      	ldrb	r2, [r7, #13]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	32ae      	adds	r2, #174	; 0xae
 800a832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a842:	e156      	b.n	800aaf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d008      	beq.n	800a85e <USBD_StdEPReq+0x9a>
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	f300 8145 	bgt.w	800aadc <USBD_StdEPReq+0x318>
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 809b 	beq.w	800a98e <USBD_StdEPReq+0x1ca>
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d03c      	beq.n	800a8d6 <USBD_StdEPReq+0x112>
 800a85c:	e13e      	b.n	800aadc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d002      	beq.n	800a870 <USBD_StdEPReq+0xac>
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d016      	beq.n	800a89c <USBD_StdEPReq+0xd8>
 800a86e:	e02c      	b.n	800a8ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00d      	beq.n	800a892 <USBD_StdEPReq+0xce>
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b80      	cmp	r3, #128	; 0x80
 800a87a:	d00a      	beq.n	800a892 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f004 f883 	bl	800e98c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a886:	2180      	movs	r1, #128	; 0x80
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f004 f87f 	bl	800e98c <USBD_LL_StallEP>
 800a88e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a890:	e020      	b.n	800a8d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fc7a 	bl	800b18e <USBD_CtlError>
              break;
 800a89a:	e01b      	b.n	800a8d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	885b      	ldrh	r3, [r3, #2]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10e      	bne.n	800a8c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00b      	beq.n	800a8c2 <USBD_StdEPReq+0xfe>
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	2b80      	cmp	r3, #128	; 0x80
 800a8ae:	d008      	beq.n	800a8c2 <USBD_StdEPReq+0xfe>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	88db      	ldrh	r3, [r3, #6]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f004 f865 	bl	800e98c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fd2e 	bl	800b324 <USBD_CtlSendStatus>

              break;
 800a8c8:	e004      	b.n	800a8d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fc5e 	bl	800b18e <USBD_CtlError>
              break;
 800a8d2:	bf00      	nop
          }
          break;
 800a8d4:	e107      	b.n	800aae6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d002      	beq.n	800a8e8 <USBD_StdEPReq+0x124>
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d016      	beq.n	800a914 <USBD_StdEPReq+0x150>
 800a8e6:	e04b      	b.n	800a980 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00d      	beq.n	800a90a <USBD_StdEPReq+0x146>
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b80      	cmp	r3, #128	; 0x80
 800a8f2:	d00a      	beq.n	800a90a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f004 f847 	bl	800e98c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8fe:	2180      	movs	r1, #128	; 0x80
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f004 f843 	bl	800e98c <USBD_LL_StallEP>
 800a906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a908:	e040      	b.n	800a98c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fc3e 	bl	800b18e <USBD_CtlError>
              break;
 800a912:	e03b      	b.n	800a98c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	885b      	ldrh	r3, [r3, #2]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d136      	bne.n	800a98a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a922:	2b00      	cmp	r3, #0
 800a924:	d004      	beq.n	800a930 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f004 f84d 	bl	800e9ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fcf7 	bl	800b324 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff fde2 	bl	800a504 <USBD_CoreFindEP>
 800a940:	4603      	mov	r3, r0
 800a942:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a944:	7b7b      	ldrb	r3, [r7, #13]
 800a946:	2bff      	cmp	r3, #255	; 0xff
 800a948:	d01f      	beq.n	800a98a <USBD_StdEPReq+0x1c6>
 800a94a:	7b7b      	ldrb	r3, [r7, #13]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11c      	bne.n	800a98a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a950:	7b7a      	ldrb	r2, [r7, #13]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a958:	7b7a      	ldrb	r2, [r7, #13]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	; 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d010      	beq.n	800a98a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a968:	7b7a      	ldrb	r2, [r7, #13]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	32ae      	adds	r2, #174	; 0xae
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a97e:	e004      	b.n	800a98a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fc03 	bl	800b18e <USBD_CtlError>
              break;
 800a988:	e000      	b.n	800a98c <USBD_StdEPReq+0x1c8>
              break;
 800a98a:	bf00      	nop
          }
          break;
 800a98c:	e0ab      	b.n	800aae6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b02      	cmp	r3, #2
 800a998:	d002      	beq.n	800a9a0 <USBD_StdEPReq+0x1dc>
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d032      	beq.n	800aa04 <USBD_StdEPReq+0x240>
 800a99e:	e097      	b.n	800aad0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <USBD_StdEPReq+0x1f2>
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b80      	cmp	r3, #128	; 0x80
 800a9aa:	d004      	beq.n	800a9b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fbed 	bl	800b18e <USBD_CtlError>
                break;
 800a9b4:	e091      	b.n	800aada <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da0b      	bge.n	800a9d6 <USBD_StdEPReq+0x212>
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	3310      	adds	r3, #16
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	e00b      	b.n	800a9ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fc37 	bl	800b270 <USBD_CtlSendData>
              break;
 800aa02:	e06a      	b.n	800aada <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	da11      	bge.n	800aa30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 020f 	and.w	r2, r3, #15
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d117      	bne.n	800aa56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fbb0 	bl	800b18e <USBD_CtlError>
                  break;
 800aa2e:	e054      	b.n	800aada <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	f003 020f 	and.w	r2, r3, #15
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	440b      	add	r3, r1
 800aa42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fb9d 	bl	800b18e <USBD_CtlError>
                  break;
 800aa54:	e041      	b.n	800aada <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	da0b      	bge.n	800aa76 <USBD_StdEPReq+0x2b2>
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
 800aa60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	3310      	adds	r3, #16
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	e00b      	b.n	800aa8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <USBD_StdEPReq+0x2d8>
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b80      	cmp	r3, #128	; 0x80
 800aa9a:	d103      	bne.n	800aaa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e00e      	b.n	800aac2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f003 ffad 	bl	800ea08 <USBD_LL_IsStallEP>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d003      	beq.n	800aabc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2201      	movs	r2, #1
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	e002      	b.n	800aac2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2202      	movs	r2, #2
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fbd1 	bl	800b270 <USBD_CtlSendData>
              break;
 800aace:	e004      	b.n	800aada <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fb5b 	bl	800b18e <USBD_CtlError>
              break;
 800aad8:	bf00      	nop
          }
          break;
 800aada:	e004      	b.n	800aae6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fb55 	bl	800b18e <USBD_CtlError>
          break;
 800aae4:	bf00      	nop
      }
      break;
 800aae6:	e005      	b.n	800aaf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fb4f 	bl	800b18e <USBD_CtlError>
      break;
 800aaf0:	e000      	b.n	800aaf4 <USBD_StdEPReq+0x330>
      break;
 800aaf2:	bf00      	nop
  }

  return ret;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	885b      	ldrh	r3, [r3, #2]
 800ab1a:	0a1b      	lsrs	r3, r3, #8
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	2b06      	cmp	r3, #6
 800ab22:	f200 8128 	bhi.w	800ad76 <USBD_GetDescriptor+0x276>
 800ab26:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <USBD_GetDescriptor+0x2c>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800ab49 	.word	0x0800ab49
 800ab30:	0800ab61 	.word	0x0800ab61
 800ab34:	0800aba1 	.word	0x0800aba1
 800ab38:	0800ad77 	.word	0x0800ad77
 800ab3c:	0800ad77 	.word	0x0800ad77
 800ab40:	0800ad17 	.word	0x0800ad17
 800ab44:	0800ad43 	.word	0x0800ad43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
      break;
 800ab5e:	e112      	b.n	800ad86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7c1b      	ldrb	r3, [r3, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10d      	bne.n	800ab84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab70:	f107 0208 	add.w	r2, r7, #8
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
 800ab78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	2202      	movs	r2, #2
 800ab80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab82:	e100      	b.n	800ad86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	f107 0208 	add.w	r2, r7, #8
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	701a      	strb	r2, [r3, #0]
      break;
 800ab9e:	e0f2      	b.n	800ad86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	885b      	ldrh	r3, [r3, #2]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	f200 80ac 	bhi.w	800ad04 <USBD_GetDescriptor+0x204>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBD_GetDescriptor+0xb4>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800abcd 	.word	0x0800abcd
 800abb8:	0800ac01 	.word	0x0800ac01
 800abbc:	0800ac35 	.word	0x0800ac35
 800abc0:	0800ac69 	.word	0x0800ac69
 800abc4:	0800ac9d 	.word	0x0800ac9d
 800abc8:	0800acd1 	.word	0x0800acd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00b      	beq.n	800abf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	7c12      	ldrb	r2, [r2, #16]
 800abe4:	f107 0108 	add.w	r1, r7, #8
 800abe8:	4610      	mov	r0, r2
 800abea:	4798      	blx	r3
 800abec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abee:	e091      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 facb 	bl	800b18e <USBD_CtlError>
            err++;
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	3301      	adds	r3, #1
 800abfc:	72fb      	strb	r3, [r7, #11]
          break;
 800abfe:	e089      	b.n	800ad14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e077      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fab1 	bl	800b18e <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e06f      	b.n	800ad14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e05d      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fa97 	bl	800b18e <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e055      	b.n	800ad14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e043      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa7d 	bl	800b18e <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e03b      	b.n	800ad14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e029      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa63 	bl	800b18e <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e021      	b.n	800ad14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e00f      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa49 	bl	800b18e <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e007      	b.n	800ad14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fa41 	bl	800b18e <USBD_CtlError>
          err++;
 800ad0c:	7afb      	ldrb	r3, [r7, #11]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad12:	bf00      	nop
      }
      break;
 800ad14:	e037      	b.n	800ad86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	7c1b      	ldrb	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad26:	f107 0208 	add.w	r2, r7, #8
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	4798      	blx	r3
 800ad2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad30:	e029      	b.n	800ad86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa2a 	bl	800b18e <USBD_CtlError>
        err++;
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad40:	e021      	b.n	800ad86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7c1b      	ldrb	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10d      	bne.n	800ad66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	f107 0208 	add.w	r2, r7, #8
 800ad56:	4610      	mov	r0, r2
 800ad58:	4798      	blx	r3
 800ad5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	2207      	movs	r2, #7
 800ad62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad64:	e00f      	b.n	800ad86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa10 	bl	800b18e <USBD_CtlError>
        err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	e007      	b.n	800ad86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fa08 	bl	800b18e <USBD_CtlError>
      err++;
 800ad7e:	7afb      	ldrb	r3, [r7, #11]
 800ad80:	3301      	adds	r3, #1
 800ad82:	72fb      	strb	r3, [r7, #11]
      break;
 800ad84:	bf00      	nop
  }

  if (err != 0U)
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d11e      	bne.n	800adca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	88db      	ldrh	r3, [r3, #6]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d016      	beq.n	800adc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad94:	893b      	ldrh	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00e      	beq.n	800adb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	88da      	ldrh	r2, [r3, #6]
 800ad9e:	893b      	ldrh	r3, [r7, #8]
 800ada0:	4293      	cmp	r3, r2
 800ada2:	bf28      	it	cs
 800ada4:	4613      	movcs	r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adaa:	893b      	ldrh	r3, [r7, #8]
 800adac:	461a      	mov	r2, r3
 800adae:	68f9      	ldr	r1, [r7, #12]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fa5d 	bl	800b270 <USBD_CtlSendData>
 800adb6:	e009      	b.n	800adcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f9e7 	bl	800b18e <USBD_CtlError>
 800adc0:	e004      	b.n	800adcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 faae 	bl	800b324 <USBD_CtlSendStatus>
 800adc8:	e000      	b.n	800adcc <USBD_GetDescriptor+0x2cc>
    return;
 800adca:	bf00      	nop
  }
}
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop

0800add4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	889b      	ldrh	r3, [r3, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d131      	bne.n	800ae4a <USBD_SetAddress+0x76>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	88db      	ldrh	r3, [r3, #6]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d12d      	bne.n	800ae4a <USBD_SetAddress+0x76>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	885b      	ldrh	r3, [r3, #2]
 800adf2:	2b7f      	cmp	r3, #127	; 0x7f
 800adf4:	d829      	bhi.n	800ae4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	885b      	ldrh	r3, [r3, #2]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d104      	bne.n	800ae18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f9bc 	bl	800b18e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae16:	e01d      	b.n	800ae54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7bfa      	ldrb	r2, [r7, #15]
 800ae1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f003 fe1b 	bl	800ea60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fa7a 	bl	800b324 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2202      	movs	r2, #2
 800ae3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae3e:	e009      	b.n	800ae54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae48:	e004      	b.n	800ae54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f99e 	bl	800b18e <USBD_CtlError>
  }
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	4b4e      	ldr	r3, [pc, #312]	; (800afac <USBD_SetConfig+0x150>)
 800ae72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae74:	4b4d      	ldr	r3, [pc, #308]	; (800afac <USBD_SetConfig+0x150>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d905      	bls.n	800ae88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f985 	bl	800b18e <USBD_CtlError>
    return USBD_FAIL;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e08c      	b.n	800afa2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d002      	beq.n	800ae9a <USBD_SetConfig+0x3e>
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d029      	beq.n	800aeec <USBD_SetConfig+0x90>
 800ae98:	e075      	b.n	800af86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae9a:	4b44      	ldr	r3, [pc, #272]	; (800afac <USBD_SetConfig+0x150>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d020      	beq.n	800aee4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aea2:	4b42      	ldr	r3, [pc, #264]	; (800afac <USBD_SetConfig+0x150>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aeac:	4b3f      	ldr	r3, [pc, #252]	; (800afac <USBD_SetConfig+0x150>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7fe ffe7 	bl	8009e86 <USBD_SetClassConfig>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d008      	beq.n	800aed4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f962 	bl	800b18e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2202      	movs	r2, #2
 800aece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aed2:	e065      	b.n	800afa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa25 	bl	800b324 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2203      	movs	r2, #3
 800aede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aee2:	e05d      	b.n	800afa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fa1d 	bl	800b324 <USBD_CtlSendStatus>
      break;
 800aeea:	e059      	b.n	800afa0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aeec:	4b2f      	ldr	r3, [pc, #188]	; (800afac <USBD_SetConfig+0x150>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d112      	bne.n	800af1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aefc:	4b2b      	ldr	r3, [pc, #172]	; (800afac <USBD_SetConfig+0x150>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <USBD_SetConfig+0x150>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7fe ffd6 	bl	8009ebe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa06 	bl	800b324 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af18:	e042      	b.n	800afa0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af1a:	4b24      	ldr	r3, [pc, #144]	; (800afac <USBD_SetConfig+0x150>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d02a      	beq.n	800af7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7fe ffc4 	bl	8009ebe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af36:	4b1d      	ldr	r3, [pc, #116]	; (800afac <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af40:	4b1a      	ldr	r3, [pc, #104]	; (800afac <USBD_SetConfig+0x150>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fe ff9d 	bl	8009e86 <USBD_SetClassConfig>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00f      	beq.n	800af76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f918 	bl	800b18e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7fe ffa9 	bl	8009ebe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af74:	e014      	b.n	800afa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f9d4 	bl	800b324 <USBD_CtlSendStatus>
      break;
 800af7c:	e010      	b.n	800afa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f9d0 	bl	800b324 <USBD_CtlSendStatus>
      break;
 800af84:	e00c      	b.n	800afa0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f900 	bl	800b18e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <USBD_SetConfig+0x150>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7fe ff92 	bl	8009ebe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	73fb      	strb	r3, [r7, #15]
      break;
 800af9e:	bf00      	nop
  }

  return ret;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000898 	.word	0x20000898

0800afb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d004      	beq.n	800afcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f8e2 	bl	800b18e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afca:	e023      	b.n	800b014 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	dc02      	bgt.n	800afde <USBD_GetConfig+0x2e>
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc03      	bgt.n	800afe4 <USBD_GetConfig+0x34>
 800afdc:	e015      	b.n	800b00a <USBD_GetConfig+0x5a>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d00b      	beq.n	800affa <USBD_GetConfig+0x4a>
 800afe2:	e012      	b.n	800b00a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3308      	adds	r3, #8
 800afee:	2201      	movs	r2, #1
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f93c 	bl	800b270 <USBD_CtlSendData>
        break;
 800aff8:	e00c      	b.n	800b014 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3304      	adds	r3, #4
 800affe:	2201      	movs	r2, #1
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f934 	bl	800b270 <USBD_CtlSendData>
        break;
 800b008:	e004      	b.n	800b014 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f8be 	bl	800b18e <USBD_CtlError>
        break;
 800b012:	bf00      	nop
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	2b02      	cmp	r3, #2
 800b032:	d81e      	bhi.n	800b072 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	88db      	ldrh	r3, [r3, #6]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d004      	beq.n	800b046 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f8a5 	bl	800b18e <USBD_CtlError>
        break;
 800b044:	e01a      	b.n	800b07c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b052:	2b00      	cmp	r3, #0
 800b054:	d005      	beq.n	800b062 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	f043 0202 	orr.w	r2, r3, #2
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	330c      	adds	r3, #12
 800b066:	2202      	movs	r2, #2
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f900 	bl	800b270 <USBD_CtlSendData>
      break;
 800b070:	e004      	b.n	800b07c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f88a 	bl	800b18e <USBD_CtlError>
      break;
 800b07a:	bf00      	nop
  }
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	885b      	ldrh	r3, [r3, #2]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d107      	bne.n	800b0a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f940 	bl	800b324 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0a4:	e013      	b.n	800b0ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	885b      	ldrh	r3, [r3, #2]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d10b      	bne.n	800b0c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	889b      	ldrh	r3, [r3, #4]
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f930 	bl	800b324 <USBD_CtlSendStatus>
}
 800b0c4:	e003      	b.n	800b0ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f860 	bl	800b18e <USBD_CtlError>
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d80b      	bhi.n	800b106 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	885b      	ldrh	r3, [r3, #2]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d10c      	bne.n	800b110 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f910 	bl	800b324 <USBD_CtlSendStatus>
      }
      break;
 800b104:	e004      	b.n	800b110 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f840 	bl	800b18e <USBD_CtlError>
      break;
 800b10e:	e000      	b.n	800b112 <USBD_ClrFeature+0x3c>
      break;
 800b110:	bf00      	nop
  }
}
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	3301      	adds	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	781a      	ldrb	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fa41 	bl	800a5cc <SWAPBYTE>
 800b14a:	4603      	mov	r3, r0
 800b14c:	461a      	mov	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7ff fa34 	bl	800a5cc <SWAPBYTE>
 800b164:	4603      	mov	r3, r0
 800b166:	461a      	mov	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3301      	adds	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fa27 	bl	800a5cc <SWAPBYTE>
 800b17e:	4603      	mov	r3, r0
 800b180:	461a      	mov	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	80da      	strh	r2, [r3, #6]
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b198:	2180      	movs	r1, #128	; 0x80
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f003 fbf6 	bl	800e98c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f003 fbf2 	bl	800e98c <USBD_LL_StallEP>
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d036      	beq.n	800b234 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1ca:	6938      	ldr	r0, [r7, #16]
 800b1cc:	f000 f836 	bl	800b23c <USBD_GetLen>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	7812      	ldrb	r2, [r2, #0]
 800b1e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b200:	e013      	b.n	800b22a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	4413      	add	r3, r2
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	7812      	ldrb	r2, [r2, #0]
 800b20c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	3301      	adds	r3, #1
 800b212:	613b      	str	r3, [r7, #16]
    idx++;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	3301      	adds	r3, #1
 800b218:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	4413      	add	r3, r2
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
    idx++;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	3301      	adds	r3, #1
 800b228:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e7      	bne.n	800b202 <USBD_GetString+0x52>
 800b232:	e000      	b.n	800b236 <USBD_GetString+0x86>
    return;
 800b234:	bf00      	nop
  }
}
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b24c:	e005      	b.n	800b25a <USBD_GetLen+0x1e>
  {
    len++;
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	3301      	adds	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	3301      	adds	r3, #1
 800b258:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f5      	bne.n	800b24e <USBD_GetLen+0x12>
  }

  return len;
 800b262:	7bfb      	ldrb	r3, [r7, #15]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2202      	movs	r2, #2
 800b280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	2100      	movs	r1, #0
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f003 fc01 	bl	800ea9e <USBD_LL_Transmit>

  return USBD_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f003 fbf0 	bl	800ea9e <USBD_LL_Transmit>

  return USBD_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f003 fbf4 	bl	800eae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	2100      	movs	r1, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f003 fbe3 	bl	800eae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2204      	movs	r2, #4
 800b330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b334:	2300      	movs	r3, #0
 800b336:	2200      	movs	r2, #0
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f003 fbaf 	bl	800ea9e <USBD_LL_Transmit>

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2205      	movs	r2, #5
 800b356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b35a:	2300      	movs	r3, #0
 800b35c:	2200      	movs	r2, #0
 800b35e:	2100      	movs	r1, #0
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f003 fbbd 	bl	800eae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <__NVIC_SetPriority>:
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b380:	2b00      	cmp	r3, #0
 800b382:	db0a      	blt.n	800b39a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	b2da      	uxtb	r2, r3
 800b388:	490c      	ldr	r1, [pc, #48]	; (800b3bc <__NVIC_SetPriority+0x4c>)
 800b38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b38e:	0112      	lsls	r2, r2, #4
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	440b      	add	r3, r1
 800b394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b398:	e00a      	b.n	800b3b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	4908      	ldr	r1, [pc, #32]	; (800b3c0 <__NVIC_SetPriority+0x50>)
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	3b04      	subs	r3, #4
 800b3a8:	0112      	lsls	r2, r2, #4
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	761a      	strb	r2, [r3, #24]
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	e000e100 	.word	0xe000e100
 800b3c0:	e000ed00 	.word	0xe000ed00

0800b3c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <SysTick_Handler+0x1c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b3cc:	f001 feb2 	bl	800d134 <xTaskGetSchedulerState>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d001      	beq.n	800b3da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b3d6:	f002 fc97 	bl	800dd08 <xPortSysTickHandler>
  }
}
 800b3da:	bf00      	nop
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	e000e010 	.word	0xe000e010

0800b3e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	f06f 0004 	mvn.w	r0, #4
 800b3ee:	f7ff ffbf 	bl	800b370 <__NVIC_SetPriority>
#endif
}
 800b3f2:	bf00      	nop
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3fe:	f3ef 8305 	mrs	r3, IPSR
 800b402:	603b      	str	r3, [r7, #0]
  return(result);
 800b404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b40a:	f06f 0305 	mvn.w	r3, #5
 800b40e:	607b      	str	r3, [r7, #4]
 800b410:	e00c      	b.n	800b42c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b412:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <osKernelInitialize+0x44>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b41a:	4b08      	ldr	r3, [pc, #32]	; (800b43c <osKernelInitialize+0x44>)
 800b41c:	2201      	movs	r2, #1
 800b41e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b420:	2300      	movs	r3, #0
 800b422:	607b      	str	r3, [r7, #4]
 800b424:	e002      	b.n	800b42c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b426:	f04f 33ff 	mov.w	r3, #4294967295
 800b42a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b42c:	687b      	ldr	r3, [r7, #4]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	2000089c 	.word	0x2000089c

0800b440 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b446:	f3ef 8305 	mrs	r3, IPSR
 800b44a:	603b      	str	r3, [r7, #0]
  return(result);
 800b44c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b452:	f06f 0305 	mvn.w	r3, #5
 800b456:	607b      	str	r3, [r7, #4]
 800b458:	e010      	b.n	800b47c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b45a:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <osKernelStart+0x48>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d109      	bne.n	800b476 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b462:	f7ff ffbf 	bl	800b3e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b466:	4b08      	ldr	r3, [pc, #32]	; (800b488 <osKernelStart+0x48>)
 800b468:	2202      	movs	r2, #2
 800b46a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b46c:	f001 fa1a 	bl	800c8a4 <vTaskStartScheduler>
      stat = osOK;
 800b470:	2300      	movs	r3, #0
 800b472:	607b      	str	r3, [r7, #4]
 800b474:	e002      	b.n	800b47c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b476:	f04f 33ff 	mov.w	r3, #4294967295
 800b47a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b47c:	687b      	ldr	r3, [r7, #4]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	2000089c 	.word	0x2000089c

0800b48c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08e      	sub	sp, #56	; 0x38
 800b490:	af04      	add	r7, sp, #16
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b49c:	f3ef 8305 	mrs	r3, IPSR
 800b4a0:	617b      	str	r3, [r7, #20]
  return(result);
 800b4a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d17f      	bne.n	800b5a8 <osThreadNew+0x11c>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d07c      	beq.n	800b5a8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b4b4:	2318      	movs	r3, #24
 800b4b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d045      	beq.n	800b554 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <osThreadNew+0x4a>
        name = attr->name;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d008      	beq.n	800b4fc <osThreadNew+0x70>
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b38      	cmp	r3, #56	; 0x38
 800b4ee:	d805      	bhi.n	800b4fc <osThreadNew+0x70>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <osThreadNew+0x74>
        return (NULL);
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e054      	b.n	800b5aa <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	089b      	lsrs	r3, r3, #2
 800b50e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00e      	beq.n	800b536 <osThreadNew+0xaa>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	2b6b      	cmp	r3, #107	; 0x6b
 800b51e:	d90a      	bls.n	800b536 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <osThreadNew+0xaa>
        mem = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	61bb      	str	r3, [r7, #24]
 800b534:	e010      	b.n	800b558 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10c      	bne.n	800b558 <osThreadNew+0xcc>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d108      	bne.n	800b558 <osThreadNew+0xcc>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <osThreadNew+0xcc>
          mem = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	e001      	b.n	800b558 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d110      	bne.n	800b580 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b566:	9202      	str	r2, [sp, #8]
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6a3a      	ldr	r2, [r7, #32]
 800b572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 feb9 	bl	800c2ec <xTaskCreateStatic>
 800b57a:	4603      	mov	r3, r0
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	e013      	b.n	800b5a8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d110      	bne.n	800b5a8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	f107 0310 	add.w	r3, r7, #16
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 ff04 	bl	800c3a6 <xTaskCreate>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d001      	beq.n	800b5a8 <osThreadNew+0x11c>
            hTask = NULL;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5a8:	693b      	ldr	r3, [r7, #16]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3728      	adds	r7, #40	; 0x28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ba:	f3ef 8305 	mrs	r3, IPSR
 800b5be:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <osDelay+0x1c>
    stat = osErrorISR;
 800b5c6:	f06f 0305 	mvn.w	r3, #5
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	e007      	b.n	800b5de <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 f829 	bl	800c630 <vTaskDelay>
    }
  }

  return (stat);
 800b5de:	68fb      	ldr	r3, [r7, #12]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f8:	f3ef 8305 	mrs	r3, IPSR
 800b5fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b5fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b600:	2b00      	cmp	r3, #0
 800b602:	d15f      	bne.n	800b6c4 <osMessageQueueNew+0xdc>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d05c      	beq.n	800b6c4 <osMessageQueueNew+0xdc>
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d059      	beq.n	800b6c4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d029      	beq.n	800b670 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d012      	beq.n	800b64a <osMessageQueueNew+0x62>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b4f      	cmp	r3, #79	; 0x4f
 800b62a:	d90e      	bls.n	800b64a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	695a      	ldr	r2, [r3, #20]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	fb01 f303 	mul.w	r3, r1, r3
 800b640:	429a      	cmp	r2, r3
 800b642:	d302      	bcc.n	800b64a <osMessageQueueNew+0x62>
        mem = 1;
 800b644:	2301      	movs	r3, #1
 800b646:	61bb      	str	r3, [r7, #24]
 800b648:	e014      	b.n	800b674 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d110      	bne.n	800b674 <osMessageQueueNew+0x8c>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10c      	bne.n	800b674 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d108      	bne.n	800b674 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d104      	bne.n	800b674 <osMessageQueueNew+0x8c>
          mem = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61bb      	str	r3, [r7, #24]
 800b66e:	e001      	b.n	800b674 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d10b      	bne.n	800b692 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2100      	movs	r1, #0
 800b684:	9100      	str	r1, [sp, #0]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f971 	bl	800b970 <xQueueGenericCreateStatic>
 800b68e:	61f8      	str	r0, [r7, #28]
 800b690:	e008      	b.n	800b6a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b698:	2200      	movs	r2, #0
 800b69a:	68b9      	ldr	r1, [r7, #8]
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f9df 	bl	800ba60 <xQueueGenericCreate>
 800b6a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00c      	beq.n	800b6c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e001      	b.n	800b6bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	69f8      	ldr	r0, [r7, #28]
 800b6c0:	f000 fdb6 	bl	800c230 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6c4:	69fb      	ldr	r3, [r7, #28]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4a07      	ldr	r2, [pc, #28]	; (800b6fc <vApplicationGetIdleTaskMemory+0x2c>)
 800b6e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	4a06      	ldr	r2, [pc, #24]	; (800b700 <vApplicationGetIdleTaskMemory+0x30>)
 800b6e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6ee:	601a      	str	r2, [r3, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	200008a0 	.word	0x200008a0
 800b700:	2000090c 	.word	0x2000090c

0800b704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <vApplicationGetTimerTaskMemory+0x2c>)
 800b714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4a06      	ldr	r2, [pc, #24]	; (800b734 <vApplicationGetTimerTaskMemory+0x30>)
 800b71a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b722:	601a      	str	r2, [r3, #0]
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	20000d0c 	.word	0x20000d0c
 800b734:	20000d78 	.word	0x20000d78

0800b738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f103 0208 	add.w	r2, r3, #8
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295
 800b750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f103 0208 	add.w	r2, r3, #8
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f103 0208 	add.w	r2, r3, #8
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	689a      	ldr	r2, [r3, #8]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b085      	sub	sp, #20
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d103      	bne.n	800b7fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	e00c      	b.n	800b814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e002      	b.n	800b808 <vListInsert+0x2e>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	429a      	cmp	r2, r3
 800b812:	d2f6      	bcs.n	800b802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	6892      	ldr	r2, [r2, #8]
 800b862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6852      	ldr	r2, [r2, #4]
 800b86c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d103      	bne.n	800b880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	1e5a      	subs	r2, r3, #1
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8ca:	f002 f98b 	bl	800dbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d6:	68f9      	ldr	r1, [r7, #12]
 800b8d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8da:	fb01 f303 	mul.w	r3, r1, r3
 800b8de:	441a      	add	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	68f9      	ldr	r1, [r7, #12]
 800b8fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b900:	fb01 f303 	mul.w	r3, r1, r3
 800b904:	441a      	add	r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	22ff      	movs	r2, #255	; 0xff
 800b90e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	22ff      	movs	r2, #255	; 0xff
 800b916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d114      	bne.n	800b94a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01a      	beq.n	800b95e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3310      	adds	r3, #16
 800b92c:	4618      	mov	r0, r3
 800b92e:	f001 fa43 	bl	800cdb8 <xTaskRemoveFromEventList>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d012      	beq.n	800b95e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b938:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <xQueueGenericReset+0xcc>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	e009      	b.n	800b95e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3310      	adds	r3, #16
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff fef2 	bl	800b738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	3324      	adds	r3, #36	; 0x24
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff feed 	bl	800b738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b95e:	f002 f971 	bl	800dc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b962:	2301      	movs	r3, #1
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b970:	b580      	push	{r7, lr}
 800b972:	b08e      	sub	sp, #56	; 0x38
 800b974:	af02      	add	r7, sp, #8
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <xQueueGenericCreateStatic+0x52>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <xQueueGenericCreateStatic+0x56>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <xQueueGenericCreateStatic+0x58>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	623b      	str	r3, [r7, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <xQueueGenericCreateStatic+0x7e>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <xQueueGenericCreateStatic+0x82>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <xQueueGenericCreateStatic+0x84>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	61fb      	str	r3, [r7, #28]
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba0e:	2350      	movs	r3, #80	; 0x50
 800ba10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b50      	cmp	r3, #80	; 0x50
 800ba16:	d00a      	beq.n	800ba2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	61bb      	str	r3, [r7, #24]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00d      	beq.n	800ba56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f83f 	bl	800bad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3730      	adds	r7, #48	; 0x30
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08a      	sub	sp, #40	; 0x28
 800ba64:	af02      	add	r7, sp, #8
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	613b      	str	r3, [r7, #16]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
 800ba92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	3350      	adds	r3, #80	; 0x50
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f002 f9c5 	bl	800de28 <pvPortMalloc>
 800ba9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d011      	beq.n	800baca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	3350      	adds	r3, #80	; 0x50
 800baae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab8:	79fa      	ldrb	r2, [r7, #7]
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f805 	bl	800bad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800baca:	69bb      	ldr	r3, [r7, #24]
	}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e002      	b.n	800baf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb02:	2101      	movs	r1, #1
 800bb04:	69b8      	ldr	r0, [r7, #24]
 800bb06:	f7ff fecb 	bl	800b8a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	78fa      	ldrb	r2, [r7, #3]
 800bb0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb12:	bf00      	nop
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10a      	bne.n	800bb4e <xQueueGenericSend+0x32>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb4a:	bf00      	nop
 800bb4c:	e7fe      	b.n	800bb4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <xQueueGenericSend+0x40>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <xQueueGenericSend+0x44>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e000      	b.n	800bb62 <xQueueGenericSend+0x46>
 800bb60:	2300      	movs	r3, #0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <xQueueGenericSend+0x60>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb78:	bf00      	nop
 800bb7a:	e7fe      	b.n	800bb7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d103      	bne.n	800bb8a <xQueueGenericSend+0x6e>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <xQueueGenericSend+0x72>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <xQueueGenericSend+0x74>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10a      	bne.n	800bbaa <xQueueGenericSend+0x8e>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	623b      	str	r3, [r7, #32]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbaa:	f001 fac3 	bl	800d134 <xTaskGetSchedulerState>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <xQueueGenericSend+0x9e>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <xQueueGenericSend+0xa2>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e000      	b.n	800bbc0 <xQueueGenericSend+0xa4>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <xQueueGenericSend+0xbe>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	61fb      	str	r3, [r7, #28]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbda:	f002 f803 	bl	800dbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d302      	bcc.n	800bbf0 <xQueueGenericSend+0xd4>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d129      	bne.n	800bc44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbf0:	683a      	ldr	r2, [r7, #0]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf6:	f000 fa0b 	bl	800c010 <prvCopyDataToQueue>
 800bbfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d010      	beq.n	800bc26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	3324      	adds	r3, #36	; 0x24
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 f8d5 	bl	800cdb8 <xTaskRemoveFromEventList>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d013      	beq.n	800bc3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc14:	4b3f      	ldr	r3, [pc, #252]	; (800bd14 <xQueueGenericSend+0x1f8>)
 800bc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	e00a      	b.n	800bc3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d007      	beq.n	800bc3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc2c:	4b39      	ldr	r3, [pc, #228]	; (800bd14 <xQueueGenericSend+0x1f8>)
 800bc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc3c:	f002 f802 	bl	800dc44 <vPortExitCritical>
				return pdPASS;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e063      	b.n	800bd0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d103      	bne.n	800bc52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc4a:	f001 fffb 	bl	800dc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e05c      	b.n	800bd0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc58:	f107 0314 	add.w	r3, r7, #20
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 f90f 	bl	800ce80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc62:	2301      	movs	r3, #1
 800bc64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc66:	f001 ffed 	bl	800dc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc6a:	f000 fe81 	bl	800c970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc6e:	f001 ffb9 	bl	800dbe4 <vPortEnterCritical>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc78:	b25b      	sxtb	r3, r3
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d103      	bne.n	800bc88 <xQueueGenericSend+0x16c>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d103      	bne.n	800bc9e <xQueueGenericSend+0x182>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc9e:	f001 ffd1 	bl	800dc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bca2:	1d3a      	adds	r2, r7, #4
 800bca4:	f107 0314 	add.w	r3, r7, #20
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f001 f8fe 	bl	800ceac <xTaskCheckForTimeOut>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d124      	bne.n	800bd00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bcb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcb8:	f000 faa2 	bl	800c200 <prvIsQueueFull>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d018      	beq.n	800bcf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	3310      	adds	r3, #16
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f824 	bl	800cd18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bcd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcd2:	f000 fa2d 	bl	800c130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcd6:	f000 fe59 	bl	800c98c <xTaskResumeAll>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f47f af7c 	bne.w	800bbda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bce2:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <xQueueGenericSend+0x1f8>)
 800bce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	e772      	b.n	800bbda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf6:	f000 fa1b 	bl	800c130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcfa:	f000 fe47 	bl	800c98c <xTaskResumeAll>
 800bcfe:	e76c      	b.n	800bbda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd02:	f000 fa15 	bl	800c130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd06:	f000 fe41 	bl	800c98c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3738      	adds	r7, #56	; 0x38
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b090      	sub	sp, #64	; 0x40
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <xQueueGenericSendFromISR+0x3c>
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <xQueueGenericSendFromISR+0x40>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <xQueueGenericSendFromISR+0x42>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d103      	bne.n	800bd82 <xQueueGenericSendFromISR+0x6a>
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d101      	bne.n	800bd86 <xQueueGenericSendFromISR+0x6e>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <xQueueGenericSendFromISR+0x70>
 800bd86:	2300      	movs	r3, #0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	623b      	str	r3, [r7, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bda2:	f002 f801 	bl	800dda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bda6:	f3ef 8211 	mrs	r2, BASEPRI
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	61fa      	str	r2, [r7, #28]
 800bdbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d302      	bcc.n	800bdd4 <xQueueGenericSendFromISR+0xbc>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d12f      	bne.n	800be34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdea:	f000 f911 	bl	800c010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d112      	bne.n	800be1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d016      	beq.n	800be2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	3324      	adds	r3, #36	; 0x24
 800be04:	4618      	mov	r0, r3
 800be06:	f000 ffd7 	bl	800cdb8 <xTaskRemoveFromEventList>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00e      	beq.n	800be2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	e007      	b.n	800be2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be22:	3301      	adds	r3, #1
 800be24:	b2db      	uxtb	r3, r3
 800be26:	b25a      	sxtb	r2, r3
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be2e:	2301      	movs	r3, #1
 800be30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be32:	e001      	b.n	800be38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be34:	2300      	movs	r3, #0
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be46:	4618      	mov	r0, r3
 800be48:	3740      	adds	r7, #64	; 0x40
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08c      	sub	sp, #48	; 0x30
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <xQueueReceive+0x30>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	623b      	str	r3, [r7, #32]
}
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d103      	bne.n	800be8e <xQueueReceive+0x3e>
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <xQueueReceive+0x42>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueReceive+0x44>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueReceive+0x5e>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61fb      	str	r3, [r7, #28]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beae:	f001 f941 	bl	800d134 <xTaskGetSchedulerState>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d102      	bne.n	800bebe <xQueueReceive+0x6e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <xQueueReceive+0x72>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueReceive+0x74>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xQueueReceive+0x8e>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61bb      	str	r3, [r7, #24]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bede:	f001 fe81 	bl	800dbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	d01f      	beq.n	800bf2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef2:	f000 f8f7 	bl	800c0e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	1e5a      	subs	r2, r3, #1
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00f      	beq.n	800bf26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	3310      	adds	r3, #16
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 ff54 	bl	800cdb8 <xTaskRemoveFromEventList>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d007      	beq.n	800bf26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf16:	4b3d      	ldr	r3, [pc, #244]	; (800c00c <xQueueReceive+0x1bc>)
 800bf18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf26:	f001 fe8d 	bl	800dc44 <vPortExitCritical>
				return pdPASS;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e069      	b.n	800c002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf34:	f001 fe86 	bl	800dc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e062      	b.n	800c002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf42:	f107 0310 	add.w	r3, r7, #16
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 ff9a 	bl	800ce80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf50:	f001 fe78 	bl	800dc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf54:	f000 fd0c 	bl	800c970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf58:	f001 fe44 	bl	800dbe4 <vPortEnterCritical>
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf62:	b25b      	sxtb	r3, r3
 800bf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf68:	d103      	bne.n	800bf72 <xQueueReceive+0x122>
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7e:	d103      	bne.n	800bf88 <xQueueReceive+0x138>
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf88:	f001 fe5c 	bl	800dc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf8c:	1d3a      	adds	r2, r7, #4
 800bf8e:	f107 0310 	add.w	r3, r7, #16
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 ff89 	bl	800ceac <xTaskCheckForTimeOut>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d123      	bne.n	800bfe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa2:	f000 f917 	bl	800c1d4 <prvIsQueueEmpty>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d017      	beq.n	800bfdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	3324      	adds	r3, #36	; 0x24
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 feaf 	bl	800cd18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfbc:	f000 f8b8 	bl	800c130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfc0:	f000 fce4 	bl	800c98c <xTaskResumeAll>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d189      	bne.n	800bede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bfca:	4b10      	ldr	r3, [pc, #64]	; (800c00c <xQueueReceive+0x1bc>)
 800bfcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	e780      	b.n	800bede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bfdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfde:	f000 f8a7 	bl	800c130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfe2:	f000 fcd3 	bl	800c98c <xTaskResumeAll>
 800bfe6:	e77a      	b.n	800bede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bfe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfea:	f000 f8a1 	bl	800c130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfee:	f000 fccd 	bl	800c98c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff4:	f000 f8ee 	bl	800c1d4 <prvIsQueueEmpty>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f43f af6f 	beq.w	800bede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c002:	4618      	mov	r0, r3
 800c004:	3730      	adds	r7, #48	; 0x30
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10d      	bne.n	800c04a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d14d      	bne.n	800c0d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f001 f898 	bl	800d170 <xTaskPriorityDisinherit>
 800c040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	609a      	str	r2, [r3, #8]
 800c048:	e043      	b.n	800c0d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d119      	bne.n	800c084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6858      	ldr	r0, [r3, #4]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c058:	461a      	mov	r2, r3
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	f002 fdf2 	bl	800ec44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c068:	441a      	add	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	429a      	cmp	r2, r3
 800c078:	d32b      	bcc.n	800c0d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	605a      	str	r2, [r3, #4]
 800c082:	e026      	b.n	800c0d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68d8      	ldr	r0, [r3, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	461a      	mov	r2, r3
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	f002 fdd8 	bl	800ec44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c09c:	425b      	negs	r3, r3
 800c09e:	441a      	add	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d207      	bcs.n	800c0c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	689a      	ldr	r2, [r3, #8]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b8:	425b      	negs	r3, r3
 800c0ba:	441a      	add	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d105      	bne.n	800c0d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0da:	697b      	ldr	r3, [r7, #20]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d018      	beq.n	800c128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fe:	441a      	add	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d303      	bcc.n	800c118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68d9      	ldr	r1, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c120:	461a      	mov	r2, r3
 800c122:	6838      	ldr	r0, [r7, #0]
 800c124:	f002 fd8e 	bl	800ec44 <memcpy>
	}
}
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c138:	f001 fd54 	bl	800dbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c144:	e011      	b.n	800c16a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d012      	beq.n	800c174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3324      	adds	r3, #36	; 0x24
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fe30 	bl	800cdb8 <xTaskRemoveFromEventList>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c15e:	f000 ff07 	bl	800cf70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c162:	7bfb      	ldrb	r3, [r7, #15]
 800c164:	3b01      	subs	r3, #1
 800c166:	b2db      	uxtb	r3, r3
 800c168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dce9      	bgt.n	800c146 <prvUnlockQueue+0x16>
 800c172:	e000      	b.n	800c176 <prvUnlockQueue+0x46>
					break;
 800c174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	22ff      	movs	r2, #255	; 0xff
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c17e:	f001 fd61 	bl	800dc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c182:	f001 fd2f 	bl	800dbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c18c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c18e:	e011      	b.n	800c1b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d012      	beq.n	800c1be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3310      	adds	r3, #16
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fe0b 	bl	800cdb8 <xTaskRemoveFromEventList>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1a8:	f000 fee2 	bl	800cf70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dce9      	bgt.n	800c190 <prvUnlockQueue+0x60>
 800c1bc:	e000      	b.n	800c1c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	22ff      	movs	r2, #255	; 0xff
 800c1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1c8:	f001 fd3c 	bl	800dc44 <vPortExitCritical>
}
 800c1cc:	bf00      	nop
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1dc:	f001 fd02 	bl	800dbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	e001      	b.n	800c1f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1f2:	f001 fd27 	bl	800dc44 <vPortExitCritical>

	return xReturn;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c208:	f001 fcec 	bl	800dbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c214:	429a      	cmp	r2, r3
 800c216:	d102      	bne.n	800c21e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c218:	2301      	movs	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e001      	b.n	800c222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c222:	f001 fd0f 	bl	800dc44 <vPortExitCritical>

	return xReturn;
 800c226:	68fb      	ldr	r3, [r7, #12]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c23a:	2300      	movs	r3, #0
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	e014      	b.n	800c26a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c240:	4a0f      	ldr	r2, [pc, #60]	; (800c280 <vQueueAddToRegistry+0x50>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c24c:	490c      	ldr	r1, [pc, #48]	; (800c280 <vQueueAddToRegistry+0x50>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c256:	4a0a      	ldr	r2, [pc, #40]	; (800c280 <vQueueAddToRegistry+0x50>)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	4413      	add	r3, r2
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c262:	e006      	b.n	800c272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3301      	adds	r3, #1
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b07      	cmp	r3, #7
 800c26e:	d9e7      	bls.n	800c240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	20001578 	.word	0x20001578

0800c284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c294:	f001 fca6 	bl	800dbe4 <vPortEnterCritical>
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a4:	d103      	bne.n	800c2ae <vQueueWaitForMessageRestricted+0x2a>
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2b4:	b25b      	sxtb	r3, r3
 800c2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ba:	d103      	bne.n	800c2c4 <vQueueWaitForMessageRestricted+0x40>
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2c4:	f001 fcbe 	bl	800dc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d106      	bne.n	800c2de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	3324      	adds	r3, #36	; 0x24
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fd41 	bl	800cd60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	f7ff ff26 	bl	800c130 <prvUnlockQueue>
	}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08e      	sub	sp, #56	; 0x38
 800c2f0:	af04      	add	r7, sp, #16
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10a      	bne.n	800c316 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	623b      	str	r3, [r7, #32]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <xTaskCreateStatic+0x46>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	61fb      	str	r3, [r7, #28]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c332:	236c      	movs	r3, #108	; 0x6c
 800c334:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b6c      	cmp	r3, #108	; 0x6c
 800c33a:	d00a      	beq.n	800c352 <xTaskCreateStatic+0x66>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	61bb      	str	r3, [r7, #24]
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c352:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	2b00      	cmp	r3, #0
 800c358:	d01e      	beq.n	800c398 <xTaskCreateStatic+0xac>
 800c35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d01b      	beq.n	800c398 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c368:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	2202      	movs	r2, #2
 800c36e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c372:	2300      	movs	r3, #0
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	9302      	str	r3, [sp, #8]
 800c37a:	f107 0314 	add.w	r3, r7, #20
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	68b9      	ldr	r1, [r7, #8]
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f000 f850 	bl	800c430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c392:	f000 f8dd 	bl	800c550 <prvAddNewTaskToReadyList>
 800c396:	e001      	b.n	800c39c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c39c:	697b      	ldr	r3, [r7, #20]
	}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3728      	adds	r7, #40	; 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b08c      	sub	sp, #48	; 0x30
 800c3aa:	af04      	add	r7, sp, #16
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	603b      	str	r3, [r7, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3b6:	88fb      	ldrh	r3, [r7, #6]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fd34 	bl	800de28 <pvPortMalloc>
 800c3c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00e      	beq.n	800c3e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3c8:	206c      	movs	r0, #108	; 0x6c
 800c3ca:	f001 fd2d 	bl	800de28 <pvPortMalloc>
 800c3ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	631a      	str	r2, [r3, #48]	; 0x30
 800c3dc:	e005      	b.n	800c3ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3de:	6978      	ldr	r0, [r7, #20]
 800c3e0:	f001 fdee 	bl	800dfc0 <vPortFree>
 800c3e4:	e001      	b.n	800c3ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d017      	beq.n	800c420 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	9303      	str	r3, [sp, #12]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 f80e 	bl	800c430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c414:	69f8      	ldr	r0, [r7, #28]
 800c416:	f000 f89b 	bl	800c550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c41a:	2301      	movs	r3, #1
 800c41c:	61bb      	str	r3, [r7, #24]
 800c41e:	e002      	b.n	800c426 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c420:	f04f 33ff 	mov.w	r3, #4294967295
 800c424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c426:	69bb      	ldr	r3, [r7, #24]
	}
 800c428:	4618      	mov	r0, r3
 800c42a:	3720      	adds	r7, #32
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	461a      	mov	r2, r3
 800c448:	21a5      	movs	r1, #165	; 0xa5
 800c44a:	f002 fc09 	bl	800ec60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c458:	3b01      	subs	r3, #1
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	f023 0307 	bic.w	r3, r3, #7
 800c466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	617b      	str	r3, [r7, #20]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d01f      	beq.n	800c4ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c48e:	2300      	movs	r3, #0
 800c490:	61fb      	str	r3, [r7, #28]
 800c492:	e012      	b.n	800c4ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	4413      	add	r3, r2
 800c49a:	7819      	ldrb	r1, [r3, #0]
 800c49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	3334      	adds	r3, #52	; 0x34
 800c4a4:	460a      	mov	r2, r1
 800c4a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d006      	beq.n	800c4c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	61fb      	str	r3, [r7, #28]
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	2b1d      	cmp	r3, #29
 800c4be:	d9e9      	bls.n	800c494 <prvInitialiseNewTask+0x64>
 800c4c0:	e000      	b.n	800c4c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c4c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c4cc:	e003      	b.n	800c4d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	2b37      	cmp	r3, #55	; 0x37
 800c4da:	d901      	bls.n	800c4e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c4dc:	2337      	movs	r3, #55	; 0x37
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ea:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff f93e 	bl	800b778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	3318      	adds	r3, #24
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff f939 	bl	800b778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c50a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	68f9      	ldr	r1, [r7, #12]
 800c52e:	69b8      	ldr	r0, [r7, #24]
 800c530:	f001 fa2e 	bl	800d990 <pxPortInitialiseStack>
 800c534:	4602      	mov	r2, r0
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c546:	bf00      	nop
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c558:	f001 fb44 	bl	800dbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c55c:	4b2d      	ldr	r3, [pc, #180]	; (800c614 <prvAddNewTaskToReadyList+0xc4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3301      	adds	r3, #1
 800c562:	4a2c      	ldr	r2, [pc, #176]	; (800c614 <prvAddNewTaskToReadyList+0xc4>)
 800c564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c566:	4b2c      	ldr	r3, [pc, #176]	; (800c618 <prvAddNewTaskToReadyList+0xc8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d109      	bne.n	800c582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c56e:	4a2a      	ldr	r2, [pc, #168]	; (800c618 <prvAddNewTaskToReadyList+0xc8>)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c574:	4b27      	ldr	r3, [pc, #156]	; (800c614 <prvAddNewTaskToReadyList+0xc4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d110      	bne.n	800c59e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c57c:	f000 fd1c 	bl	800cfb8 <prvInitialiseTaskLists>
 800c580:	e00d      	b.n	800c59e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c582:	4b26      	ldr	r3, [pc, #152]	; (800c61c <prvAddNewTaskToReadyList+0xcc>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d109      	bne.n	800c59e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c58a:	4b23      	ldr	r3, [pc, #140]	; (800c618 <prvAddNewTaskToReadyList+0xc8>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	429a      	cmp	r2, r3
 800c596:	d802      	bhi.n	800c59e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c598:	4a1f      	ldr	r2, [pc, #124]	; (800c618 <prvAddNewTaskToReadyList+0xc8>)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c59e:	4b20      	ldr	r3, [pc, #128]	; (800c620 <prvAddNewTaskToReadyList+0xd0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a1e      	ldr	r2, [pc, #120]	; (800c620 <prvAddNewTaskToReadyList+0xd0>)
 800c5a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c5a8:	4b1d      	ldr	r3, [pc, #116]	; (800c620 <prvAddNewTaskToReadyList+0xd0>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	4b1b      	ldr	r3, [pc, #108]	; (800c624 <prvAddNewTaskToReadyList+0xd4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d903      	bls.n	800c5c4 <prvAddNewTaskToReadyList+0x74>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4a18      	ldr	r2, [pc, #96]	; (800c624 <prvAddNewTaskToReadyList+0xd4>)
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4a15      	ldr	r2, [pc, #84]	; (800c628 <prvAddNewTaskToReadyList+0xd8>)
 800c5d2:	441a      	add	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7ff f8d9 	bl	800b792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c5e0:	f001 fb30 	bl	800dc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <prvAddNewTaskToReadyList+0xcc>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00e      	beq.n	800c60a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5ec:	4b0a      	ldr	r3, [pc, #40]	; (800c618 <prvAddNewTaskToReadyList+0xc8>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d207      	bcs.n	800c60a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5fa:	4b0c      	ldr	r3, [pc, #48]	; (800c62c <prvAddNewTaskToReadyList+0xdc>)
 800c5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c60a:	bf00      	nop
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20001a8c 	.word	0x20001a8c
 800c618:	200015b8 	.word	0x200015b8
 800c61c:	20001a98 	.word	0x20001a98
 800c620:	20001aa8 	.word	0x20001aa8
 800c624:	20001a94 	.word	0x20001a94
 800c628:	200015bc 	.word	0x200015bc
 800c62c:	e000ed04 	.word	0xe000ed04

0800c630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c638:	2300      	movs	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d017      	beq.n	800c672 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c642:	4b13      	ldr	r3, [pc, #76]	; (800c690 <vTaskDelay+0x60>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <vTaskDelay+0x30>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	60bb      	str	r3, [r7, #8]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c660:	f000 f986 	bl	800c970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c664:	2100      	movs	r1, #0
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fdf0 	bl	800d24c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c66c:	f000 f98e 	bl	800c98c <xTaskResumeAll>
 800c670:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d107      	bne.n	800c688 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c678:	4b06      	ldr	r3, [pc, #24]	; (800c694 <vTaskDelay+0x64>)
 800c67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c688:	bf00      	nop
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20001ab4 	.word	0x20001ab4
 800c694:	e000ed04 	.word	0xe000ed04

0800c698 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6a0:	f001 faa0 	bl	800dbe4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d102      	bne.n	800c6b0 <vTaskSuspend+0x18>
 800c6aa:	4b30      	ldr	r3, [pc, #192]	; (800c76c <vTaskSuspend+0xd4>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	e000      	b.n	800c6b2 <vTaskSuspend+0x1a>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff f8c7 	bl	800b84c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d004      	beq.n	800c6d0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	3318      	adds	r3, #24
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff f8be 	bl	800b84c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4826      	ldr	r0, [pc, #152]	; (800c770 <vTaskSuspend+0xd8>)
 800c6d8:	f7ff f85b 	bl	800b792 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d103      	bne.n	800c6f0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c6f0:	f001 faa8 	bl	800dc44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c6f4:	4b1f      	ldr	r3, [pc, #124]	; (800c774 <vTaskSuspend+0xdc>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d005      	beq.n	800c708 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c6fc:	f001 fa72 	bl	800dbe4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c700:	f000 fcf8 	bl	800d0f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c704:	f001 fa9e 	bl	800dc44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c708:	4b18      	ldr	r3, [pc, #96]	; (800c76c <vTaskSuspend+0xd4>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d127      	bne.n	800c762 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c712:	4b18      	ldr	r3, [pc, #96]	; (800c774 <vTaskSuspend+0xdc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d017      	beq.n	800c74a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c71a:	4b17      	ldr	r3, [pc, #92]	; (800c778 <vTaskSuspend+0xe0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00a      	beq.n	800c738 <vTaskSuspend+0xa0>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60bb      	str	r3, [r7, #8]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c738:	4b10      	ldr	r3, [pc, #64]	; (800c77c <vTaskSuspend+0xe4>)
 800c73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c748:	e00b      	b.n	800c762 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c74a:	4b09      	ldr	r3, [pc, #36]	; (800c770 <vTaskSuspend+0xd8>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <vTaskSuspend+0xe8>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d103      	bne.n	800c75e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c756:	4b05      	ldr	r3, [pc, #20]	; (800c76c <vTaskSuspend+0xd4>)
 800c758:	2200      	movs	r2, #0
 800c75a:	601a      	str	r2, [r3, #0]
	}
 800c75c:	e001      	b.n	800c762 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c75e:	f000 fa7d 	bl	800cc5c <vTaskSwitchContext>
	}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200015b8 	.word	0x200015b8
 800c770:	20001a78 	.word	0x20001a78
 800c774:	20001a98 	.word	0x20001a98
 800c778:	20001ab4 	.word	0x20001ab4
 800c77c:	e000ed04 	.word	0xe000ed04
 800c780:	20001a8c 	.word	0x20001a8c

0800c784 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c784:	b480      	push	{r7}
 800c786:	b087      	sub	sp, #28
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c78c:	2300      	movs	r3, #0
 800c78e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10a      	bne.n	800c7b0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	60fb      	str	r3, [r7, #12]
}
 800c7ac:	bf00      	nop
 800c7ae:	e7fe      	b.n	800c7ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	4a0a      	ldr	r2, [pc, #40]	; (800c7e0 <prvTaskIsTaskSuspended+0x5c>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d10a      	bne.n	800c7d0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <prvTaskIsTaskSuspended+0x60>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d005      	beq.n	800c7d0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7d0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20001a78 	.word	0x20001a78
 800c7e4:	20001a4c 	.word	0x20001a4c

0800c7e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <vTaskResume+0x28>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	60bb      	str	r3, [r7, #8]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c810:	4b20      	ldr	r3, [pc, #128]	; (800c894 <vTaskResume+0xac>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	429a      	cmp	r2, r3
 800c818:	d038      	beq.n	800c88c <vTaskResume+0xa4>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d035      	beq.n	800c88c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c820:	f001 f9e0 	bl	800dbe4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff ffad 	bl	800c784 <prvTaskIsTaskSuspended>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d02b      	beq.n	800c888 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff f809 	bl	800b84c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83e:	4b16      	ldr	r3, [pc, #88]	; (800c898 <vTaskResume+0xb0>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d903      	bls.n	800c84e <vTaskResume+0x66>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84a:	4a13      	ldr	r2, [pc, #76]	; (800c898 <vTaskResume+0xb0>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a10      	ldr	r2, [pc, #64]	; (800c89c <vTaskResume+0xb4>)
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fe ff94 	bl	800b792 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	4b09      	ldr	r3, [pc, #36]	; (800c894 <vTaskResume+0xac>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	429a      	cmp	r2, r3
 800c876:	d307      	bcc.n	800c888 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c878:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <vTaskResume+0xb8>)
 800c87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c888:	f001 f9dc 	bl	800dc44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c88c:	bf00      	nop
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	200015b8 	.word	0x200015b8
 800c898:	20001a94 	.word	0x20001a94
 800c89c:	200015bc 	.word	0x200015bc
 800c8a0:	e000ed04 	.word	0xe000ed04

0800c8a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08a      	sub	sp, #40	; 0x28
 800c8a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8b2:	463a      	mov	r2, r7
 800c8b4:	1d39      	adds	r1, r7, #4
 800c8b6:	f107 0308 	add.w	r3, r7, #8
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe ff08 	bl	800b6d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	9202      	str	r2, [sp, #8]
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	460a      	mov	r2, r1
 800c8d2:	4921      	ldr	r1, [pc, #132]	; (800c958 <vTaskStartScheduler+0xb4>)
 800c8d4:	4821      	ldr	r0, [pc, #132]	; (800c95c <vTaskStartScheduler+0xb8>)
 800c8d6:	f7ff fd09 	bl	800c2ec <xTaskCreateStatic>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4a20      	ldr	r2, [pc, #128]	; (800c960 <vTaskStartScheduler+0xbc>)
 800c8de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8e0:	4b1f      	ldr	r3, [pc, #124]	; (800c960 <vTaskStartScheduler+0xbc>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e001      	b.n	800c8f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d102      	bne.n	800c8fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8f8:	f000 fcfc 	bl	800d2f4 <xTimerCreateTimerTask>
 800c8fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d116      	bne.n	800c932 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	613b      	str	r3, [r7, #16]
}
 800c916:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c918:	4b12      	ldr	r3, [pc, #72]	; (800c964 <vTaskStartScheduler+0xc0>)
 800c91a:	f04f 32ff 	mov.w	r2, #4294967295
 800c91e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c920:	4b11      	ldr	r3, [pc, #68]	; (800c968 <vTaskStartScheduler+0xc4>)
 800c922:	2201      	movs	r2, #1
 800c924:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c926:	4b11      	ldr	r3, [pc, #68]	; (800c96c <vTaskStartScheduler+0xc8>)
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c92c:	f001 f8b8 	bl	800daa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c930:	e00e      	b.n	800c950 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d10a      	bne.n	800c950 <vTaskStartScheduler+0xac>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	60fb      	str	r3, [r7, #12]
}
 800c94c:	bf00      	nop
 800c94e:	e7fe      	b.n	800c94e <vTaskStartScheduler+0xaa>
}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	0800f784 	.word	0x0800f784
 800c95c:	0800cf89 	.word	0x0800cf89
 800c960:	20001ab0 	.word	0x20001ab0
 800c964:	20001aac 	.word	0x20001aac
 800c968:	20001a98 	.word	0x20001a98
 800c96c:	20001a90 	.word	0x20001a90

0800c970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c974:	4b04      	ldr	r3, [pc, #16]	; (800c988 <vTaskSuspendAll+0x18>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	3301      	adds	r3, #1
 800c97a:	4a03      	ldr	r2, [pc, #12]	; (800c988 <vTaskSuspendAll+0x18>)
 800c97c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c97e:	bf00      	nop
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20001ab4 	.word	0x20001ab4

0800c98c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c99a:	4b42      	ldr	r3, [pc, #264]	; (800caa4 <xTaskResumeAll+0x118>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10a      	bne.n	800c9b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	603b      	str	r3, [r7, #0]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9b8:	f001 f914 	bl	800dbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9bc:	4b39      	ldr	r3, [pc, #228]	; (800caa4 <xTaskResumeAll+0x118>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	4a38      	ldr	r2, [pc, #224]	; (800caa4 <xTaskResumeAll+0x118>)
 800c9c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9c6:	4b37      	ldr	r3, [pc, #220]	; (800caa4 <xTaskResumeAll+0x118>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d162      	bne.n	800ca94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9ce:	4b36      	ldr	r3, [pc, #216]	; (800caa8 <xTaskResumeAll+0x11c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d05e      	beq.n	800ca94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9d6:	e02f      	b.n	800ca38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d8:	4b34      	ldr	r3, [pc, #208]	; (800caac <xTaskResumeAll+0x120>)
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3318      	adds	r3, #24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe ff31 	bl	800b84c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe ff2c 	bl	800b84c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f8:	4b2d      	ldr	r3, [pc, #180]	; (800cab0 <xTaskResumeAll+0x124>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d903      	bls.n	800ca08 <xTaskResumeAll+0x7c>
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca04:	4a2a      	ldr	r2, [pc, #168]	; (800cab0 <xTaskResumeAll+0x124>)
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4a27      	ldr	r2, [pc, #156]	; (800cab4 <xTaskResumeAll+0x128>)
 800ca16:	441a      	add	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	f7fe feb7 	bl	800b792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4b23      	ldr	r3, [pc, #140]	; (800cab8 <xTaskResumeAll+0x12c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d302      	bcc.n	800ca38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca32:	4b22      	ldr	r3, [pc, #136]	; (800cabc <xTaskResumeAll+0x130>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca38:	4b1c      	ldr	r3, [pc, #112]	; (800caac <xTaskResumeAll+0x120>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1cb      	bne.n	800c9d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca46:	f000 fb55 	bl	800d0f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca4a:	4b1d      	ldr	r3, [pc, #116]	; (800cac0 <xTaskResumeAll+0x134>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d010      	beq.n	800ca78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca56:	f000 f847 	bl	800cae8 <xTaskIncrementTick>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca60:	4b16      	ldr	r3, [pc, #88]	; (800cabc <xTaskResumeAll+0x130>)
 800ca62:	2201      	movs	r2, #1
 800ca64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f1      	bne.n	800ca56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <xTaskResumeAll+0x134>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca78:	4b10      	ldr	r3, [pc, #64]	; (800cabc <xTaskResumeAll+0x130>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d009      	beq.n	800ca94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca80:	2301      	movs	r3, #1
 800ca82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <xTaskResumeAll+0x138>)
 800ca86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca94:	f001 f8d6 	bl	800dc44 <vPortExitCritical>

	return xAlreadyYielded;
 800ca98:	68bb      	ldr	r3, [r7, #8]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	20001ab4 	.word	0x20001ab4
 800caa8:	20001a8c 	.word	0x20001a8c
 800caac:	20001a4c 	.word	0x20001a4c
 800cab0:	20001a94 	.word	0x20001a94
 800cab4:	200015bc 	.word	0x200015bc
 800cab8:	200015b8 	.word	0x200015b8
 800cabc:	20001aa0 	.word	0x20001aa0
 800cac0:	20001a9c 	.word	0x20001a9c
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <xTaskGetTickCount+0x1c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cad4:	687b      	ldr	r3, [r7, #4]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20001a90 	.word	0x20001a90

0800cae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800caee:	2300      	movs	r3, #0
 800caf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caf2:	4b4f      	ldr	r3, [pc, #316]	; (800cc30 <xTaskIncrementTick+0x148>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f040 808f 	bne.w	800cc1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cafc:	4b4d      	ldr	r3, [pc, #308]	; (800cc34 <xTaskIncrementTick+0x14c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb04:	4a4b      	ldr	r2, [pc, #300]	; (800cc34 <xTaskIncrementTick+0x14c>)
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d120      	bne.n	800cb52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb10:	4b49      	ldr	r3, [pc, #292]	; (800cc38 <xTaskIncrementTick+0x150>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	603b      	str	r3, [r7, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <xTaskIncrementTick+0x46>
 800cb30:	4b41      	ldr	r3, [pc, #260]	; (800cc38 <xTaskIncrementTick+0x150>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	4b41      	ldr	r3, [pc, #260]	; (800cc3c <xTaskIncrementTick+0x154>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a3f      	ldr	r2, [pc, #252]	; (800cc38 <xTaskIncrementTick+0x150>)
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	4a3f      	ldr	r2, [pc, #252]	; (800cc3c <xTaskIncrementTick+0x154>)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <xTaskIncrementTick+0x158>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	4a3d      	ldr	r2, [pc, #244]	; (800cc40 <xTaskIncrementTick+0x158>)
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	f000 fad1 	bl	800d0f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb52:	4b3c      	ldr	r3, [pc, #240]	; (800cc44 <xTaskIncrementTick+0x15c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d349      	bcc.n	800cbf0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <xTaskIncrementTick+0x150>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d104      	bne.n	800cb70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb66:	4b37      	ldr	r3, [pc, #220]	; (800cc44 <xTaskIncrementTick+0x15c>)
 800cb68:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6c:	601a      	str	r2, [r3, #0]
					break;
 800cb6e:	e03f      	b.n	800cbf0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb70:	4b31      	ldr	r3, [pc, #196]	; (800cc38 <xTaskIncrementTick+0x150>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d203      	bcs.n	800cb90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb88:	4a2e      	ldr	r2, [pc, #184]	; (800cc44 <xTaskIncrementTick+0x15c>)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb8e:	e02f      	b.n	800cbf0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	3304      	adds	r3, #4
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe fe59 	bl	800b84c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d004      	beq.n	800cbac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	3318      	adds	r3, #24
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe fe50 	bl	800b84c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb0:	4b25      	ldr	r3, [pc, #148]	; (800cc48 <xTaskIncrementTick+0x160>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d903      	bls.n	800cbc0 <xTaskIncrementTick+0xd8>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbbc:	4a22      	ldr	r2, [pc, #136]	; (800cc48 <xTaskIncrementTick+0x160>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4a1f      	ldr	r2, [pc, #124]	; (800cc4c <xTaskIncrementTick+0x164>)
 800cbce:	441a      	add	r2, r3
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7fe fddb 	bl	800b792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <xTaskIncrementTick+0x168>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d3b8      	bcc.n	800cb5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbea:	2301      	movs	r3, #1
 800cbec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbee:	e7b5      	b.n	800cb5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbf0:	4b17      	ldr	r3, [pc, #92]	; (800cc50 <xTaskIncrementTick+0x168>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf6:	4915      	ldr	r1, [pc, #84]	; (800cc4c <xTaskIncrementTick+0x164>)
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d901      	bls.n	800cc0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc0c:	4b11      	ldr	r3, [pc, #68]	; (800cc54 <xTaskIncrementTick+0x16c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d007      	beq.n	800cc24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc14:	2301      	movs	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
 800cc18:	e004      	b.n	800cc24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <xTaskIncrementTick+0x170>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	4a0d      	ldr	r2, [pc, #52]	; (800cc58 <xTaskIncrementTick+0x170>)
 800cc22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc24:	697b      	ldr	r3, [r7, #20]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20001ab4 	.word	0x20001ab4
 800cc34:	20001a90 	.word	0x20001a90
 800cc38:	20001a44 	.word	0x20001a44
 800cc3c:	20001a48 	.word	0x20001a48
 800cc40:	20001aa4 	.word	0x20001aa4
 800cc44:	20001aac 	.word	0x20001aac
 800cc48:	20001a94 	.word	0x20001a94
 800cc4c:	200015bc 	.word	0x200015bc
 800cc50:	200015b8 	.word	0x200015b8
 800cc54:	20001aa0 	.word	0x20001aa0
 800cc58:	20001a9c 	.word	0x20001a9c

0800cc5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc62:	4b28      	ldr	r3, [pc, #160]	; (800cd04 <vTaskSwitchContext+0xa8>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc6a:	4b27      	ldr	r3, [pc, #156]	; (800cd08 <vTaskSwitchContext+0xac>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc70:	e041      	b.n	800ccf6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cc72:	4b25      	ldr	r3, [pc, #148]	; (800cd08 <vTaskSwitchContext+0xac>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc78:	4b24      	ldr	r3, [pc, #144]	; (800cd0c <vTaskSwitchContext+0xb0>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	e010      	b.n	800cca2 <vTaskSwitchContext+0x46>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10a      	bne.n	800cc9c <vTaskSwitchContext+0x40>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	607b      	str	r3, [r7, #4]
}
 800cc98:	bf00      	nop
 800cc9a:	e7fe      	b.n	800cc9a <vTaskSwitchContext+0x3e>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	491b      	ldr	r1, [pc, #108]	; (800cd10 <vTaskSwitchContext+0xb4>)
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	4613      	mov	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	440b      	add	r3, r1
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0e4      	beq.n	800cc80 <vTaskSwitchContext+0x24>
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <vTaskSwitchContext+0xb4>)
 800ccc2:	4413      	add	r3, r2
 800ccc4:	60bb      	str	r3, [r7, #8]
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	605a      	str	r2, [r3, #4]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d104      	bne.n	800cce6 <vTaskSwitchContext+0x8a>
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	605a      	str	r2, [r3, #4]
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <vTaskSwitchContext+0xb8>)
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4a06      	ldr	r2, [pc, #24]	; (800cd0c <vTaskSwitchContext+0xb0>)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6013      	str	r3, [r2, #0]
}
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20001ab4 	.word	0x20001ab4
 800cd08:	20001aa0 	.word	0x20001aa0
 800cd0c:	20001a94 	.word	0x20001a94
 800cd10:	200015bc 	.word	0x200015bc
 800cd14:	200015b8 	.word	0x200015b8

0800cd18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10a      	bne.n	800cd3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	60fb      	str	r3, [r7, #12]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd3e:	4b07      	ldr	r3, [pc, #28]	; (800cd5c <vTaskPlaceOnEventList+0x44>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3318      	adds	r3, #24
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7fe fd47 	bl	800b7da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd4c:	2101      	movs	r1, #1
 800cd4e:	6838      	ldr	r0, [r7, #0]
 800cd50:	f000 fa7c 	bl	800d24c <prvAddCurrentTaskToDelayedList>
}
 800cd54:	bf00      	nop
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	200015b8 	.word	0x200015b8

0800cd60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10a      	bne.n	800cd88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	617b      	str	r3, [r7, #20]
}
 800cd84:	bf00      	nop
 800cd86:	e7fe      	b.n	800cd86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3318      	adds	r3, #24
 800cd8e:	4619      	mov	r1, r3
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7fe fcfe 	bl	800b792 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cda0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	68b8      	ldr	r0, [r7, #8]
 800cda6:	f000 fa51 	bl	800d24c <prvAddCurrentTaskToDelayedList>
	}
 800cdaa:	bf00      	nop
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200015b8 	.word	0x200015b8

0800cdb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	3318      	adds	r3, #24
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe fd2f 	bl	800b84c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdee:	4b1e      	ldr	r3, [pc, #120]	; (800ce68 <xTaskRemoveFromEventList+0xb0>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d11d      	bne.n	800ce32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe fd26 	bl	800b84c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	4b19      	ldr	r3, [pc, #100]	; (800ce6c <xTaskRemoveFromEventList+0xb4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d903      	bls.n	800ce14 <xTaskRemoveFromEventList+0x5c>
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	4a16      	ldr	r2, [pc, #88]	; (800ce6c <xTaskRemoveFromEventList+0xb4>)
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <xTaskRemoveFromEventList+0xb8>)
 800ce22:	441a      	add	r2, r3
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	3304      	adds	r3, #4
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	f7fe fcb1 	bl	800b792 <vListInsertEnd>
 800ce30:	e005      	b.n	800ce3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	3318      	adds	r3, #24
 800ce36:	4619      	mov	r1, r3
 800ce38:	480e      	ldr	r0, [pc, #56]	; (800ce74 <xTaskRemoveFromEventList+0xbc>)
 800ce3a:	f7fe fcaa 	bl	800b792 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce42:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <xTaskRemoveFromEventList+0xc0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d905      	bls.n	800ce58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce50:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <xTaskRemoveFromEventList+0xc4>)
 800ce52:	2201      	movs	r2, #1
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	e001      	b.n	800ce5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce5c:	697b      	ldr	r3, [r7, #20]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20001ab4 	.word	0x20001ab4
 800ce6c:	20001a94 	.word	0x20001a94
 800ce70:	200015bc 	.word	0x200015bc
 800ce74:	20001a4c 	.word	0x20001a4c
 800ce78:	200015b8 	.word	0x200015b8
 800ce7c:	20001aa0 	.word	0x20001aa0

0800ce80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce88:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <vTaskInternalSetTimeOutState+0x24>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <vTaskInternalSetTimeOutState+0x28>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	605a      	str	r2, [r3, #4]
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	20001aa4 	.word	0x20001aa4
 800cea8:	20001a90 	.word	0x20001a90

0800ceac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	613b      	str	r3, [r7, #16]
}
 800cece:	bf00      	nop
 800ced0:	e7fe      	b.n	800ced0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	60fb      	str	r3, [r7, #12]
}
 800ceea:	bf00      	nop
 800ceec:	e7fe      	b.n	800ceec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ceee:	f000 fe79 	bl	800dbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cef2:	4b1d      	ldr	r3, [pc, #116]	; (800cf68 <xTaskCheckForTimeOut+0xbc>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0a:	d102      	bne.n	800cf12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	e023      	b.n	800cf5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <xTaskCheckForTimeOut+0xc0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d007      	beq.n	800cf2e <xTaskCheckForTimeOut+0x82>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	69ba      	ldr	r2, [r7, #24]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d302      	bcc.n	800cf2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	61fb      	str	r3, [r7, #28]
 800cf2c:	e015      	b.n	800cf5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d20b      	bcs.n	800cf50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff ff9b 	bl	800ce80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61fb      	str	r3, [r7, #28]
 800cf4e:	e004      	b.n	800cf5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf56:	2301      	movs	r3, #1
 800cf58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf5a:	f000 fe73 	bl	800dc44 <vPortExitCritical>

	return xReturn;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20001a90 	.word	0x20001a90
 800cf6c:	20001aa4 	.word	0x20001aa4

0800cf70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf74:	4b03      	ldr	r3, [pc, #12]	; (800cf84 <vTaskMissedYield+0x14>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	601a      	str	r2, [r3, #0]
}
 800cf7a:	bf00      	nop
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	20001aa0 	.word	0x20001aa0

0800cf88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf90:	f000 f852 	bl	800d038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <prvIdleTask+0x28>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d9f9      	bls.n	800cf90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf9c:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <prvIdleTask+0x2c>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfac:	e7f0      	b.n	800cf90 <prvIdleTask+0x8>
 800cfae:	bf00      	nop
 800cfb0:	200015bc 	.word	0x200015bc
 800cfb4:	e000ed04 	.word	0xe000ed04

0800cfb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	607b      	str	r3, [r7, #4]
 800cfc2:	e00c      	b.n	800cfde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4a12      	ldr	r2, [pc, #72]	; (800d018 <prvInitialiseTaskLists+0x60>)
 800cfd0:	4413      	add	r3, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fbb0 	bl	800b738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	607b      	str	r3, [r7, #4]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b37      	cmp	r3, #55	; 0x37
 800cfe2:	d9ef      	bls.n	800cfc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfe4:	480d      	ldr	r0, [pc, #52]	; (800d01c <prvInitialiseTaskLists+0x64>)
 800cfe6:	f7fe fba7 	bl	800b738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfea:	480d      	ldr	r0, [pc, #52]	; (800d020 <prvInitialiseTaskLists+0x68>)
 800cfec:	f7fe fba4 	bl	800b738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cff0:	480c      	ldr	r0, [pc, #48]	; (800d024 <prvInitialiseTaskLists+0x6c>)
 800cff2:	f7fe fba1 	bl	800b738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cff6:	480c      	ldr	r0, [pc, #48]	; (800d028 <prvInitialiseTaskLists+0x70>)
 800cff8:	f7fe fb9e 	bl	800b738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cffc:	480b      	ldr	r0, [pc, #44]	; (800d02c <prvInitialiseTaskLists+0x74>)
 800cffe:	f7fe fb9b 	bl	800b738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d002:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <prvInitialiseTaskLists+0x78>)
 800d004:	4a05      	ldr	r2, [pc, #20]	; (800d01c <prvInitialiseTaskLists+0x64>)
 800d006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <prvInitialiseTaskLists+0x7c>)
 800d00a:	4a05      	ldr	r2, [pc, #20]	; (800d020 <prvInitialiseTaskLists+0x68>)
 800d00c:	601a      	str	r2, [r3, #0]
}
 800d00e:	bf00      	nop
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	200015bc 	.word	0x200015bc
 800d01c:	20001a1c 	.word	0x20001a1c
 800d020:	20001a30 	.word	0x20001a30
 800d024:	20001a4c 	.word	0x20001a4c
 800d028:	20001a60 	.word	0x20001a60
 800d02c:	20001a78 	.word	0x20001a78
 800d030:	20001a44 	.word	0x20001a44
 800d034:	20001a48 	.word	0x20001a48

0800d038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d03e:	e019      	b.n	800d074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d040:	f000 fdd0 	bl	800dbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d044:	4b10      	ldr	r3, [pc, #64]	; (800d088 <prvCheckTasksWaitingTermination+0x50>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3304      	adds	r3, #4
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe fbfb 	bl	800b84c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d056:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <prvCheckTasksWaitingTermination+0x54>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	4a0b      	ldr	r2, [pc, #44]	; (800d08c <prvCheckTasksWaitingTermination+0x54>)
 800d05e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d060:	4b0b      	ldr	r3, [pc, #44]	; (800d090 <prvCheckTasksWaitingTermination+0x58>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3b01      	subs	r3, #1
 800d066:	4a0a      	ldr	r2, [pc, #40]	; (800d090 <prvCheckTasksWaitingTermination+0x58>)
 800d068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d06a:	f000 fdeb 	bl	800dc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f810 	bl	800d094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d074:	4b06      	ldr	r3, [pc, #24]	; (800d090 <prvCheckTasksWaitingTermination+0x58>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e1      	bne.n	800d040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20001a60 	.word	0x20001a60
 800d08c:	20001a8c 	.word	0x20001a8c
 800d090:	20001a74 	.word	0x20001a74

0800d094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d108      	bne.n	800d0b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 ff88 	bl	800dfc0 <vPortFree>
				vPortFree( pxTCB );
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 ff85 	bl	800dfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0b6:	e018      	b.n	800d0ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d103      	bne.n	800d0ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 ff7c 	bl	800dfc0 <vPortFree>
	}
 800d0c8:	e00f      	b.n	800d0ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d00a      	beq.n	800d0ea <prvDeleteTCB+0x56>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	60fb      	str	r3, [r7, #12]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <prvDeleteTCB+0x54>
	}
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0fa:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <prvResetNextTaskUnblockTime+0x38>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <prvResetNextTaskUnblockTime+0x3c>)
 800d106:	f04f 32ff 	mov.w	r2, #4294967295
 800d10a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d10c:	e008      	b.n	800d120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d10e:	4b07      	ldr	r3, [pc, #28]	; (800d12c <prvResetNextTaskUnblockTime+0x38>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	4a04      	ldr	r2, [pc, #16]	; (800d130 <prvResetNextTaskUnblockTime+0x3c>)
 800d11e:	6013      	str	r3, [r2, #0]
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20001a44 	.word	0x20001a44
 800d130:	20001aac 	.word	0x20001aac

0800d134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d13a:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <xTaskGetSchedulerState+0x34>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d102      	bne.n	800d148 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d142:	2301      	movs	r3, #1
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	e008      	b.n	800d15a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d148:	4b08      	ldr	r3, [pc, #32]	; (800d16c <xTaskGetSchedulerState+0x38>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d150:	2302      	movs	r3, #2
 800d152:	607b      	str	r3, [r7, #4]
 800d154:	e001      	b.n	800d15a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d156:	2300      	movs	r3, #0
 800d158:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d15a:	687b      	ldr	r3, [r7, #4]
	}
 800d15c:	4618      	mov	r0, r3
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	20001a98 	.word	0x20001a98
 800d16c:	20001ab4 	.word	0x20001ab4

0800d170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d17c:	2300      	movs	r3, #0
 800d17e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d056      	beq.n	800d234 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d186:	4b2e      	ldr	r3, [pc, #184]	; (800d240 <xTaskPriorityDisinherit+0xd0>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d00a      	beq.n	800d1a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	60fb      	str	r3, [r7, #12]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d10a      	bne.n	800d1c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	60bb      	str	r3, [r7, #8]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d02c      	beq.n	800d234 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d128      	bne.n	800d234 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fb30 	bl	800b84c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d204:	4b0f      	ldr	r3, [pc, #60]	; (800d244 <xTaskPriorityDisinherit+0xd4>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d903      	bls.n	800d214 <xTaskPriorityDisinherit+0xa4>
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d210:	4a0c      	ldr	r2, [pc, #48]	; (800d244 <xTaskPriorityDisinherit+0xd4>)
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4a09      	ldr	r2, [pc, #36]	; (800d248 <xTaskPriorityDisinherit+0xd8>)
 800d222:	441a      	add	r2, r3
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	3304      	adds	r3, #4
 800d228:	4619      	mov	r1, r3
 800d22a:	4610      	mov	r0, r2
 800d22c:	f7fe fab1 	bl	800b792 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d230:	2301      	movs	r3, #1
 800d232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d234:	697b      	ldr	r3, [r7, #20]
	}
 800d236:	4618      	mov	r0, r3
 800d238:	3718      	adds	r7, #24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	200015b8 	.word	0x200015b8
 800d244:	20001a94 	.word	0x20001a94
 800d248:	200015bc 	.word	0x200015bc

0800d24c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d256:	4b21      	ldr	r3, [pc, #132]	; (800d2dc <prvAddCurrentTaskToDelayedList+0x90>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d25c:	4b20      	ldr	r3, [pc, #128]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3304      	adds	r3, #4
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe faf2 	bl	800b84c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d10a      	bne.n	800d286 <prvAddCurrentTaskToDelayedList+0x3a>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d276:	4b1a      	ldr	r3, [pc, #104]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4619      	mov	r1, r3
 800d27e:	4819      	ldr	r0, [pc, #100]	; (800d2e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d280:	f7fe fa87 	bl	800b792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d284:	e026      	b.n	800d2d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4413      	add	r3, r2
 800d28c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d28e:	4b14      	ldr	r3, [pc, #80]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d209      	bcs.n	800d2b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d29e:	4b12      	ldr	r3, [pc, #72]	; (800d2e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe fa95 	bl	800b7da <vListInsert>
}
 800d2b0:	e010      	b.n	800d2d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2b2:	4b0e      	ldr	r3, [pc, #56]	; (800d2ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fe fa8b 	bl	800b7da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2c4:	4b0a      	ldr	r3, [pc, #40]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d202      	bcs.n	800d2d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2ce:	4a08      	ldr	r2, [pc, #32]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	6013      	str	r3, [r2, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20001a90 	.word	0x20001a90
 800d2e0:	200015b8 	.word	0x200015b8
 800d2e4:	20001a78 	.word	0x20001a78
 800d2e8:	20001a48 	.word	0x20001a48
 800d2ec:	20001a44 	.word	0x20001a44
 800d2f0:	20001aac 	.word	0x20001aac

0800d2f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2fe:	f000 fb07 	bl	800d910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d302:	4b1c      	ldr	r3, [pc, #112]	; (800d374 <xTimerCreateTimerTask+0x80>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d021      	beq.n	800d34e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d312:	1d3a      	adds	r2, r7, #4
 800d314:	f107 0108 	add.w	r1, r7, #8
 800d318:	f107 030c 	add.w	r3, r7, #12
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fe f9f1 	bl	800b704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d322:	6879      	ldr	r1, [r7, #4]
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	9202      	str	r2, [sp, #8]
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	2302      	movs	r3, #2
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	2300      	movs	r3, #0
 800d332:	460a      	mov	r2, r1
 800d334:	4910      	ldr	r1, [pc, #64]	; (800d378 <xTimerCreateTimerTask+0x84>)
 800d336:	4811      	ldr	r0, [pc, #68]	; (800d37c <xTimerCreateTimerTask+0x88>)
 800d338:	f7fe ffd8 	bl	800c2ec <xTaskCreateStatic>
 800d33c:	4603      	mov	r3, r0
 800d33e:	4a10      	ldr	r2, [pc, #64]	; (800d380 <xTimerCreateTimerTask+0x8c>)
 800d340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d342:	4b0f      	ldr	r3, [pc, #60]	; (800d380 <xTimerCreateTimerTask+0x8c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d34a:	2301      	movs	r3, #1
 800d34c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10a      	bne.n	800d36a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	613b      	str	r3, [r7, #16]
}
 800d366:	bf00      	nop
 800d368:	e7fe      	b.n	800d368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d36a:	697b      	ldr	r3, [r7, #20]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20001ae8 	.word	0x20001ae8
 800d378:	0800f78c 	.word	0x0800f78c
 800d37c:	0800d4b9 	.word	0x0800d4b9
 800d380:	20001aec 	.word	0x20001aec

0800d384 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08a      	sub	sp, #40	; 0x28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d392:	2300      	movs	r3, #0
 800d394:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	623b      	str	r3, [r7, #32]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	; (800d41c <xTimerGenericCommand+0x98>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d02a      	beq.n	800d410 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b05      	cmp	r3, #5
 800d3ca:	dc18      	bgt.n	800d3fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3cc:	f7ff feb2 	bl	800d134 <xTaskGetSchedulerState>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d109      	bne.n	800d3ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d3d6:	4b11      	ldr	r3, [pc, #68]	; (800d41c <xTimerGenericCommand+0x98>)
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	f107 0110 	add.w	r1, r7, #16
 800d3de:	2300      	movs	r3, #0
 800d3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e2:	f7fe fb9b 	bl	800bb1c <xQueueGenericSend>
 800d3e6:	6278      	str	r0, [r7, #36]	; 0x24
 800d3e8:	e012      	b.n	800d410 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d3ea:	4b0c      	ldr	r3, [pc, #48]	; (800d41c <xTimerGenericCommand+0x98>)
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	f107 0110 	add.w	r1, r7, #16
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f7fe fb91 	bl	800bb1c <xQueueGenericSend>
 800d3fa:	6278      	str	r0, [r7, #36]	; 0x24
 800d3fc:	e008      	b.n	800d410 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d3fe:	4b07      	ldr	r3, [pc, #28]	; (800d41c <xTimerGenericCommand+0x98>)
 800d400:	6818      	ldr	r0, [r3, #0]
 800d402:	f107 0110 	add.w	r1, r7, #16
 800d406:	2300      	movs	r3, #0
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	f7fe fc85 	bl	800bd18 <xQueueGenericSendFromISR>
 800d40e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d412:	4618      	mov	r0, r3
 800d414:	3728      	adds	r7, #40	; 0x28
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20001ae8 	.word	0x20001ae8

0800d420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af02      	add	r7, sp, #8
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d42a:	4b22      	ldr	r3, [pc, #136]	; (800d4b4 <prvProcessExpiredTimer+0x94>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	3304      	adds	r3, #4
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fe fa07 	bl	800b84c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d022      	beq.n	800d492 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	699a      	ldr	r2, [r3, #24]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	18d1      	adds	r1, r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	6978      	ldr	r0, [r7, #20]
 800d45a:	f000 f8d1 	bl	800d600 <prvInsertTimerInActiveList>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d01f      	beq.n	800d4a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d464:	2300      	movs	r3, #0
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	2300      	movs	r3, #0
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	2100      	movs	r1, #0
 800d46e:	6978      	ldr	r0, [r7, #20]
 800d470:	f7ff ff88 	bl	800d384 <xTimerGenericCommand>
 800d474:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d113      	bne.n	800d4a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d498:	f023 0301 	bic.w	r3, r3, #1
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	6978      	ldr	r0, [r7, #20]
 800d4aa:	4798      	blx	r3
}
 800d4ac:	bf00      	nop
 800d4ae:	3718      	adds	r7, #24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	20001ae0 	.word	0x20001ae0

0800d4b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 f857 	bl	800d578 <prvGetNextExpireTime>
 800d4ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 f803 	bl	800d4dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d4d6:	f000 f8d5 	bl	800d684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4da:	e7f1      	b.n	800d4c0 <prvTimerTask+0x8>

0800d4dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d4e6:	f7ff fa43 	bl	800c970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4ea:	f107 0308 	add.w	r3, r7, #8
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 f866 	bl	800d5c0 <prvSampleTimeNow>
 800d4f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d130      	bne.n	800d55e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <prvProcessTimerOrBlockTask+0x3c>
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	429a      	cmp	r2, r3
 800d508:	d806      	bhi.n	800d518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d50a:	f7ff fa3f 	bl	800c98c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d50e:	68f9      	ldr	r1, [r7, #12]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ff85 	bl	800d420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d516:	e024      	b.n	800d562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d008      	beq.n	800d530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <prvProcessTimerOrBlockTask+0x90>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <prvProcessTimerOrBlockTask+0x50>
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <prvProcessTimerOrBlockTask+0x52>
 800d52c:	2300      	movs	r3, #0
 800d52e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d530:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <prvProcessTimerOrBlockTask+0x94>)
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	4619      	mov	r1, r3
 800d53e:	f7fe fea1 	bl	800c284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d542:	f7ff fa23 	bl	800c98c <xTaskResumeAll>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d54c:	4b09      	ldr	r3, [pc, #36]	; (800d574 <prvProcessTimerOrBlockTask+0x98>)
 800d54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	f3bf 8f6f 	isb	sy
}
 800d55c:	e001      	b.n	800d562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d55e:	f7ff fa15 	bl	800c98c <xTaskResumeAll>
}
 800d562:	bf00      	nop
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20001ae4 	.word	0x20001ae4
 800d570:	20001ae8 	.word	0x20001ae8
 800d574:	e000ed04 	.word	0xe000ed04

0800d578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d580:	4b0e      	ldr	r3, [pc, #56]	; (800d5bc <prvGetNextExpireTime+0x44>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <prvGetNextExpireTime+0x16>
 800d58a:	2201      	movs	r2, #1
 800d58c:	e000      	b.n	800d590 <prvGetNextExpireTime+0x18>
 800d58e:	2200      	movs	r2, #0
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d105      	bne.n	800d5a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <prvGetNextExpireTime+0x44>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	e001      	b.n	800d5ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	20001ae0 	.word	0x20001ae0

0800d5c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d5c8:	f7ff fa7e 	bl	800cac8 <xTaskGetTickCount>
 800d5cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	; (800d5fc <prvSampleTimeNow+0x3c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d205      	bcs.n	800d5e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d5d8:	f000 f936 	bl	800d848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	e002      	b.n	800d5ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d5ea:	4a04      	ldr	r2, [pc, #16]	; (800d5fc <prvSampleTimeNow+0x3c>)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20001af0 	.word	0x20001af0

0800d600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d60e:	2300      	movs	r3, #0
 800d610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d812      	bhi.n	800d64c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	1ad2      	subs	r2, r2, r3
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	429a      	cmp	r2, r3
 800d632:	d302      	bcc.n	800d63a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d634:	2301      	movs	r3, #1
 800d636:	617b      	str	r3, [r7, #20]
 800d638:	e01b      	b.n	800d672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <prvInsertTimerInActiveList+0x7c>)
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7fe f8c8 	bl	800b7da <vListInsert>
 800d64a:	e012      	b.n	800d672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d206      	bcs.n	800d662 <prvInsertTimerInActiveList+0x62>
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d302      	bcc.n	800d662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d65c:	2301      	movs	r3, #1
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	e007      	b.n	800d672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d662:	4b07      	ldr	r3, [pc, #28]	; (800d680 <prvInsertTimerInActiveList+0x80>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	3304      	adds	r3, #4
 800d66a:	4619      	mov	r1, r3
 800d66c:	4610      	mov	r0, r2
 800d66e:	f7fe f8b4 	bl	800b7da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d672:	697b      	ldr	r3, [r7, #20]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20001ae4 	.word	0x20001ae4
 800d680:	20001ae0 	.word	0x20001ae0

0800d684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08e      	sub	sp, #56	; 0x38
 800d688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d68a:	e0ca      	b.n	800d822 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	da18      	bge.n	800d6c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d692:	1d3b      	adds	r3, r7, #4
 800d694:	3304      	adds	r3, #4
 800d696:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10a      	bne.n	800d6b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	61fb      	str	r3, [r7, #28]
}
 800d6b0:	bf00      	nop
 800d6b2:	e7fe      	b.n	800d6b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6ba:	6850      	ldr	r0, [r2, #4]
 800d6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6be:	6892      	ldr	r2, [r2, #8]
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f2c0 80aa 	blt.w	800d820 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	3304      	adds	r3, #4
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fe f8b5 	bl	800b84c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff ff6b 	bl	800d5c0 <prvSampleTimeNow>
 800d6ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b09      	cmp	r3, #9
 800d6f0:	f200 8097 	bhi.w	800d822 <prvProcessReceivedCommands+0x19e>
 800d6f4:	a201      	add	r2, pc, #4	; (adr r2, 800d6fc <prvProcessReceivedCommands+0x78>)
 800d6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fa:	bf00      	nop
 800d6fc:	0800d725 	.word	0x0800d725
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d725 	.word	0x0800d725
 800d708:	0800d799 	.word	0x0800d799
 800d70c:	0800d7ad 	.word	0x0800d7ad
 800d710:	0800d7f7 	.word	0x0800d7f7
 800d714:	0800d725 	.word	0x0800d725
 800d718:	0800d725 	.word	0x0800d725
 800d71c:	0800d799 	.word	0x0800d799
 800d720:	0800d7ad 	.word	0x0800d7ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d72a:	f043 0301 	orr.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	18d1      	adds	r1, r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d744:	f7ff ff5c 	bl	800d600 <prvInsertTimerInActiveList>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d069      	beq.n	800d822 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d75c:	f003 0304 	and.w	r3, r3, #4
 800d760:	2b00      	cmp	r3, #0
 800d762:	d05e      	beq.n	800d822 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	441a      	add	r2, r3
 800d76c:	2300      	movs	r3, #0
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	2300      	movs	r3, #0
 800d772:	2100      	movs	r1, #0
 800d774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d776:	f7ff fe05 	bl	800d384 <xTimerGenericCommand>
 800d77a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d14f      	bne.n	800d822 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	61bb      	str	r3, [r7, #24]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d79e:	f023 0301 	bic.w	r3, r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d7aa:	e03a      	b.n	800d822 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7b2:	f043 0301 	orr.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	617b      	str	r3, [r7, #20]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	699a      	ldr	r2, [r3, #24]
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	18d1      	adds	r1, r2, r3
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7f0:	f7ff ff06 	bl	800d600 <prvInsertTimerInActiveList>
					break;
 800d7f4:	e015      	b.n	800d822 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7fc:	f003 0302 	and.w	r3, r3, #2
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d806:	f000 fbdb 	bl	800dfc0 <vPortFree>
 800d80a:	e00a      	b.n	800d822 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d812:	f023 0301 	bic.w	r3, r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d81e:	e000      	b.n	800d822 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d820:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d822:	4b08      	ldr	r3, [pc, #32]	; (800d844 <prvProcessReceivedCommands+0x1c0>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	1d39      	adds	r1, r7, #4
 800d828:	2200      	movs	r2, #0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fb10 	bl	800be50 <xQueueReceive>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	f47f af2a 	bne.w	800d68c <prvProcessReceivedCommands+0x8>
	}
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	3730      	adds	r7, #48	; 0x30
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20001ae8 	.word	0x20001ae8

0800d848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d84e:	e048      	b.n	800d8e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d850:	4b2d      	ldr	r3, [pc, #180]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d85a:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	3304      	adds	r3, #4
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd ffef 	bl	800b84c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d87c:	f003 0304 	and.w	r3, r3, #4
 800d880:	2b00      	cmp	r3, #0
 800d882:	d02e      	beq.n	800d8e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	4413      	add	r3, r2
 800d88c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	429a      	cmp	r2, r3
 800d894:	d90e      	bls.n	800d8b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8a2:	4b19      	ldr	r3, [pc, #100]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f7fd ff94 	bl	800b7da <vListInsert>
 800d8b2:	e016      	b.n	800d8e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	2100      	movs	r1, #0
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff fd60 	bl	800d384 <xTimerGenericCommand>
 800d8c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	603b      	str	r3, [r7, #0]
}
 800d8de:	bf00      	nop
 800d8e0:	e7fe      	b.n	800d8e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d8e2:	4b09      	ldr	r3, [pc, #36]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1b1      	bne.n	800d850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d8ec:	4b06      	ldr	r3, [pc, #24]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d8f2:	4b06      	ldr	r3, [pc, #24]	; (800d90c <prvSwitchTimerLists+0xc4>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a04      	ldr	r2, [pc, #16]	; (800d908 <prvSwitchTimerLists+0xc0>)
 800d8f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d8fa:	4a04      	ldr	r2, [pc, #16]	; (800d90c <prvSwitchTimerLists+0xc4>)
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	6013      	str	r3, [r2, #0]
}
 800d900:	bf00      	nop
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	20001ae0 	.word	0x20001ae0
 800d90c:	20001ae4 	.word	0x20001ae4

0800d910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d916:	f000 f965 	bl	800dbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d91a:	4b15      	ldr	r3, [pc, #84]	; (800d970 <prvCheckForValidListAndQueue+0x60>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d120      	bne.n	800d964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d922:	4814      	ldr	r0, [pc, #80]	; (800d974 <prvCheckForValidListAndQueue+0x64>)
 800d924:	f7fd ff08 	bl	800b738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d928:	4813      	ldr	r0, [pc, #76]	; (800d978 <prvCheckForValidListAndQueue+0x68>)
 800d92a:	f7fd ff05 	bl	800b738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d92e:	4b13      	ldr	r3, [pc, #76]	; (800d97c <prvCheckForValidListAndQueue+0x6c>)
 800d930:	4a10      	ldr	r2, [pc, #64]	; (800d974 <prvCheckForValidListAndQueue+0x64>)
 800d932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d934:	4b12      	ldr	r3, [pc, #72]	; (800d980 <prvCheckForValidListAndQueue+0x70>)
 800d936:	4a10      	ldr	r2, [pc, #64]	; (800d978 <prvCheckForValidListAndQueue+0x68>)
 800d938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d93a:	2300      	movs	r3, #0
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4b11      	ldr	r3, [pc, #68]	; (800d984 <prvCheckForValidListAndQueue+0x74>)
 800d940:	4a11      	ldr	r2, [pc, #68]	; (800d988 <prvCheckForValidListAndQueue+0x78>)
 800d942:	2110      	movs	r1, #16
 800d944:	200a      	movs	r0, #10
 800d946:	f7fe f813 	bl	800b970 <xQueueGenericCreateStatic>
 800d94a:	4603      	mov	r3, r0
 800d94c:	4a08      	ldr	r2, [pc, #32]	; (800d970 <prvCheckForValidListAndQueue+0x60>)
 800d94e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <prvCheckForValidListAndQueue+0x60>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d958:	4b05      	ldr	r3, [pc, #20]	; (800d970 <prvCheckForValidListAndQueue+0x60>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	490b      	ldr	r1, [pc, #44]	; (800d98c <prvCheckForValidListAndQueue+0x7c>)
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe fc66 	bl	800c230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d964:	f000 f96e 	bl	800dc44 <vPortExitCritical>
}
 800d968:	bf00      	nop
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20001ae8 	.word	0x20001ae8
 800d974:	20001ab8 	.word	0x20001ab8
 800d978:	20001acc 	.word	0x20001acc
 800d97c:	20001ae0 	.word	0x20001ae0
 800d980:	20001ae4 	.word	0x20001ae4
 800d984:	20001b94 	.word	0x20001b94
 800d988:	20001af4 	.word	0x20001af4
 800d98c:	0800f794 	.word	0x0800f794

0800d990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	3b04      	subs	r3, #4
 800d9a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3b04      	subs	r3, #4
 800d9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f023 0201 	bic.w	r2, r3, #1
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3b04      	subs	r3, #4
 800d9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d9c0:	4a0c      	ldr	r2, [pc, #48]	; (800d9f4 <pxPortInitialiseStack+0x64>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3b14      	subs	r3, #20
 800d9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3b04      	subs	r3, #4
 800d9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f06f 0202 	mvn.w	r2, #2
 800d9de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	3b20      	subs	r3, #32
 800d9e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	0800d9f9 	.word	0x0800d9f9

0800d9f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <prvTaskExitError+0x54>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0a:	d00a      	beq.n	800da22 <prvTaskExitError+0x2a>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	60fb      	str	r3, [r7, #12]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <prvTaskExitError+0x28>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	60bb      	str	r3, [r7, #8]
}
 800da34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da36:	bf00      	nop
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0fc      	beq.n	800da38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da3e:	bf00      	nop
 800da40:	bf00      	nop
 800da42:	3714      	adds	r7, #20
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	200005b0 	.word	0x200005b0

0800da50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <pxCurrentTCBConst2>)
 800da52:	6819      	ldr	r1, [r3, #0]
 800da54:	6808      	ldr	r0, [r1, #0]
 800da56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	f380 8809 	msr	PSP, r0
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8811 	msr	BASEPRI, r0
 800da6a:	4770      	bx	lr
 800da6c:	f3af 8000 	nop.w

0800da70 <pxCurrentTCBConst2>:
 800da70:	200015b8 	.word	0x200015b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop

0800da78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da78:	4808      	ldr	r0, [pc, #32]	; (800da9c <prvPortStartFirstTask+0x24>)
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	6800      	ldr	r0, [r0, #0]
 800da7e:	f380 8808 	msr	MSP, r0
 800da82:	f04f 0000 	mov.w	r0, #0
 800da86:	f380 8814 	msr	CONTROL, r0
 800da8a:	b662      	cpsie	i
 800da8c:	b661      	cpsie	f
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	df00      	svc	0
 800da98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da9a:	bf00      	nop
 800da9c:	e000ed08 	.word	0xe000ed08

0800daa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b086      	sub	sp, #24
 800daa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800daa6:	4b46      	ldr	r3, [pc, #280]	; (800dbc0 <xPortStartScheduler+0x120>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a46      	ldr	r2, [pc, #280]	; (800dbc4 <xPortStartScheduler+0x124>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d10a      	bne.n	800dac6 <xPortStartScheduler+0x26>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	613b      	str	r3, [r7, #16]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dac6:	4b3e      	ldr	r3, [pc, #248]	; (800dbc0 <xPortStartScheduler+0x120>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a3f      	ldr	r2, [pc, #252]	; (800dbc8 <xPortStartScheduler+0x128>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d10a      	bne.n	800dae6 <xPortStartScheduler+0x46>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	60fb      	str	r3, [r7, #12]
}
 800dae2:	bf00      	nop
 800dae4:	e7fe      	b.n	800dae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dae6:	4b39      	ldr	r3, [pc, #228]	; (800dbcc <xPortStartScheduler+0x12c>)
 800dae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	22ff      	movs	r2, #255	; 0xff
 800daf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	b2db      	uxtb	r3, r3
 800db04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	4b31      	ldr	r3, [pc, #196]	; (800dbd0 <xPortStartScheduler+0x130>)
 800db0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db0e:	4b31      	ldr	r3, [pc, #196]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db10:	2207      	movs	r2, #7
 800db12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db14:	e009      	b.n	800db2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800db16:	4b2f      	ldr	r3, [pc, #188]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	4a2d      	ldr	r2, [pc, #180]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	b2db      	uxtb	r3, r3
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	b2db      	uxtb	r3, r3
 800db28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db2a:	78fb      	ldrb	r3, [r7, #3]
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db32:	2b80      	cmp	r3, #128	; 0x80
 800db34:	d0ef      	beq.n	800db16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db36:	4b27      	ldr	r3, [pc, #156]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f1c3 0307 	rsb	r3, r3, #7
 800db3e:	2b04      	cmp	r3, #4
 800db40:	d00a      	beq.n	800db58 <xPortStartScheduler+0xb8>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	60bb      	str	r3, [r7, #8]
}
 800db54:	bf00      	nop
 800db56:	e7fe      	b.n	800db56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db58:	4b1e      	ldr	r3, [pc, #120]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	4a1d      	ldr	r2, [pc, #116]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db62:	4b1c      	ldr	r3, [pc, #112]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db6a:	4a1a      	ldr	r2, [pc, #104]	; (800dbd4 <xPortStartScheduler+0x134>)
 800db6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	b2da      	uxtb	r2, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db76:	4b18      	ldr	r3, [pc, #96]	; (800dbd8 <xPortStartScheduler+0x138>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a17      	ldr	r2, [pc, #92]	; (800dbd8 <xPortStartScheduler+0x138>)
 800db7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db82:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <xPortStartScheduler+0x138>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a14      	ldr	r2, [pc, #80]	; (800dbd8 <xPortStartScheduler+0x138>)
 800db88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db8e:	f000 f8dd 	bl	800dd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db92:	4b12      	ldr	r3, [pc, #72]	; (800dbdc <xPortStartScheduler+0x13c>)
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db98:	f000 f8fc 	bl	800dd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db9c:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <xPortStartScheduler+0x140>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a0f      	ldr	r2, [pc, #60]	; (800dbe0 <xPortStartScheduler+0x140>)
 800dba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dba8:	f7ff ff66 	bl	800da78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dbac:	f7ff f856 	bl	800cc5c <vTaskSwitchContext>
	prvTaskExitError();
 800dbb0:	f7ff ff22 	bl	800d9f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	e000ed00 	.word	0xe000ed00
 800dbc4:	410fc271 	.word	0x410fc271
 800dbc8:	410fc270 	.word	0x410fc270
 800dbcc:	e000e400 	.word	0xe000e400
 800dbd0:	20001be4 	.word	0x20001be4
 800dbd4:	20001be8 	.word	0x20001be8
 800dbd8:	e000ed20 	.word	0xe000ed20
 800dbdc:	200005b0 	.word	0x200005b0
 800dbe0:	e000ef34 	.word	0xe000ef34

0800dbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800dbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbee:	f383 8811 	msr	BASEPRI, r3
 800dbf2:	f3bf 8f6f 	isb	sy
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	607b      	str	r3, [r7, #4]
}
 800dbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbfe:	4b0f      	ldr	r3, [pc, #60]	; (800dc3c <vPortEnterCritical+0x58>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	3301      	adds	r3, #1
 800dc04:	4a0d      	ldr	r2, [pc, #52]	; (800dc3c <vPortEnterCritical+0x58>)
 800dc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc08:	4b0c      	ldr	r3, [pc, #48]	; (800dc3c <vPortEnterCritical+0x58>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d10f      	bne.n	800dc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc10:	4b0b      	ldr	r3, [pc, #44]	; (800dc40 <vPortEnterCritical+0x5c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	603b      	str	r3, [r7, #0]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <vPortEnterCritical+0x4a>
	}
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	200005b0 	.word	0x200005b0
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc4a:	4b12      	ldr	r3, [pc, #72]	; (800dc94 <vPortExitCritical+0x50>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10a      	bne.n	800dc68 <vPortExitCritical+0x24>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	607b      	str	r3, [r7, #4]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc68:	4b0a      	ldr	r3, [pc, #40]	; (800dc94 <vPortExitCritical+0x50>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	4a09      	ldr	r2, [pc, #36]	; (800dc94 <vPortExitCritical+0x50>)
 800dc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc72:	4b08      	ldr	r3, [pc, #32]	; (800dc94 <vPortExitCritical+0x50>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <vPortExitCritical+0x42>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	f383 8811 	msr	BASEPRI, r3
}
 800dc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc86:	bf00      	nop
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	200005b0 	.word	0x200005b0
	...

0800dca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dca0:	f3ef 8009 	mrs	r0, PSP
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	4b15      	ldr	r3, [pc, #84]	; (800dd00 <pxCurrentTCBConst>)
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	f01e 0f10 	tst.w	lr, #16
 800dcb0:	bf08      	it	eq
 800dcb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dcb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcba:	6010      	str	r0, [r2, #0]
 800dcbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dcc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dcc4:	f380 8811 	msr	BASEPRI, r0
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f7fe ffc4 	bl	800cc5c <vTaskSwitchContext>
 800dcd4:	f04f 0000 	mov.w	r0, #0
 800dcd8:	f380 8811 	msr	BASEPRI, r0
 800dcdc:	bc09      	pop	{r0, r3}
 800dcde:	6819      	ldr	r1, [r3, #0]
 800dce0:	6808      	ldr	r0, [r1, #0]
 800dce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce6:	f01e 0f10 	tst.w	lr, #16
 800dcea:	bf08      	it	eq
 800dcec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcf0:	f380 8809 	msr	PSP, r0
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w

0800dd00 <pxCurrentTCBConst>:
 800dd00:	200015b8 	.word	0x200015b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop

0800dd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	607b      	str	r3, [r7, #4]
}
 800dd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd22:	f7fe fee1 	bl	800cae8 <xTaskIncrementTick>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d003      	beq.n	800dd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd2c:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <xPortSysTickHandler+0x40>)
 800dd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	2300      	movs	r3, #0
 800dd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	f383 8811 	msr	BASEPRI, r3
}
 800dd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd50:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <vPortSetupTimerInterrupt+0x34>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd56:	4b0b      	ldr	r3, [pc, #44]	; (800dd84 <vPortSetupTimerInterrupt+0x38>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd5c:	4b0a      	ldr	r3, [pc, #40]	; (800dd88 <vPortSetupTimerInterrupt+0x3c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a0a      	ldr	r2, [pc, #40]	; (800dd8c <vPortSetupTimerInterrupt+0x40>)
 800dd62:	fba2 2303 	umull	r2, r3, r2, r3
 800dd66:	099b      	lsrs	r3, r3, #6
 800dd68:	4a09      	ldr	r2, [pc, #36]	; (800dd90 <vPortSetupTimerInterrupt+0x44>)
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd6e:	4b04      	ldr	r3, [pc, #16]	; (800dd80 <vPortSetupTimerInterrupt+0x34>)
 800dd70:	2207      	movs	r2, #7
 800dd72:	601a      	str	r2, [r3, #0]
}
 800dd74:	bf00      	nop
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	e000e010 	.word	0xe000e010
 800dd84:	e000e018 	.word	0xe000e018
 800dd88:	20000518 	.word	0x20000518
 800dd8c:	10624dd3 	.word	0x10624dd3
 800dd90:	e000e014 	.word	0xe000e014

0800dd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dda4 <vPortEnableVFP+0x10>
 800dd98:	6801      	ldr	r1, [r0, #0]
 800dd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd9e:	6001      	str	r1, [r0, #0]
 800dda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dda2:	bf00      	nop
 800dda4:	e000ed88 	.word	0xe000ed88

0800dda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ddae:	f3ef 8305 	mrs	r3, IPSR
 800ddb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b0f      	cmp	r3, #15
 800ddb8:	d914      	bls.n	800dde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ddba:	4a17      	ldr	r2, [pc, #92]	; (800de18 <vPortValidateInterruptPriority+0x70>)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ddc4:	4b15      	ldr	r3, [pc, #84]	; (800de1c <vPortValidateInterruptPriority+0x74>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	7afa      	ldrb	r2, [r7, #11]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d20a      	bcs.n	800dde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	607b      	str	r3, [r7, #4]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dde4:	4b0e      	ldr	r3, [pc, #56]	; (800de20 <vPortValidateInterruptPriority+0x78>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ddec:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <vPortValidateInterruptPriority+0x7c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d90a      	bls.n	800de0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	603b      	str	r3, [r7, #0]
}
 800de06:	bf00      	nop
 800de08:	e7fe      	b.n	800de08 <vPortValidateInterruptPriority+0x60>
	}
 800de0a:	bf00      	nop
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	e000e3f0 	.word	0xe000e3f0
 800de1c:	20001be4 	.word	0x20001be4
 800de20:	e000ed0c 	.word	0xe000ed0c
 800de24:	20001be8 	.word	0x20001be8

0800de28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08a      	sub	sp, #40	; 0x28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de30:	2300      	movs	r3, #0
 800de32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de34:	f7fe fd9c 	bl	800c970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de38:	4b5b      	ldr	r3, [pc, #364]	; (800dfa8 <pvPortMalloc+0x180>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de40:	f000 f920 	bl	800e084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de44:	4b59      	ldr	r3, [pc, #356]	; (800dfac <pvPortMalloc+0x184>)
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4013      	ands	r3, r2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f040 8093 	bne.w	800df78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d01d      	beq.n	800de94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de58:	2208      	movs	r2, #8
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4413      	add	r3, r2
 800de5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b00      	cmp	r3, #0
 800de68:	d014      	beq.n	800de94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f023 0307 	bic.w	r3, r3, #7
 800de70:	3308      	adds	r3, #8
 800de72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00a      	beq.n	800de94 <pvPortMalloc+0x6c>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	617b      	str	r3, [r7, #20]
}
 800de90:	bf00      	nop
 800de92:	e7fe      	b.n	800de92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d06e      	beq.n	800df78 <pvPortMalloc+0x150>
 800de9a:	4b45      	ldr	r3, [pc, #276]	; (800dfb0 <pvPortMalloc+0x188>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d869      	bhi.n	800df78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dea4:	4b43      	ldr	r3, [pc, #268]	; (800dfb4 <pvPortMalloc+0x18c>)
 800dea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dea8:	4b42      	ldr	r3, [pc, #264]	; (800dfb4 <pvPortMalloc+0x18c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800deae:	e004      	b.n	800deba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d903      	bls.n	800decc <pvPortMalloc+0xa4>
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f1      	bne.n	800deb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800decc:	4b36      	ldr	r3, [pc, #216]	; (800dfa8 <pvPortMalloc+0x180>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d050      	beq.n	800df78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2208      	movs	r2, #8
 800dedc:	4413      	add	r3, r2
 800dede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	2308      	movs	r3, #8
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	429a      	cmp	r2, r3
 800def6:	d91f      	bls.n	800df38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800def8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <pvPortMalloc+0xf8>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	613b      	str	r3, [r7, #16]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	1ad2      	subs	r2, r2, r3
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df32:	69b8      	ldr	r0, [r7, #24]
 800df34:	f000 f908 	bl	800e148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df38:	4b1d      	ldr	r3, [pc, #116]	; (800dfb0 <pvPortMalloc+0x188>)
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	4a1b      	ldr	r2, [pc, #108]	; (800dfb0 <pvPortMalloc+0x188>)
 800df44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df46:	4b1a      	ldr	r3, [pc, #104]	; (800dfb0 <pvPortMalloc+0x188>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <pvPortMalloc+0x190>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d203      	bcs.n	800df5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df52:	4b17      	ldr	r3, [pc, #92]	; (800dfb0 <pvPortMalloc+0x188>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a18      	ldr	r2, [pc, #96]	; (800dfb8 <pvPortMalloc+0x190>)
 800df58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	4b13      	ldr	r3, [pc, #76]	; (800dfac <pvPortMalloc+0x184>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	431a      	orrs	r2, r3
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	2200      	movs	r2, #0
 800df6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df6e:	4b13      	ldr	r3, [pc, #76]	; (800dfbc <pvPortMalloc+0x194>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	3301      	adds	r3, #1
 800df74:	4a11      	ldr	r2, [pc, #68]	; (800dfbc <pvPortMalloc+0x194>)
 800df76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df78:	f7fe fd08 	bl	800c98c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	f003 0307 	and.w	r3, r3, #7
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00a      	beq.n	800df9c <pvPortMalloc+0x174>
	__asm volatile
 800df86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	60fb      	str	r3, [r7, #12]
}
 800df98:	bf00      	nop
 800df9a:	e7fe      	b.n	800df9a <pvPortMalloc+0x172>
	return pvReturn;
 800df9c:	69fb      	ldr	r3, [r7, #28]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3728      	adds	r7, #40	; 0x28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	200057f4 	.word	0x200057f4
 800dfac:	20005808 	.word	0x20005808
 800dfb0:	200057f8 	.word	0x200057f8
 800dfb4:	200057ec 	.word	0x200057ec
 800dfb8:	200057fc 	.word	0x200057fc
 800dfbc:	20005800 	.word	0x20005800

0800dfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d04d      	beq.n	800e06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfd2:	2308      	movs	r3, #8
 800dfd4:	425b      	negs	r3, r3
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	4413      	add	r3, r2
 800dfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	4b24      	ldr	r3, [pc, #144]	; (800e078 <vPortFree+0xb8>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4013      	ands	r3, r2
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <vPortFree+0x44>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	60fb      	str	r3, [r7, #12]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00a      	beq.n	800e022 <vPortFree+0x62>
	__asm volatile
 800e00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	60bb      	str	r3, [r7, #8]
}
 800e01e:	bf00      	nop
 800e020:	e7fe      	b.n	800e020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	4b14      	ldr	r3, [pc, #80]	; (800e078 <vPortFree+0xb8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4013      	ands	r3, r2
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01e      	beq.n	800e06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d11a      	bne.n	800e06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <vPortFree+0xb8>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	43db      	mvns	r3, r3
 800e042:	401a      	ands	r2, r3
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e048:	f7fe fc92 	bl	800c970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <vPortFree+0xbc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4413      	add	r3, r2
 800e056:	4a09      	ldr	r2, [pc, #36]	; (800e07c <vPortFree+0xbc>)
 800e058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e05a:	6938      	ldr	r0, [r7, #16]
 800e05c:	f000 f874 	bl	800e148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e060:	4b07      	ldr	r3, [pc, #28]	; (800e080 <vPortFree+0xc0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3301      	adds	r3, #1
 800e066:	4a06      	ldr	r2, [pc, #24]	; (800e080 <vPortFree+0xc0>)
 800e068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e06a:	f7fe fc8f 	bl	800c98c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e06e:	bf00      	nop
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20005808 	.word	0x20005808
 800e07c:	200057f8 	.word	0x200057f8
 800e080:	20005804 	.word	0x20005804

0800e084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e08a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e090:	4b27      	ldr	r3, [pc, #156]	; (800e130 <prvHeapInit+0xac>)
 800e092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f003 0307 	and.w	r3, r3, #7
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00c      	beq.n	800e0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3307      	adds	r3, #7
 800e0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f023 0307 	bic.w	r3, r3, #7
 800e0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	4a1f      	ldr	r2, [pc, #124]	; (800e130 <prvHeapInit+0xac>)
 800e0b4:	4413      	add	r3, r2
 800e0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0bc:	4a1d      	ldr	r2, [pc, #116]	; (800e134 <prvHeapInit+0xb0>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0c2:	4b1c      	ldr	r3, [pc, #112]	; (800e134 <prvHeapInit+0xb0>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0d0:	2208      	movs	r2, #8
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	1a9b      	subs	r3, r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f023 0307 	bic.w	r3, r3, #7
 800e0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4a15      	ldr	r2, [pc, #84]	; (800e138 <prvHeapInit+0xb4>)
 800e0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0e6:	4b14      	ldr	r3, [pc, #80]	; (800e138 <prvHeapInit+0xb4>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0ee:	4b12      	ldr	r3, [pc, #72]	; (800e138 <prvHeapInit+0xb4>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	1ad2      	subs	r2, r2, r3
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e104:	4b0c      	ldr	r3, [pc, #48]	; (800e138 <prvHeapInit+0xb4>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	4a0a      	ldr	r2, [pc, #40]	; (800e13c <prvHeapInit+0xb8>)
 800e112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	4a09      	ldr	r2, [pc, #36]	; (800e140 <prvHeapInit+0xbc>)
 800e11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e11c:	4b09      	ldr	r3, [pc, #36]	; (800e144 <prvHeapInit+0xc0>)
 800e11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e122:	601a      	str	r2, [r3, #0]
}
 800e124:	bf00      	nop
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	20001bec 	.word	0x20001bec
 800e134:	200057ec 	.word	0x200057ec
 800e138:	200057f4 	.word	0x200057f4
 800e13c:	200057fc 	.word	0x200057fc
 800e140:	200057f8 	.word	0x200057f8
 800e144:	20005808 	.word	0x20005808

0800e148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e150:	4b28      	ldr	r3, [pc, #160]	; (800e1f4 <prvInsertBlockIntoFreeList+0xac>)
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	e002      	b.n	800e15c <prvInsertBlockIntoFreeList+0x14>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	429a      	cmp	r2, r3
 800e164:	d8f7      	bhi.n	800e156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	4413      	add	r3, r2
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	429a      	cmp	r2, r3
 800e176:	d108      	bne.n	800e18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	441a      	add	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	441a      	add	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d118      	bne.n	800e1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d00d      	beq.n	800e1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	441a      	add	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	e008      	b.n	800e1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1c6:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	e003      	b.n	800e1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d002      	beq.n	800e1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1e6:	bf00      	nop
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	200057ec 	.word	0x200057ec
 800e1f8:	200057f4 	.word	0x200057f4

0800e1fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e200:	2200      	movs	r2, #0
 800e202:	4912      	ldr	r1, [pc, #72]	; (800e24c <MX_USB_DEVICE_Init+0x50>)
 800e204:	4812      	ldr	r0, [pc, #72]	; (800e250 <MX_USB_DEVICE_Init+0x54>)
 800e206:	f7fb fdc1 	bl	8009d8c <USBD_Init>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e210:	f7f4 f8c8 	bl	80023a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e214:	490f      	ldr	r1, [pc, #60]	; (800e254 <MX_USB_DEVICE_Init+0x58>)
 800e216:	480e      	ldr	r0, [pc, #56]	; (800e250 <MX_USB_DEVICE_Init+0x54>)
 800e218:	f7fb fde8 	bl	8009dec <USBD_RegisterClass>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e222:	f7f4 f8bf 	bl	80023a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e226:	490c      	ldr	r1, [pc, #48]	; (800e258 <MX_USB_DEVICE_Init+0x5c>)
 800e228:	4809      	ldr	r0, [pc, #36]	; (800e250 <MX_USB_DEVICE_Init+0x54>)
 800e22a:	f7fb fd1f 	bl	8009c6c <USBD_CDC_RegisterInterface>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e234:	f7f4 f8b6 	bl	80023a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e238:	4805      	ldr	r0, [pc, #20]	; (800e250 <MX_USB_DEVICE_Init+0x54>)
 800e23a:	f7fb fe0d 	bl	8009e58 <USBD_Start>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e244:	f7f4 f8ae 	bl	80023a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e248:	bf00      	nop
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	200005c8 	.word	0x200005c8
 800e250:	2000580c 	.word	0x2000580c
 800e254:	20000530 	.word	0x20000530
 800e258:	200005b4 	.word	0x200005b4

0800e25c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e260:	2200      	movs	r2, #0
 800e262:	4905      	ldr	r1, [pc, #20]	; (800e278 <CDC_Init_FS+0x1c>)
 800e264:	4805      	ldr	r0, [pc, #20]	; (800e27c <CDC_Init_FS+0x20>)
 800e266:	f7fb fd1b 	bl	8009ca0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e26a:	4905      	ldr	r1, [pc, #20]	; (800e280 <CDC_Init_FS+0x24>)
 800e26c:	4803      	ldr	r0, [pc, #12]	; (800e27c <CDC_Init_FS+0x20>)
 800e26e:	f7fb fd39 	bl	8009ce4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e274:	4618      	mov	r0, r3
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20005ee8 	.word	0x20005ee8
 800e27c:	2000580c 	.word	0x2000580c
 800e280:	20005ae8 	.word	0x20005ae8

0800e284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e284:	b480      	push	{r7}
 800e286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	6039      	str	r1, [r7, #0]
 800e29e:	71fb      	strb	r3, [r7, #7]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	2b23      	cmp	r3, #35	; 0x23
 800e2a8:	d84a      	bhi.n	800e340 <CDC_Control_FS+0xac>
 800e2aa:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <CDC_Control_FS+0x1c>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e341 	.word	0x0800e341
 800e2b4:	0800e341 	.word	0x0800e341
 800e2b8:	0800e341 	.word	0x0800e341
 800e2bc:	0800e341 	.word	0x0800e341
 800e2c0:	0800e341 	.word	0x0800e341
 800e2c4:	0800e341 	.word	0x0800e341
 800e2c8:	0800e341 	.word	0x0800e341
 800e2cc:	0800e341 	.word	0x0800e341
 800e2d0:	0800e341 	.word	0x0800e341
 800e2d4:	0800e341 	.word	0x0800e341
 800e2d8:	0800e341 	.word	0x0800e341
 800e2dc:	0800e341 	.word	0x0800e341
 800e2e0:	0800e341 	.word	0x0800e341
 800e2e4:	0800e341 	.word	0x0800e341
 800e2e8:	0800e341 	.word	0x0800e341
 800e2ec:	0800e341 	.word	0x0800e341
 800e2f0:	0800e341 	.word	0x0800e341
 800e2f4:	0800e341 	.word	0x0800e341
 800e2f8:	0800e341 	.word	0x0800e341
 800e2fc:	0800e341 	.word	0x0800e341
 800e300:	0800e341 	.word	0x0800e341
 800e304:	0800e341 	.word	0x0800e341
 800e308:	0800e341 	.word	0x0800e341
 800e30c:	0800e341 	.word	0x0800e341
 800e310:	0800e341 	.word	0x0800e341
 800e314:	0800e341 	.word	0x0800e341
 800e318:	0800e341 	.word	0x0800e341
 800e31c:	0800e341 	.word	0x0800e341
 800e320:	0800e341 	.word	0x0800e341
 800e324:	0800e341 	.word	0x0800e341
 800e328:	0800e341 	.word	0x0800e341
 800e32c:	0800e341 	.word	0x0800e341
 800e330:	0800e341 	.word	0x0800e341
 800e334:	0800e341 	.word	0x0800e341
 800e338:	0800e341 	.word	0x0800e341
 800e33c:	0800e341 	.word	0x0800e341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e340:	bf00      	nop
  }

  return (USBD_OK);
 800e342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	4805      	ldr	r0, [pc, #20]	; (800e374 <CDC_Receive_FS+0x24>)
 800e35e:	f7fb fcc1 	bl	8009ce4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e362:	4804      	ldr	r0, [pc, #16]	; (800e374 <CDC_Receive_FS+0x24>)
 800e364:	f7fb fcdc 	bl	8009d20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	2000580c 	.word	0x2000580c

0800e378 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e378:	b480      	push	{r7}
 800e37a:	b087      	sub	sp, #28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
	...

0800e39c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	6039      	str	r1, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2212      	movs	r2, #18
 800e3ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e3ae:	4b03      	ldr	r3, [pc, #12]	; (800e3bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	200005e4 	.word	0x200005e4

0800e3c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	6039      	str	r1, [r7, #0]
 800e3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	2204      	movs	r2, #4
 800e3d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e3d2:	4b03      	ldr	r3, [pc, #12]	; (800e3e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	200005f8 	.word	0x200005f8

0800e3e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	6039      	str	r1, [r7, #0]
 800e3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d105      	bne.n	800e402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	4907      	ldr	r1, [pc, #28]	; (800e418 <USBD_FS_ProductStrDescriptor+0x34>)
 800e3fa:	4808      	ldr	r0, [pc, #32]	; (800e41c <USBD_FS_ProductStrDescriptor+0x38>)
 800e3fc:	f7fc fed8 	bl	800b1b0 <USBD_GetString>
 800e400:	e004      	b.n	800e40c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	4904      	ldr	r1, [pc, #16]	; (800e418 <USBD_FS_ProductStrDescriptor+0x34>)
 800e406:	4805      	ldr	r0, [pc, #20]	; (800e41c <USBD_FS_ProductStrDescriptor+0x38>)
 800e408:	f7fc fed2 	bl	800b1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e40c:	4b02      	ldr	r3, [pc, #8]	; (800e418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	200062e8 	.word	0x200062e8
 800e41c:	0800f79c 	.word	0x0800f79c

0800e420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	4904      	ldr	r1, [pc, #16]	; (800e440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e430:	4804      	ldr	r0, [pc, #16]	; (800e444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e432:	f7fc febd 	bl	800b1b0 <USBD_GetString>
  return USBD_StrDesc;
 800e436:	4b02      	ldr	r3, [pc, #8]	; (800e440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	200062e8 	.word	0x200062e8
 800e444:	0800f7b4 	.word	0x0800f7b4

0800e448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	6039      	str	r1, [r7, #0]
 800e452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	221a      	movs	r2, #26
 800e458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e45a:	f000 f843 	bl	800e4e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e45e:	4b02      	ldr	r3, [pc, #8]	; (800e468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	200005fc 	.word	0x200005fc

0800e46c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	4603      	mov	r3, r0
 800e474:	6039      	str	r1, [r7, #0]
 800e476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d105      	bne.n	800e48a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	4907      	ldr	r1, [pc, #28]	; (800e4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e482:	4808      	ldr	r0, [pc, #32]	; (800e4a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e484:	f7fc fe94 	bl	800b1b0 <USBD_GetString>
 800e488:	e004      	b.n	800e494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	4904      	ldr	r1, [pc, #16]	; (800e4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e48e:	4805      	ldr	r0, [pc, #20]	; (800e4a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e490:	f7fc fe8e 	bl	800b1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e494:	4b02      	ldr	r3, [pc, #8]	; (800e4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	200062e8 	.word	0x200062e8
 800e4a4:	0800f7c8 	.word	0x0800f7c8

0800e4a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	6039      	str	r1, [r7, #0]
 800e4b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d105      	bne.n	800e4c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	4907      	ldr	r1, [pc, #28]	; (800e4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4be:	4808      	ldr	r0, [pc, #32]	; (800e4e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4c0:	f7fc fe76 	bl	800b1b0 <USBD_GetString>
 800e4c4:	e004      	b.n	800e4d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4c6:	683a      	ldr	r2, [r7, #0]
 800e4c8:	4904      	ldr	r1, [pc, #16]	; (800e4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4ca:	4805      	ldr	r0, [pc, #20]	; (800e4e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4cc:	f7fc fe70 	bl	800b1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4d0:	4b02      	ldr	r3, [pc, #8]	; (800e4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	200062e8 	.word	0x200062e8
 800e4e0:	0800f7d4 	.word	0x0800f7d4

0800e4e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4ea:	4b0f      	ldr	r3, [pc, #60]	; (800e528 <Get_SerialNum+0x44>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4f0:	4b0e      	ldr	r3, [pc, #56]	; (800e52c <Get_SerialNum+0x48>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4f6:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <Get_SerialNum+0x4c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4413      	add	r3, r2
 800e502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e50a:	2208      	movs	r2, #8
 800e50c:	4909      	ldr	r1, [pc, #36]	; (800e534 <Get_SerialNum+0x50>)
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f000 f814 	bl	800e53c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e514:	2204      	movs	r2, #4
 800e516:	4908      	ldr	r1, [pc, #32]	; (800e538 <Get_SerialNum+0x54>)
 800e518:	68b8      	ldr	r0, [r7, #8]
 800e51a:	f000 f80f 	bl	800e53c <IntToUnicode>
  }
}
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	1fff7a10 	.word	0x1fff7a10
 800e52c:	1fff7a14 	.word	0x1fff7a14
 800e530:	1fff7a18 	.word	0x1fff7a18
 800e534:	200005fe 	.word	0x200005fe
 800e538:	2000060e 	.word	0x2000060e

0800e53c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b087      	sub	sp, #28
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	4613      	mov	r3, r2
 800e548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e54e:	2300      	movs	r3, #0
 800e550:	75fb      	strb	r3, [r7, #23]
 800e552:	e027      	b.n	800e5a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	0f1b      	lsrs	r3, r3, #28
 800e558:	2b09      	cmp	r3, #9
 800e55a:	d80b      	bhi.n	800e574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	0f1b      	lsrs	r3, r3, #28
 800e560:	b2da      	uxtb	r2, r3
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	4619      	mov	r1, r3
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	440b      	add	r3, r1
 800e56c:	3230      	adds	r2, #48	; 0x30
 800e56e:	b2d2      	uxtb	r2, r2
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	e00a      	b.n	800e58a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	0f1b      	lsrs	r3, r3, #28
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	4619      	mov	r1, r3
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	440b      	add	r3, r1
 800e584:	3237      	adds	r2, #55	; 0x37
 800e586:	b2d2      	uxtb	r2, r2
 800e588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	011b      	lsls	r3, r3, #4
 800e58e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e590:	7dfb      	ldrb	r3, [r7, #23]
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	3301      	adds	r3, #1
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	4413      	add	r3, r2
 800e59a:	2200      	movs	r2, #0
 800e59c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	75fb      	strb	r3, [r7, #23]
 800e5a4:	7dfa      	ldrb	r2, [r7, #23]
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d3d3      	bcc.n	800e554 <IntToUnicode+0x18>
  }
}
 800e5ac:	bf00      	nop
 800e5ae:	bf00      	nop
 800e5b0:	371c      	adds	r7, #28
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
	...

0800e5bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08a      	sub	sp, #40	; 0x28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5c4:	f107 0314 	add.w	r3, r7, #20
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	605a      	str	r2, [r3, #4]
 800e5ce:	609a      	str	r2, [r3, #8]
 800e5d0:	60da      	str	r2, [r3, #12]
 800e5d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5dc:	d13a      	bne.n	800e654 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5de:	2300      	movs	r3, #0
 800e5e0:	613b      	str	r3, [r7, #16]
 800e5e2:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e6:	4a1d      	ldr	r2, [pc, #116]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e5e8:	f043 0301 	orr.w	r3, r3, #1
 800e5ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e5ee:	4b1b      	ldr	r3, [pc, #108]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f2:	f003 0301 	and.w	r3, r3, #1
 800e5f6:	613b      	str	r3, [r7, #16]
 800e5f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e5fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e600:	2302      	movs	r3, #2
 800e602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e604:	2300      	movs	r3, #0
 800e606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e608:	2303      	movs	r3, #3
 800e60a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e60c:	230a      	movs	r3, #10
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e610:	f107 0314 	add.w	r3, r7, #20
 800e614:	4619      	mov	r1, r3
 800e616:	4812      	ldr	r0, [pc, #72]	; (800e660 <HAL_PCD_MspInit+0xa4>)
 800e618:	f7f4 fd58 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e61c:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e620:	4a0e      	ldr	r2, [pc, #56]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e626:	6353      	str	r3, [r2, #52]	; 0x34
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e630:	4a0a      	ldr	r2, [pc, #40]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e636:	6453      	str	r3, [r2, #68]	; 0x44
 800e638:	4b08      	ldr	r3, [pc, #32]	; (800e65c <HAL_PCD_MspInit+0xa0>)
 800e63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e63c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e640:	60fb      	str	r3, [r7, #12]
 800e642:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e644:	2200      	movs	r2, #0
 800e646:	2105      	movs	r1, #5
 800e648:	2043      	movs	r0, #67	; 0x43
 800e64a:	f7f4 fd15 	bl	8003078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e64e:	2043      	movs	r0, #67	; 0x43
 800e650:	f7f4 fd2e 	bl	80030b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e654:	bf00      	nop
 800e656:	3728      	adds	r7, #40	; 0x28
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	40023800 	.word	0x40023800
 800e660:	40020000 	.word	0x40020000

0800e664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e678:	4619      	mov	r1, r3
 800e67a:	4610      	mov	r0, r2
 800e67c:	f7fb fc39 	bl	8009ef2 <USBD_LL_SetupStage>
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e69a:	78fa      	ldrb	r2, [r7, #3]
 800e69c:	6879      	ldr	r1, [r7, #4]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	4413      	add	r3, r2
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	440b      	add	r3, r1
 800e6a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	78fb      	ldrb	r3, [r7, #3]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	f7fb fc73 	bl	8009f9c <USBD_LL_DataOutStage>
}
 800e6b6:	bf00      	nop
 800e6b8:	3708      	adds	r7, #8
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b082      	sub	sp, #8
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e6d0:	78fa      	ldrb	r2, [r7, #3]
 800e6d2:	6879      	ldr	r1, [r7, #4]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	4413      	add	r3, r2
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	440b      	add	r3, r1
 800e6de:	334c      	adds	r3, #76	; 0x4c
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f7fb fd0c 	bl	800a102 <USBD_LL_DataInStage>
}
 800e6ea:	bf00      	nop
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e700:	4618      	mov	r0, r3
 800e702:	f7fb fe40 	bl	800a386 <USBD_LL_SOF>
}
 800e706:	bf00      	nop
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b084      	sub	sp, #16
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e716:	2301      	movs	r3, #1
 800e718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68db      	ldr	r3, [r3, #12]
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d001      	beq.n	800e726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e722:	f7f3 fe3f 	bl	80023a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e72c:	7bfa      	ldrb	r2, [r7, #15]
 800e72e:	4611      	mov	r1, r2
 800e730:	4618      	mov	r0, r3
 800e732:	f7fb fdea 	bl	800a30a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fb fd92 	bl	800a266 <USBD_LL_Reset>
}
 800e742:	bf00      	nop
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fb fde5 	bl	800a32a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	6812      	ldr	r2, [r2, #0]
 800e76e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e772:	f043 0301 	orr.w	r3, r3, #1
 800e776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a1b      	ldr	r3, [r3, #32]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d005      	beq.n	800e78c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e780:	4b04      	ldr	r3, [pc, #16]	; (800e794 <HAL_PCD_SuspendCallback+0x48>)
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	4a03      	ldr	r2, [pc, #12]	; (800e794 <HAL_PCD_SuspendCallback+0x48>)
 800e786:	f043 0306 	orr.w	r3, r3, #6
 800e78a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	e000ed00 	.word	0xe000ed00

0800e798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fb fdd5 	bl	800a356 <USBD_LL_Resume>
}
 800e7ac:	bf00      	nop
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7c6:	78fa      	ldrb	r2, [r7, #3]
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fb fe2d 	bl	800a42a <USBD_LL_IsoOUTIncomplete>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fb fde9 	bl	800a3c6 <USBD_LL_IsoINIncomplete>
}
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fb fe3f 	bl	800a48e <USBD_LL_DevConnected>
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e826:	4618      	mov	r0, r3
 800e828:	f7fb fe3c 	bl	800a4a4 <USBD_LL_DevDisconnected>
}
 800e82c:	bf00      	nop
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d13c      	bne.n	800e8be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e844:	4a20      	ldr	r2, [pc, #128]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1e      	ldr	r2, [pc, #120]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e850:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e854:	4b1c      	ldr	r3, [pc, #112]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e85a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e85c:	4b1a      	ldr	r3, [pc, #104]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e85e:	2204      	movs	r2, #4
 800e860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e862:	4b19      	ldr	r3, [pc, #100]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e864:	2202      	movs	r2, #2
 800e866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e868:	4b17      	ldr	r3, [pc, #92]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e86e:	4b16      	ldr	r3, [pc, #88]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e870:	2202      	movs	r2, #2
 800e872:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e874:	4b14      	ldr	r3, [pc, #80]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e876:	2200      	movs	r2, #0
 800e878:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e87a:	4b13      	ldr	r3, [pc, #76]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e880:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e882:	2200      	movs	r2, #0
 800e884:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e886:	4b10      	ldr	r3, [pc, #64]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e888:	2200      	movs	r2, #0
 800e88a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e88c:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e88e:	2200      	movs	r2, #0
 800e890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e892:	480d      	ldr	r0, [pc, #52]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e894:	f7f5 fd8f 	bl	80043b6 <HAL_PCD_Init>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e89e:	f7f3 fd81 	bl	80023a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e8a2:	2180      	movs	r1, #128	; 0x80
 800e8a4:	4808      	ldr	r0, [pc, #32]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e8a6:	f7f6 ffe6 	bl	8005876 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e8aa:	2240      	movs	r2, #64	; 0x40
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4806      	ldr	r0, [pc, #24]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e8b0:	f7f6 ff9a 	bl	80057e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e8b4:	2280      	movs	r2, #128	; 0x80
 800e8b6:	2101      	movs	r1, #1
 800e8b8:	4803      	ldr	r0, [pc, #12]	; (800e8c8 <USBD_LL_Init+0x94>)
 800e8ba:	f7f6 ff95 	bl	80057e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	200064e8 	.word	0x200064e8

0800e8cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f5 fe84 	bl	80045f0 <HAL_PCD_Start>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f942 	bl	800eb78 <USBD_Get_USB_Status>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b084      	sub	sp, #16
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	4608      	mov	r0, r1
 800e90c:	4611      	mov	r1, r2
 800e90e:	461a      	mov	r2, r3
 800e910:	4603      	mov	r3, r0
 800e912:	70fb      	strb	r3, [r7, #3]
 800e914:	460b      	mov	r3, r1
 800e916:	70bb      	strb	r3, [r7, #2]
 800e918:	4613      	mov	r3, r2
 800e91a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e92a:	78bb      	ldrb	r3, [r7, #2]
 800e92c:	883a      	ldrh	r2, [r7, #0]
 800e92e:	78f9      	ldrb	r1, [r7, #3]
 800e930:	f7f6 fb55 	bl	8004fde <HAL_PCD_EP_Open>
 800e934:	4603      	mov	r3, r0
 800e936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 f91c 	bl	800eb78 <USBD_Get_USB_Status>
 800e940:	4603      	mov	r3, r0
 800e942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e944:	7bbb      	ldrb	r3, [r7, #14]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	460b      	mov	r3, r1
 800e958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e968:	78fa      	ldrb	r2, [r7, #3]
 800e96a:	4611      	mov	r1, r2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7f6 fb9e 	bl	80050ae <HAL_PCD_EP_Close>
 800e972:	4603      	mov	r3, r0
 800e974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e976:	7bfb      	ldrb	r3, [r7, #15]
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 f8fd 	bl	800eb78 <USBD_Get_USB_Status>
 800e97e:	4603      	mov	r3, r0
 800e980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e982:	7bbb      	ldrb	r3, [r7, #14]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e998:	2300      	movs	r3, #0
 800e99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9a6:	78fa      	ldrb	r2, [r7, #3]
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7f6 fc76 	bl	800529c <HAL_PCD_EP_SetStall>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 f8de 	bl	800eb78 <USBD_Get_USB_Status>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b084      	sub	sp, #16
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9e4:	78fa      	ldrb	r2, [r7, #3]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7f6 fcbb 	bl	8005364 <HAL_PCD_EP_ClrStall>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f000 f8bf 	bl	800eb78 <USBD_Get_USB_Status>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	460b      	mov	r3, r1
 800ea12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	da0b      	bge.n	800ea3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea24:	78fb      	ldrb	r3, [r7, #3]
 800ea26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea2a:	68f9      	ldr	r1, [r7, #12]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	440b      	add	r3, r1
 800ea36:	333e      	adds	r3, #62	; 0x3e
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	e00b      	b.n	800ea54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea3c:	78fb      	ldrb	r3, [r7, #3]
 800ea3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea42:	68f9      	ldr	r1, [r7, #12]
 800ea44:	4613      	mov	r3, r2
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	440b      	add	r3, r1
 800ea4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ea52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3714      	adds	r7, #20
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea7a:	78fa      	ldrb	r2, [r7, #3]
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f6 fa88 	bl	8004f94 <HAL_PCD_SetAddress>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea88:	7bfb      	ldrb	r3, [r7, #15]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 f874 	bl	800eb78 <USBD_Get_USB_Status>
 800ea90:	4603      	mov	r3, r0
 800ea92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b086      	sub	sp, #24
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	60f8      	str	r0, [r7, #12]
 800eaa6:	607a      	str	r2, [r7, #4]
 800eaa8:	603b      	str	r3, [r7, #0]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eabc:	7af9      	ldrb	r1, [r7, #11]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	f7f6 fba1 	bl	8005208 <HAL_PCD_EP_Transmit>
 800eac6:	4603      	mov	r3, r0
 800eac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 f853 	bl	800eb78 <USBD_Get_USB_Status>
 800ead2:	4603      	mov	r3, r0
 800ead4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ead6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	607a      	str	r2, [r7, #4]
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	460b      	mov	r3, r1
 800eaee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eafe:	7af9      	ldrb	r1, [r7, #11]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	f7f6 fb1d 	bl	8005142 <HAL_PCD_EP_Receive>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb0c:	7dfb      	ldrb	r3, [r7, #23]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 f832 	bl	800eb78 <USBD_Get_USB_Status>
 800eb14:	4603      	mov	r3, r0
 800eb16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb18:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7f6 fb4d 	bl	80051d8 <HAL_PCD_EP_GetRxCount>
 800eb3e:	4603      	mov	r3, r0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb50:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <USBD_static_malloc+0x18>)
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	200069f4 	.word	0x200069f4

0800eb64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]

}
 800eb6c:	bf00      	nop
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d817      	bhi.n	800ebbc <USBD_Get_USB_Status+0x44>
 800eb8c:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <USBD_Get_USB_Status+0x1c>)
 800eb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb92:	bf00      	nop
 800eb94:	0800eba5 	.word	0x0800eba5
 800eb98:	0800ebab 	.word	0x0800ebab
 800eb9c:	0800ebb1 	.word	0x0800ebb1
 800eba0:	0800ebb7 	.word	0x0800ebb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73fb      	strb	r3, [r7, #15]
    break;
 800eba8:	e00b      	b.n	800ebc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebaa:	2303      	movs	r3, #3
 800ebac:	73fb      	strb	r3, [r7, #15]
    break;
 800ebae:	e008      	b.n	800ebc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb4:	e005      	b.n	800ebc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ebba:	e002      	b.n	800ebc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc0:	bf00      	nop
  }
  return usb_status;
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <__errno>:
 800ebd0:	4b01      	ldr	r3, [pc, #4]	; (800ebd8 <__errno+0x8>)
 800ebd2:	6818      	ldr	r0, [r3, #0]
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	20000618 	.word	0x20000618

0800ebdc <__libc_init_array>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	4d0d      	ldr	r5, [pc, #52]	; (800ec14 <__libc_init_array+0x38>)
 800ebe0:	4c0d      	ldr	r4, [pc, #52]	; (800ec18 <__libc_init_array+0x3c>)
 800ebe2:	1b64      	subs	r4, r4, r5
 800ebe4:	10a4      	asrs	r4, r4, #2
 800ebe6:	2600      	movs	r6, #0
 800ebe8:	42a6      	cmp	r6, r4
 800ebea:	d109      	bne.n	800ec00 <__libc_init_array+0x24>
 800ebec:	4d0b      	ldr	r5, [pc, #44]	; (800ec1c <__libc_init_array+0x40>)
 800ebee:	4c0c      	ldr	r4, [pc, #48]	; (800ec20 <__libc_init_array+0x44>)
 800ebf0:	f000 fcba 	bl	800f568 <_init>
 800ebf4:	1b64      	subs	r4, r4, r5
 800ebf6:	10a4      	asrs	r4, r4, #2
 800ebf8:	2600      	movs	r6, #0
 800ebfa:	42a6      	cmp	r6, r4
 800ebfc:	d105      	bne.n	800ec0a <__libc_init_array+0x2e>
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}
 800ec00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec04:	4798      	blx	r3
 800ec06:	3601      	adds	r6, #1
 800ec08:	e7ee      	b.n	800ebe8 <__libc_init_array+0xc>
 800ec0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec0e:	4798      	blx	r3
 800ec10:	3601      	adds	r6, #1
 800ec12:	e7f2      	b.n	800ebfa <__libc_init_array+0x1e>
 800ec14:	0800fbec 	.word	0x0800fbec
 800ec18:	0800fbec 	.word	0x0800fbec
 800ec1c:	0800fbec 	.word	0x0800fbec
 800ec20:	0800fbf0 	.word	0x0800fbf0

0800ec24 <malloc>:
 800ec24:	4b02      	ldr	r3, [pc, #8]	; (800ec30 <malloc+0xc>)
 800ec26:	4601      	mov	r1, r0
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	f000 b88d 	b.w	800ed48 <_malloc_r>
 800ec2e:	bf00      	nop
 800ec30:	20000618 	.word	0x20000618

0800ec34 <free>:
 800ec34:	4b02      	ldr	r3, [pc, #8]	; (800ec40 <free+0xc>)
 800ec36:	4601      	mov	r1, r0
 800ec38:	6818      	ldr	r0, [r3, #0]
 800ec3a:	f000 b819 	b.w	800ec70 <_free_r>
 800ec3e:	bf00      	nop
 800ec40:	20000618 	.word	0x20000618

0800ec44 <memcpy>:
 800ec44:	440a      	add	r2, r1
 800ec46:	4291      	cmp	r1, r2
 800ec48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec4c:	d100      	bne.n	800ec50 <memcpy+0xc>
 800ec4e:	4770      	bx	lr
 800ec50:	b510      	push	{r4, lr}
 800ec52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec5a:	4291      	cmp	r1, r2
 800ec5c:	d1f9      	bne.n	800ec52 <memcpy+0xe>
 800ec5e:	bd10      	pop	{r4, pc}

0800ec60 <memset>:
 800ec60:	4402      	add	r2, r0
 800ec62:	4603      	mov	r3, r0
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d100      	bne.n	800ec6a <memset+0xa>
 800ec68:	4770      	bx	lr
 800ec6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6e:	e7f9      	b.n	800ec64 <memset+0x4>

0800ec70 <_free_r>:
 800ec70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec72:	2900      	cmp	r1, #0
 800ec74:	d044      	beq.n	800ed00 <_free_r+0x90>
 800ec76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec7a:	9001      	str	r0, [sp, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec82:	bfb8      	it	lt
 800ec84:	18e4      	addlt	r4, r4, r3
 800ec86:	f000 f91f 	bl	800eec8 <__malloc_lock>
 800ec8a:	4a1e      	ldr	r2, [pc, #120]	; (800ed04 <_free_r+0x94>)
 800ec8c:	9801      	ldr	r0, [sp, #4]
 800ec8e:	6813      	ldr	r3, [r2, #0]
 800ec90:	b933      	cbnz	r3, 800eca0 <_free_r+0x30>
 800ec92:	6063      	str	r3, [r4, #4]
 800ec94:	6014      	str	r4, [r2, #0]
 800ec96:	b003      	add	sp, #12
 800ec98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec9c:	f000 b91a 	b.w	800eed4 <__malloc_unlock>
 800eca0:	42a3      	cmp	r3, r4
 800eca2:	d908      	bls.n	800ecb6 <_free_r+0x46>
 800eca4:	6825      	ldr	r5, [r4, #0]
 800eca6:	1961      	adds	r1, r4, r5
 800eca8:	428b      	cmp	r3, r1
 800ecaa:	bf01      	itttt	eq
 800ecac:	6819      	ldreq	r1, [r3, #0]
 800ecae:	685b      	ldreq	r3, [r3, #4]
 800ecb0:	1949      	addeq	r1, r1, r5
 800ecb2:	6021      	streq	r1, [r4, #0]
 800ecb4:	e7ed      	b.n	800ec92 <_free_r+0x22>
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	b10b      	cbz	r3, 800ecc0 <_free_r+0x50>
 800ecbc:	42a3      	cmp	r3, r4
 800ecbe:	d9fa      	bls.n	800ecb6 <_free_r+0x46>
 800ecc0:	6811      	ldr	r1, [r2, #0]
 800ecc2:	1855      	adds	r5, r2, r1
 800ecc4:	42a5      	cmp	r5, r4
 800ecc6:	d10b      	bne.n	800ece0 <_free_r+0x70>
 800ecc8:	6824      	ldr	r4, [r4, #0]
 800ecca:	4421      	add	r1, r4
 800eccc:	1854      	adds	r4, r2, r1
 800ecce:	42a3      	cmp	r3, r4
 800ecd0:	6011      	str	r1, [r2, #0]
 800ecd2:	d1e0      	bne.n	800ec96 <_free_r+0x26>
 800ecd4:	681c      	ldr	r4, [r3, #0]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	6053      	str	r3, [r2, #4]
 800ecda:	4421      	add	r1, r4
 800ecdc:	6011      	str	r1, [r2, #0]
 800ecde:	e7da      	b.n	800ec96 <_free_r+0x26>
 800ece0:	d902      	bls.n	800ece8 <_free_r+0x78>
 800ece2:	230c      	movs	r3, #12
 800ece4:	6003      	str	r3, [r0, #0]
 800ece6:	e7d6      	b.n	800ec96 <_free_r+0x26>
 800ece8:	6825      	ldr	r5, [r4, #0]
 800ecea:	1961      	adds	r1, r4, r5
 800ecec:	428b      	cmp	r3, r1
 800ecee:	bf04      	itt	eq
 800ecf0:	6819      	ldreq	r1, [r3, #0]
 800ecf2:	685b      	ldreq	r3, [r3, #4]
 800ecf4:	6063      	str	r3, [r4, #4]
 800ecf6:	bf04      	itt	eq
 800ecf8:	1949      	addeq	r1, r1, r5
 800ecfa:	6021      	streq	r1, [r4, #0]
 800ecfc:	6054      	str	r4, [r2, #4]
 800ecfe:	e7ca      	b.n	800ec96 <_free_r+0x26>
 800ed00:	b003      	add	sp, #12
 800ed02:	bd30      	pop	{r4, r5, pc}
 800ed04:	20006c14 	.word	0x20006c14

0800ed08 <sbrk_aligned>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	4e0e      	ldr	r6, [pc, #56]	; (800ed44 <sbrk_aligned+0x3c>)
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	6831      	ldr	r1, [r6, #0]
 800ed10:	4605      	mov	r5, r0
 800ed12:	b911      	cbnz	r1, 800ed1a <sbrk_aligned+0x12>
 800ed14:	f000 f88c 	bl	800ee30 <_sbrk_r>
 800ed18:	6030      	str	r0, [r6, #0]
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f000 f887 	bl	800ee30 <_sbrk_r>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d00a      	beq.n	800ed3c <sbrk_aligned+0x34>
 800ed26:	1cc4      	adds	r4, r0, #3
 800ed28:	f024 0403 	bic.w	r4, r4, #3
 800ed2c:	42a0      	cmp	r0, r4
 800ed2e:	d007      	beq.n	800ed40 <sbrk_aligned+0x38>
 800ed30:	1a21      	subs	r1, r4, r0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f000 f87c 	bl	800ee30 <_sbrk_r>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d101      	bne.n	800ed40 <sbrk_aligned+0x38>
 800ed3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ed40:	4620      	mov	r0, r4
 800ed42:	bd70      	pop	{r4, r5, r6, pc}
 800ed44:	20006c18 	.word	0x20006c18

0800ed48 <_malloc_r>:
 800ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4c:	1ccd      	adds	r5, r1, #3
 800ed4e:	f025 0503 	bic.w	r5, r5, #3
 800ed52:	3508      	adds	r5, #8
 800ed54:	2d0c      	cmp	r5, #12
 800ed56:	bf38      	it	cc
 800ed58:	250c      	movcc	r5, #12
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	db01      	blt.n	800ed64 <_malloc_r+0x1c>
 800ed60:	42a9      	cmp	r1, r5
 800ed62:	d905      	bls.n	800ed70 <_malloc_r+0x28>
 800ed64:	230c      	movs	r3, #12
 800ed66:	603b      	str	r3, [r7, #0]
 800ed68:	2600      	movs	r6, #0
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed70:	4e2e      	ldr	r6, [pc, #184]	; (800ee2c <_malloc_r+0xe4>)
 800ed72:	f000 f8a9 	bl	800eec8 <__malloc_lock>
 800ed76:	6833      	ldr	r3, [r6, #0]
 800ed78:	461c      	mov	r4, r3
 800ed7a:	bb34      	cbnz	r4, 800edca <_malloc_r+0x82>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7ff ffc2 	bl	800ed08 <sbrk_aligned>
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	4604      	mov	r4, r0
 800ed88:	d14d      	bne.n	800ee26 <_malloc_r+0xde>
 800ed8a:	6834      	ldr	r4, [r6, #0]
 800ed8c:	4626      	mov	r6, r4
 800ed8e:	2e00      	cmp	r6, #0
 800ed90:	d140      	bne.n	800ee14 <_malloc_r+0xcc>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	4631      	mov	r1, r6
 800ed96:	4638      	mov	r0, r7
 800ed98:	eb04 0803 	add.w	r8, r4, r3
 800ed9c:	f000 f848 	bl	800ee30 <_sbrk_r>
 800eda0:	4580      	cmp	r8, r0
 800eda2:	d13a      	bne.n	800ee1a <_malloc_r+0xd2>
 800eda4:	6821      	ldr	r1, [r4, #0]
 800eda6:	3503      	adds	r5, #3
 800eda8:	1a6d      	subs	r5, r5, r1
 800edaa:	f025 0503 	bic.w	r5, r5, #3
 800edae:	3508      	adds	r5, #8
 800edb0:	2d0c      	cmp	r5, #12
 800edb2:	bf38      	it	cc
 800edb4:	250c      	movcc	r5, #12
 800edb6:	4629      	mov	r1, r5
 800edb8:	4638      	mov	r0, r7
 800edba:	f7ff ffa5 	bl	800ed08 <sbrk_aligned>
 800edbe:	3001      	adds	r0, #1
 800edc0:	d02b      	beq.n	800ee1a <_malloc_r+0xd2>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	442b      	add	r3, r5
 800edc6:	6023      	str	r3, [r4, #0]
 800edc8:	e00e      	b.n	800ede8 <_malloc_r+0xa0>
 800edca:	6822      	ldr	r2, [r4, #0]
 800edcc:	1b52      	subs	r2, r2, r5
 800edce:	d41e      	bmi.n	800ee0e <_malloc_r+0xc6>
 800edd0:	2a0b      	cmp	r2, #11
 800edd2:	d916      	bls.n	800ee02 <_malloc_r+0xba>
 800edd4:	1961      	adds	r1, r4, r5
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	6025      	str	r5, [r4, #0]
 800edda:	bf18      	it	ne
 800eddc:	6059      	strne	r1, [r3, #4]
 800edde:	6863      	ldr	r3, [r4, #4]
 800ede0:	bf08      	it	eq
 800ede2:	6031      	streq	r1, [r6, #0]
 800ede4:	5162      	str	r2, [r4, r5]
 800ede6:	604b      	str	r3, [r1, #4]
 800ede8:	4638      	mov	r0, r7
 800edea:	f104 060b 	add.w	r6, r4, #11
 800edee:	f000 f871 	bl	800eed4 <__malloc_unlock>
 800edf2:	f026 0607 	bic.w	r6, r6, #7
 800edf6:	1d23      	adds	r3, r4, #4
 800edf8:	1af2      	subs	r2, r6, r3
 800edfa:	d0b6      	beq.n	800ed6a <_malloc_r+0x22>
 800edfc:	1b9b      	subs	r3, r3, r6
 800edfe:	50a3      	str	r3, [r4, r2]
 800ee00:	e7b3      	b.n	800ed6a <_malloc_r+0x22>
 800ee02:	6862      	ldr	r2, [r4, #4]
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	bf0c      	ite	eq
 800ee08:	6032      	streq	r2, [r6, #0]
 800ee0a:	605a      	strne	r2, [r3, #4]
 800ee0c:	e7ec      	b.n	800ede8 <_malloc_r+0xa0>
 800ee0e:	4623      	mov	r3, r4
 800ee10:	6864      	ldr	r4, [r4, #4]
 800ee12:	e7b2      	b.n	800ed7a <_malloc_r+0x32>
 800ee14:	4634      	mov	r4, r6
 800ee16:	6876      	ldr	r6, [r6, #4]
 800ee18:	e7b9      	b.n	800ed8e <_malloc_r+0x46>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	603b      	str	r3, [r7, #0]
 800ee1e:	4638      	mov	r0, r7
 800ee20:	f000 f858 	bl	800eed4 <__malloc_unlock>
 800ee24:	e7a1      	b.n	800ed6a <_malloc_r+0x22>
 800ee26:	6025      	str	r5, [r4, #0]
 800ee28:	e7de      	b.n	800ede8 <_malloc_r+0xa0>
 800ee2a:	bf00      	nop
 800ee2c:	20006c14 	.word	0x20006c14

0800ee30 <_sbrk_r>:
 800ee30:	b538      	push	{r3, r4, r5, lr}
 800ee32:	4d06      	ldr	r5, [pc, #24]	; (800ee4c <_sbrk_r+0x1c>)
 800ee34:	2300      	movs	r3, #0
 800ee36:	4604      	mov	r4, r0
 800ee38:	4608      	mov	r0, r1
 800ee3a:	602b      	str	r3, [r5, #0]
 800ee3c:	f7f3 ff8c 	bl	8002d58 <_sbrk>
 800ee40:	1c43      	adds	r3, r0, #1
 800ee42:	d102      	bne.n	800ee4a <_sbrk_r+0x1a>
 800ee44:	682b      	ldr	r3, [r5, #0]
 800ee46:	b103      	cbz	r3, 800ee4a <_sbrk_r+0x1a>
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	bd38      	pop	{r3, r4, r5, pc}
 800ee4c:	20006c1c 	.word	0x20006c1c

0800ee50 <siprintf>:
 800ee50:	b40e      	push	{r1, r2, r3}
 800ee52:	b500      	push	{lr}
 800ee54:	b09c      	sub	sp, #112	; 0x70
 800ee56:	ab1d      	add	r3, sp, #116	; 0x74
 800ee58:	9002      	str	r0, [sp, #8]
 800ee5a:	9006      	str	r0, [sp, #24]
 800ee5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee60:	4809      	ldr	r0, [pc, #36]	; (800ee88 <siprintf+0x38>)
 800ee62:	9107      	str	r1, [sp, #28]
 800ee64:	9104      	str	r1, [sp, #16]
 800ee66:	4909      	ldr	r1, [pc, #36]	; (800ee8c <siprintf+0x3c>)
 800ee68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee6c:	9105      	str	r1, [sp, #20]
 800ee6e:	6800      	ldr	r0, [r0, #0]
 800ee70:	9301      	str	r3, [sp, #4]
 800ee72:	a902      	add	r1, sp, #8
 800ee74:	f000 f890 	bl	800ef98 <_svfiprintf_r>
 800ee78:	9b02      	ldr	r3, [sp, #8]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	701a      	strb	r2, [r3, #0]
 800ee7e:	b01c      	add	sp, #112	; 0x70
 800ee80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee84:	b003      	add	sp, #12
 800ee86:	4770      	bx	lr
 800ee88:	20000618 	.word	0x20000618
 800ee8c:	ffff0208 	.word	0xffff0208

0800ee90 <strcpy>:
 800ee90:	4603      	mov	r3, r0
 800ee92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee96:	f803 2b01 	strb.w	r2, [r3], #1
 800ee9a:	2a00      	cmp	r2, #0
 800ee9c:	d1f9      	bne.n	800ee92 <strcpy+0x2>
 800ee9e:	4770      	bx	lr

0800eea0 <strncpy>:
 800eea0:	b510      	push	{r4, lr}
 800eea2:	3901      	subs	r1, #1
 800eea4:	4603      	mov	r3, r0
 800eea6:	b132      	cbz	r2, 800eeb6 <strncpy+0x16>
 800eea8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eeac:	f803 4b01 	strb.w	r4, [r3], #1
 800eeb0:	3a01      	subs	r2, #1
 800eeb2:	2c00      	cmp	r4, #0
 800eeb4:	d1f7      	bne.n	800eea6 <strncpy+0x6>
 800eeb6:	441a      	add	r2, r3
 800eeb8:	2100      	movs	r1, #0
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d100      	bne.n	800eec0 <strncpy+0x20>
 800eebe:	bd10      	pop	{r4, pc}
 800eec0:	f803 1b01 	strb.w	r1, [r3], #1
 800eec4:	e7f9      	b.n	800eeba <strncpy+0x1a>
	...

0800eec8 <__malloc_lock>:
 800eec8:	4801      	ldr	r0, [pc, #4]	; (800eed0 <__malloc_lock+0x8>)
 800eeca:	f000 baf9 	b.w	800f4c0 <__retarget_lock_acquire_recursive>
 800eece:	bf00      	nop
 800eed0:	20006c20 	.word	0x20006c20

0800eed4 <__malloc_unlock>:
 800eed4:	4801      	ldr	r0, [pc, #4]	; (800eedc <__malloc_unlock+0x8>)
 800eed6:	f000 baf4 	b.w	800f4c2 <__retarget_lock_release_recursive>
 800eeda:	bf00      	nop
 800eedc:	20006c20 	.word	0x20006c20

0800eee0 <__ssputs_r>:
 800eee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	688e      	ldr	r6, [r1, #8]
 800eee6:	429e      	cmp	r6, r3
 800eee8:	4682      	mov	sl, r0
 800eeea:	460c      	mov	r4, r1
 800eeec:	4690      	mov	r8, r2
 800eeee:	461f      	mov	r7, r3
 800eef0:	d838      	bhi.n	800ef64 <__ssputs_r+0x84>
 800eef2:	898a      	ldrh	r2, [r1, #12]
 800eef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eef8:	d032      	beq.n	800ef60 <__ssputs_r+0x80>
 800eefa:	6825      	ldr	r5, [r4, #0]
 800eefc:	6909      	ldr	r1, [r1, #16]
 800eefe:	eba5 0901 	sub.w	r9, r5, r1
 800ef02:	6965      	ldr	r5, [r4, #20]
 800ef04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	444b      	add	r3, r9
 800ef10:	106d      	asrs	r5, r5, #1
 800ef12:	429d      	cmp	r5, r3
 800ef14:	bf38      	it	cc
 800ef16:	461d      	movcc	r5, r3
 800ef18:	0553      	lsls	r3, r2, #21
 800ef1a:	d531      	bpl.n	800ef80 <__ssputs_r+0xa0>
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	f7ff ff13 	bl	800ed48 <_malloc_r>
 800ef22:	4606      	mov	r6, r0
 800ef24:	b950      	cbnz	r0, 800ef3c <__ssputs_r+0x5c>
 800ef26:	230c      	movs	r3, #12
 800ef28:	f8ca 3000 	str.w	r3, [sl]
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef32:	81a3      	strh	r3, [r4, #12]
 800ef34:	f04f 30ff 	mov.w	r0, #4294967295
 800ef38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3c:	6921      	ldr	r1, [r4, #16]
 800ef3e:	464a      	mov	r2, r9
 800ef40:	f7ff fe80 	bl	800ec44 <memcpy>
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef4e:	81a3      	strh	r3, [r4, #12]
 800ef50:	6126      	str	r6, [r4, #16]
 800ef52:	6165      	str	r5, [r4, #20]
 800ef54:	444e      	add	r6, r9
 800ef56:	eba5 0509 	sub.w	r5, r5, r9
 800ef5a:	6026      	str	r6, [r4, #0]
 800ef5c:	60a5      	str	r5, [r4, #8]
 800ef5e:	463e      	mov	r6, r7
 800ef60:	42be      	cmp	r6, r7
 800ef62:	d900      	bls.n	800ef66 <__ssputs_r+0x86>
 800ef64:	463e      	mov	r6, r7
 800ef66:	6820      	ldr	r0, [r4, #0]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4641      	mov	r1, r8
 800ef6c:	f000 faaa 	bl	800f4c4 <memmove>
 800ef70:	68a3      	ldr	r3, [r4, #8]
 800ef72:	1b9b      	subs	r3, r3, r6
 800ef74:	60a3      	str	r3, [r4, #8]
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	4433      	add	r3, r6
 800ef7a:	6023      	str	r3, [r4, #0]
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	e7db      	b.n	800ef38 <__ssputs_r+0x58>
 800ef80:	462a      	mov	r2, r5
 800ef82:	f000 fab9 	bl	800f4f8 <_realloc_r>
 800ef86:	4606      	mov	r6, r0
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d1e1      	bne.n	800ef50 <__ssputs_r+0x70>
 800ef8c:	6921      	ldr	r1, [r4, #16]
 800ef8e:	4650      	mov	r0, sl
 800ef90:	f7ff fe6e 	bl	800ec70 <_free_r>
 800ef94:	e7c7      	b.n	800ef26 <__ssputs_r+0x46>
	...

0800ef98 <_svfiprintf_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	4698      	mov	r8, r3
 800ef9e:	898b      	ldrh	r3, [r1, #12]
 800efa0:	061b      	lsls	r3, r3, #24
 800efa2:	b09d      	sub	sp, #116	; 0x74
 800efa4:	4607      	mov	r7, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	4614      	mov	r4, r2
 800efaa:	d50e      	bpl.n	800efca <_svfiprintf_r+0x32>
 800efac:	690b      	ldr	r3, [r1, #16]
 800efae:	b963      	cbnz	r3, 800efca <_svfiprintf_r+0x32>
 800efb0:	2140      	movs	r1, #64	; 0x40
 800efb2:	f7ff fec9 	bl	800ed48 <_malloc_r>
 800efb6:	6028      	str	r0, [r5, #0]
 800efb8:	6128      	str	r0, [r5, #16]
 800efba:	b920      	cbnz	r0, 800efc6 <_svfiprintf_r+0x2e>
 800efbc:	230c      	movs	r3, #12
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295
 800efc4:	e0d1      	b.n	800f16a <_svfiprintf_r+0x1d2>
 800efc6:	2340      	movs	r3, #64	; 0x40
 800efc8:	616b      	str	r3, [r5, #20]
 800efca:	2300      	movs	r3, #0
 800efcc:	9309      	str	r3, [sp, #36]	; 0x24
 800efce:	2320      	movs	r3, #32
 800efd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800efd8:	2330      	movs	r3, #48	; 0x30
 800efda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f184 <_svfiprintf_r+0x1ec>
 800efde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efe2:	f04f 0901 	mov.w	r9, #1
 800efe6:	4623      	mov	r3, r4
 800efe8:	469a      	mov	sl, r3
 800efea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efee:	b10a      	cbz	r2, 800eff4 <_svfiprintf_r+0x5c>
 800eff0:	2a25      	cmp	r2, #37	; 0x25
 800eff2:	d1f9      	bne.n	800efe8 <_svfiprintf_r+0x50>
 800eff4:	ebba 0b04 	subs.w	fp, sl, r4
 800eff8:	d00b      	beq.n	800f012 <_svfiprintf_r+0x7a>
 800effa:	465b      	mov	r3, fp
 800effc:	4622      	mov	r2, r4
 800effe:	4629      	mov	r1, r5
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff ff6d 	bl	800eee0 <__ssputs_r>
 800f006:	3001      	adds	r0, #1
 800f008:	f000 80aa 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f00e:	445a      	add	r2, fp
 800f010:	9209      	str	r2, [sp, #36]	; 0x24
 800f012:	f89a 3000 	ldrb.w	r3, [sl]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 80a2 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f01c:	2300      	movs	r3, #0
 800f01e:	f04f 32ff 	mov.w	r2, #4294967295
 800f022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f026:	f10a 0a01 	add.w	sl, sl, #1
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	9307      	str	r3, [sp, #28]
 800f02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f032:	931a      	str	r3, [sp, #104]	; 0x68
 800f034:	4654      	mov	r4, sl
 800f036:	2205      	movs	r2, #5
 800f038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f03c:	4851      	ldr	r0, [pc, #324]	; (800f184 <_svfiprintf_r+0x1ec>)
 800f03e:	f7f1 f8d7 	bl	80001f0 <memchr>
 800f042:	9a04      	ldr	r2, [sp, #16]
 800f044:	b9d8      	cbnz	r0, 800f07e <_svfiprintf_r+0xe6>
 800f046:	06d0      	lsls	r0, r2, #27
 800f048:	bf44      	itt	mi
 800f04a:	2320      	movmi	r3, #32
 800f04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f050:	0711      	lsls	r1, r2, #28
 800f052:	bf44      	itt	mi
 800f054:	232b      	movmi	r3, #43	; 0x2b
 800f056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f05a:	f89a 3000 	ldrb.w	r3, [sl]
 800f05e:	2b2a      	cmp	r3, #42	; 0x2a
 800f060:	d015      	beq.n	800f08e <_svfiprintf_r+0xf6>
 800f062:	9a07      	ldr	r2, [sp, #28]
 800f064:	4654      	mov	r4, sl
 800f066:	2000      	movs	r0, #0
 800f068:	f04f 0c0a 	mov.w	ip, #10
 800f06c:	4621      	mov	r1, r4
 800f06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f072:	3b30      	subs	r3, #48	; 0x30
 800f074:	2b09      	cmp	r3, #9
 800f076:	d94e      	bls.n	800f116 <_svfiprintf_r+0x17e>
 800f078:	b1b0      	cbz	r0, 800f0a8 <_svfiprintf_r+0x110>
 800f07a:	9207      	str	r2, [sp, #28]
 800f07c:	e014      	b.n	800f0a8 <_svfiprintf_r+0x110>
 800f07e:	eba0 0308 	sub.w	r3, r0, r8
 800f082:	fa09 f303 	lsl.w	r3, r9, r3
 800f086:	4313      	orrs	r3, r2
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	46a2      	mov	sl, r4
 800f08c:	e7d2      	b.n	800f034 <_svfiprintf_r+0x9c>
 800f08e:	9b03      	ldr	r3, [sp, #12]
 800f090:	1d19      	adds	r1, r3, #4
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	9103      	str	r1, [sp, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	bfbb      	ittet	lt
 800f09a:	425b      	neglt	r3, r3
 800f09c:	f042 0202 	orrlt.w	r2, r2, #2
 800f0a0:	9307      	strge	r3, [sp, #28]
 800f0a2:	9307      	strlt	r3, [sp, #28]
 800f0a4:	bfb8      	it	lt
 800f0a6:	9204      	strlt	r2, [sp, #16]
 800f0a8:	7823      	ldrb	r3, [r4, #0]
 800f0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ac:	d10c      	bne.n	800f0c8 <_svfiprintf_r+0x130>
 800f0ae:	7863      	ldrb	r3, [r4, #1]
 800f0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b2:	d135      	bne.n	800f120 <_svfiprintf_r+0x188>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	1d1a      	adds	r2, r3, #4
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	9203      	str	r2, [sp, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfb8      	it	lt
 800f0c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0c4:	3402      	adds	r4, #2
 800f0c6:	9305      	str	r3, [sp, #20]
 800f0c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f194 <_svfiprintf_r+0x1fc>
 800f0cc:	7821      	ldrb	r1, [r4, #0]
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	f7f1 f88d 	bl	80001f0 <memchr>
 800f0d6:	b140      	cbz	r0, 800f0ea <_svfiprintf_r+0x152>
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	eba0 000a 	sub.w	r0, r0, sl
 800f0de:	fa03 f000 	lsl.w	r0, r3, r0
 800f0e2:	9b04      	ldr	r3, [sp, #16]
 800f0e4:	4303      	orrs	r3, r0
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ee:	4826      	ldr	r0, [pc, #152]	; (800f188 <_svfiprintf_r+0x1f0>)
 800f0f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0f4:	2206      	movs	r2, #6
 800f0f6:	f7f1 f87b 	bl	80001f0 <memchr>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d038      	beq.n	800f170 <_svfiprintf_r+0x1d8>
 800f0fe:	4b23      	ldr	r3, [pc, #140]	; (800f18c <_svfiprintf_r+0x1f4>)
 800f100:	bb1b      	cbnz	r3, 800f14a <_svfiprintf_r+0x1b2>
 800f102:	9b03      	ldr	r3, [sp, #12]
 800f104:	3307      	adds	r3, #7
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	3308      	adds	r3, #8
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	4433      	add	r3, r6
 800f112:	9309      	str	r3, [sp, #36]	; 0x24
 800f114:	e767      	b.n	800efe6 <_svfiprintf_r+0x4e>
 800f116:	fb0c 3202 	mla	r2, ip, r2, r3
 800f11a:	460c      	mov	r4, r1
 800f11c:	2001      	movs	r0, #1
 800f11e:	e7a5      	b.n	800f06c <_svfiprintf_r+0xd4>
 800f120:	2300      	movs	r3, #0
 800f122:	3401      	adds	r4, #1
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	4619      	mov	r1, r3
 800f128:	f04f 0c0a 	mov.w	ip, #10
 800f12c:	4620      	mov	r0, r4
 800f12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f132:	3a30      	subs	r2, #48	; 0x30
 800f134:	2a09      	cmp	r2, #9
 800f136:	d903      	bls.n	800f140 <_svfiprintf_r+0x1a8>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d0c5      	beq.n	800f0c8 <_svfiprintf_r+0x130>
 800f13c:	9105      	str	r1, [sp, #20]
 800f13e:	e7c3      	b.n	800f0c8 <_svfiprintf_r+0x130>
 800f140:	fb0c 2101 	mla	r1, ip, r1, r2
 800f144:	4604      	mov	r4, r0
 800f146:	2301      	movs	r3, #1
 800f148:	e7f0      	b.n	800f12c <_svfiprintf_r+0x194>
 800f14a:	ab03      	add	r3, sp, #12
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	462a      	mov	r2, r5
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f152:	a904      	add	r1, sp, #16
 800f154:	4638      	mov	r0, r7
 800f156:	f3af 8000 	nop.w
 800f15a:	1c42      	adds	r2, r0, #1
 800f15c:	4606      	mov	r6, r0
 800f15e:	d1d6      	bne.n	800f10e <_svfiprintf_r+0x176>
 800f160:	89ab      	ldrh	r3, [r5, #12]
 800f162:	065b      	lsls	r3, r3, #25
 800f164:	f53f af2c 	bmi.w	800efc0 <_svfiprintf_r+0x28>
 800f168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f16a:	b01d      	add	sp, #116	; 0x74
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	ab03      	add	r3, sp, #12
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	462a      	mov	r2, r5
 800f176:	4b06      	ldr	r3, [pc, #24]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f178:	a904      	add	r1, sp, #16
 800f17a:	4638      	mov	r0, r7
 800f17c:	f000 f87a 	bl	800f274 <_printf_i>
 800f180:	e7eb      	b.n	800f15a <_svfiprintf_r+0x1c2>
 800f182:	bf00      	nop
 800f184:	0800fbb0 	.word	0x0800fbb0
 800f188:	0800fbba 	.word	0x0800fbba
 800f18c:	00000000 	.word	0x00000000
 800f190:	0800eee1 	.word	0x0800eee1
 800f194:	0800fbb6 	.word	0x0800fbb6

0800f198 <_printf_common>:
 800f198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f19c:	4616      	mov	r6, r2
 800f19e:	4699      	mov	r9, r3
 800f1a0:	688a      	ldr	r2, [r1, #8]
 800f1a2:	690b      	ldr	r3, [r1, #16]
 800f1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bfb8      	it	lt
 800f1ac:	4613      	movlt	r3, r2
 800f1ae:	6033      	str	r3, [r6, #0]
 800f1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	b10a      	cbz	r2, 800f1be <_printf_common+0x26>
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	6033      	str	r3, [r6, #0]
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	0699      	lsls	r1, r3, #26
 800f1c2:	bf42      	ittt	mi
 800f1c4:	6833      	ldrmi	r3, [r6, #0]
 800f1c6:	3302      	addmi	r3, #2
 800f1c8:	6033      	strmi	r3, [r6, #0]
 800f1ca:	6825      	ldr	r5, [r4, #0]
 800f1cc:	f015 0506 	ands.w	r5, r5, #6
 800f1d0:	d106      	bne.n	800f1e0 <_printf_common+0x48>
 800f1d2:	f104 0a19 	add.w	sl, r4, #25
 800f1d6:	68e3      	ldr	r3, [r4, #12]
 800f1d8:	6832      	ldr	r2, [r6, #0]
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	42ab      	cmp	r3, r5
 800f1de:	dc26      	bgt.n	800f22e <_printf_common+0x96>
 800f1e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1e4:	1e13      	subs	r3, r2, #0
 800f1e6:	6822      	ldr	r2, [r4, #0]
 800f1e8:	bf18      	it	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	0692      	lsls	r2, r2, #26
 800f1ee:	d42b      	bmi.n	800f248 <_printf_common+0xb0>
 800f1f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	47c0      	blx	r8
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d01e      	beq.n	800f23c <_printf_common+0xa4>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	68e5      	ldr	r5, [r4, #12]
 800f202:	6832      	ldr	r2, [r6, #0]
 800f204:	f003 0306 	and.w	r3, r3, #6
 800f208:	2b04      	cmp	r3, #4
 800f20a:	bf08      	it	eq
 800f20c:	1aad      	subeq	r5, r5, r2
 800f20e:	68a3      	ldr	r3, [r4, #8]
 800f210:	6922      	ldr	r2, [r4, #16]
 800f212:	bf0c      	ite	eq
 800f214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f218:	2500      	movne	r5, #0
 800f21a:	4293      	cmp	r3, r2
 800f21c:	bfc4      	itt	gt
 800f21e:	1a9b      	subgt	r3, r3, r2
 800f220:	18ed      	addgt	r5, r5, r3
 800f222:	2600      	movs	r6, #0
 800f224:	341a      	adds	r4, #26
 800f226:	42b5      	cmp	r5, r6
 800f228:	d11a      	bne.n	800f260 <_printf_common+0xc8>
 800f22a:	2000      	movs	r0, #0
 800f22c:	e008      	b.n	800f240 <_printf_common+0xa8>
 800f22e:	2301      	movs	r3, #1
 800f230:	4652      	mov	r2, sl
 800f232:	4649      	mov	r1, r9
 800f234:	4638      	mov	r0, r7
 800f236:	47c0      	blx	r8
 800f238:	3001      	adds	r0, #1
 800f23a:	d103      	bne.n	800f244 <_printf_common+0xac>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	3501      	adds	r5, #1
 800f246:	e7c6      	b.n	800f1d6 <_printf_common+0x3e>
 800f248:	18e1      	adds	r1, r4, r3
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	2030      	movs	r0, #48	; 0x30
 800f24e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f252:	4422      	add	r2, r4
 800f254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f25c:	3302      	adds	r3, #2
 800f25e:	e7c7      	b.n	800f1f0 <_printf_common+0x58>
 800f260:	2301      	movs	r3, #1
 800f262:	4622      	mov	r2, r4
 800f264:	4649      	mov	r1, r9
 800f266:	4638      	mov	r0, r7
 800f268:	47c0      	blx	r8
 800f26a:	3001      	adds	r0, #1
 800f26c:	d0e6      	beq.n	800f23c <_printf_common+0xa4>
 800f26e:	3601      	adds	r6, #1
 800f270:	e7d9      	b.n	800f226 <_printf_common+0x8e>
	...

0800f274 <_printf_i>:
 800f274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	7e0f      	ldrb	r7, [r1, #24]
 800f27a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f27c:	2f78      	cmp	r7, #120	; 0x78
 800f27e:	4691      	mov	r9, r2
 800f280:	4680      	mov	r8, r0
 800f282:	460c      	mov	r4, r1
 800f284:	469a      	mov	sl, r3
 800f286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f28a:	d807      	bhi.n	800f29c <_printf_i+0x28>
 800f28c:	2f62      	cmp	r7, #98	; 0x62
 800f28e:	d80a      	bhi.n	800f2a6 <_printf_i+0x32>
 800f290:	2f00      	cmp	r7, #0
 800f292:	f000 80d8 	beq.w	800f446 <_printf_i+0x1d2>
 800f296:	2f58      	cmp	r7, #88	; 0x58
 800f298:	f000 80a3 	beq.w	800f3e2 <_printf_i+0x16e>
 800f29c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2a4:	e03a      	b.n	800f31c <_printf_i+0xa8>
 800f2a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2aa:	2b15      	cmp	r3, #21
 800f2ac:	d8f6      	bhi.n	800f29c <_printf_i+0x28>
 800f2ae:	a101      	add	r1, pc, #4	; (adr r1, 800f2b4 <_printf_i+0x40>)
 800f2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2b4:	0800f30d 	.word	0x0800f30d
 800f2b8:	0800f321 	.word	0x0800f321
 800f2bc:	0800f29d 	.word	0x0800f29d
 800f2c0:	0800f29d 	.word	0x0800f29d
 800f2c4:	0800f29d 	.word	0x0800f29d
 800f2c8:	0800f29d 	.word	0x0800f29d
 800f2cc:	0800f321 	.word	0x0800f321
 800f2d0:	0800f29d 	.word	0x0800f29d
 800f2d4:	0800f29d 	.word	0x0800f29d
 800f2d8:	0800f29d 	.word	0x0800f29d
 800f2dc:	0800f29d 	.word	0x0800f29d
 800f2e0:	0800f42d 	.word	0x0800f42d
 800f2e4:	0800f351 	.word	0x0800f351
 800f2e8:	0800f40f 	.word	0x0800f40f
 800f2ec:	0800f29d 	.word	0x0800f29d
 800f2f0:	0800f29d 	.word	0x0800f29d
 800f2f4:	0800f44f 	.word	0x0800f44f
 800f2f8:	0800f29d 	.word	0x0800f29d
 800f2fc:	0800f351 	.word	0x0800f351
 800f300:	0800f29d 	.word	0x0800f29d
 800f304:	0800f29d 	.word	0x0800f29d
 800f308:	0800f417 	.word	0x0800f417
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	602a      	str	r2, [r5, #0]
 800f314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f31c:	2301      	movs	r3, #1
 800f31e:	e0a3      	b.n	800f468 <_printf_i+0x1f4>
 800f320:	6820      	ldr	r0, [r4, #0]
 800f322:	6829      	ldr	r1, [r5, #0]
 800f324:	0606      	lsls	r6, r0, #24
 800f326:	f101 0304 	add.w	r3, r1, #4
 800f32a:	d50a      	bpl.n	800f342 <_printf_i+0xce>
 800f32c:	680e      	ldr	r6, [r1, #0]
 800f32e:	602b      	str	r3, [r5, #0]
 800f330:	2e00      	cmp	r6, #0
 800f332:	da03      	bge.n	800f33c <_printf_i+0xc8>
 800f334:	232d      	movs	r3, #45	; 0x2d
 800f336:	4276      	negs	r6, r6
 800f338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f33c:	485e      	ldr	r0, [pc, #376]	; (800f4b8 <_printf_i+0x244>)
 800f33e:	230a      	movs	r3, #10
 800f340:	e019      	b.n	800f376 <_printf_i+0x102>
 800f342:	680e      	ldr	r6, [r1, #0]
 800f344:	602b      	str	r3, [r5, #0]
 800f346:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f34a:	bf18      	it	ne
 800f34c:	b236      	sxthne	r6, r6
 800f34e:	e7ef      	b.n	800f330 <_printf_i+0xbc>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	6820      	ldr	r0, [r4, #0]
 800f354:	1d19      	adds	r1, r3, #4
 800f356:	6029      	str	r1, [r5, #0]
 800f358:	0601      	lsls	r1, r0, #24
 800f35a:	d501      	bpl.n	800f360 <_printf_i+0xec>
 800f35c:	681e      	ldr	r6, [r3, #0]
 800f35e:	e002      	b.n	800f366 <_printf_i+0xf2>
 800f360:	0646      	lsls	r6, r0, #25
 800f362:	d5fb      	bpl.n	800f35c <_printf_i+0xe8>
 800f364:	881e      	ldrh	r6, [r3, #0]
 800f366:	4854      	ldr	r0, [pc, #336]	; (800f4b8 <_printf_i+0x244>)
 800f368:	2f6f      	cmp	r7, #111	; 0x6f
 800f36a:	bf0c      	ite	eq
 800f36c:	2308      	moveq	r3, #8
 800f36e:	230a      	movne	r3, #10
 800f370:	2100      	movs	r1, #0
 800f372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f376:	6865      	ldr	r5, [r4, #4]
 800f378:	60a5      	str	r5, [r4, #8]
 800f37a:	2d00      	cmp	r5, #0
 800f37c:	bfa2      	ittt	ge
 800f37e:	6821      	ldrge	r1, [r4, #0]
 800f380:	f021 0104 	bicge.w	r1, r1, #4
 800f384:	6021      	strge	r1, [r4, #0]
 800f386:	b90e      	cbnz	r6, 800f38c <_printf_i+0x118>
 800f388:	2d00      	cmp	r5, #0
 800f38a:	d04d      	beq.n	800f428 <_printf_i+0x1b4>
 800f38c:	4615      	mov	r5, r2
 800f38e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f392:	fb03 6711 	mls	r7, r3, r1, r6
 800f396:	5dc7      	ldrb	r7, [r0, r7]
 800f398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f39c:	4637      	mov	r7, r6
 800f39e:	42bb      	cmp	r3, r7
 800f3a0:	460e      	mov	r6, r1
 800f3a2:	d9f4      	bls.n	800f38e <_printf_i+0x11a>
 800f3a4:	2b08      	cmp	r3, #8
 800f3a6:	d10b      	bne.n	800f3c0 <_printf_i+0x14c>
 800f3a8:	6823      	ldr	r3, [r4, #0]
 800f3aa:	07de      	lsls	r6, r3, #31
 800f3ac:	d508      	bpl.n	800f3c0 <_printf_i+0x14c>
 800f3ae:	6923      	ldr	r3, [r4, #16]
 800f3b0:	6861      	ldr	r1, [r4, #4]
 800f3b2:	4299      	cmp	r1, r3
 800f3b4:	bfde      	ittt	le
 800f3b6:	2330      	movle	r3, #48	; 0x30
 800f3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3c0:	1b52      	subs	r2, r2, r5
 800f3c2:	6122      	str	r2, [r4, #16]
 800f3c4:	f8cd a000 	str.w	sl, [sp]
 800f3c8:	464b      	mov	r3, r9
 800f3ca:	aa03      	add	r2, sp, #12
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	f7ff fee2 	bl	800f198 <_printf_common>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d14c      	bne.n	800f472 <_printf_i+0x1fe>
 800f3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3dc:	b004      	add	sp, #16
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	4835      	ldr	r0, [pc, #212]	; (800f4b8 <_printf_i+0x244>)
 800f3e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f3e8:	6829      	ldr	r1, [r5, #0]
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800f3f0:	6029      	str	r1, [r5, #0]
 800f3f2:	061d      	lsls	r5, r3, #24
 800f3f4:	d514      	bpl.n	800f420 <_printf_i+0x1ac>
 800f3f6:	07df      	lsls	r7, r3, #31
 800f3f8:	bf44      	itt	mi
 800f3fa:	f043 0320 	orrmi.w	r3, r3, #32
 800f3fe:	6023      	strmi	r3, [r4, #0]
 800f400:	b91e      	cbnz	r6, 800f40a <_printf_i+0x196>
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	f023 0320 	bic.w	r3, r3, #32
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	2310      	movs	r3, #16
 800f40c:	e7b0      	b.n	800f370 <_printf_i+0xfc>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	f043 0320 	orr.w	r3, r3, #32
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	2378      	movs	r3, #120	; 0x78
 800f418:	4828      	ldr	r0, [pc, #160]	; (800f4bc <_printf_i+0x248>)
 800f41a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f41e:	e7e3      	b.n	800f3e8 <_printf_i+0x174>
 800f420:	0659      	lsls	r1, r3, #25
 800f422:	bf48      	it	mi
 800f424:	b2b6      	uxthmi	r6, r6
 800f426:	e7e6      	b.n	800f3f6 <_printf_i+0x182>
 800f428:	4615      	mov	r5, r2
 800f42a:	e7bb      	b.n	800f3a4 <_printf_i+0x130>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	6826      	ldr	r6, [r4, #0]
 800f430:	6961      	ldr	r1, [r4, #20]
 800f432:	1d18      	adds	r0, r3, #4
 800f434:	6028      	str	r0, [r5, #0]
 800f436:	0635      	lsls	r5, r6, #24
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	d501      	bpl.n	800f440 <_printf_i+0x1cc>
 800f43c:	6019      	str	r1, [r3, #0]
 800f43e:	e002      	b.n	800f446 <_printf_i+0x1d2>
 800f440:	0670      	lsls	r0, r6, #25
 800f442:	d5fb      	bpl.n	800f43c <_printf_i+0x1c8>
 800f444:	8019      	strh	r1, [r3, #0]
 800f446:	2300      	movs	r3, #0
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	4615      	mov	r5, r2
 800f44c:	e7ba      	b.n	800f3c4 <_printf_i+0x150>
 800f44e:	682b      	ldr	r3, [r5, #0]
 800f450:	1d1a      	adds	r2, r3, #4
 800f452:	602a      	str	r2, [r5, #0]
 800f454:	681d      	ldr	r5, [r3, #0]
 800f456:	6862      	ldr	r2, [r4, #4]
 800f458:	2100      	movs	r1, #0
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7f0 fec8 	bl	80001f0 <memchr>
 800f460:	b108      	cbz	r0, 800f466 <_printf_i+0x1f2>
 800f462:	1b40      	subs	r0, r0, r5
 800f464:	6060      	str	r0, [r4, #4]
 800f466:	6863      	ldr	r3, [r4, #4]
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	2300      	movs	r3, #0
 800f46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f470:	e7a8      	b.n	800f3c4 <_printf_i+0x150>
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	462a      	mov	r2, r5
 800f476:	4649      	mov	r1, r9
 800f478:	4640      	mov	r0, r8
 800f47a:	47d0      	blx	sl
 800f47c:	3001      	adds	r0, #1
 800f47e:	d0ab      	beq.n	800f3d8 <_printf_i+0x164>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	079b      	lsls	r3, r3, #30
 800f484:	d413      	bmi.n	800f4ae <_printf_i+0x23a>
 800f486:	68e0      	ldr	r0, [r4, #12]
 800f488:	9b03      	ldr	r3, [sp, #12]
 800f48a:	4298      	cmp	r0, r3
 800f48c:	bfb8      	it	lt
 800f48e:	4618      	movlt	r0, r3
 800f490:	e7a4      	b.n	800f3dc <_printf_i+0x168>
 800f492:	2301      	movs	r3, #1
 800f494:	4632      	mov	r2, r6
 800f496:	4649      	mov	r1, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	47d0      	blx	sl
 800f49c:	3001      	adds	r0, #1
 800f49e:	d09b      	beq.n	800f3d8 <_printf_i+0x164>
 800f4a0:	3501      	adds	r5, #1
 800f4a2:	68e3      	ldr	r3, [r4, #12]
 800f4a4:	9903      	ldr	r1, [sp, #12]
 800f4a6:	1a5b      	subs	r3, r3, r1
 800f4a8:	42ab      	cmp	r3, r5
 800f4aa:	dcf2      	bgt.n	800f492 <_printf_i+0x21e>
 800f4ac:	e7eb      	b.n	800f486 <_printf_i+0x212>
 800f4ae:	2500      	movs	r5, #0
 800f4b0:	f104 0619 	add.w	r6, r4, #25
 800f4b4:	e7f5      	b.n	800f4a2 <_printf_i+0x22e>
 800f4b6:	bf00      	nop
 800f4b8:	0800fbc1 	.word	0x0800fbc1
 800f4bc:	0800fbd2 	.word	0x0800fbd2

0800f4c0 <__retarget_lock_acquire_recursive>:
 800f4c0:	4770      	bx	lr

0800f4c2 <__retarget_lock_release_recursive>:
 800f4c2:	4770      	bx	lr

0800f4c4 <memmove>:
 800f4c4:	4288      	cmp	r0, r1
 800f4c6:	b510      	push	{r4, lr}
 800f4c8:	eb01 0402 	add.w	r4, r1, r2
 800f4cc:	d902      	bls.n	800f4d4 <memmove+0x10>
 800f4ce:	4284      	cmp	r4, r0
 800f4d0:	4623      	mov	r3, r4
 800f4d2:	d807      	bhi.n	800f4e4 <memmove+0x20>
 800f4d4:	1e43      	subs	r3, r0, #1
 800f4d6:	42a1      	cmp	r1, r4
 800f4d8:	d008      	beq.n	800f4ec <memmove+0x28>
 800f4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4e2:	e7f8      	b.n	800f4d6 <memmove+0x12>
 800f4e4:	4402      	add	r2, r0
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	428a      	cmp	r2, r1
 800f4ea:	d100      	bne.n	800f4ee <memmove+0x2a>
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4f6:	e7f7      	b.n	800f4e8 <memmove+0x24>

0800f4f8 <_realloc_r>:
 800f4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4614      	mov	r4, r2
 800f500:	460e      	mov	r6, r1
 800f502:	b921      	cbnz	r1, 800f50e <_realloc_r+0x16>
 800f504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f508:	4611      	mov	r1, r2
 800f50a:	f7ff bc1d 	b.w	800ed48 <_malloc_r>
 800f50e:	b92a      	cbnz	r2, 800f51c <_realloc_r+0x24>
 800f510:	f7ff fbae 	bl	800ec70 <_free_r>
 800f514:	4625      	mov	r5, r4
 800f516:	4628      	mov	r0, r5
 800f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51c:	f000 f81b 	bl	800f556 <_malloc_usable_size_r>
 800f520:	4284      	cmp	r4, r0
 800f522:	4607      	mov	r7, r0
 800f524:	d802      	bhi.n	800f52c <_realloc_r+0x34>
 800f526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f52a:	d812      	bhi.n	800f552 <_realloc_r+0x5a>
 800f52c:	4621      	mov	r1, r4
 800f52e:	4640      	mov	r0, r8
 800f530:	f7ff fc0a 	bl	800ed48 <_malloc_r>
 800f534:	4605      	mov	r5, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	d0ed      	beq.n	800f516 <_realloc_r+0x1e>
 800f53a:	42bc      	cmp	r4, r7
 800f53c:	4622      	mov	r2, r4
 800f53e:	4631      	mov	r1, r6
 800f540:	bf28      	it	cs
 800f542:	463a      	movcs	r2, r7
 800f544:	f7ff fb7e 	bl	800ec44 <memcpy>
 800f548:	4631      	mov	r1, r6
 800f54a:	4640      	mov	r0, r8
 800f54c:	f7ff fb90 	bl	800ec70 <_free_r>
 800f550:	e7e1      	b.n	800f516 <_realloc_r+0x1e>
 800f552:	4635      	mov	r5, r6
 800f554:	e7df      	b.n	800f516 <_realloc_r+0x1e>

0800f556 <_malloc_usable_size_r>:
 800f556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f55a:	1f18      	subs	r0, r3, #4
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bfbc      	itt	lt
 800f560:	580b      	ldrlt	r3, [r1, r0]
 800f562:	18c0      	addlt	r0, r0, r3
 800f564:	4770      	bx	lr
	...

0800f568 <_init>:
 800f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56a:	bf00      	nop
 800f56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56e:	bc08      	pop	{r3}
 800f570:	469e      	mov	lr, r3
 800f572:	4770      	bx	lr

0800f574 <_fini>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr
