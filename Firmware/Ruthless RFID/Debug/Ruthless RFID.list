
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f190  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800f330  0800f330  0001f330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f93c  0800f93c  0002065c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f93c  0800f93c  0001f93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f944  0800f944  0002065c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f948  0800f948  0001f948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000065c  20000000  0800f94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000065c  0800ffa8  0002065c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c04  0800ffa8  00026c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002065c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002710a  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000584e  00000000  00000000  00047796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  0004cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e70  00000000  00000000  0004f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb95  00000000  00000000  00050ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026842  00000000  00000000  0006da8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb87  00000000  00000000  000942cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d84  00000000  00000000  00132ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000065c 	.word	0x2000065c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f318 	.word	0x0800f318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000660 	.word	0x20000660
 80001dc:	0800f318 	.word	0x0800f318

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 ff58 	bl	8003474 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000678 	.word	0x20000678

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 f833 	bl	8003668 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000678 	.word	0x20000678

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 ff15 	bl	8003474 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fb0d 	bl	8002c74 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000678 	.word	0x20000678

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 ffe1 	bl	8003668 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fadf 	bl	8002c74 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000678 	.word	0x20000678

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fa6f 	bl	8002c74 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fce9 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fce4 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fa3f 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fcdc 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fa37 	bl	8002c74 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f9e1 	bl	8002c74 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00e f84f 	bl	800ea04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00d fffc 	bl	800ea04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 f8fd 	bl	8002c74 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f002 f8f2 	bl	8002c74 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f002 f8eb 	bl	8002c74 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f002 f8e2 	bl	8002c74 <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
	if (PICC_Select() != PCD_OK) {
 8000af8:	f7ff ffa8 	bl	8000a4c <PICC_Select>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2bcc      	cmp	r3, #204	; 0xcc
 8000b00:	d001      	beq.n	8000b06 <UL_READ+0x1a>
		return PCD_COMM_ERR; //No PICC available
 8000b02:	23aa      	movs	r3, #170	; 0xaa
 8000b04:	e021      	b.n	8000b4a <UL_READ+0x5e>
	}
	uint8_t transaction[4]={ULTRA_READ,addr};
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	733b      	strb	r3, [r7, #12]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe1b 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	3302      	adds	r3, #2
 8000b28:	893a      	ldrh	r2, [r7, #8]
 8000b2a:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b2c:	f107 000c 	add.w	r0, r7, #12
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2312      	movs	r3, #18
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	2104      	movs	r1, #4
 8000b3a:	f7ff fe7f 	bl	800083c <MFRC_TRANSCEIVE>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2bcc      	cmp	r3, #204	; 0xcc
 8000b42:	d001      	beq.n	8000b48 <UL_READ+0x5c>
		return(PCD_COMM_ERR);
 8000b44:	23aa      	movs	r3, #170	; 0xaa
 8000b46:	e000      	b.n	8000b4a <UL_READ+0x5e>
	}

	else{
		return(PCD_OK);
 8000b48:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b088      	sub	sp, #32
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff ffc3 	bl	8000aec <UL_READ>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2bcc      	cmp	r3, #204	; 0xcc
 8000b6a:	d001      	beq.n	8000b70 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b6c:	23aa      	movs	r3, #170	; 0xaa
 8000b6e:	e007      	b.n	8000b80 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2207      	movs	r2, #7
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f00d ff43 	bl	800ea04 <memcpy>
	return PCD_OK;
 8000b7e:	23cc      	movs	r3, #204	; 0xcc
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000b90:	2007      	movs	r0, #7
 8000b92:	f00d ff27 	bl	800e9e4 <malloc>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]

	result->type = "MIFARE Ultralight";
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <UL_readcard+0x58>)
 8000b9e:	60da      	str	r2, [r3, #12]
	result->name = "Test card";
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <UL_readcard+0x5c>)
 8000ba4:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2207      	movs	r2, #7
 8000baa:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	741a      	strb	r2, [r3, #16]

	if ((UL_getuid(uid) != PCD_OK)) {
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff ffca 	bl	8000b52 <UL_getuid>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2bcc      	cmp	r3, #204	; 0xcc
 8000bc2:	d001      	beq.n	8000bc8 <UL_readcard+0x40>
		return PCD_COMM_ERR;
 8000bc4:	23aa      	movs	r3, #170	; 0xaa
 8000bc6:	e006      	b.n	8000bd6 <UL_readcard+0x4e>
	}
	result->uid = uid;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
	result->contents = NULL;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000bd4:	23cc      	movs	r3, #204	; 0xcc
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	0800f390 	.word	0x0800f390
 8000be4:	0800f3a4 	.word	0x0800f3a4

08000be8 <uid_tostring>:

char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00d fef2 	bl	800e9e4 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e023      	b.n	8000c52 <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d80d      	bhi.n	8000c32 <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1898      	adds	r0, r3, r2
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4912      	ldr	r1, [pc, #72]	; (8000c74 <uid_tostring+0x8c>)
 8000c2c:	f00d fff0 	bl	800ec10 <siprintf>
 8000c30:	e00c      	b.n	8000c4c <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1898      	adds	r0, r3, r2
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	490c      	ldr	r1, [pc, #48]	; (8000c78 <uid_tostring+0x90>)
 8000c48:	f00d ffe2 	bl	800ec10 <siprintf>
	for (int i = 0; i < size; i++) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbd7      	blt.n	8000c0a <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0';
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4413      	add	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	return result;
 8000c68:	68bb      	ldr	r3, [r7, #8]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	0800f3b0 	.word	0x0800f3b0
 8000c78:	0800f3b4 	.word	0x0800f3b4

08000c7c <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000c82:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000c84:	463b      	mov	r3, r7
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00d fec7 	bl	800ea20 <memset>
	OLED_FLUSH(zeros);
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f87b 	bl	8000d90 <OLED_FLUSH>

}
 8000c9a:	bf00      	nop
 8000c9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <OLED_cmd+0x68>)
 8000cb8:	f002 fa7e 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <OLED_cmd+0x6c>)
 8000cc2:	f002 fa79 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000cc6:	f107 010f 	add.w	r1, r7, #15
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <OLED_cmd+0x70>)
 8000cd2:	f005 fa04 	bl	80060de <HAL_SPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2110      	movs	r1, #16
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <OLED_cmd+0x68>)
 8000ce2:	f002 fa69 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f001 ffc4 	bl	8002c74 <HAL_Delay>
		return(HAL_ERROR);
 8000cec:	2301      	movs	r3, #1
 8000cee:	e008      	b.n	8000d02 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <OLED_cmd+0x68>)
 8000cf6:	f002 fa5f 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f001 ffba 	bl	8002c74 <HAL_Delay>
		return(HAL_OK);
 8000d00:	2300      	movs	r3, #0
	}

}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400
 8000d14:	200006cc 	.word	0x200006cc

08000d18 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	4816      	ldr	r0, [pc, #88]	; (8000d84 <OLED_data+0x6c>)
 8000d2a:	f002 fa45 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2102      	movs	r1, #2
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <OLED_data+0x70>)
 8000d34:	f002 fa40 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <OLED_data+0x74>)
 8000d44:	f005 f9cb 	bl	80060de <HAL_SPI_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <OLED_data+0x70>)
 8000d54:	f002 fa30 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <OLED_data+0x6c>)
 8000d5e:	f002 fa2b 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00a      	b.n	8000d7c <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <OLED_data+0x70>)
 8000d6c:	f002 fa24 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <OLED_data+0x6c>)
 8000d76:	f002 fa1f 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000d7a:	2300      	movs	r3, #0
	}



}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	200006cc 	.word	0x200006cc

08000d90 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e023      	b.n	8000de6 <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	3b50      	subs	r3, #80	; 0x50
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff ff79 	bl	8000ca4 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000db2:	2010      	movs	r0, #16
 8000db4:	f7ff ff76 	bl	8000ca4 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	e00d      	b.n	8000dda <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	01da      	lsls	r2, r3, #7
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffa2 	bl	8000d18 <OLED_data>
		for(int i=0;i<128;i++){
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dde:	ddee      	ble.n	8000dbe <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	ddd8      	ble.n	8000d9e <OLED_FLUSH+0xe>
		}


	}
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	482f      	ldr	r0, [pc, #188]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e04:	f002 f9d8 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	482c      	ldr	r0, [pc, #176]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e0e:	f002 f9d3 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2102      	movs	r1, #2
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <OLED_INIT+0xcc>)
 8000e18:	f002 f9ce 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f001 ff29 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e28:	f002 f9c6 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f001 ff21 	bl	8002c74 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <OLED_INIT+0xc8>)
 8000e38:	f002 f9be 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	f001 ff19 	bl	8002c74 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <OLED_INIT+0xd0>)
 8000e44:	463c      	mov	r4, r7
 8000e46:	461d      	mov	r5, r3
 8000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e50:	c403      	stmia	r4!, {r0, r1}
 8000e52:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	e00c      	b.n	8000e74 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000e5a:	463a      	mov	r2, r7
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff1e 	bl	8000ca4 <OLED_cmd>
		HAL_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f001 ff03 	bl	8002c74 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b18      	cmp	r3, #24
 8000e78:	ddef      	ble.n	8000e5a <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000e7a:	20a7      	movs	r0, #167	; 0xa7
 8000e7c:	f7ff ff12 	bl	8000ca4 <OLED_cmd>
	OLED_FLUSH(HVE);
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <OLED_INIT+0xd4>)
 8000e82:	f7ff ff85 	bl	8000d90 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000e86:	20af      	movs	r0, #175	; 0xaf
 8000e88:	f7ff ff0c 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f001 fef0 	bl	8002c74 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000e94:	20ae      	movs	r0, #174	; 0xae
 8000e96:	f7ff ff05 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(10);
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f001 feea 	bl	8002c74 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000ea0:	20a6      	movs	r0, #166	; 0xa6
 8000ea2:	f7ff feff 	bl	8000ca4 <OLED_cmd>
	HAL_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f001 fee4 	bl	8002c74 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000eac:	20af      	movs	r0, #175	; 0xaf
 8000eae:	f7ff fef9 	bl	8000ca4 <OLED_cmd>
	OLED_Clear();
 8000eb2:	f7ff fee3 	bl	8000c7c <OLED_Clear>
	return HAL_OK;
 8000eb6:	2300      	movs	r3, #0

}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	0800f3b8 	.word	0x0800f3b8
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000edc:	2005      	movs	r0, #5
 8000ede:	f00d fd81 	bl	800e9e4 <malloc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e013      	b.n	8000f14 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f1a3 0220 	sub.w	r2, r3, #32
 8000ef2:	4910      	ldr	r1, [pc, #64]	; (8000f34 <OLED_InvChar+0x64>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	18ca      	adds	r2, r1, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	440b      	add	r3, r1
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	dde8      	ble.n	8000eec <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6838      	ldr	r0, [r7, #0]
 8000f20:	f00d fd70 	bl	800ea04 <memcpy>
	free(temp);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00d fd65 	bl	800e9f4 <free>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800f568 	.word	0x0800f568

08000f38 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	717b      	strb	r3, [r7, #5]
 8000f52:	4613      	mov	r3, r2
 8000f54:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3b50      	subs	r3, #80	; 0x50
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fea1 	bl	8000ca4 <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe9a 	bl	8000ca4 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fe91 	bl	8000ca4 <OLED_cmd>
	uint8_t* data=malloc(6);
 8000f82:	2006      	movs	r0, #6
 8000f84:	f00d fd2e 	bl	800e9e4 <malloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000f8c:	793b      	ldrb	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10d      	bne.n	8000fae <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	f1a3 0220 	sub.w	r2, r3, #32
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <OLED_drawChar+0xa0>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f00d fd2c 	bl	800ea04 <memcpy>
 8000fac:	e004      	b.n	8000fb8 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8000fae:	797b      	ldrb	r3, [r7, #5]
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff8c 	bl	8000ed0 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3305      	adds	r3, #5
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fea8 	bl	8000d18 <OLED_data>
	free(data);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f00d fd13 	bl	800e9f4 <free>
	}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800f568 	.word	0x0800f568

08000fdc <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	603a      	str	r2, [r7, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e014      	b.n	8001022 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	0052      	lsls	r2, r2, #1
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	4413      	add	r3, r2
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	79f8      	ldrb	r0, [r7, #7]
 8001018:	f7ff ff8e 	bl	8000f38 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f7ff f8dc 	bl	80001e0 <strlen>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8e3      	bhi.n	8000ff8 <OLED_Printlin+0x1c>


	}
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	6039      	str	r1, [r7, #0]
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	4613      	mov	r3, r2
 8001048:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f7ff f8c8 	bl	80001e0 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	0fda      	lsrs	r2, r3, #31
 8001058:	4413      	add	r3, r2
 800105a:	105b      	asrs	r3, r3, #1
 800105c:	425b      	negs	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3340      	adds	r3, #64	; 0x40
 800106a:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	79f8      	ldrb	r0, [r7, #7]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	f7ff ffb1 	bl	8000fdc <OLED_Printlin>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001082:	b580      	push	{r7, lr}
 8001084:	b094      	sub	sp, #80	; 0x50
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800108a:	2320      	movs	r3, #32
 800108c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001090:	2300      	movs	r3, #0
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001094:	2300      	movs	r3, #0
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001098:	2300      	movs	r3, #0
 800109a:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	643b      	str	r3, [r7, #64]	; 0x40
 80010a4:	e018      	b.n	80010d8 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	d10b      	bne.n	80010d0 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80010b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ba:	b2d9      	uxtb	r1, r3
 80010bc:	f107 020c 	add.w	r2, r7, #12
 80010c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	                i++;
 80010c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ca:	3301      	adds	r3, #1
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ce:	e000      	b.n	80010d2 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 80010d0:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 80010d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d4:	3301      	adds	r3, #1
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	2b15      	cmp	r3, #21
 80010dc:	dde3      	ble.n	80010a6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b20      	cmp	r3, #32
 80010e8:	d102      	bne.n	80010f0 <OLED_Print+0x6e>
	            last_ind++;
 80010ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ec:	3301      	adds	r3, #1
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 80010f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b15      	cmp	r3, #21
 8001100:	d828      	bhi.n	8001154 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f869 	bl	80001e0 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	18d1      	adds	r1, r2, r3
 8001118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f00d fd96 	bl	800ec50 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001126:	f107 0220 	add.w	r2, r7, #32
 800112a:	18d0      	adds	r0, r2, r3
 800112c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001132:	f1c3 0315 	rsb	r3, r3, #21
 8001136:	461a      	mov	r2, r3
 8001138:	f00d fc72 	bl	800ea20 <memset>
	            thisline[21]=' ';
 800113c:	2320      	movs	r3, #32
 800113e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	f107 0220 	add.w	r2, r7, #32
 800114a:	2300      	movs	r3, #0
 800114c:	2102      	movs	r1, #2
 800114e:	f7ff ff45 	bl	8000fdc <OLED_Printlin>




	    }
}
 8001152:	e05e      	b.n	8001212 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001156:	3314      	adds	r3, #20
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b20      	cmp	r3, #32
 8001160:	d03a      	beq.n	80011d8 <OLED_Print+0x156>
 8001162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001164:	3315      	adds	r3, #21
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b20      	cmp	r3, #32
 800116e:	d033      	beq.n	80011d8 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	18d1      	adds	r1, r2, r3
 8001176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001178:	3b01      	subs	r3, #1
 800117a:	3350      	adds	r3, #80	; 0x50
 800117c:	443b      	add	r3, r7
 800117e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001182:	461a      	mov	r2, r3
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f00d fd61 	bl	800ec50 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 800118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001190:	3b01      	subs	r3, #1
 8001192:	3350      	adds	r3, #80	; 0x50
 8001194:	443b      	add	r3, r7
 8001196:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	1898      	adds	r0, r3, r2
 80011a2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a8:	3b01      	subs	r3, #1
 80011aa:	3350      	adds	r3, #80	; 0x50
 80011ac:	443b      	add	r3, r7
 80011ae:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011b2:	f1c3 0315 	rsb	r3, r3, #21
 80011b6:	461a      	mov	r2, r3
 80011b8:	f00d fc32 	bl	800ea20 <memset>
	            thisline[21]=' ';
 80011bc:	2320      	movs	r3, #32
 80011be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 80011c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011c4:	3b01      	subs	r3, #1
 80011c6:	3350      	adds	r3, #80	; 0x50
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011ce:	461a      	mov	r2, r3
 80011d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011d2:	4413      	add	r3, r2
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80011d6:	e00e      	b.n	80011f6 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 80011d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2215      	movs	r2, #21
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00d fd33 	bl	800ec50 <strncpy>
	            thisline[21]=' ';
 80011ea:	2320      	movs	r3, #32
 80011ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 80011f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011f2:	3315      	adds	r3, #21
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 80011fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	f107 0220 	add.w	r2, r7, #32
 8001202:	2300      	movs	r3, #0
 8001204:	2102      	movs	r1, #2
 8001206:	f7ff fee9 	bl	8000fdc <OLED_Printlin>
	        line++;
 800120a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800120c:	3301      	adds	r3, #1
 800120e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001210:	e746      	b.n	80010a0 <OLED_Print+0x1e>
}
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001224:	f7ff fd2a 	bl	8000c7c <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	4619      	mov	r1, r3
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ff01 	bl	800103a <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e01a      	b.n	8001274 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3301      	adds	r3, #1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	7818      	ldrb	r0, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	7859      	ldrb	r1, [r3, #1]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	f7ff feb7 	bl	8000fdc <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbde      	blt.n	800123e <OLED_SCREEN+0x26>
	}
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	460b      	mov	r3, r1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7fe ff9b 	bl	80001e0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	3302      	adds	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	7818      	ldrb	r0, [r3, #0]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f7ff fe84 	bl	8000fdc <OLED_Printlin>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <OLED_SELECT+0x110>)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4611      	mov	r1, r2
 80012f4:	8019      	strh	r1, [r3, #0]
 80012f6:	3302      	adds	r3, #2
 80012f8:	0c12      	lsrs	r2, r2, #16
 80012fa:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d116      	bne.n	8001330 <OLED_SELECT+0x54>
			if(selopt==0){
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10b      	bne.n	8001320 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001314:	3b01      	subs	r3, #1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	e009      	b.n	8001334 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e001      	b.n	8001334 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <OLED_SELECT+0x114>)
 8001332:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d124      	bne.n	8001384 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001346:	3b01      	subs	r3, #1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800135c:	3b01      	subs	r3, #1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	773b      	strb	r3, [r7, #28]
 8001382:	e021      	b.n	80013c8 <OLED_SELECT+0xec>
	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800138e:	3b01      	subs	r3, #1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013a2:	3b01      	subs	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 80013c8:	7fb9      	ldrb	r1, [r7, #30]
 80013ca:	7ff8      	ldrb	r0, [r7, #31]
 80013cc:	2300      	movs	r3, #0
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	f7ff fe04 	bl	8000fdc <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 80013d4:	f107 0214 	add.w	r2, r7, #20
 80013d8:	7f39      	ldrb	r1, [r7, #28]
 80013da:	7f78      	ldrb	r0, [r7, #29]
 80013dc:	2300      	movs	r3, #0
 80013de:	f7ff fdfd 	bl	8000fdc <OLED_Printlin>

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800f3d8 	.word	0x0800f3d8
 80013f0:	0800f3d4 	.word	0x0800f3d4

080013f4 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(Screen* screen, uint8_t page) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	char** file_names = malloc(1 * sizeof(char*));
 8001400:	2004      	movs	r0, #4
 8001402:	f00d faef 	bl	800e9e4 <malloc>
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f001 f940 	bl	8002690 <get_all_files>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <OLED_display_files+0x26>
		return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e007      	b.n	800142a <OLED_display_files+0x36>
	}

	OLED_SCRNREF(screen, 1, file_names[0]);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff31 	bl	800128a <OLED_SCRNREF>
	return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af02      	add	r7, sp, #8
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800143e:	230f      	movs	r3, #15
 8001440:	733b      	strb	r3, [r7, #12]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	737b      	strb	r3, [r7, #13]
 8001446:	2300      	movs	r3, #0
 8001448:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <STAT_READ+0x54>)
 8001452:	f001 feb1 	bl	80031b8 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001456:	bf00      	nop
 8001458:	f107 0208 	add.w	r2, r7, #8
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2303      	movs	r3, #3
 8001466:	4809      	ldr	r0, [pc, #36]	; (800148c <STAT_READ+0x58>)
 8001468:	f004 ff75 	bl	8006356 <HAL_SPI_TransmitReceive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f2      	bne.n	8001458 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <STAT_READ+0x54>)
 800147a:	f001 fe9d 	bl	80031b8 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800147e:	7abb      	ldrb	r3, [r7, #10]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40020000 	.word	0x40020000
 800148c:	20000724 	.word	0x20000724

08001490 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80014a0:	231f      	movs	r3, #31
 80014a2:	733b      	strb	r3, [r7, #12]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	737b      	strb	r3, [r7, #13]
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	480a      	ldr	r0, [pc, #40]	; (80014dc <STAT_WRITE+0x4c>)
 80014b4:	f001 fe80 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80014b8:	f107 010c 	add.w	r1, r7, #12
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	2203      	movs	r2, #3
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <STAT_WRITE+0x50>)
 80014c2:	f004 fe0c 	bl	80060de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <STAT_WRITE+0x4c>)
 80014ce:	f001 fe73 	bl	80031b8 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	20000724 	.word	0x20000724

080014e4 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80014ea:	2306      	movs	r3, #6
 80014ec:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80014ee:	f000 f825 	bl	800153c <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80014f2:	e011      	b.n	8001518 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <WRIT_EN+0x50>)
 80014fc:	f001 fe5c 	bl	80031b8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001500:	1df9      	adds	r1, r7, #7
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	2201      	movs	r2, #1
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <WRIT_EN+0x54>)
 8001508:	f004 fde9 	bl	80060de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <WRIT_EN+0x50>)
 8001514:	f001 fe50 	bl	80031b8 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001518:	20c0      	movs	r0, #192	; 0xc0
 800151a:	f7ff ff8b 	bl	8001434 <STAT_READ>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b02      	cmp	r3, #2
 8001526:	d1e5      	bne.n	80014f4 <WRIT_EN+0x10>
	}


}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000
 8001538:	20000724 	.word	0x20000724

0800153c <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001542:	2304      	movs	r3, #4
 8001544:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001546:	e011      	b.n	800156c <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	480e      	ldr	r0, [pc, #56]	; (8001588 <WRITE_DIS+0x4c>)
 8001550:	f001 fe32 	bl	80031b8 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001554:	1df9      	adds	r1, r7, #7
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	2201      	movs	r2, #1
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <WRITE_DIS+0x50>)
 800155c:	f004 fdbf 	bl	80060de <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <WRITE_DIS+0x4c>)
 8001568:	f001 fe26 	bl	80031b8 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800156c:	20c0      	movs	r0, #192	; 0xc0
 800156e:	f7ff ff61 	bl	8001434 <STAT_READ>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b02      	cmp	r3, #2
 800157a:	d0e5      	beq.n	8001548 <WRITE_DIS+0xc>
		}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020000 	.word	0x40020000
 800158c:	20000724 	.word	0x20000724

08001590 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param page_addr - Page address to begin erasing from
 * */
void block_erase(uint16_t page_addr) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 800159a:	23d8      	movs	r3, #216	; 0xd8
 800159c:	733b      	strb	r3, [r7, #12]
 800159e:	2300      	movs	r3, #0
 80015a0:	737b      	strb	r3, [r7, #13]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	73bb      	strb	r3, [r7, #14]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
	WRIT_EN();
 80015b2:	f7ff ff97 	bl	80014e4 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <block_erase+0x68>)
 80015be:	f001 fdfb 	bl	80031b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 80015c2:	f107 010c 	add.w	r1, r7, #12
 80015c6:	2364      	movs	r3, #100	; 0x64
 80015c8:	2204      	movs	r2, #4
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <block_erase+0x6c>)
 80015cc:	f004 fd87 	bl	80060de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <block_erase+0x68>)
 80015d8:	f001 fdee 	bl	80031b8 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80015dc:	bf00      	nop
 80015de:	20c0      	movs	r0, #192	; 0xc0
 80015e0:	f7ff ff28 	bl	8001434 <STAT_READ>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d0f7      	beq.n	80015de <block_erase+0x4e>
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020000 	.word	0x40020000
 80015fc:	20000724 	.word	0x20000724

08001600 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <MEM_INIT+0x34>)
 800160c:	f001 fdd4 	bl	80031b8 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001610:	2100      	movs	r1, #0
 8001612:	20a0      	movs	r0, #160	; 0xa0
 8001614:	f7ff ff3c 	bl	8001490 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001618:	20a0      	movs	r0, #160	; 0xa0
 800161a:	f7ff ff0b 	bl	8001434 <STAT_READ>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MEM_INIT+0x28>
		return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e002      	b.n	800162e <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001628:	f7ff ff88 	bl	800153c <WRITE_DIS>
	return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000

08001638 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4603      	mov	r3, r0
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	460b      	mov	r3, r1
 8001648:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3303      	adds	r3, #3
 800164e:	4618      	mov	r0, r3
 8001650:	f00d f9c8 	bl	800e9e4 <malloc>
 8001654:	4603      	mov	r3, r0
 8001656:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001658:	2310      	movs	r3, #16
 800165a:	743b      	strb	r3, [r7, #16]
 800165c:	2300      	movs	r3, #0
 800165e:	747b      	strb	r3, [r7, #17]
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	74bb      	strb	r3, [r7, #18]
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001676:	89bb      	ldrh	r3, [r7, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b29a      	uxth	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3302      	adds	r3, #2
 8001688:	89ba      	ldrh	r2, [r7, #12]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3303      	adds	r3, #3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	4618      	mov	r0, r3
 8001698:	f00d f9b4 	bl	800ea04 <memcpy>

	WRIT_EN();
 800169c:	f7ff ff22 	bl	80014e4 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	482a      	ldr	r0, [pc, #168]	; (8001750 <MEM_WRITE+0x118>)
 80016a8:	f001 fd86 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3303      	adds	r3, #3
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	2364      	movs	r3, #100	; 0x64
 80016b6:	6979      	ldr	r1, [r7, #20]
 80016b8:	4826      	ldr	r0, [pc, #152]	; (8001754 <MEM_WRITE+0x11c>)
 80016ba:	f004 fd10 	bl	80060de <HAL_SPI_Transmit>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <MEM_WRITE+0x9c>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	4821      	ldr	r0, [pc, #132]	; (8001750 <MEM_WRITE+0x118>)
 80016cc:	f001 fd74 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80016d0:	2301      	movs	r3, #1
 80016d2:	e039      	b.n	8001748 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	481d      	ldr	r0, [pc, #116]	; (8001750 <MEM_WRITE+0x118>)
 80016dc:	f001 fd6c 	bl	80031b8 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80016e0:	bf00      	nop
 80016e2:	20c0      	movs	r0, #192	; 0xc0
 80016e4:	f7ff fea6 	bl	8001434 <STAT_READ>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d0f7      	beq.n	80016e2 <MEM_WRITE+0xaa>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	4815      	ldr	r0, [pc, #84]	; (8001750 <MEM_WRITE+0x118>)
 80016fa:	f001 fd5d 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80016fe:	f107 0110 	add.w	r1, r7, #16
 8001702:	2364      	movs	r3, #100	; 0x64
 8001704:	2204      	movs	r2, #4
 8001706:	4813      	ldr	r0, [pc, #76]	; (8001754 <MEM_WRITE+0x11c>)
 8001708:	f004 fce9 	bl	80060de <HAL_SPI_Transmit>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <MEM_WRITE+0xea>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <MEM_WRITE+0x118>)
 800171a:	f001 fd4d 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800171e:	2301      	movs	r3, #1
 8001720:	e012      	b.n	8001748 <MEM_WRITE+0x110>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <MEM_WRITE+0x118>)
 800172a:	f001 fd45 	bl	80031b8 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800172e:	bf00      	nop
 8001730:	20c0      	movs	r0, #192	; 0xc0
 8001732:	f7ff fe7f 	bl	8001434 <STAT_READ>
 8001736:	4603      	mov	r3, r0
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d0f7      	beq.n	8001730 <MEM_WRITE+0xf8>
	free(setup);
 8001740:	6978      	ldr	r0, [r7, #20]
 8001742:	f00d f957 	bl	800e9f4 <free>
	return(HAL_OK);
 8001746:	2300      	movs	r3, #0

}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40020000 	.word	0x40020000
 8001754:	20000724 	.word	0x20000724

08001758 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af02      	add	r7, sp, #8
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4603      	mov	r3, r0
 8001764:	81fb      	strh	r3, [r7, #14]
 8001766:	460b      	mov	r3, r1
 8001768:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 800176a:	2313      	movs	r3, #19
 800176c:	753b      	strb	r3, [r7, #20]
 800176e:	2300      	movs	r3, #0
 8001770:	757b      	strb	r3, [r7, #21]
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	75bb      	strb	r3, [r7, #22]
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8001782:	2304      	movs	r3, #4
 8001784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001788:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f00d f927 	bl	800e9e4 <malloc>
 8001796:	4603      	mov	r3, r0
 8001798:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 800179a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00d f91e 	bl	800e9e4 <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80017ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	69f8      	ldr	r0, [r7, #28]
 80017ba:	f00d f931 	bl	800ea20 <memset>
	read_command[0]=READ_BUF;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3302      	adds	r3, #2
 80017d6:	89ba      	ldrh	r2, [r7, #12]
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	3303      	adds	r3, #3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ea:	483c      	ldr	r0, [pc, #240]	; (80018dc <MEM_READPAGE+0x184>)
 80017ec:	f001 fce4 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80017f0:	f107 0114 	add.w	r1, r7, #20
 80017f4:	2364      	movs	r3, #100	; 0x64
 80017f6:	2204      	movs	r2, #4
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MEM_READPAGE+0x188>)
 80017fa:	f004 fc70 	bl	80060de <HAL_SPI_Transmit>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <MEM_READPAGE+0xbc>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180a:	4834      	ldr	r0, [pc, #208]	; (80018dc <MEM_READPAGE+0x184>)
 800180c:	f001 fcd4 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001810:	2301      	movs	r3, #1
 8001812:	e05e      	b.n	80018d2 <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	4830      	ldr	r0, [pc, #192]	; (80018dc <MEM_READPAGE+0x184>)
 800181c:	f001 fccc 	bl	80031b8 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8001820:	bf00      	nop
 8001822:	20c0      	movs	r0, #192	; 0xc0
 8001824:	f7ff fe06 	bl	8001434 <STAT_READ>
 8001828:	4603      	mov	r3, r0
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d0f7      	beq.n	8001822 <MEM_READPAGE+0xca>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001838:	4828      	ldr	r0, [pc, #160]	; (80018dc <MEM_READPAGE+0x184>)
 800183a:	f001 fcbd 	bl	80031b8 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 800183e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69f9      	ldr	r1, [r7, #28]
 8001854:	4822      	ldr	r0, [pc, #136]	; (80018e0 <MEM_READPAGE+0x188>)
 8001856:	f004 fd7e 	bl	8006356 <HAL_SPI_TransmitReceive>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <MEM_READPAGE+0x118>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <MEM_READPAGE+0x184>)
 8001868:	f001 fca6 	bl	80031b8 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800186c:	2301      	movs	r3, #1
 800186e:	e030      	b.n	80018d2 <MEM_READPAGE+0x17a>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	4819      	ldr	r0, [pc, #100]	; (80018dc <MEM_READPAGE+0x184>)
 8001878:	f001 fc9e 	bl	80031b8 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800187c:	bf00      	nop
 800187e:	20c0      	movs	r0, #192	; 0xc0
 8001880:	f7ff fdd8 	bl	8001434 <STAT_READ>
 8001884:	4603      	mov	r3, r0
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b01      	cmp	r3, #1
 800188c:	d0f7      	beq.n	800187e <MEM_READPAGE+0x126>

	if (bytes == 1) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d104      	bne.n	800189e <MEM_READPAGE+0x146>
		*data = rec_data[4];
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	791a      	ldrb	r2, [r3, #4]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e012      	b.n	80018c4 <MEM_READPAGE+0x16c>
	} else {
		for(int i = 0; i < bytes; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	e00b      	b.n	80018bc <MEM_READPAGE+0x164>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	3304      	adds	r3, #4
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	441a      	add	r2, r3
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	440b      	add	r3, r1
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	3301      	adds	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8ef      	bhi.n	80018a4 <MEM_READPAGE+0x14c>
		}
	}
	free(read_command);
 80018c4:	69f8      	ldr	r0, [r7, #28]
 80018c6:	f00d f895 	bl	800e9f4 <free>
	free(rec_data);
 80018ca:	69b8      	ldr	r0, [r7, #24]
 80018cc:	f00d f892 	bl	800e9f4 <free>
	return(HAL_OK);
 80018d0:	2300      	movs	r3, #0

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020000 	.word	0x40020000
 80018e0:	20000724 	.word	0x20000724

080018e4 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i+=BLOCK_PAGECOUNT) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	e016      	b.n	800191e <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	b298      	uxth	r0, r3
 80018f8:	1cfa      	adds	r2, r7, #3
 80018fa:	2301      	movs	r3, #1
 80018fc:	2100      	movs	r1, #0
 80018fe:	f7ff ff2b 	bl	8001758 <MEM_READPAGE>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <mem_find_free_block+0x2a>
			return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	e00d      	b.n	800192a <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d101      	bne.n	8001918 <mem_find_free_block+0x34>
			return i;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	e008      	b.n	800192a <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i+=BLOCK_PAGECOUNT) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3340      	adds	r3, #64	; 0x40
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001924:	dbe4      	blt.n	80018f0 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001938:	2108      	movs	r1, #8
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <BUZZ+0x20>)
 800193c:	f005 f906 	bl	8006b4c <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001944:	f001 f996 	bl	8002c74 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001948:	2108      	movs	r1, #8
 800194a:	4802      	ldr	r0, [pc, #8]	; (8001954 <BUZZ+0x20>)
 800194c:	f005 f9ae 	bl	8006cac <HAL_TIM_PWM_Stop>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000077c 	.word	0x2000077c

08001958 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001966:	2102      	movs	r1, #2
 8001968:	4820      	ldr	r0, [pc, #128]	; (80019ec <choose+0x94>)
 800196a:	f001 fc0d 	bl	8003188 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d136      	bne.n	80019e2 <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <choose+0x98>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 800197c:	e012      	b.n	80019a4 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 800197e:	481c      	ldr	r0, [pc, #112]	; (80019f0 <choose+0x98>)
 8001980:	f004 ffa6 	bl	80068d0 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <choose+0x98>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001992:	4817      	ldr	r0, [pc, #92]	; (80019f0 <choose+0x98>)
 8001994:	f004 fff6 	bl	8006984 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	e01e      	b.n	80019e2 <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 80019a4:	2102      	movs	r1, #2
 80019a6:	4811      	ldr	r0, [pc, #68]	; (80019ec <choose+0x94>)
 80019a8:	f001 fbee 	bl	8003188 <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0e5      	beq.n	800197e <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d102      	bne.n	80019cc <choose+0x74>
	 	    	*count = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fc80 	bl	80012dc <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <choose+0x98>)
 80019de:	f004 ffd1 	bl	8006984 <HAL_TIM_Base_Stop>
	 	}
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000
 80019f0:	200007c4 	.word	0x200007c4

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f001 f8fa 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f872 	bl	8001ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f000 fa3a 	bl	8001e78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a04:	f000 f8d8 	bl	8001bb8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a08:	f000 f904 	bl	8001c14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a0c:	f000 f93a 	bl	8001c84 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001a10:	f000 f96e 	bl	8001cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a14:	f000 f9e2 	bl	8001ddc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a18:	f009 fbc8 	bl	800b1ac <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <main+0xa0>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	2001      	movs	r0, #1
 8001a22:	f009 fcbb 	bl	800b39c <osMessageQueueNew>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <main+0xa4>)
 8001a2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <main+0xa8>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <main+0xac>)
 8001a32:	f009 fc05 	bl	800b240 <osThreadNew>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <main+0xb0>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <main+0xb4>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <main+0xb8>)
 8001a42:	f009 fbfd 	bl	800b240 <osThreadNew>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <main+0xbc>)
 8001a4a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <main+0xc0>)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <main+0xc4>)
 8001a52:	f009 fbf5 	bl	800b240 <osThreadNew>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <main+0xc8>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001a5c:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <main+0xcc>)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <main+0xd0>)
 8001a62:	f009 fbed 	bl	800b240 <osThreadNew>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <main+0xd4>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <main+0xd8>)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <main+0xdc>)
 8001a72:	f009 fbe5 	bl	800b240 <osThreadNew>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <main+0xe0>)
 8001a7a:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <main+0xe4>)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <main+0xe8>)
 8001a82:	f009 fbdd 	bl	800b240 <osThreadNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <main+0xec>)
 8001a8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a8c:	f009 fbb2 	bl	800b1f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <main+0x9c>
 8001a92:	bf00      	nop
 8001a94:	0800f820 	.word	0x0800f820
 8001a98:	20000824 	.word	0x20000824
 8001a9c:	0800f748 	.word	0x0800f748
 8001aa0:	08001f61 	.word	0x08001f61
 8001aa4:	2000080c 	.word	0x2000080c
 8001aa8:	0800f76c 	.word	0x0800f76c
 8001aac:	08001ff9 	.word	0x08001ff9
 8001ab0:	20000810 	.word	0x20000810
 8001ab4:	0800f790 	.word	0x0800f790
 8001ab8:	0800207d 	.word	0x0800207d
 8001abc:	20000814 	.word	0x20000814
 8001ac0:	0800f7b4 	.word	0x0800f7b4
 8001ac4:	080020a9 	.word	0x080020a9
 8001ac8:	20000818 	.word	0x20000818
 8001acc:	0800f7d8 	.word	0x0800f7d8
 8001ad0:	0800214d 	.word	0x0800214d
 8001ad4:	2000081c 	.word	0x2000081c
 8001ad8:	0800f7fc 	.word	0x0800f7fc
 8001adc:	08002219 	.word	0x08002219
 8001ae0:	20000820 	.word	0x20000820

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b094      	sub	sp, #80	; 0x50
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	2230      	movs	r2, #48	; 0x30
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00c ff94 	bl	800ea20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <SystemClock_Config+0xcc>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b30:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <SystemClock_Config+0xd0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b5c:	23a8      	movs	r3, #168	; 0xa8
 8001b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b64:	2307      	movs	r3, #7
 8001b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b68:	f107 0320 	add.w	r3, r7, #32
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fd79 	bl	8005664 <HAL_RCC_OscConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b78:	f000 fb7e 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 ffdb 	bl	8005b54 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ba4:	f000 fb68 	bl	8002278 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3750      	adds	r7, #80	; 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <MX_I2C1_Init+0x54>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_I2C1_Init+0x58>)
 8001bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_I2C1_Init+0x50>)
 8001bf6:	f001 faf9 	bl	80031ec <HAL_I2C_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c00:	f000 fb3a 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000678 	.word	0x20000678
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	000186a0 	.word	0x000186a0

08001c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c1a:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <MX_SPI1_Init+0x6c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c4a:	2218      	movs	r2, #24
 8001c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c62:	220a      	movs	r2, #10
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_SPI1_Init+0x68>)
 8001c68:	f004 f9b0 	bl	8005fcc <HAL_SPI_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001c72:	f000 fb01 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200006cc 	.word	0x200006cc
 8001c80:	40013000 	.word	0x40013000

08001c84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <MX_SPI2_Init+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cd6:	f004 f979 	bl	8005fcc <HAL_SPI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ce0:	f000 faca 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000724 	.word	0x20000724
 8001cec:	40003800 	.word	0x40003800

08001cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d2a:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d38:	2231      	movs	r2, #49	; 0x31
 8001d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d48:	4823      	ldr	r0, [pc, #140]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d4a:	f004 fd71 	bl	8006830 <HAL_TIM_Base_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d54:	f000 fa90 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d62:	4619      	mov	r1, r3
 8001d64:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d66:	f005 f9cf 	bl	8007108 <HAL_TIM_ConfigClockSource>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d70:	f000 fa82 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d76:	f004 fe8f 	bl	8006a98 <HAL_TIM_PWM_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d80:	f000 fa7a 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	4619      	mov	r1, r3
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001d94:	f005 fd74 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d9e:	f000 fa6b 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da2:	2360      	movs	r3, #96	; 0x60
 8001da4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001da6:	2318      	movs	r3, #24
 8001da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2208      	movs	r2, #8
 8001db6:	4619      	mov	r1, r3
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001dba:	f005 f8e3 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dc4:	f000 fa58 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM2_Init+0xe8>)
 8001dca:	f000 fdc1 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001dce:	bf00      	nop
 8001dd0:	3738      	adds	r7, #56	; 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000077c 	.word	0x2000077c

08001ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <MX_TIM3_Init+0x98>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e00:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001e04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e22:	f004 fd05 	bl	8006830 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e2c:	f000 fa24 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e3e:	f005 f963 	bl	8007108 <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e48:	f000 fa16 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_TIM3_Init+0x94>)
 8001e5a:	f005 fd11 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e64:	f000 fa08 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200007c4 	.word	0x200007c4
 8001e74:	40000400 	.word	0x40000400

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <MX_GPIO_Init+0xdc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ee8:	481b      	ldr	r0, [pc, #108]	; (8001f58 <MX_GPIO_Init+0xe0>)
 8001eea:	f001 f965 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2122      	movs	r1, #34	; 0x22
 8001ef2:	481a      	ldr	r0, [pc, #104]	; (8001f5c <MX_GPIO_Init+0xe4>)
 8001ef4:	f001 f960 	bl	80031b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_GPIO_Init+0xe0>)
 8001f0c:	f000 ffb8 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8001f10:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4619      	mov	r1, r3
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <MX_GPIO_Init+0xe0>)
 8001f2a:	f000 ffa9 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8001f2e:	2322      	movs	r3, #34	; 0x22
 8001f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_GPIO_Init+0xe4>)
 8001f46:	f000 ff9b 	bl	8002e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400

08001f60 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f68:	f00c f828 	bl	800dfbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <Start_Init+0x7c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00a fa6b 	bl	800c44c <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <Start_Init+0x80>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00a fa66 	bl	800c44c <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <Start_Init+0x84>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00a fa61 	bl	800c44c <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <Start_Init+0x88>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00a fa5c 	bl	800c44c <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <Start_Init+0x8c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f00a fa57 	bl	800c44c <vTaskSuspend>

    MFRC_INIT();
 8001f9e:	f7fe fc1b 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001fa2:	f7fe fbd1 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 8001fa6:	f7fe ff27 	bl	8000df8 <OLED_INIT>
    OLED_Print(TC);
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <Start_Init+0x90>)
 8001fac:	f7ff f869 	bl	8001082 <OLED_Print>
    MEM_INIT();
 8001fb0:	f7ff fb26 	bl	8001600 <MEM_INIT>

    //read = read_card_entry(0);
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8001fb4:	bf00      	nop
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <Start_Init+0x94>)
 8001fba:	f001 f8e5 	bl	8003188 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f8      	bne.n	8001fb6 <Start_Init+0x56>
    vTaskResume(HomeHandle);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <Start_Init+0x84>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00a fae7 	bl	800c59c <vTaskResume>
    osDelay(10);
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f009 f9c9 	bl	800b366 <osDelay>
    vTaskSuspend(NULL);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f00a fa39 	bl	800c44c <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8001fda:	e7c7      	b.n	8001f6c <Start_Init+0xc>
 8001fdc:	20000810 	.word	0x20000810
 8001fe0:	20000814 	.word	0x20000814
 8001fe4:	20000818 	.word	0x20000818
 8001fe8:	2000081c 	.word	0x2000081c
 8001fec:	20000820 	.word	0x20000820
 8001ff0:	20000400 	.word	0x20000400
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002000:	201c      	movs	r0, #28
 8002002:	f00c fcef 	bl	800e9e4 <malloc>
 8002006:	4603      	mov	r3, r0
 8002008:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 8002012:	f7fe fb5f 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 800201c:	2100      	movs	r1, #0
 800201e:	4814      	ldr	r0, [pc, #80]	; (8002070 <StartReadCard+0x78>)
 8002020:	f7ff f8fa 	bl	8001218 <OLED_SCREEN>
		ranonce++;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fdab 	bl	8000b88 <UL_readcard>
 8002032:	4603      	mov	r3, r0
 8002034:	2bcc      	cmp	r3, #204	; 0xcc
 8002036:	d10d      	bne.n	8002054 <StartReadCard+0x5c>
			BUZZ();
 8002038:	f7ff fc7c 	bl	8001934 <BUZZ>
			MFRC_ANTOFF();
 800203c:	f7fe fb84 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <StartReadCard+0x7c>)
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	f009 fc40 	bl	800b8d0 <xQueueGenericSend>
			suspend = 1;
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d1d9      	bne.n	800200e <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <StartReadCard+0x80>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f00a fa9c 	bl	800c59c <vTaskResume>
		ranonce = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002068:	2000      	movs	r0, #0
 800206a:	f00a f9ef 	bl	800c44c <vTaskSuspend>
  {
 800206e:	e7ce      	b.n	800200e <StartReadCard+0x16>
 8002070:	0800f8a0 	.word	0x0800f8a0
 8002074:	20000824 	.word	0x20000824
 8002078:	2000081c 	.word	0x2000081c

0800207c <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 800208e:	2100      	movs	r1, #0
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <StartWriteCard+0x28>)
 8002092:	f7ff f8c1 	bl	8001218 <OLED_SCREEN>
	  	ranonce++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f009 f962 	bl	800b366 <osDelay>
	  if (ranonce == 0){
 80020a2:	e7f1      	b.n	8002088 <StartWriteCard+0xc>
 80020a4:	0800f8c8 	.word	0x0800f8c8

080020a8 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 80020c2:	2100      	movs	r1, #0
 80020c4:	481d      	ldr	r0, [pc, #116]	; (800213c <StartHome+0x94>)
 80020c6:	f7ff f8a7 	bl	8001218 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2201      	movs	r2, #1
 80020d0:	4619      	mov	r1, r3
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <StartHome+0x94>)
 80020d4:	f7ff f902 	bl	80012dc <OLED_SELECT>
		  ranonce++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	f107 010c 	add.w	r1, r7, #12
 80020e6:	2301      	movs	r3, #1
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2306      	movs	r3, #6
 80020ec:	4813      	ldr	r0, [pc, #76]	; (800213c <StartHome+0x94>)
 80020ee:	f7ff fc33 	bl	8001958 <choose>
	  if (suspend == 1) {
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d1df      	bne.n	80020b8 <StartHome+0x10>
		switch(count) {
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d012      	beq.n	8002124 <StartHome+0x7c>
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d816      	bhi.n	8002130 <StartHome+0x88>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <StartHome+0x64>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d006      	beq.n	8002118 <StartHome+0x70>
 800210a:	e011      	b.n	8002130 <StartHome+0x88>
			case 0:
				vTaskResume(ReadCardHandle);
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <StartHome+0x98>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f00a fa43 	bl	800c59c <vTaskResume>
				break;
 8002116:	e00b      	b.n	8002130 <StartHome+0x88>
			case 1:
				vTaskResume(WriteCardHandle);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <StartHome+0x9c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f00a fa3d 	bl	800c59c <vTaskResume>
				break;
 8002122:	e005      	b.n	8002130 <StartHome+0x88>
			case 2:
				vTaskResume(ShowFilesHandle);
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <StartHome+0xa0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f00a fa37 	bl	800c59c <vTaskResume>
				break;
 800212e:	bf00      	nop
		}
		ranonce = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002134:	2000      	movs	r0, #0
 8002136:	f00a f989 	bl	800c44c <vTaskSuspend>
  {
 800213a:	e7bd      	b.n	80020b8 <StartHome+0x10>
 800213c:	0800f88c 	.word	0x0800f88c
 8002140:	20000810 	.word	0x20000810
 8002144:	20000814 	.word	0x20000814
 8002148:	20000820 	.word	0x20000820

0800214c <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
	 int ranonce = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d131      	bne.n	80021ca <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8002166:	bf00      	nop
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <CardFoundStart+0xc0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f107 0110 	add.w	r1, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f009 fd46 	bl	800bc04 <xQueueReceive>
 8002178:	4603      	mov	r3, r0
 800217a:	2b01      	cmp	r3, #1
 800217c:	d1f4      	bne.n	8002168 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	791b      	ldrb	r3, [r3, #4]
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe fd2d 	bl	8000be8 <uid_tostring>
 800218e:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8002190:	2100      	movs	r1, #0
 8002192:	481f      	ldr	r0, [pc, #124]	; (8002210 <CardFoundStart+0xc4>)
 8002194:	f7ff f840 	bl	8001218 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, UID_LOC, uid_str);
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	2101      	movs	r1, #1
 800219c:	481c      	ldr	r0, [pc, #112]	; (8002210 <CardFoundStart+0xc4>)
 800219e:	f7ff f874 	bl	800128a <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, CARDTYPE_LOC, read_card->type);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	461a      	mov	r2, r3
 80021a8:	2102      	movs	r1, #2
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <CardFoundStart+0xc4>)
 80021ac:	f7ff f86d 	bl	800128a <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	4815      	ldr	r0, [pc, #84]	; (8002210 <CardFoundStart+0xc4>)
 80021ba:	f7ff f88f 	bl	80012dc <OLED_SELECT>
		ranonce++;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 80021c4:	69b8      	ldr	r0, [r7, #24]
 80021c6:	f00c fc15 	bl	800e9f4 <free>
	}

	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 80021ca:	f107 0214 	add.w	r2, r7, #20
 80021ce:	f107 010c 	add.w	r1, r7, #12
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2302      	movs	r3, #2
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <CardFoundStart+0xc4>)
 80021da:	f7ff fbbd 	bl	8001958 <choose>
 	if (suspend == 1) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d1bb      	bne.n	800215c <CardFoundStart+0x10>
 		vTaskResume(HomeHandle);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <CardFoundStart+0xc8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00a f9d7 	bl	800c59c <vTaskResume>
 		ranonce = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 		count = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 		if (count == 0) {
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <CardFoundStart+0xb8>
 			enter_card(read_card);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f83f 	bl	8002282 <enter_card>
 		}
 		vTaskSuspend(NULL);
 8002204:	2000      	movs	r0, #0
 8002206:	f00a f921 	bl	800c44c <vTaskSuspend>
  {
 800220a:	e7a7      	b.n	800215c <CardFoundStart+0x10>
 800220c:	20000824 	.word	0x20000824
 8002210:	0800f8b4 	.word	0x0800f8b4
 8002214:	20000818 	.word	0x20000818

08002218 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
  int count = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  int ranonce = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1fc      	bne.n	8002228 <StartShowFiles+0x10>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 800222e:	2100      	movs	r1, #0
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <StartShowFiles+0x38>)
 8002232:	f7fe fff1 	bl	8001218 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_NORESTORE);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <StartShowFiles+0x38>)
 800223c:	f7ff f84e 	bl	80012dc <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8002240:	2100      	movs	r1, #0
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <StartShowFiles+0x38>)
 8002244:	f7ff f8d6 	bl	80013f4 <OLED_display_files>
		  ranonce++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 800224e:	e7eb      	b.n	8002228 <StartShowFiles+0x10>
 8002250:	0800f8dc 	.word	0x0800f8dc

08002254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002266:	f000 fce5 	bl	8002c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40000c00 	.word	0x40000c00

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x8>

08002282 <enter_card>:
 * Enter a card into the file system
 *
 * @param card - Card to store
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card) {
 8002282:	b5b0      	push	{r4, r5, r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	uint16_t free_block = (uint16_t)mem_find_free_block();
 800228a:	f7ff fb2b 	bl	80018e4 <mem_find_free_block>
 800228e:	4603      	mov	r3, r0
 8002290:	81fb      	strh	r3, [r7, #14]
	block_erase(free_block); //Erase entire block ready for new data
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f97b 	bl	8001590 <block_erase>
	enter_metadata(card, free_block);
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f83f 	bl	8002322 <enter_metadata>

	if (MEM_WRITE(free_block + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	3301      	adds	r3, #1
 80022a8:	b29c      	uxth	r4, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689d      	ldr	r5, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd ff94 	bl	80001e0 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	462a      	mov	r2, r5
 80022bc:	2100      	movs	r1, #0
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff f9ba 	bl	8001638 <MEM_WRITE>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <enter_card+0x4c>
		return RFS_WRITE_ERROR;
 80022ca:	2304      	movs	r3, #4
 80022cc:	e025      	b.n	800231a <enter_card+0x98>
	}
	if (MEM_WRITE(free_block + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	3301      	adds	r3, #1
 80022d2:	b29c      	uxth	r4, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ff81 	bl	80001e0 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	b299      	uxth	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff f9a4 	bl	8001638 <MEM_WRITE>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <enter_card+0x78>
		return RFS_WRITE_ERROR;
 80022f6:	2304      	movs	r3, #4
 80022f8:	e00f      	b.n	800231a <enter_card+0x98>
	}
	if (MEM_WRITE(free_block + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	3302      	adds	r3, #2
 80022fe:	b298      	uxth	r0, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8b1b      	ldrh	r3, [r3, #24]
 8002308:	2100      	movs	r1, #0
 800230a:	f7ff f995 	bl	8001638 <MEM_WRITE>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <enter_card+0x96>
		return RFS_WRITE_ERROR;
 8002314:	2304      	movs	r3, #4
 8002316:	e000      	b.n	800231a <enter_card+0x98>
	}

	return RFS_OK;
 8002318:	2300      	movs	r3, #0

}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bdb0      	pop	{r4, r5, r7, pc}

08002322 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_addr - Block start address
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_addr) {
 8002322:	b590      	push	{r4, r7, lr}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	8b1b      	ldrh	r3, [r3, #24]
 8002332:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7c1b      	ldrb	r3, [r3, #16]
 8002338:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fd ff4b 	bl	80001e0 <strlen>
 800234a:	4603      	mov	r3, r0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3303      	adds	r3, #3
 8002350:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002352:	7b3b      	ldrb	r3, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f00c fb45 	bl	800e9e4 <malloc>
 800235a:	4603      	mov	r3, r0
 800235c:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68dc      	ldr	r4, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fd ff3a 	bl	80001e0 <strlen>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4621      	mov	r1, r4
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f00c fb46 	bl	800ea04 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ff2f 	bl	80001e0 <strlen>
 8002382:	4602      	mov	r2, r0
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4413      	add	r3, r2
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd ff25 	bl	80001e0 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	3301      	adds	r3, #1
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	7b7a      	ldrb	r2, [r7, #13]
 80023a0:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fd ff1a 	bl	80001e0 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	3302      	adds	r3, #2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	4413      	add	r3, r2
 80023b4:	7bba      	ldrb	r2, [r7, #14]
 80023b6:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_addr, 0x0000, metadata, metasize) != HAL_OK) {
 80023b8:	7b3b      	ldrb	r3, [r7, #12]
 80023ba:	8878      	ldrh	r0, [r7, #2]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	2100      	movs	r1, #0
 80023c0:	f7ff f93a 	bl	8001638 <MEM_WRITE>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <enter_metadata+0xac>
		return RFS_WRITE_ERROR;
 80023ca:	2304      	movs	r3, #4
 80023cc:	e003      	b.n	80023d6 <enter_metadata+0xb4>
	}
	free(metadata);
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f00c fb10 	bl	800e9f4 <free>
	return RFS_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}

080023de <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80023e8:	201c      	movs	r0, #28
 80023ea:	f00c fafb 	bl	800e9e4 <malloc>
 80023ee:	4603      	mov	r3, r0
 80023f0:	60fb      	str	r3, [r7, #12]


	if (read_metadata(result, entry) != RFS_OK) {
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4619      	mov	r1, r3
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f81e 	bl	8002438 <read_metadata>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <read_card_entry+0x28>
		return NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	e014      	b.n	8002430 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	4619      	mov	r1, r3
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f881 	bl	8002512 <read_nameuid>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <read_card_entry+0x3c>
		return NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	e00a      	b.n	8002430 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	4619      	mov	r1, r3
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f8e2 	bl	80025e8 <read_cardcontents>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <read_card_entry+0x50>
		return NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <read_card_entry+0x52>
	}

	return result;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f8f5 	bl	8002638 <get_datasize>
 800244e:	4603      	mov	r3, r0
 8002450:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002452:	8afb      	ldrh	r3, [r7, #22]
 8002454:	4618      	mov	r0, r3
 8002456:	f00c fac5 	bl	800e9e4 <malloc>
 800245a:	4603      	mov	r3, r0
 800245c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(uint8_t)); //+1 for null
 800245e:	8afb      	ldrh	r3, [r7, #22]
 8002460:	3b02      	subs	r3, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f00c fabe 	bl	800e9e4 <malloc>
 8002468:	4603      	mov	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	019b      	lsls	r3, r3, #6
 8002470:	b298      	uxth	r0, r3
 8002472:	8afb      	ldrh	r3, [r7, #22]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	2100      	movs	r1, #0
 8002478:	f7ff f96e 	bl	8001758 <MEM_READPAGE>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <read_metadata+0x54>
		free(metadata);
 8002482:	6938      	ldr	r0, [r7, #16]
 8002484:	f00c fab6 	bl	800e9f4 <free>
		return RFS_READ_ERROR;
 8002488:	2305      	movs	r3, #5
 800248a:	e03e      	b.n	800250a <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2bff      	cmp	r3, #255	; 0xff
 8002492:	d104      	bne.n	800249e <read_metadata+0x66>
		free(metadata);
 8002494:	6938      	ldr	r0, [r7, #16]
 8002496:	f00c faad 	bl	800e9f4 <free>
		return RFS_NO_CARD;
 800249a:	2301      	movs	r3, #1
 800249c:	e035      	b.n	800250a <read_metadata+0xd2>
	}
	memcpy(type, metadata, metadata_size - 3);
 800249e:	8afb      	ldrh	r3, [r7, #22]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6939      	ldr	r1, [r7, #16]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f00c faac 	bl	800ea04 <memcpy>
	type[metadata_size - 3] = '\0';
 80024ac:	8afb      	ldrh	r3, [r7, #22]
 80024ae:	3b03      	subs	r3, #3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80024be:	8afb      	ldrh	r3, [r7, #22]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80024ce:	8afb      	ldrh	r3, [r7, #22]
 80024d0:	3b02      	subs	r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80024dc:	8afb      	ldrh	r3, [r7, #22]
 80024de:	3b01      	subs	r3, #1
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d104      	bne.n	80024f4 <read_metadata+0xbc>
		free(metadata);
 80024ea:	6938      	ldr	r0, [r7, #16]
 80024ec:	f00c fa82 	bl	800e9f4 <free>
		return RFS_CARD_PROTECTED;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e00a      	b.n	800250a <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80024f4:	8afb      	ldrh	r3, [r7, #22]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8002502:	6938      	ldr	r0, [r7, #16]
 8002504:	f00c fa76 	bl	800e9f4 <free>

	return RFS_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	2101      	movs	r1, #1
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f888 	bl	8002638 <get_datasize>
 8002528:	4603      	mov	r3, r0
 800252a:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	4618      	mov	r0, r3
 8002530:	f00c fa58 	bl	800e9e4 <malloc>
 8002534:	4603      	mov	r3, r0
 8002536:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8002538:	8afb      	ldrh	r3, [r7, #22]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	7912      	ldrb	r2, [r2, #4]
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	3301      	adds	r3, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f00c fa4e 	bl	800e9e4 <malloc>
 8002548:	4603      	mov	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f00c fa47 	bl	800e9e4 <malloc>
 8002556:	4603      	mov	r3, r0
 8002558:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	b29b      	uxth	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	b298      	uxth	r0, r3
 8002564:	8afb      	ldrh	r3, [r7, #22]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	2100      	movs	r1, #0
 800256a:	f7ff f8f5 	bl	8001758 <MEM_READPAGE>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <read_nameuid+0x6c>
		free(raw_data);
 8002574:	6938      	ldr	r0, [r7, #16]
 8002576:	f00c fa3d 	bl	800e9f4 <free>
		return RFS_READ_ERROR;
 800257a:	2305      	movs	r3, #5
 800257c:	e030      	b.n	80025e0 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2bff      	cmp	r3, #255	; 0xff
 8002584:	d104      	bne.n	8002590 <read_nameuid+0x7e>
		free(raw_data);
 8002586:	6938      	ldr	r0, [r7, #16]
 8002588:	f00c fa34 	bl	800e9f4 <free>
		return RFS_NO_CARD;
 800258c:	2301      	movs	r3, #1
 800258e:	e027      	b.n	80025e0 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8002590:	8afb      	ldrh	r3, [r7, #22]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	7912      	ldrb	r2, [r2, #4]
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	461a      	mov	r2, r3
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f00c fa31 	bl	800ea04 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80025a2:	8afb      	ldrh	r3, [r7, #22]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	7912      	ldrb	r2, [r2, #4]
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7fd fe10 	bl	80001e0 <strlen>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1899      	adds	r1, r3, r2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68b8      	ldr	r0, [r7, #8]
 80025ce:	f00c fa19 	bl	800ea04 <memcpy>
	result->uid = uid;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80025d8:	6938      	ldr	r0, [r7, #16]
 80025da:	f00c fa0b 	bl	800e9f4 <free>

	return RFS_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8b1b      	ldrh	r3, [r3, #24]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00c f9f3 	bl	800e9e4 <malloc>
 80025fe:	4603      	mov	r3, r0
 8002600:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	b29b      	uxth	r3, r3
 8002608:	3302      	adds	r3, #2
 800260a:	b298      	uxth	r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8b1b      	ldrh	r3, [r3, #24]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	2100      	movs	r1, #0
 8002614:	f7ff f8a0 	bl	8001758 <MEM_READPAGE>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <read_cardcontents+0x40>
		free(contents);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f00c f9e8 	bl	800e9f4 <free>
		return RFS_READ_ERROR;
 8002624:	2305      	movs	r3, #5
 8002626:	e003      	b.n	8002630 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	460a      	mov	r2, r1
 8002642:	80fb      	strh	r3, [r7, #6]
 8002644:	4613      	mov	r3, r2
 8002646:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 800264c:	2300      	movs	r3, #0
 800264e:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002650:	e014      	b.n	800267c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	b29a      	uxth	r2, r3
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4413      	add	r3, r2
 800265e:	b298      	uxth	r0, r3
 8002660:	f107 020d 	add.w	r2, r7, #13
 8002664:	89f9      	ldrh	r1, [r7, #14]
 8002666:	2301      	movs	r3, #1
 8002668:	f7ff f876 	bl	8001758 <MEM_READPAGE>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8002672:	2300      	movs	r3, #0
 8002674:	e008      	b.n	8002688 <get_datasize+0x50>
		}
		size++;
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	3301      	adds	r3, #1
 800267a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 800267c:	7b7b      	ldrb	r3, [r7, #13]
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d1e7      	bne.n	8002652 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	3b01      	subs	r3, #1
 8002686:	b29b      	uxth	r3, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	Card* work;

	work = read_card_entry(0);
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff fea0 	bl	80023de <read_card_entry>
 800269e:	60f8      	str	r0, [r7, #12]
	result[0] = malloc(strlen(work->name) + 1);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fd9b 	bl	80001e0 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	3301      	adds	r3, #1
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00c f998 	bl	800e9e4 <malloc>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
	memcpy(result[0], work->name, strlen(work->name));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681c      	ldr	r4, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689d      	ldr	r5, [r3, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fd89 	bl	80001e0 <strlen>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4629      	mov	r1, r5
 80026d4:	4620      	mov	r0, r4
 80026d6:	f00c f995 	bl	800ea04 <memcpy>
	result[strlen(work->name)] = '\0';
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd7e 	bl	80001e0 <strlen>
 80026e4:	4603      	mov	r3, r0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]


	free(work);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f00c f97f 	bl	800e9f4 <free>
	return RFS_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdb0      	pop	{r4, r5, r7, pc}

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_MspInit+0x54>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_MspInit+0x54>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_MspInit+0x54>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_MspInit+0x54>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_MspInit+0x54>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_MspInit+0x54>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	210f      	movs	r1, #15
 8002742:	f06f 0001 	mvn.w	r0, #1
 8002746:	f000 fb71 	bl	8002e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_I2C_MspInit+0x84>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d12b      	bne.n	80027d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279a:	2312      	movs	r3, #18
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a6:	2304      	movs	r3, #4
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <HAL_I2C_MspInit+0x8c>)
 80027b2:	f000 fb65 	bl	8002e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 80027c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_I2C_MspInit+0x88>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40005400 	.word	0x40005400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020400 	.word	0x40020400

080027e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a32      	ldr	r2, [pc, #200]	; (80028d0 <HAL_SPI_MspInit+0xe8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d12c      	bne.n	8002864 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002842:	23a0      	movs	r3, #160	; 0xa0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002852:	2305      	movs	r3, #5
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	481e      	ldr	r0, [pc, #120]	; (80028d8 <HAL_SPI_MspInit+0xf0>)
 800285e:	f000 fb0f 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002862:	e031      	b.n	80028c8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_SPI_MspInit+0xf4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12c      	bne.n	80028c8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_SPI_MspInit+0xec>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80028a6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028b8:	2305      	movs	r3, #5
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <HAL_SPI_MspInit+0xf8>)
 80028c4:	f000 fadc 	bl	8002e80 <HAL_GPIO_Init>
}
 80028c8:	bf00      	nop
 80028ca:	3730      	adds	r7, #48	; 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013000 	.word	0x40013000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40003800 	.word	0x40003800
 80028e0:	40020400 	.word	0x40020400

080028e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002912:	e012      	b.n	800293a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_TIM_Base_MspInit+0x68>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10d      	bne.n	800293a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_TIM_Base_MspInit+0x64>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40000400 	.word	0x40000400

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d11d      	bne.n	80029ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800298e:	2304      	movs	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4619      	mov	r1, r3
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 80029aa:	f000 fa69 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_InitTick+0xe4>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <HAL_InitTick+0xe4>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6413      	str	r3, [r2, #64]	; 0x40
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_InitTick+0xe4>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ec:	f107 0210 	add.w	r2, r7, #16
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fab6 	bl	8005f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a06:	f003 fa9b 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8002a0a:	6378      	str	r0, [r7, #52]	; 0x34
 8002a0c:	e004      	b.n	8002a18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a0e:	f003 fa97 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8002a12:	4603      	mov	r3, r0
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <HAL_InitTick+0xe8>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	3b01      	subs	r3, #1
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_InitTick+0xec>)
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_InitTick+0xf0>)
 8002a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_InitTick+0xec>)
 8002a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a32:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_InitTick+0xec>)
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_InitTick+0xec>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_InitTick+0xec>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_InitTick+0xec>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002a4c:	4817      	ldr	r0, [pc, #92]	; (8002aac <HAL_InitTick+0xec>)
 8002a4e:	f003 feef 	bl	8006830 <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11b      	bne.n	8002a98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002a60:	4812      	ldr	r0, [pc, #72]	; (8002aac <HAL_InitTick+0xec>)
 8002a62:	f003 ffb7 	bl	80069d4 <HAL_TIM_Base_Start_IT>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a74:	2032      	movs	r0, #50	; 0x32
 8002a76:	f000 f9f5 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d808      	bhi.n	8002a92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002a80:	2200      	movs	r2, #0
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	2032      	movs	r0, #50	; 0x32
 8002a86:	f000 f9d1 	bl	8002e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_InitTick+0xf4>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e002      	b.n	8002a98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3738      	adds	r7, #56	; 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	20000828 	.word	0x20000828
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	200004fc 	.word	0x200004fc

08002ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <NMI_Handler+0x4>

08002abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <MemManage_Handler+0x4>

08002aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <BusFault_Handler+0x4>

08002ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <UsageFault_Handler+0x4>

08002ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM5_IRQHandler+0x10>)
 8002aea:	f004 f943 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000828 	.word	0x20000828

08002af8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <OTG_FS_IRQHandler+0x10>)
 8002afe:	f001 fc84 	bl	800440a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200064c8 	.word	0x200064c8

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <_sbrk+0x5c>)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <_sbrk+0x60>)
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <_sbrk+0x64>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <_sbrk+0x68>)
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b3c:	f00b ff28 	bl	800e990 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	220c      	movs	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e009      	b.n	8002b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <_sbrk+0x64>)
 8002b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20010000 	.word	0x20010000
 8002b6c:	00000400 	.word	0x00000400
 8002b70:	20000870 	.word	0x20000870
 8002b74:	20006c08 	.word	0x20006c08

08002b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <SystemInit+0x20>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <SystemInit+0x20>)
 8002b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb8:	4c0b      	ldr	r4, [pc, #44]	; (8002be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc6:	f7ff ffd7 	bl	8002b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bca:	f00b fee7 	bl	800e99c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bce:	f7fe ff11 	bl	80019f4 <main>
  bx  lr    
 8002bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bdc:	2000065c 	.word	0x2000065c
  ldr r2, =_sidata
 8002be0:	0800f94c 	.word	0x0800f94c
  ldr r2, =_sbss
 8002be4:	2000065c 	.word	0x2000065c
  ldr r4, =_ebss
 8002be8:	20006c04 	.word	0x20006c04

08002bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC_IRQHandler>
	...

08002bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_Init+0x40>)
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <HAL_Init+0x40>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <HAL_Init+0x40>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f000 f8fc 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f7ff fece 	bl	80029c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c24:	f7ff fd6c 	bl	8002700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00

08002c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_IncTick+0x20>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_IncTick+0x24>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_IncTick+0x24>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000500 	.word	0x20000500
 8002c58:	20000874 	.word	0x20000874

08002c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_GetTick+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000874 	.word	0x20000874

08002c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff ffee 	bl	8002c5c <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_Delay+0x44>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
  {
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000500 	.word	0x20000500

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff4c 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3e:	f7ff ff61 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	6978      	ldr	r0, [r7, #20]
 8002e4a:	f7ff ffb1 	bl	8002db0 <NVIC_EncodePriority>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff80 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff54 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e159      	b.n	8003150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 8148 	bne.w	800314a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d130      	bne.n	8002f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0201 	and.w	r2, r3, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d017      	beq.n	8002f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d123      	bne.n	8002fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a2 	beq.w	800314a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4a56      	ldr	r2, [pc, #344]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_GPIO_Init+0x2e8>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003022:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_GPIO_Init+0x2ec>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a49      	ldr	r2, [pc, #292]	; (8003170 <HAL_GPIO_Init+0x2f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x202>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a48      	ldr	r2, [pc, #288]	; (8003174 <HAL_GPIO_Init+0x2f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x1fe>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_GPIO_Init+0x2f8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x1fa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a46      	ldr	r2, [pc, #280]	; (800317c <HAL_GPIO_Init+0x2fc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x1f6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a45      	ldr	r2, [pc, #276]	; (8003180 <HAL_GPIO_Init+0x300>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x1f2>
 800306e:	2304      	movs	r3, #4
 8003070:	e008      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003072:	2307      	movs	r3, #7
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003076:	2303      	movs	r3, #3
 8003078:	e004      	b.n	8003084 <HAL_GPIO_Init+0x204>
 800307a:	2302      	movs	r3, #2
 800307c:	e002      	b.n	8003084 <HAL_GPIO_Init+0x204>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003082:	2300      	movs	r3, #0
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f002 0203 	and.w	r2, r2, #3
 800308a:	0092      	lsls	r2, r2, #2
 800308c:	4093      	lsls	r3, r2
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003094:	4935      	ldr	r1, [pc, #212]	; (800316c <HAL_GPIO_Init+0x2ec>)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_GPIO_Init+0x304>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030c6:	4a2f      	ldr	r2, [pc, #188]	; (8003184 <HAL_GPIO_Init+0x304>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <HAL_GPIO_Init+0x304>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f0:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_GPIO_Init+0x304>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <HAL_GPIO_Init+0x304>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800311a:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <HAL_GPIO_Init+0x304>)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_GPIO_Init+0x304>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_GPIO_Init+0x304>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3301      	adds	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	f67f aea2 	bls.w	8002e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40013800 	.word	0x40013800
 8003170:	40020000 	.word	0x40020000
 8003174:	40020400 	.word	0x40020400
 8003178:	40020800 	.word	0x40020800
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40021000 	.word	0x40021000
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	e001      	b.n	80031aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
 80031c4:	4613      	mov	r3, r2
 80031c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031c8:	787b      	ldrb	r3, [r7, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031d4:	e003      	b.n	80031de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	041a      	lsls	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	619a      	str	r2, [r3, #24]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e12b      	b.n	8003456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff faa0 	bl	8002758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003250:	f002 fe76 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8003254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a81      	ldr	r2, [pc, #516]	; (8003460 <HAL_I2C_Init+0x274>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d807      	bhi.n	8003270 <HAL_I2C_Init+0x84>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a80      	ldr	r2, [pc, #512]	; (8003464 <HAL_I2C_Init+0x278>)
 8003264:	4293      	cmp	r3, r2
 8003266:	bf94      	ite	ls
 8003268:	2301      	movls	r3, #1
 800326a:	2300      	movhi	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e006      	b.n	800327e <HAL_I2C_Init+0x92>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a7d      	ldr	r2, [pc, #500]	; (8003468 <HAL_I2C_Init+0x27c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	bf94      	ite	ls
 8003278:	2301      	movls	r3, #1
 800327a:	2300      	movhi	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0e7      	b.n	8003456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a78      	ldr	r2, [pc, #480]	; (800346c <HAL_I2C_Init+0x280>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0c9b      	lsrs	r3, r3, #18
 8003290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_I2C_Init+0x274>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d802      	bhi.n	80032c0 <HAL_I2C_Init+0xd4>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3301      	adds	r3, #1
 80032be:	e009      	b.n	80032d4 <HAL_I2C_Init+0xe8>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_I2C_Init+0x284>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	3301      	adds	r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	495c      	ldr	r1, [pc, #368]	; (8003460 <HAL_I2C_Init+0x274>)
 80032f0:	428b      	cmp	r3, r1
 80032f2:	d819      	bhi.n	8003328 <HAL_I2C_Init+0x13c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e59      	subs	r1, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003302:	1c59      	adds	r1, r3, #1
 8003304:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003308:	400b      	ands	r3, r1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_I2C_Init+0x138>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1e59      	subs	r1, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fbb1 f3f3 	udiv	r3, r1, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003322:	e051      	b.n	80033c8 <HAL_I2C_Init+0x1dc>
 8003324:	2304      	movs	r3, #4
 8003326:	e04f      	b.n	80033c8 <HAL_I2C_Init+0x1dc>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HAL_I2C_Init+0x168>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	440b      	add	r3, r1
 800333e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e012      	b.n	800337a <HAL_I2C_Init+0x18e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e58      	subs	r0, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	0099      	lsls	r1, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	fbb0 f3f3 	udiv	r3, r0, r3
 800336a:	3301      	adds	r3, #1
 800336c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Init+0x196>
 800337e:	2301      	movs	r3, #1
 8003380:	e022      	b.n	80033c8 <HAL_I2C_Init+0x1dc>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10e      	bne.n	80033a8 <HAL_I2C_Init+0x1bc>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e58      	subs	r0, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	440b      	add	r3, r1
 8003398:	fbb0 f3f3 	udiv	r3, r0, r3
 800339c:	3301      	adds	r3, #1
 800339e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	e00f      	b.n	80033c8 <HAL_I2C_Init+0x1dc>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	6809      	ldr	r1, [r1, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6911      	ldr	r1, [r2, #16]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68d2      	ldr	r2, [r2, #12]
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	430b      	orrs	r3, r1
 800340a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	000186a0 	.word	0x000186a0
 8003464:	001e847f 	.word	0x001e847f
 8003468:	003d08ff 	.word	0x003d08ff
 800346c:	431bde83 	.word	0x431bde83
 8003470:	10624dd3 	.word	0x10624dd3

08003474 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348e:	f7ff fbe5 	bl	8002c5c <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	f040 80d9 	bne.w	8003654 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2319      	movs	r3, #25
 80034a8:	2201      	movs	r2, #1
 80034aa:	496d      	ldr	r1, [pc, #436]	; (8003660 <HAL_I2C_Mem_Write+0x1ec>)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fc7f 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0cc      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Write+0x56>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0c5      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2221      	movs	r2, #33	; 0x21
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_I2C_Mem_Write+0x1f0>)
 8003530:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003532:	88f8      	ldrh	r0, [r7, #6]
 8003534:	893a      	ldrh	r2, [r7, #8]
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4603      	mov	r3, r0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fab6 	bl	8003ab4 <I2C_RequestMemoryWrite>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d052      	beq.n	80035f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e081      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fd00 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b04      	cmp	r3, #4
 8003568:	d107      	bne.n	800357a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d11b      	bne.n	80035f4 <HAL_I2C_Mem_Write+0x180>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d017      	beq.n	80035f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1aa      	bne.n	8003552 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fcec 	bl	8003fde <I2C_WaitOnBTFFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2b04      	cmp	r3, #4
 8003612:	d107      	bne.n	8003624 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e016      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000

08003668 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	460b      	mov	r3, r1
 800367c:	813b      	strh	r3, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003682:	f7ff faeb 	bl	8002c5c <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	f040 8208 	bne.w	8003aa6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2319      	movs	r3, #25
 800369c:	2201      	movs	r2, #1
 800369e:	497b      	ldr	r1, [pc, #492]	; (800388c <HAL_I2C_Mem_Read+0x224>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fb85 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
 80036ae:	e1fb      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_I2C_Mem_Read+0x56>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e1f4      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d007      	beq.n	80036e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2222      	movs	r2, #34	; 0x22
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a5b      	ldr	r2, [pc, #364]	; (8003890 <HAL_I2C_Mem_Read+0x228>)
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003726:	88f8      	ldrh	r0, [r7, #6]
 8003728:	893a      	ldrh	r2, [r7, #8]
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4603      	mov	r3, r0
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fa52 	bl	8003be0 <I2C_RequestMemoryRead>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e1b0      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d113      	bne.n	8003776 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e184      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	2b01      	cmp	r3, #1
 800377c:	d11b      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e164      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d11b      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	e144      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800380c:	e138      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b03      	cmp	r3, #3
 8003814:	f200 80f1 	bhi.w	80039fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b01      	cmp	r3, #1
 800381e:	d123      	bne.n	8003868 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fc1b 	bl	8004060 <I2C_WaitOnRXNEFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e139      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003866:	e10b      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	2b02      	cmp	r3, #2
 800386e:	d14e      	bne.n	800390e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	2200      	movs	r2, #0
 8003878:	4906      	ldr	r1, [pc, #24]	; (8003894 <HAL_I2C_Mem_Read+0x22c>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa98 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e10e      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
 800388a:	bf00      	nop
 800388c:	00100002 	.word	0x00100002
 8003890:	ffff0000 	.word	0xffff0000
 8003894:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	e0b8      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	2200      	movs	r2, #0
 8003916:	4966      	ldr	r1, [pc, #408]	; (8003ab0 <HAL_I2C_Mem_Read+0x448>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fa49 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0bf      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2200      	movs	r2, #0
 8003972:	494f      	ldr	r1, [pc, #316]	; (8003ab0 <HAL_I2C_Mem_Read+0x448>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa1b 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e091      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f8:	e042      	b.n	8003a80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fb2e 	bl	8004060 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e04c      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d118      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f47f aec2 	bne.w	800380e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	00010004 	.word	0x00010004

08003ab4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	813b      	strh	r3, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f960 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d103      	bne.n	8003b0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e05f      	b.n	8003bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b12:	897b      	ldrh	r3, [r7, #10]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	492d      	ldr	r1, [pc, #180]	; (8003bdc <I2C_RequestMemoryWrite+0x128>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f998 	bl	8003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e04c      	b.n	8003bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	6a39      	ldr	r1, [r7, #32]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fa02 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d107      	bne.n	8003b76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e02b      	b.n	8003bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b80:	893b      	ldrh	r3, [r7, #8]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	e021      	b.n	8003bd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b8c:	893b      	ldrh	r3, [r7, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f9dc 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d107      	bne.n	8003bc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e005      	b.n	8003bd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc6:	893b      	ldrh	r3, [r7, #8]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	00010002 	.word	0x00010002

08003be0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	813b      	strh	r3, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f8c2 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c40:	d103      	bne.n	8003c4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0aa      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	4952      	ldr	r1, [pc, #328]	; (8003dac <I2C_RequestMemoryRead+0x1cc>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f8fa 	bl	8003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e097      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f964 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d107      	bne.n	8003cb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e076      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbc:	893b      	ldrh	r3, [r7, #8]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	e021      	b.n	8003d0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc8:	893b      	ldrh	r3, [r7, #8]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	6a39      	ldr	r1, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f93e 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e050      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	6a39      	ldr	r1, [r7, #32]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f923 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d107      	bne.n	8003d34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e035      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f82b 	bl	8003db0 <I2C_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d103      	bne.n	8003d78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e013      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d7c:	897b      	ldrh	r3, [r7, #10]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	4906      	ldr	r1, [pc, #24]	; (8003dac <I2C_RequestMemoryRead+0x1cc>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f863 	bl	8003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	00010002 	.word	0x00010002

08003db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc0:	e025      	b.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d021      	beq.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe ff47 	bl	8002c5c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e023      	b.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10d      	bne.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	e00c      	b.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d0b6      	beq.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e6c:	e051      	b.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d123      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0204 	orr.w	r2, r3, #4
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e046      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d021      	beq.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe fec5 	bl	8002c5c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d116      	bne.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e020      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10c      	bne.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	43da      	mvns	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e00b      	b.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d18d      	bne.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f68:	e02d      	b.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8ce 	bl	800410c <I2C_IsAcknowledgeFailed>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e02d      	b.n	8003fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d021      	beq.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fe6b 	bl	8002c5c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e007      	b.n	8003fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d1ca      	bne.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fea:	e02d      	b.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f88d 	bl	800410c <I2C_IsAcknowledgeFailed>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e02d      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d021      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe fe2a 	bl	8002c5c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d1ca      	bne.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800406c:	e042      	b.n	80040f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d119      	bne.n	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e029      	b.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe fdd4 	bl	8002c5c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e007      	b.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d1b5      	bne.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d11b      	bne.n	800415c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800412c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800416a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416c:	b08f      	sub	sp, #60	; 0x3c
 800416e:	af0a      	add	r7, sp, #40	; 0x28
 8004170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e10f      	b.n	800439c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f00a f8f0 	bl	800e37c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2203      	movs	r2, #3
 80041a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 fcf7 	bl	8007bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	687e      	ldr	r6, [r7, #4]
 80041c8:	466d      	mov	r5, sp
 80041ca:	f106 0410 	add.w	r4, r6, #16
 80041ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041da:	e885 0003 	stmia.w	r5, {r0, r1}
 80041de:	1d33      	adds	r3, r6, #4
 80041e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e2:	6838      	ldr	r0, [r7, #0]
 80041e4:	f003 fbce 	bl	8007984 <USB_CoreInit>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0d0      	b.n	800439c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f003 fce5 	bl	8007bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
 800420a:	e04a      	b.n	80042a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	333d      	adds	r3, #61	; 0x3d
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	333c      	adds	r3, #60	; 0x3c
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	b298      	uxth	r0, r3
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3344      	adds	r3, #68	; 0x44
 8004248:	4602      	mov	r2, r0
 800424a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3340      	adds	r3, #64	; 0x40
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3348      	adds	r3, #72	; 0x48
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334c      	adds	r3, #76	; 0x4c
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3354      	adds	r3, #84	; 0x54
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	3301      	adds	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d3af      	bcc.n	800420c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e044      	b.n	800433c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042f4:	7bfa      	ldrb	r2, [r7, #15]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	3301      	adds	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3b5      	bcc.n	80042b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	687e      	ldr	r6, [r7, #4]
 800434e:	466d      	mov	r5, sp
 8004350:	f106 0410 	add.w	r4, r6, #16
 8004354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004360:	e885 0003 	stmia.w	r5, {r0, r1}
 8004364:	1d33      	adds	r3, r6, #4
 8004366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f003 fc7d 	bl	8007c68 <USB_DevInit>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e00d      	b.n	800439c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f004 fdcc 	bl	8008f32 <USB_DevDisconnect>

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_PCD_Start+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e020      	b.n	8004402 <HAL_PCD_Start+0x5e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d109      	bne.n	80043e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d005      	beq.n	80043e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fbcf 	bl	8007b8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fd7c 	bl	8008ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800440a:	b590      	push	{r4, r7, lr}
 800440c:	b08d      	sub	sp, #52	; 0x34
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 fe3a 	bl	800909a <USB_GetMode>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 848a 	bne.w	8004d42 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fd9e 	bl	8008f74 <USB_ReadInterrupts>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8480 	beq.w	8004d40 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f004 fd8b 	bl	8008f74 <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d107      	bne.n	8004478 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f002 0202 	and.w	r2, r2, #2
 8004476:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f004 fd79 	bl	8008f74 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b10      	cmp	r3, #16
 800448a:	d161      	bne.n	8004550 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0210 	bic.w	r2, r2, #16
 800449a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	3304      	adds	r3, #4
 80044ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	0c5b      	lsrs	r3, r3, #17
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d124      	bne.n	8004512 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d035      	beq.n	8004540 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6a38      	ldr	r0, [r7, #32]
 80044e8:	f004 fbb0 	bl	8008c4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f8:	441a      	add	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800450a:	441a      	add	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	621a      	str	r2, [r3, #32]
 8004510:	e016      	b.n	8004540 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	0c5b      	lsrs	r3, r3, #17
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	2b06      	cmp	r3, #6
 800451c:	d110      	bne.n	8004540 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004524:	2208      	movs	r2, #8
 8004526:	4619      	mov	r1, r3
 8004528:	6a38      	ldr	r0, [r7, #32]
 800452a:	f004 fb8f 	bl	8008c4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	441a      	add	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0210 	orr.w	r2, r2, #16
 800454e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fd0d 	bl	8008f74 <USB_ReadInterrupts>
 800455a:	4603      	mov	r3, r0
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004564:	f040 80a7 	bne.w	80046b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f004 fd12 	bl	8008f9a <USB_ReadDevAllOutEpInterrupt>
 8004576:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004578:	e099      	b.n	80046ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 808e 	beq.w	80046a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f004 fd36 	bl	8009002 <USB_ReadDevOutEPInterrupt>
 8004596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	2301      	movs	r3, #1
 80045b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fec2 	bl	8005340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	2308      	movs	r3, #8
 80045d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 ff98 	bl	8005510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	461a      	mov	r2, r3
 80045f8:	2310      	movs	r3, #16
 80045fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d030      	beq.n	8004668 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d109      	bne.n	8004626 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004624:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	3304      	adds	r3, #4
 800463a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	78db      	ldrb	r3, [r3, #3]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d108      	bne.n	8004656 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	b2db      	uxtb	r3, r3
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f009 ff8f 	bl	800e574 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	461a      	mov	r2, r3
 8004664:	2302      	movs	r3, #2
 8004666:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	2320      	movs	r3, #32
 8004682:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	3301      	adds	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af62 	bne.w	800457a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fc5a 	bl	8008f74 <USB_ReadInterrupts>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ca:	f040 80db 	bne.w	8004884 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f004 fc7b 	bl	8008fce <USB_ReadDevAllInEpInterrupt>
 80046d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046de:	e0cd      	b.n	800487c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80c2 	beq.w	8004870 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 fca1 	bl	800903e <USB_ReadDevInEPInterrupt>
 80046fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d057      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	2201      	movs	r2, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	69f9      	ldr	r1, [r7, #28]
 8004724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004728:	4013      	ands	r3, r2
 800472a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	2301      	movs	r3, #1
 800473c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d132      	bne.n	80047ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	334c      	adds	r3, #76	; 0x4c
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4403      	add	r3, r0
 8004766:	3348      	adds	r3, #72	; 0x48
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4419      	add	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4403      	add	r3, r0
 800477a:	334c      	adds	r3, #76	; 0x4c
 800477c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d113      	bne.n	80047ac <HAL_PCD_IRQHandler+0x3a2>
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3354      	adds	r3, #84	; 0x54
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047a4:	461a      	mov	r2, r3
 80047a6:	2101      	movs	r1, #1
 80047a8:	f004 fca8 	bl	80090fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f009 fe63 	bl	800e47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	461a      	mov	r2, r3
 80047d0:	2308      	movs	r3, #8
 80047d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	2310      	movs	r3, #16
 80047ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	461a      	mov	r2, r3
 8004808:	2340      	movs	r3, #64	; 0x40
 800480a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d023      	beq.n	800485e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004818:	6a38      	ldr	r0, [r7, #32]
 800481a:	f003 fb89 	bl	8007f30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3338      	adds	r3, #56	; 0x38
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	3304      	adds	r3, #4
 8004830:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	78db      	ldrb	r3, [r3, #3]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2200      	movs	r2, #0
 800483e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f009 fea6 	bl	800e598 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	2302      	movs	r3, #2
 800485c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fcdb 	bl	8005226 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	3301      	adds	r3, #1
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	f47f af2e 	bne.w	80046e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f004 fb73 	bl	8008f74 <USB_ReadInterrupts>
 800488e:	4603      	mov	r3, r0
 8004890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004898:	d122      	bne.n	80048e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d108      	bne.n	80048ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fec2 	bl	800564c <HAL_PCDEx_LPM_Callback>
 80048c8:	e002      	b.n	80048d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f009 fe44 	bl	800e558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f004 fb45 	bl	8008f74 <USB_ReadInterrupts>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	d112      	bne.n	800491c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d102      	bne.n	800490c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f009 fe00 	bl	800e50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800491a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f004 fb27 	bl	8008f74 <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	f040 80b7 	bne.w	8004aa2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2110      	movs	r1, #16
 800494e:	4618      	mov	r0, r3
 8004950:	f003 faee 	bl	8007f30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004958:	e046      	b.n	80049e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	461a      	mov	r2, r3
 8004968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800496c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800498c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	3301      	adds	r3, #1
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3b3      	bcc.n	800495a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1e:	f043 030b 	orr.w	r3, r3, #11
 8004a22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a34:	f043 030b 	orr.w	r3, r3, #11
 8004a38:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3a:	e015      	b.n	8004a68 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f043 030b 	orr.w	r3, r3, #11
 8004a66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f004 fb35 	bl	80090fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fa64 	bl	8008f74 <USB_ReadInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab6:	d124      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f004 fafa 	bl	80090b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f003 faaf 	bl	800802a <USB_GetDevSpeed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681c      	ldr	r4, [r3, #0]
 8004ad8:	f001 fa26 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8004adc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f002 ffae 	bl	8007a48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f009 fcee 	bl	800e4ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f004 fa34 	bl	8008f74 <USB_ReadInterrupts>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d10a      	bne.n	8004b2c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f009 fccb 	bl	800e4b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f002 0208 	and.w	r2, r2, #8
 8004b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fa1f 	bl	8008f74 <USB_ReadInterrupts>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3c:	2b80      	cmp	r3, #128	; 0x80
 8004b3e:	d122      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e014      	b.n	8004b7c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb27 	bl	80051c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	3301      	adds	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3e5      	bcc.n	8004b52 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f004 f9f2 	bl	8008f74 <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9a:	d13b      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	e02b      	b.n	8004bfa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3340      	adds	r3, #64	; 0x40
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d115      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da12      	bge.n	8004bf4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	333f      	adds	r3, #63	; 0x3f
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fae8 	bl	80051c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3ce      	bcc.n	8004ba2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 f9ab 	bl	8008f74 <USB_ReadInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c28:	d155      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e045      	b.n	8004cbc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d12e      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da2b      	bge.n	8004cb6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c6a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d121      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb2:	6053      	str	r3, [r2, #4]
            break;
 8004cb4:	e007      	b.n	8004cc6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3b4      	bcc.n	8004c30 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 f94a 	bl	8008f74 <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d10a      	bne.n	8004d02 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f009 fc65 	bl	800e5bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 f934 	bl	8008f74 <USB_ReadInterrupts>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d115      	bne.n	8004d42 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f009 fc55 	bl	800e5d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e000      	b.n	8004d42 <HAL_PCD_IRQHandler+0x938>
      return;
 8004d40:	bf00      	nop
    }
  }
}
 8004d42:	3734      	adds	r7, #52	; 0x34
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd90      	pop	{r4, r7, pc}

08004d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_PCD_SetAddress+0x1a>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e013      	b.n	8004d8a <HAL_PCD_SetAddress+0x42>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 f892 	bl	8008ea4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	4608      	mov	r0, r1
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	70fb      	strb	r3, [r7, #3]
 8004da4:	460b      	mov	r3, r1
 8004da6:	803b      	strh	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da0f      	bge.n	8004dd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	3338      	adds	r3, #56	; 0x38
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
 8004dd6:	e00f      	b.n	8004df8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 020f 	and.w	r2, r3, #15
 8004dde:	4613      	mov	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	3304      	adds	r3, #4
 8004df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e04:	883a      	ldrh	r2, [r7, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	78ba      	ldrb	r2, [r7, #2]
 8004e0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e22:	78bb      	ldrb	r3, [r7, #2]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d102      	bne.n	8004e2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_PCD_EP_Open+0xaa>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e00e      	b.n	8004e5a <HAL_PCD_EP_Open+0xc8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f003 f912 	bl	8008074 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004e58:	7afb      	ldrb	r3, [r7, #11]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da0f      	bge.n	8004e96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 020f 	and.w	r2, r3, #15
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	3338      	adds	r3, #56	; 0x38
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	705a      	strb	r2, [r3, #1]
 8004e94:	e00f      	b.n	8004eb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	3304      	adds	r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_PCD_EP_Close+0x6e>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e00e      	b.n	8004eee <HAL_PCD_EP_Close+0x8c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 f950 	bl	8008184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	7afb      	ldrb	r3, [r7, #11]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f38:	7afb      	ldrb	r3, [r7, #11]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d102      	bne.n	8004f52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f52:	7afb      	ldrb	r3, [r7, #11]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	f003 fc2f 	bl	80087cc <USB_EP0StartXfer>
 8004f6e:	e008      	b.n	8004f82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	f003 f9dd 	bl	800833c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 020f 	and.w	r2, r3, #15
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	3338      	adds	r3, #56	; 0x38
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	b2da      	uxtb	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d102      	bne.n	8005016 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	f003 fbcd 	bl	80087cc <USB_EP0StartXfer>
 8005032:	e008      	b.n	8005046 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6979      	ldr	r1, [r7, #20]
 8005042:	f003 f97b 	bl	800833c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d901      	bls.n	800506e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e050      	b.n	8005110 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800506e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da0f      	bge.n	8005096 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	3338      	adds	r3, #56	; 0x38
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	3304      	adds	r3, #4
 800508c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	705a      	strb	r2, [r3, #1]
 8005094:	e00d      	b.n	80050b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_PCD_EP_SetStall+0x82>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e01e      	b.n	8005110 <HAL_PCD_EP_SetStall+0xc0>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fe0b 	bl	8008cfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	b2d9      	uxtb	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005100:	461a      	mov	r2, r3
 8005102:	f003 fffb 	bl	80090fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d901      	bls.n	8005136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e042      	b.n	80051bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	da0f      	bge.n	800515e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	f003 020f 	and.w	r2, r3, #15
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3338      	adds	r3, #56	; 0x38
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	705a      	strb	r2, [r3, #1]
 800515c:	e00f      	b.n	800517e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_PCD_EP_ClrStall+0x86>
 800519a:	2302      	movs	r3, #2
 800519c:	e00e      	b.n	80051bc <HAL_PCD_EP_ClrStall+0xa4>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f003 fe13 	bl	8008dd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da0c      	bge.n	80051f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	3338      	adds	r3, #56	; 0x38
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	3304      	adds	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e00c      	b.n	800520c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	3304      	adds	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	4618      	mov	r0, r3
 8005214:	f003 fc32 	bl	8008a7c <USB_EPStopXfer>
 8005218:	4603      	mov	r3, r0
 800521a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800521c:	7afb      	ldrb	r3, [r7, #11]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b08a      	sub	sp, #40	; 0x28
 800522a:	af02      	add	r7, sp, #8
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	3338      	adds	r3, #56	; 0x38
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	3304      	adds	r3, #4
 800524c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	429a      	cmp	r2, r3
 8005258:	d901      	bls.n	800525e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e06c      	b.n	8005338 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	429a      	cmp	r2, r3
 8005272:	d902      	bls.n	800527a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3303      	adds	r3, #3
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005282:	e02b      	b.n	80052dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	429a      	cmp	r2, r3
 8005298:	d902      	bls.n	80052a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3303      	adds	r3, #3
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6919      	ldr	r1, [r3, #16]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f003 fc86 	bl	8008bd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	441a      	add	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d809      	bhi.n	8005306 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1a      	ldr	r2, [r3, #32]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d203      	bcs.n	8005306 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1be      	bne.n	8005284 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	429a      	cmp	r2, r3
 8005310:	d811      	bhi.n	8005336 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2201      	movs	r2, #1
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	43db      	mvns	r3, r3
 800532c:	6939      	ldr	r1, [r7, #16]
 800532e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005332:	4013      	ands	r3, r2
 8005334:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	333c      	adds	r3, #60	; 0x3c
 8005358:	3304      	adds	r3, #4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d17b      	bne.n	800546e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4a61      	ldr	r2, [pc, #388]	; (8005508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f240 80b9 	bls.w	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80b3 	beq.w	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a8:	6093      	str	r3, [r2, #8]
 80053aa:	e0a7      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	461a      	mov	r2, r3
 80053c4:	2320      	movs	r3, #32
 80053c6:	6093      	str	r3, [r2, #8]
 80053c8:	e098      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8093 	bne.w	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d90f      	bls.n	80053fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	e07e      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	440b      	add	r3, r1
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d114      	bne.n	8005460 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005448:	461a      	mov	r2, r3
 800544a:	2101      	movs	r1, #1
 800544c:	f003 fe56 	bl	80090fc <USB_EP0_OutStart>
 8005450:	e006      	b.n	8005460 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	441a      	add	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f008 ffee 	bl	800e448 <HAL_PCD_DataOutStageCallback>
 800546c:	e046      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d124      	bne.n	80054c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	e032      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	461a      	mov	r2, r3
 80054ae:	2320      	movs	r3, #32
 80054b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f008 ffc5 	bl	800e448 <HAL_PCD_DataOutStageCallback>
 80054be:	e01d      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d114      	bne.n	80054f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054e8:	461a      	mov	r2, r3
 80054ea:	2100      	movs	r1, #0
 80054ec:	f003 fe06 	bl	80090fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f008 ffa6 	bl	800e448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	4f54300a 	.word	0x4f54300a
 800550c:	4f54310a 	.word	0x4f54310a

08005510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	333c      	adds	r3, #60	; 0x3c
 8005528:	3304      	adds	r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <PCD_EP_OutSetupPacket_int+0x88>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d90e      	bls.n	8005564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800554c:	2b00      	cmp	r3, #0
 800554e:	d009      	beq.n	8005564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f008 ff5d 	bl	800e424 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <PCD_EP_OutSetupPacket_int+0x88>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d90c      	bls.n	800558c <PCD_EP_OutSetupPacket_int+0x7c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d108      	bne.n	800558c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005584:	461a      	mov	r2, r3
 8005586:	2101      	movs	r1, #1
 8005588:	f003 fdb8 	bl	80090fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	4f54300a 	.word	0x4f54300a

0800559c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
 80055a8:	4613      	mov	r3, r2
 80055aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055ba:	883b      	ldrh	r3, [r7, #0]
 80055bc:	0419      	lsls	r1, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
 80055c8:	e028      	b.n	800561c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4413      	add	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]
 80055dc:	e00d      	b.n	80055fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	3340      	adds	r3, #64	; 0x40
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	3301      	adds	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	3b01      	subs	r3, #1
 8005600:	429a      	cmp	r2, r3
 8005602:	d3ec      	bcc.n	80055de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005604:	883b      	ldrh	r3, [r7, #0]
 8005606:	0418      	lsls	r0, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	3b01      	subs	r3, #1
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	4302      	orrs	r2, r0
 8005614:	3340      	adds	r3, #64	; 0x40
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e267      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d075      	beq.n	800576e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005682:	4b88      	ldr	r3, [pc, #544]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b04      	cmp	r3, #4
 800568c:	d00c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568e:	4b85      	ldr	r3, [pc, #532]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005696:	2b08      	cmp	r3, #8
 8005698:	d112      	bne.n	80056c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800569a:	4b82      	ldr	r3, [pc, #520]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a6:	d10b      	bne.n	80056c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a8:	4b7e      	ldr	r3, [pc, #504]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d05b      	beq.n	800576c <HAL_RCC_OscConfig+0x108>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d157      	bne.n	800576c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e242      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c8:	d106      	bne.n	80056d8 <HAL_RCC_OscConfig+0x74>
 80056ca:	4b76      	ldr	r3, [pc, #472]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a75      	ldr	r2, [pc, #468]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e01d      	b.n	8005714 <HAL_RCC_OscConfig+0xb0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x98>
 80056e2:	4b70      	ldr	r3, [pc, #448]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6f      	ldr	r2, [pc, #444]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6c      	ldr	r2, [pc, #432]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0xb0>
 80056fc:	4b69      	ldr	r3, [pc, #420]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a68      	ldr	r2, [pc, #416]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4b66      	ldr	r3, [pc, #408]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a65      	ldr	r2, [pc, #404]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 800570e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fd fa9e 	bl	8002c5c <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005724:	f7fd fa9a 	bl	8002c5c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e207      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b5b      	ldr	r3, [pc, #364]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0xc0>
 8005742:	e014      	b.n	800576e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005744:	f7fd fa8a 	bl	8002c5c <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800574c:	f7fd fa86 	bl	8002c5c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e1f3      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575e:	4b51      	ldr	r3, [pc, #324]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0xe8>
 800576a:	e000      	b.n	800576e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d063      	beq.n	8005842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800578e:	2b08      	cmp	r3, #8
 8005790:	d11c      	bne.n	80057cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005792:	4b44      	ldr	r3, [pc, #272]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579e:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_RCC_OscConfig+0x152>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d001      	beq.n	80057b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e1c7      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b6:	4b3b      	ldr	r3, [pc, #236]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4937      	ldr	r1, [pc, #220]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ca:	e03a      	b.n	8005842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d4:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <HAL_RCC_OscConfig+0x244>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fd fa3f 	bl	8002c5c <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fd fa3b 	bl	8002c5c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1a8      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005800:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4925      	ldr	r1, [pc, #148]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]
 8005814:	e015      	b.n	8005842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_RCC_OscConfig+0x244>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fd fa1e 	bl	8002c5c <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005824:	f7fd fa1a 	bl	8002c5c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e187      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d036      	beq.n	80058bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d016      	beq.n	8005884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <HAL_RCC_OscConfig+0x248>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fd f9fe 	bl	8002c5c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005864:	f7fd f9fa 	bl	8002c5c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e167      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_OscConfig+0x240>)
 8005878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x200>
 8005882:	e01b      	b.n	80058bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_OscConfig+0x248>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fd f9e7 	bl	8002c5c <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005890:	e00e      	b.n	80058b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005892:	f7fd f9e3 	bl	8002c5c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d907      	bls.n	80058b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e150      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
 80058a4:	40023800 	.word	0x40023800
 80058a8:	42470000 	.word	0x42470000
 80058ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80058b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ea      	bne.n	8005892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8097 	beq.w	80059f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ce:	4b81      	ldr	r3, [pc, #516]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	4b7d      	ldr	r3, [pc, #500]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	4a7c      	ldr	r2, [pc, #496]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ea:	4b7a      	ldr	r3, [pc, #488]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4b77      	ldr	r3, [pc, #476]	; (8005ad8 <HAL_RCC_OscConfig+0x474>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d118      	bne.n	8005938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005906:	4b74      	ldr	r3, [pc, #464]	; (8005ad8 <HAL_RCC_OscConfig+0x474>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a73      	ldr	r2, [pc, #460]	; (8005ad8 <HAL_RCC_OscConfig+0x474>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005912:	f7fd f9a3 	bl	8002c5c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fd f99f 	bl	8002c5c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e10c      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <HAL_RCC_OscConfig+0x474>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x2ea>
 8005940:	4b64      	ldr	r3, [pc, #400]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a63      	ldr	r2, [pc, #396]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	e01c      	b.n	8005988 <HAL_RCC_OscConfig+0x324>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b05      	cmp	r3, #5
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0x30c>
 8005956:	4b5f      	ldr	r3, [pc, #380]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a5e      	ldr	r2, [pc, #376]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 800595c:	f043 0304 	orr.w	r3, r3, #4
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
 8005962:	4b5c      	ldr	r3, [pc, #368]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	4a5b      	ldr	r2, [pc, #364]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	6713      	str	r3, [r2, #112]	; 0x70
 800596e:	e00b      	b.n	8005988 <HAL_RCC_OscConfig+0x324>
 8005970:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a57      	ldr	r2, [pc, #348]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	4a54      	ldr	r2, [pc, #336]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005982:	f023 0304 	bic.w	r3, r3, #4
 8005986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d015      	beq.n	80059bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005990:	f7fd f964 	bl	8002c5c <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005996:	e00a      	b.n	80059ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005998:	f7fd f960 	bl	8002c5c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e0cb      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ae:	4b49      	ldr	r3, [pc, #292]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0ee      	beq.n	8005998 <HAL_RCC_OscConfig+0x334>
 80059ba:	e014      	b.n	80059e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059bc:	f7fd f94e 	bl	8002c5c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c2:	e00a      	b.n	80059da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c4:	f7fd f94a 	bl	8002c5c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0b5      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059da:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ee      	bne.n	80059c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a1 	beq.w	8005b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a02:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d05c      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d141      	bne.n	8005a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a16:	4b31      	ldr	r3, [pc, #196]	; (8005adc <HAL_RCC_OscConfig+0x478>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1c:	f7fd f91e 	bl	8002c5c <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a24:	f7fd f91a 	bl	8002c5c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e087      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f0      	bne.n	8005a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	061b      	lsls	r3, r3, #24
 8005a66:	491b      	ldr	r1, [pc, #108]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x478>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fd f8f3 	bl	8002c5c <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7a:	f7fd f8ef 	bl	8002c5c <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e05c      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x416>
 8005a98:	e054      	b.n	8005b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_OscConfig+0x478>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fd f8dc 	bl	8002c5c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa8:	f7fd f8d8 	bl	8002c5c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e045      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_OscConfig+0x470>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x444>
 8005ac6:	e03d      	b.n	8005b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e038      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000
 8005adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <HAL_RCC_OscConfig+0x4ec>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d028      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d121      	bne.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d11a      	bne.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b10:	4013      	ands	r3, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d111      	bne.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0cc      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b68:	4b68      	ldr	r3, [pc, #416]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90c      	bls.n	8005b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b65      	ldr	r3, [pc, #404]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b63      	ldr	r3, [pc, #396]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0b8      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ba8:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc0:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4a52      	ldr	r2, [pc, #328]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bcc:	4b50      	ldr	r3, [pc, #320]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	494d      	ldr	r1, [pc, #308]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d044      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d119      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e07f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d003      	beq.n	8005c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d107      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c12:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e06f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c22:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e067      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c32:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 0203 	bic.w	r2, r3, #3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4934      	ldr	r1, [pc, #208]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c44:	f7fd f80a 	bl	8002c5c <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4c:	f7fd f806 	bl	8002c5c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e04f      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 020c 	and.w	r2, r3, #12
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1eb      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d20c      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c82:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e032      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4916      	ldr	r1, [pc, #88]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	490e      	ldr	r1, [pc, #56]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cda:	f000 f821 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	490a      	ldr	r1, [pc, #40]	; (8005d14 <HAL_RCC_ClockConfig+0x1c0>)
 8005cec:	5ccb      	ldrb	r3, [r1, r3]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fc fe60 	bl	80029c0 <HAL_InitTick>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023c00 	.word	0x40023c00
 8005d10:	40023800 	.word	0x40023800
 8005d14:	0800f8f0 	.word	0x0800f8f0
 8005d18:	200004f8 	.word	0x200004f8
 8005d1c:	200004fc 	.word	0x200004fc

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d24:	b094      	sub	sp, #80	; 0x50
 8005d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	2300      	movs	r3, #0
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d38:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 030c 	and.w	r3, r3, #12
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d00d      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x40>
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	f200 80e1 	bhi.w	8005f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x34>
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d52:	e0db      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d54:	4b73      	ldr	r3, [pc, #460]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d58:	e0db      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d5a:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d5e:	e0d8      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d60:	4b6f      	ldr	r3, [pc, #444]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d063      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d76:	4b6a      	ldr	r3, [pc, #424]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	f04f 0000 	mov.w	r0, #0
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	0159      	lsls	r1, r3, #5
 8005da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da4:	0150      	lsls	r0, r2, #5
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4621      	mov	r1, r4
 8005dac:	1a51      	subs	r1, r2, r1
 8005dae:	6139      	str	r1, [r7, #16]
 8005db0:	4629      	mov	r1, r5
 8005db2:	eb63 0301 	sbc.w	r3, r3, r1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	018b      	lsls	r3, r1, #6
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dce:	4651      	mov	r1, sl
 8005dd0:	018a      	lsls	r2, r1, #6
 8005dd2:	4651      	mov	r1, sl
 8005dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8005dd8:	4659      	mov	r1, fp
 8005dda:	eb63 0901 	sbc.w	r9, r3, r1
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df2:	4690      	mov	r8, r2
 8005df4:	4699      	mov	r9, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	eb18 0303 	adds.w	r3, r8, r3
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	462b      	mov	r3, r5
 8005e00:	eb49 0303 	adc.w	r3, r9, r3
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e12:	4629      	mov	r1, r5
 8005e14:	028b      	lsls	r3, r1, #10
 8005e16:	4621      	mov	r1, r4
 8005e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	028a      	lsls	r2, r1, #10
 8005e20:	4610      	mov	r0, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	2200      	movs	r2, #0
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e30:	f7fa fa2e 	bl	8000290 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3c:	e058      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3e:	4b38      	ldr	r3, [pc, #224]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	099b      	lsrs	r3, r3, #6
 8005e44:	2200      	movs	r2, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	4611      	mov	r1, r2
 8005e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	2300      	movs	r3, #0
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	f04f 0000 	mov.w	r0, #0
 8005e60:	f04f 0100 	mov.w	r1, #0
 8005e64:	0159      	lsls	r1, r3, #5
 8005e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e6a:	0150      	lsls	r0, r2, #5
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4641      	mov	r1, r8
 8005e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e90:	ebb2 040a 	subs.w	r4, r2, sl
 8005e94:	eb63 050b 	sbc.w	r5, r3, fp
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	00eb      	lsls	r3, r5, #3
 8005ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ea6:	00e2      	lsls	r2, r4, #3
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	18e3      	adds	r3, r4, r3
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	028b      	lsls	r3, r1, #10
 8005eca:	4621      	mov	r1, r4
 8005ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	028a      	lsls	r2, r1, #10
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	2200      	movs	r2, #0
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	61fa      	str	r2, [r7, #28]
 8005ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee4:	f7fa f9d4 	bl	8000290 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	3301      	adds	r3, #1
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f0a:	e002      	b.n	8005f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3750      	adds	r7, #80	; 0x50
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00f42400 	.word	0x00f42400

08005f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	200004f8 	.word	0x200004f8

08005f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f44:	f7ff fff0 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0a9b      	lsrs	r3, r3, #10
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40023800 	.word	0x40023800
 8005f64:	0800f900 	.word	0x0800f900

08005f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	220f      	movs	r2, #15
 8005f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0203 	and.w	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <HAL_RCC_GetClockConfig+0x60>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0207 	and.w	r2, r3, #7
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40023c00 	.word	0x40023c00

08005fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e07b      	b.n	80060d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d108      	bne.n	8005ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fee:	d009      	beq.n	8006004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	61da      	str	r2, [r3, #28]
 8005ff6:	e005      	b.n	8006004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fbe2 	bl	80027e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	ea42 0103 	orr.w	r1, r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	f003 0104 	and.w	r1, r3, #4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	f003 0210 	and.w	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b088      	sub	sp, #32
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_SPI_Transmit+0x22>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e126      	b.n	800634e <HAL_SPI_Transmit+0x270>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006108:	f7fc fda8 	bl	8002c5c <HAL_GetTick>
 800610c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800611e:	2302      	movs	r3, #2
 8006120:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006122:	e10b      	b.n	800633c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_SPI_Transmit+0x52>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006134:	e102      	b.n	800633c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2203      	movs	r2, #3
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	88fa      	ldrh	r2, [r7, #6]
 800614e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	d10f      	bne.n	800619e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d007      	beq.n	80061bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c4:	d14b      	bne.n	800625e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_Transmit+0xf6>
 80061ce:	8afb      	ldrh	r3, [r7, #22]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d13e      	bne.n	8006252 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	881a      	ldrh	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	1c9a      	adds	r2, r3, #2
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061f8:	e02b      	b.n	8006252 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b02      	cmp	r3, #2
 8006206:	d112      	bne.n	800622e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	1c9a      	adds	r2, r3, #2
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	86da      	strh	r2, [r3, #54]	; 0x36
 800622c:	e011      	b.n	8006252 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800622e:	f7fc fd15 	bl	8002c5c <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d803      	bhi.n	8006246 <HAL_SPI_Transmit+0x168>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d102      	bne.n	800624c <HAL_SPI_Transmit+0x16e>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006250:	e074      	b.n	800633c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1ce      	bne.n	80061fa <HAL_SPI_Transmit+0x11c>
 800625c:	e04c      	b.n	80062f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_SPI_Transmit+0x18e>
 8006266:	8afb      	ldrh	r3, [r7, #22]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d140      	bne.n	80062ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006292:	e02c      	b.n	80062ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d113      	bne.n	80062ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80062c8:	e011      	b.n	80062ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ca:	f7fc fcc7 	bl	8002c5c <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_Transmit+0x204>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Transmit+0x20a>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ec:	e026      	b.n	800633c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1cd      	bne.n	8006294 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fa55 	bl	80067ac <SPI_EndRxTxTransaction>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e000      	b.n	800633c <HAL_SPI_Transmit+0x25e>
  }

error:
 800633a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800634c:	7ffb      	ldrb	r3, [r7, #31]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08c      	sub	sp, #48	; 0x30
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006364:	2301      	movs	r3, #1
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_TransmitReceive+0x26>
 8006378:	2302      	movs	r3, #2
 800637a:	e18a      	b.n	8006692 <HAL_SPI_TransmitReceive+0x33c>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006384:	f7fc fc6a 	bl	8002c5c <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800639e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d00f      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x70>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ac:	d107      	bne.n	80063be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <HAL_SPI_TransmitReceive+0x68>
 80063b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d003      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063be:	2302      	movs	r3, #2
 80063c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063c4:	e15b      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x82>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x82>
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d103      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063de:	e14e      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d003      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2205      	movs	r2, #5
 80063f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	887a      	ldrh	r2, [r7, #2]
 800640a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d007      	beq.n	8006448 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d178      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x10a>
 800645a:	8b7b      	ldrh	r3, [r7, #26]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d166      	bne.n	800652e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	1c9a      	adds	r2, r3, #2
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006484:	e053      	b.n	800652e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x176>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x176>
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d113      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	881a      	ldrh	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	1c9a      	adds	r2, r3, #2
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d119      	bne.n	800650e <HAL_SPI_TransmitReceive+0x1b8>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d014      	beq.n	800650e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	b292      	uxth	r2, r2
 80064f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800650a:	2301      	movs	r3, #1
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800650e:	f7fc fba5 	bl	8002c5c <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651a:	429a      	cmp	r2, r3
 800651c:	d807      	bhi.n	800652e <HAL_SPI_TransmitReceive+0x1d8>
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d003      	beq.n	800652e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800652c:	e0a7      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1a6      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x130>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1a1      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x130>
 8006542:	e07c      	b.n	800663e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x1fc>
 800654c:	8b7b      	ldrh	r3, [r7, #26]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d16b      	bne.n	800662a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006578:	e057      	b.n	800662a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11c      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x26c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <HAL_SPI_TransmitReceive+0x26c>
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d114      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	7812      	ldrb	r2, [r2, #0]
 80065a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d119      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x2ae>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006600:	2301      	movs	r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006604:	f7fc fb2a 	bl	8002c5c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006610:	429a      	cmp	r2, r3
 8006612:	d803      	bhi.n	800661c <HAL_SPI_TransmitReceive+0x2c6>
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d102      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x2cc>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006628:	e029      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1a2      	bne.n	800657a <HAL_SPI_TransmitReceive+0x224>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19d      	bne.n	800657a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f8b2 	bl	80067ac <SPI_EndRxTxTransaction>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800665a:	e010      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	e000      	b.n	800667e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800667c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800668e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006692:	4618      	mov	r0, r3
 8006694:	3730      	adds	r7, #48	; 0x30
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066ac:	f7fc fad6 	bl	8002c5c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066bc:	f7fc face 	bl	8002c5c <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	015b      	lsls	r3, r3, #5
 80066c8:	0d1b      	lsrs	r3, r3, #20
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	e054      	b.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d050      	beq.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066dc:	f7fc fabe 	bl	8002c5c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d902      	bls.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d13d      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d111      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d004      	beq.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d107      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d10f      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e017      	b.n	800679e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3b01      	subs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d19b      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200004f8 	.word	0x200004f8

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <SPI_EndRxTxTransaction+0x7c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <SPI_EndRxTxTransaction+0x80>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d112      	bne.n	80067fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff5a 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3b01      	subs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d0f2      	beq.n	80067fe <SPI_EndRxTxTransaction+0x52>
 8006818:	e000      	b.n	800681c <SPI_EndRxTxTransaction+0x70>
        break;
 800681a:	bf00      	nop
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	200004f8 	.word	0x200004f8
 800682c:	165e9f81 	.word	0x165e9f81

08006830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e041      	b.n	80068c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc f844 	bl	80028e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 fd3a 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e03c      	b.n	8006962 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <HAL_TIM_Base_Start+0xa0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_TIM_Base_Start+0x5c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d013      	beq.n	800692c <HAL_TIM_Base_Start+0x5c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <HAL_TIM_Base_Start+0xa4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_TIM_Base_Start+0x5c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a19      	ldr	r2, [pc, #100]	; (8006978 <HAL_TIM_Base_Start+0xa8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_TIM_Base_Start+0x5c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a17      	ldr	r2, [pc, #92]	; (800697c <HAL_TIM_Base_Start+0xac>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIM_Base_Start+0x5c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a16      	ldr	r2, [pc, #88]	; (8006980 <HAL_TIM_Base_Start+0xb0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d111      	bne.n	8006950 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b06      	cmp	r3, #6
 800693c:	d010      	beq.n	8006960 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0201 	orr.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694e:	e007      	b.n	8006960 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40014000 	.word	0x40014000

08006984 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1a      	ldr	r2, [r3, #32]
 8006992:	f241 1311 	movw	r3, #4369	; 0x1111
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10f      	bne.n	80069bc <HAL_TIM_Base_Stop+0x38>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a1a      	ldr	r2, [r3, #32]
 80069a2:	f240 4344 	movw	r3, #1092	; 0x444
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_Base_Stop+0x38>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e044      	b.n	8006a76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x6c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a16:	d013      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x6c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1a      	ldr	r2, [pc, #104]	; (8006a88 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x6c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_TIM_Base_Start_IT+0xb8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x6c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x6c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d111      	bne.n	8006a64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b06      	cmp	r3, #6
 8006a50:	d010      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0201 	orr.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	e007      	b.n	8006a74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	40014000 	.word	0x40014000

08006a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e041      	b.n	8006b2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f839 	bl	8006b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fc06 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_TIM_PWM_Start+0x24>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e022      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x6a>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d109      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x3e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e015      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x6a>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d109      	bne.n	8006ba4 <HAL_TIM_PWM_Start+0x58>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e008      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x6a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e068      	b.n	8006c90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_PWM_Start+0x82>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e013      	b.n	8006bf6 <HAL_TIM_PWM_Start+0xaa>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_PWM_Start+0x92>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	e00b      	b.n	8006bf6 <HAL_TIM_PWM_Start+0xaa>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bec:	e003      	b.n	8006bf6 <HAL_TIM_PWM_Start+0xaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fe18 	bl	8007834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <HAL_TIM_PWM_Start+0x14c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1d      	ldr	r2, [pc, #116]	; (8006c98 <HAL_TIM_PWM_Start+0x14c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d018      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x10e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c30:	d013      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x10e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_TIM_PWM_Start+0x150>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x10e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <HAL_TIM_PWM_Start+0x154>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d009      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x10e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a16      	ldr	r2, [pc, #88]	; (8006ca4 <HAL_TIM_PWM_Start+0x158>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d004      	beq.n	8006c5a <HAL_TIM_PWM_Start+0x10e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <HAL_TIM_PWM_Start+0x15c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d111      	bne.n	8006c7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b06      	cmp	r3, #6
 8006c6a:	d010      	beq.n	8006c8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	e007      	b.n	8006c8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40014000 	.word	0x40014000

08006cac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fdb8 	bl	8007834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <HAL_TIM_PWM_Stop+0xc4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d117      	bne.n	8006cfe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_TIM_PWM_Stop+0x52>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	f240 4344 	movw	r3, #1092	; 0x444
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_TIM_PWM_Stop+0x52>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a1a      	ldr	r2, [r3, #32]
 8006d04:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <HAL_TIM_PWM_Stop+0x82>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	f240 4344 	movw	r3, #1092	; 0x444
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d107      	bne.n	8006d2e <HAL_TIM_PWM_Stop+0x82>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Stop+0x92>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d3c:	e013      	b.n	8006d66 <HAL_TIM_PWM_Stop+0xba>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Stop+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d4c:	e00b      	b.n	8006d66 <HAL_TIM_PWM_Stop+0xba>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Stop+0xb2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d5c:	e003      	b.n	8006d66 <HAL_TIM_PWM_Stop+0xba>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40010000 	.word	0x40010000

08006d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0202 	mvn.w	r2, #2
 8006da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa77 	bl	80072aa <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa69 	bl	8007296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa7a 	bl	80072be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0204 	mvn.w	r2, #4
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa4d 	bl	80072aa <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa3f 	bl	8007296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa50 	bl	80072be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0208 	mvn.w	r2, #8
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa23 	bl	80072aa <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa15 	bl	8007296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa26 	bl	80072be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0210 	mvn.w	r2, #16
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9f9 	bl	80072aa <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9eb 	bl	8007296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9fc 	bl	80072be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0201 	mvn.w	r2, #1
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fb f9ae 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fd26 	bl	8007970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d10e      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d107      	bne.n	8006f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f9c1 	bl	80072d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d10e      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d107      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0220 	mvn.w	r2, #32
 8006f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fcf0 	bl	800795c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e0ae      	b.n	8007100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	f200 809f 	bhi.w	80070f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	080070f1 	.word	0x080070f1
 8006fc0:	080070f1 	.word	0x080070f1
 8006fc4:	080070f1 	.word	0x080070f1
 8006fc8:	0800702d 	.word	0x0800702d
 8006fcc:	080070f1 	.word	0x080070f1
 8006fd0:	080070f1 	.word	0x080070f1
 8006fd4:	080070f1 	.word	0x080070f1
 8006fd8:	0800706f 	.word	0x0800706f
 8006fdc:	080070f1 	.word	0x080070f1
 8006fe0:	080070f1 	.word	0x080070f1
 8006fe4:	080070f1 	.word	0x080070f1
 8006fe8:	080070af 	.word	0x080070af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f9f8 	bl	80073e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0208 	orr.w	r2, r2, #8
 8007006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0204 	bic.w	r2, r2, #4
 8007016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6999      	ldr	r1, [r3, #24]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	619a      	str	r2, [r3, #24]
      break;
 800702a:	e064      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fa3e 	bl	80074b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6999      	ldr	r1, [r3, #24]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	021a      	lsls	r2, r3, #8
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	619a      	str	r2, [r3, #24]
      break;
 800706c:	e043      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fa89 	bl	800758c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0208 	orr.w	r2, r2, #8
 8007088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0204 	bic.w	r2, r2, #4
 8007098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69d9      	ldr	r1, [r3, #28]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	61da      	str	r2, [r3, #28]
      break;
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fad3 	bl	8007660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69d9      	ldr	r1, [r3, #28]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	021a      	lsls	r2, r3, #8
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	61da      	str	r2, [r3, #28]
      break;
 80070ee:	e002      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
      break;
 80070f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIM_ConfigClockSource+0x1c>
 8007120:	2302      	movs	r3, #2
 8007122:	e0b4      	b.n	800728e <HAL_TIM_ConfigClockSource+0x186>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800714a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715c:	d03e      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0xd4>
 800715e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007162:	f200 8087 	bhi.w	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	f000 8086 	beq.w	800727a <HAL_TIM_ConfigClockSource+0x172>
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	d87f      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d01a      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0xa6>
 8007178:	2b70      	cmp	r3, #112	; 0x70
 800717a:	d87b      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 800717c:	2b60      	cmp	r3, #96	; 0x60
 800717e:	d050      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x11a>
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d877      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b50      	cmp	r3, #80	; 0x50
 8007186:	d03c      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0xfa>
 8007188:	2b50      	cmp	r3, #80	; 0x50
 800718a:	d873      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d058      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x13a>
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	d86f      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d064      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x15a>
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d86b      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b20      	cmp	r3, #32
 800719e:	d060      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d867      	bhi.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d05c      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x15a>
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d05a      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x15a>
 80071ac:	e062      	b.n	8007274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6899      	ldr	r1, [r3, #8]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f000 fb19 	bl	80077f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	609a      	str	r2, [r3, #8]
      break;
 80071da:	e04f      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6899      	ldr	r1, [r3, #8]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f000 fb02 	bl	80077f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071fe:	609a      	str	r2, [r3, #8]
      break;
 8007200:	e03c      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	461a      	mov	r2, r3
 8007210:	f000 fa76 	bl	8007700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2150      	movs	r1, #80	; 0x50
 800721a:	4618      	mov	r0, r3
 800721c:	f000 facf 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007220:	e02c      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6859      	ldr	r1, [r3, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	461a      	mov	r2, r3
 8007230:	f000 fa95 	bl	800775e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2160      	movs	r1, #96	; 0x60
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fabf 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007240:	e01c      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6859      	ldr	r1, [r3, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	461a      	mov	r2, r3
 8007250:	f000 fa56 	bl	8007700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2140      	movs	r1, #64	; 0x40
 800725a:	4618      	mov	r0, r3
 800725c:	f000 faaf 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007260:	e00c      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f000 faa6 	bl	80077be <TIM_ITRx_SetConfig>
      break;
 8007272:	e003      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
      break;
 8007278:	e000      	b.n	800727c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800727a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a34      	ldr	r2, [pc, #208]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <TIM_Base_SetConfig+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <TIM_Base_SetConfig+0xec>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x38>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <TIM_Base_SetConfig+0xf0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01b      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d017      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a22      	ldr	r2, [pc, #136]	; (80073d0 <TIM_Base_SetConfig+0xe8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <TIM_Base_SetConfig+0xec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <TIM_Base_SetConfig+0xf0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00b      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <TIM_Base_SetConfig+0xf4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d007      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <TIM_Base_SetConfig+0xf8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_Base_SetConfig+0x8a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <TIM_Base_SetConfig+0xfc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a08      	ldr	r2, [pc, #32]	; (80073cc <TIM_Base_SetConfig+0xe4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d103      	bne.n	80073b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	615a      	str	r2, [r3, #20]
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800

080073e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 0302 	bic.w	r3, r3, #2
 8007430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a1c      	ldr	r2, [pc, #112]	; (80074b0 <TIM_OC1_SetConfig+0xc8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d10c      	bne.n	800745e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 0308 	bic.w	r3, r3, #8
 800744a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 0304 	bic.w	r3, r3, #4
 800745c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <TIM_OC1_SetConfig+0xc8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40010000 	.word	0x40010000

080074b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f023 0320 	bic.w	r3, r3, #32
 80074fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <TIM_OC2_SetConfig+0xd4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10d      	bne.n	8007530 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800751a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <TIM_OC2_SetConfig+0xd4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d113      	bne.n	8007560 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800753e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000

0800758c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <TIM_OC3_SetConfig+0xd0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d10d      	bne.n	8007606 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a14      	ldr	r2, [pc, #80]	; (800765c <TIM_OC3_SetConfig+0xd0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d113      	bne.n	8007636 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800761c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	621a      	str	r2, [r3, #32]
}
 8007650:	bf00      	nop
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40010000 	.word	0x40010000

08007660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a10      	ldr	r2, [pc, #64]	; (80076fc <TIM_OC4_SetConfig+0x9c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d109      	bne.n	80076d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	019b      	lsls	r3, r3, #6
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40010000 	.word	0x40010000

08007700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f023 0201 	bic.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800772a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 030a 	bic.w	r3, r3, #10
 800773c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800779a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	f043 0307 	orr.w	r3, r3, #7
 80077e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	609a      	str	r2, [r3, #8]
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800780e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	431a      	orrs	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4313      	orrs	r3, r2
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	609a      	str	r2, [r3, #8]
}
 8007828:	bf00      	nop
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2201      	movs	r2, #1
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	43db      	mvns	r3, r3
 8007856:	401a      	ands	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	431a      	orrs	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007894:	2302      	movs	r3, #2
 8007896:	e050      	b.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1c      	ldr	r2, [pc, #112]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d013      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a18      	ldr	r2, [pc, #96]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a16      	ldr	r2, [pc, #88]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a13      	ldr	r2, [pc, #76]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10c      	bne.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40014000 	.word	0x40014000

0800795c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007984:	b084      	sub	sp, #16
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	f107 001c 	add.w	r0, r7, #28
 8007992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2b01      	cmp	r3, #1
 800799a:	d122      	bne.n	80079e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80079b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d105      	bne.n	80079d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fbee 	bl	80091b8 <USB_CoreReset>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]
 80079e0:	e01a      	b.n	8007a18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fbe2 	bl	80091b8 <USB_CoreReset>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
 8007a0a:	e005      	b.n	8007a18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d10b      	bne.n	8007a36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f043 0206 	orr.w	r2, r3, #6
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a42:	b004      	add	sp, #16
 8007a44:	4770      	bx	lr
	...

08007a48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d165      	bne.n	8007b28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4a41      	ldr	r2, [pc, #260]	; (8007b64 <USB_SetTurnaroundTime+0x11c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d906      	bls.n	8007a72 <USB_SetTurnaroundTime+0x2a>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4a40      	ldr	r2, [pc, #256]	; (8007b68 <USB_SetTurnaroundTime+0x120>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d202      	bcs.n	8007a72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a6c:	230f      	movs	r3, #15
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e062      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4a3c      	ldr	r2, [pc, #240]	; (8007b68 <USB_SetTurnaroundTime+0x120>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d306      	bcc.n	8007a88 <USB_SetTurnaroundTime+0x40>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a3b      	ldr	r2, [pc, #236]	; (8007b6c <USB_SetTurnaroundTime+0x124>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d202      	bcs.n	8007a88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a82:	230e      	movs	r3, #14
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e057      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4a38      	ldr	r2, [pc, #224]	; (8007b6c <USB_SetTurnaroundTime+0x124>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d306      	bcc.n	8007a9e <USB_SetTurnaroundTime+0x56>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <USB_SetTurnaroundTime+0x128>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d202      	bcs.n	8007a9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a98:	230d      	movs	r3, #13
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e04c      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a33      	ldr	r2, [pc, #204]	; (8007b70 <USB_SetTurnaroundTime+0x128>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d306      	bcc.n	8007ab4 <USB_SetTurnaroundTime+0x6c>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4a32      	ldr	r2, [pc, #200]	; (8007b74 <USB_SetTurnaroundTime+0x12c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d802      	bhi.n	8007ab4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007aae:	230c      	movs	r3, #12
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e041      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <USB_SetTurnaroundTime+0x12c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d906      	bls.n	8007aca <USB_SetTurnaroundTime+0x82>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4a2e      	ldr	r2, [pc, #184]	; (8007b78 <USB_SetTurnaroundTime+0x130>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d802      	bhi.n	8007aca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ac4:	230b      	movs	r3, #11
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e036      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4a2a      	ldr	r2, [pc, #168]	; (8007b78 <USB_SetTurnaroundTime+0x130>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d906      	bls.n	8007ae0 <USB_SetTurnaroundTime+0x98>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <USB_SetTurnaroundTime+0x134>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d802      	bhi.n	8007ae0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ada:	230a      	movs	r3, #10
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e02b      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <USB_SetTurnaroundTime+0x134>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d906      	bls.n	8007af6 <USB_SetTurnaroundTime+0xae>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <USB_SetTurnaroundTime+0x138>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d202      	bcs.n	8007af6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007af0:	2309      	movs	r3, #9
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e020      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <USB_SetTurnaroundTime+0x138>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d306      	bcc.n	8007b0c <USB_SetTurnaroundTime+0xc4>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <USB_SetTurnaroundTime+0x13c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d802      	bhi.n	8007b0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b06:	2308      	movs	r3, #8
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e015      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <USB_SetTurnaroundTime+0x13c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d906      	bls.n	8007b22 <USB_SetTurnaroundTime+0xda>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <USB_SetTurnaroundTime+0x140>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d202      	bcs.n	8007b22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b1c:	2307      	movs	r3, #7
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e00a      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b22:	2306      	movs	r3, #6
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	e007      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007b2e:	2309      	movs	r3, #9
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	e001      	b.n	8007b38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b34:	2309      	movs	r3, #9
 8007b36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	00d8acbf 	.word	0x00d8acbf
 8007b68:	00e4e1c0 	.word	0x00e4e1c0
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	01067380 	.word	0x01067380
 8007b74:	011a499f 	.word	0x011a499f
 8007b78:	01312cff 	.word	0x01312cff
 8007b7c:	014ca43f 	.word	0x014ca43f
 8007b80:	016e3600 	.word	0x016e3600
 8007b84:	01a6ab1f 	.word	0x01a6ab1f
 8007b88:	01e84800 	.word	0x01e84800

08007b8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f043 0201 	orr.w	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d115      	bne.n	8007c1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f7fb f838 	bl	8002c74 <HAL_Delay>
      ms++;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fa45 	bl	800909a <USB_GetMode>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d01e      	beq.n	8007c54 <USB_SetCurrentMode+0x84>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b31      	cmp	r3, #49	; 0x31
 8007c1a:	d9f0      	bls.n	8007bfe <USB_SetCurrentMode+0x2e>
 8007c1c:	e01a      	b.n	8007c54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d115      	bne.n	8007c50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c30:	2001      	movs	r0, #1
 8007c32:	f7fb f81f 	bl	8002c74 <HAL_Delay>
      ms++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fa2c 	bl	800909a <USB_GetMode>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <USB_SetCurrentMode+0x84>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b31      	cmp	r3, #49	; 0x31
 8007c4c:	d9f0      	bls.n	8007c30 <USB_SetCurrentMode+0x60>
 8007c4e:	e001      	b.n	8007c54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e005      	b.n	8007c60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b32      	cmp	r3, #50	; 0x32
 8007c58:	d101      	bne.n	8007c5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c68:	b084      	sub	sp, #16
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	e009      	b.n	8007c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3340      	adds	r3, #64	; 0x40
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	2200      	movs	r2, #0
 8007c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b0e      	cmp	r3, #14
 8007ca0:	d9f2      	bls.n	8007c88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11c      	bne.n	8007ce2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
 8007ce0:	e00b      	b.n	8007cfa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d00:	461a      	mov	r2, r3
 8007d02:	2300      	movs	r3, #0
 8007d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	461a      	mov	r2, r3
 8007d16:	680b      	ldr	r3, [r1, #0]
 8007d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d10c      	bne.n	8007d3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d104      	bne.n	8007d30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f965 	bl	8007ff8 <USB_SetDevSpeed>
 8007d2e:	e008      	b.n	8007d42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d30:	2101      	movs	r1, #1
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f960 	bl	8007ff8 <USB_SetDevSpeed>
 8007d38:	e003      	b.n	8007d42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d3a:	2103      	movs	r1, #3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f95b 	bl	8007ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d42:	2110      	movs	r1, #16
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8f3 	bl	8007f30 <USB_FlushTxFifo>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f91f 	bl	8007f98 <USB_FlushRxFifo>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	461a      	mov	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d82:	461a      	mov	r2, r3
 8007d84:	2300      	movs	r3, #0
 8007d86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	e043      	b.n	8007e16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da4:	d118      	bne.n	8007dd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	461a      	mov	r2, r3
 8007dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	e013      	b.n	8007dea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e008      	b.n	8007dea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	461a      	mov	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df6:	461a      	mov	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	3301      	adds	r3, #1
 8007e14:	613b      	str	r3, [r7, #16]
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d3b7      	bcc.n	8007d8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e043      	b.n	8007eac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e3a:	d118      	bne.n	8007e6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	e013      	b.n	8007e80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	461a      	mov	r2, r3
 8007e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	e008      	b.n	8007e80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d3b7      	bcc.n	8007e24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ed4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f043 0210 	orr.w	r2, r3, #16
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <USB_DevInit+0x2c4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f043 0208 	orr.w	r2, r3, #8
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d107      	bne.n	8007f1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f14:	f043 0304 	orr.w	r3, r3, #4
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f28:	b004      	add	sp, #16
 8007f2a:	4770      	bx	lr
 8007f2c:	803c3800 	.word	0x803c3800

08007f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <USB_FlushTxFifo+0x64>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e01b      	b.n	8007f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	daf2      	bge.n	8007f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	019b      	lsls	r3, r3, #6
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <USB_FlushTxFifo+0x64>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e006      	b.n	8007f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d0f0      	beq.n	8007f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	00030d40 	.word	0x00030d40

08007f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4a11      	ldr	r2, [pc, #68]	; (8007ff4 <USB_FlushRxFifo+0x5c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e018      	b.n	8007fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	daf2      	bge.n	8007fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <USB_FlushRxFifo+0x5c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d901      	bls.n	8007fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e006      	b.n	8007fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d0f0      	beq.n	8007fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	00030d40 	.word	0x00030d40

08007ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008018:	4313      	orrs	r3, r2
 800801a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800802a:	b480      	push	{r7}
 800802c:	b087      	sub	sp, #28
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0306 	and.w	r3, r3, #6
 8008042:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
 800804e:	e00a      	b.n	8008066 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d002      	beq.n	800805c <USB_GetDevSpeed+0x32>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b06      	cmp	r3, #6
 800805a:	d102      	bne.n	8008062 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800805c:	2302      	movs	r3, #2
 800805e:	75fb      	strb	r3, [r7, #23]
 8008060:	e001      	b.n	8008066 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008062:	230f      	movs	r3, #15
 8008064:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d13a      	bne.n	8008106 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	2101      	movs	r1, #1
 80080a2:	fa01 f303 	lsl.w	r3, r1, r3
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ae:	4313      	orrs	r3, r2
 80080b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d155      	bne.n	8008174 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	059b      	lsls	r3, r3, #22
 80080ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080ec:	4313      	orrs	r3, r2
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e036      	b.n	8008174 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810c:	69da      	ldr	r2, [r3, #28]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	2101      	movs	r1, #1
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	041b      	lsls	r3, r3, #16
 800811e:	68f9      	ldr	r1, [r7, #12]
 8008120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008124:	4313      	orrs	r3, r2
 8008126:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d11a      	bne.n	8008174 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	791b      	ldrb	r3, [r3, #4]
 8008158:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800815a:	430b      	orrs	r3, r1
 800815c:	4313      	orrs	r3, r2
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	440a      	add	r2, r1
 8008166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800816a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800816e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008172:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	785b      	ldrb	r3, [r3, #1]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d161      	bne.n	8008264 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b6:	d11f      	bne.n	80081f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	0151      	lsls	r1, r2, #5
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	440a      	add	r2, r1
 80081ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	2101      	movs	r1, #1
 800820a:	fa01 f303 	lsl.w	r3, r1, r3
 800820e:	b29b      	uxth	r3, r3
 8008210:	43db      	mvns	r3, r3
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008218:	4013      	ands	r3, r2
 800821a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	2101      	movs	r1, #1
 800822e:	fa01 f303 	lsl.w	r3, r1, r3
 8008232:	b29b      	uxth	r3, r3
 8008234:	43db      	mvns	r3, r3
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800823c:	4013      	ands	r3, r2
 800823e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	0159      	lsls	r1, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	440b      	add	r3, r1
 8008256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825a:	4619      	mov	r1, r3
 800825c:	4b35      	ldr	r3, [pc, #212]	; (8008334 <USB_DeactivateEndpoint+0x1b0>)
 800825e:	4013      	ands	r3, r2
 8008260:	600b      	str	r3, [r1, #0]
 8008262:	e060      	b.n	8008326 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827a:	d11f      	bne.n	80082bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800829a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	43db      	mvns	r3, r3
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082dc:	4013      	ands	r3, r2
 80082de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	2101      	movs	r1, #1
 80082f2:	fa01 f303 	lsl.w	r3, r1, r3
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	43db      	mvns	r3, r3
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008300:	4013      	ands	r3, r2
 8008302:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	0159      	lsls	r1, r3, #5
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	440b      	add	r3, r1
 800831a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831e:	4619      	mov	r1, r3
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <USB_DeactivateEndpoint+0x1b4>)
 8008322:	4013      	ands	r3, r2
 8008324:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	ec337800 	.word	0xec337800
 8008338:	eff37800 	.word	0xeff37800

0800833c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	; 0x28
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	f040 815c 	bne.w	8008616 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d132      	bne.n	80083cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c4:	0cdb      	lsrs	r3, r3, #19
 80083c6:	04db      	lsls	r3, r3, #19
 80083c8:	6113      	str	r3, [r2, #16]
 80083ca:	e074      	b.n	80084b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e6:	0cdb      	lsrs	r3, r3, #19
 80083e8:	04db      	lsls	r3, r3, #19
 80083ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800840a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800840e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6999      	ldr	r1, [r3, #24]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	440b      	add	r3, r1
 8008428:	1e59      	subs	r1, r3, #1
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008432:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008434:	4b9d      	ldr	r3, [pc, #628]	; (80086ac <USB_EPStartXfer+0x370>)
 8008436:	400b      	ands	r3, r1
 8008438:	69b9      	ldr	r1, [r7, #24]
 800843a:	0148      	lsls	r0, r1, #5
 800843c:	69f9      	ldr	r1, [r7, #28]
 800843e:	4401      	add	r1, r0
 8008440:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008444:	4313      	orrs	r3, r2
 8008446:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845e:	69b9      	ldr	r1, [r7, #24]
 8008460:	0148      	lsls	r0, r1, #5
 8008462:	69f9      	ldr	r1, [r7, #28]
 8008464:	4401      	add	r1, r0
 8008466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800846a:	4313      	orrs	r3, r2
 800846c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	791b      	ldrb	r3, [r3, #4]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d11f      	bne.n	80084b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008490:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008494:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	0151      	lsls	r1, r2, #5
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	440a      	add	r2, r1
 80084ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084b6:	79fb      	ldrb	r3, [r7, #7]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d14b      	bne.n	8008554 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d0:	461a      	mov	r2, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d128      	bne.n	8008532 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d110      	bne.n	8008512 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	e00f      	b.n	8008532 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008530:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800854c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	e133      	b.n	80087bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	440a      	add	r2, r1
 800856a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008572:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	791b      	ldrb	r3, [r3, #4]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d015      	beq.n	80085a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 811b 	beq.w	80087bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	2101      	movs	r1, #1
 8008598:	fa01 f303 	lsl.w	r3, r1, r3
 800859c:	69f9      	ldr	r1, [r7, #28]
 800859e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a2:	4313      	orrs	r3, r2
 80085a4:	634b      	str	r3, [r1, #52]	; 0x34
 80085a6:	e109      	b.n	80087bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d110      	bne.n	80085da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	0151      	lsls	r1, r2, #5
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	440a      	add	r2, r1
 80085ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	e00f      	b.n	80085fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	6919      	ldr	r1, [r3, #16]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	b298      	uxth	r0, r3
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	4603      	mov	r3, r0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fade 	bl	8008bd0 <USB_WritePacket>
 8008614:	e0d2      	b.n	80087bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008630:	0cdb      	lsrs	r3, r3, #19
 8008632:	04db      	lsls	r3, r3, #19
 8008634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008658:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d126      	bne.n	80086b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	0148      	lsls	r0, r1, #5
 800867c:	69f9      	ldr	r1, [r7, #28]
 800867e:	4401      	add	r1, r0
 8008680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008684:	4313      	orrs	r3, r2
 8008686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086a6:	6113      	str	r3, [r2, #16]
 80086a8:	e03a      	b.n	8008720 <USB_EPStartXfer+0x3e4>
 80086aa:	bf00      	nop
 80086ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	8afa      	ldrh	r2, [r7, #22]
 80086cc:	fb03 f202 	mul.w	r2, r3, r2
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	8afb      	ldrh	r3, [r7, #22]
 80086e4:	04d9      	lsls	r1, r3, #19
 80086e6:	4b38      	ldr	r3, [pc, #224]	; (80087c8 <USB_EPStartXfer+0x48c>)
 80086e8:	400b      	ands	r3, r1
 80086ea:	69b9      	ldr	r1, [r7, #24]
 80086ec:	0148      	lsls	r0, r1, #5
 80086ee:	69f9      	ldr	r1, [r7, #28]
 80086f0:	4401      	add	r1, r0
 80086f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086f6:	4313      	orrs	r3, r2
 80086f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008710:	69b9      	ldr	r1, [r7, #24]
 8008712:	0148      	lsls	r0, r1, #5
 8008714:	69f9      	ldr	r1, [r7, #28]
 8008716:	4401      	add	r1, r0
 8008718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800871c:	4313      	orrs	r3, r2
 800871e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d10d      	bne.n	8008742 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	6919      	ldr	r1, [r3, #16]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873e:	460a      	mov	r2, r1
 8008740:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d128      	bne.n	800879c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d110      	bne.n	800877c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e00f      	b.n	800879c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	1ff80000 	.word	0x1ff80000

080087cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f040 80ce 	bne.w	800898a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d132      	bne.n	800885c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	440a      	add	r2, r1
 8008830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008854:	0cdb      	lsrs	r3, r3, #19
 8008856:	04db      	lsls	r3, r3, #19
 8008858:	6113      	str	r3, [r2, #16]
 800885a:	e04e      	b.n	80088fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008876:	0cdb      	lsrs	r3, r3, #19
 8008878:	04db      	lsls	r3, r3, #19
 800887a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800889a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800889e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d903      	bls.n	80088b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ea:	6939      	ldr	r1, [r7, #16]
 80088ec:	0148      	lsls	r0, r1, #5
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	4401      	add	r1, r0
 80088f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088f6:	4313      	orrs	r3, r2
 80088f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d11e      	bne.n	800893e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	461a      	mov	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e097      	b.n	8008a6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008958:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800895c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8083 	beq.w	8008a6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f303 	lsl.w	r3, r1, r3
 800897e:	6979      	ldr	r1, [r7, #20]
 8008980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008984:	4313      	orrs	r3, r2
 8008986:	634b      	str	r3, [r1, #52]	; 0x34
 8008988:	e071      	b.n	8008a6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a4:	0cdb      	lsrs	r3, r3, #19
 80089a6:	04db      	lsls	r3, r3, #19
 80089a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1c:	6939      	ldr	r1, [r7, #16]
 8008a1e:	0148      	lsls	r0, r1, #5
 8008a20:	6979      	ldr	r1, [r7, #20]
 8008a22:	4401      	add	r1, r0
 8008a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d10d      	bne.n	8008a4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6919      	ldr	r1, [r3, #16]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	460a      	mov	r2, r1
 8008a4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d14a      	bne.n	8008b30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ab2:	f040 8086 	bne.w	8008bc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	7812      	ldrb	r2, [r2, #0]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d902      	bls.n	8008b14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
          break;
 8008b12:	e056      	b.n	8008bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b2c:	d0e7      	beq.n	8008afe <USB_EPStopXfer+0x82>
 8008b2e:	e048      	b.n	8008bc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b48:	d13b      	bne.n	8008bc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d902      	bls.n	8008ba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ba6:	e00c      	b.n	8008bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc0:	d0e7      	beq.n	8008b92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b089      	sub	sp, #36	; 0x24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	461a      	mov	r2, r3
 8008bde:	460b      	mov	r3, r1
 8008be0:	71fb      	strb	r3, [r7, #7]
 8008be2:	4613      	mov	r3, r2
 8008be4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d123      	bne.n	8008c3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bf6:	88bb      	ldrh	r3, [r7, #4]
 8008bf8:	3303      	adds	r3, #3
 8008bfa:	089b      	lsrs	r3, r3, #2
 8008bfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e018      	b.n	8008c36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	031a      	lsls	r2, r3, #12
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c10:	461a      	mov	r2, r3
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	3301      	adds	r3, #1
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3e2      	bcc.n	8008c04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3724      	adds	r7, #36	; 0x24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b08b      	sub	sp, #44	; 0x2c
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c62:	88fb      	ldrh	r3, [r7, #6]
 8008c64:	089b      	lsrs	r3, r3, #2
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	623b      	str	r3, [r7, #32]
 8008c76:	e014      	b.n	8008ca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	3301      	adds	r3, #1
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	3301      	adds	r3, #1
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	3301      	adds	r3, #1
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d3e6      	bcc.n	8008c78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008caa:	8bfb      	ldrh	r3, [r7, #30]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01e      	beq.n	8008cee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f107 0310 	add.w	r3, r7, #16
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	701a      	strb	r2, [r3, #0]
      i++;
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	3301      	adds	r3, #1
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008ce2:	8bfb      	ldrh	r3, [r7, #30]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ce8:	8bfb      	ldrh	r3, [r7, #30]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1ea      	bne.n	8008cc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	372c      	adds	r7, #44	; 0x2c
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d12c      	bne.n	8008d72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	db12      	blt.n	8008d50 <USB_EPSetStall+0x54>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00f      	beq.n	8008d50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e02b      	b.n	8008dca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db12      	blt.n	8008daa <USB_EPSetStall+0xae>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008da8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	0151      	lsls	r1, r2, #5
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	440a      	add	r2, r1
 8008dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	785b      	ldrb	r3, [r3, #1]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d128      	bne.n	8008e46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	791b      	ldrb	r3, [r3, #4]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d003      	beq.n	8008e24 <USB_EPClearStall+0x4c>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	791b      	ldrb	r3, [r3, #4]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d138      	bne.n	8008e96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	e027      	b.n	8008e96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	791b      	ldrb	r3, [r3, #4]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d003      	beq.n	8008e76 <USB_EPClearStall+0x9e>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	791b      	ldrb	r3, [r3, #4]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d10f      	bne.n	8008e96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ec6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ed8:	68f9      	ldr	r1, [r7, #12]
 8008eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f1e:	f023 0302 	bic.w	r3, r3, #2
 8008f22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	0c1b      	lsrs	r3, r3, #16
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	b29b      	uxth	r3, r3
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009030:	68bb      	ldr	r3, [r7, #8]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800903e:	b480      	push	{r7}
 8009040:	b087      	sub	sp, #28
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	460b      	mov	r3, r1
 8009048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009060:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	fa22 f303 	lsr.w	r3, r2, r3
 800906e:	01db      	lsls	r3, r3, #7
 8009070:	b2db      	uxtb	r3, r3
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4013      	ands	r3, r2
 800908a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800908c:	68bb      	ldr	r3, [r7, #8]
}
 800908e:	4618      	mov	r0, r3
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	f003 0301 	and.w	r3, r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090d4:	f023 0307 	bic.w	r3, r3, #7
 80090d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	460b      	mov	r3, r1
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	333c      	adds	r3, #60	; 0x3c
 8009112:	3304      	adds	r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4a26      	ldr	r2, [pc, #152]	; (80091b4 <USB_EP0_OutStart+0xb8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d90a      	bls.n	8009136 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800912c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009130:	d101      	bne.n	8009136 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	e037      	b.n	80091a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	461a      	mov	r2, r3
 800913e:	2300      	movs	r3, #0
 8009140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009164:	f043 0318 	orr.w	r3, r3, #24
 8009168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009178:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800917c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d10f      	bne.n	80091a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918a:	461a      	mov	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80091a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	4f54300a 	.word	0x4f54300a

080091b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4a13      	ldr	r2, [pc, #76]	; (800921c <USB_CoreReset+0x64>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d901      	bls.n	80091d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e01b      	b.n	800920e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	daf2      	bge.n	80091c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f043 0201 	orr.w	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a09      	ldr	r2, [pc, #36]	; (800921c <USB_CoreReset+0x64>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d901      	bls.n	8009200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e006      	b.n	800920e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b01      	cmp	r3, #1
 800920a:	d0f0      	beq.n	80091ee <USB_CoreReset+0x36>

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	00030d40 	.word	0x00030d40

08009220 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800922c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009230:	f005 fb6a 	bl	800e908 <USBD_static_malloc>
 8009234:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	32b0      	adds	r2, #176	; 0xb0
 8009246:	2100      	movs	r1, #0
 8009248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800924c:	2302      	movs	r3, #2
 800924e:	e0d4      	b.n	80093fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009250:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009254:	2100      	movs	r1, #0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f005 fbe2 	bl	800ea20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32b0      	adds	r2, #176	; 0xb0
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	32b0      	adds	r2, #176	; 0xb0
 8009276:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7c1b      	ldrb	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d138      	bne.n	80092fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009288:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <USBD_CDC_Init+0x1e4>)
 800928a:	7819      	ldrb	r1, [r3, #0]
 800928c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009290:	2202      	movs	r2, #2
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f005 fa15 	bl	800e6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009298:	4b5a      	ldr	r3, [pc, #360]	; (8009404 <USBD_CDC_Init+0x1e4>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f003 020f 	and.w	r2, r3, #15
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	4613      	mov	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	440b      	add	r3, r1
 80092ac:	3324      	adds	r3, #36	; 0x24
 80092ae:	2201      	movs	r2, #1
 80092b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092b2:	4b55      	ldr	r3, [pc, #340]	; (8009408 <USBD_CDC_Init+0x1e8>)
 80092b4:	7819      	ldrb	r1, [r3, #0]
 80092b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ba:	2202      	movs	r2, #2
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f005 fa00 	bl	800e6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092c2:	4b51      	ldr	r3, [pc, #324]	; (8009408 <USBD_CDC_Init+0x1e8>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 020f 	and.w	r2, r3, #15
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092da:	2201      	movs	r2, #1
 80092dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092de:	4b4b      	ldr	r3, [pc, #300]	; (800940c <USBD_CDC_Init+0x1ec>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f003 020f 	and.w	r2, r3, #15
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	3326      	adds	r3, #38	; 0x26
 80092f4:	2210      	movs	r2, #16
 80092f6:	801a      	strh	r2, [r3, #0]
 80092f8:	e035      	b.n	8009366 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092fa:	4b42      	ldr	r3, [pc, #264]	; (8009404 <USBD_CDC_Init+0x1e4>)
 80092fc:	7819      	ldrb	r1, [r3, #0]
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	2202      	movs	r2, #2
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f005 f9dd 	bl	800e6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009308:	4b3e      	ldr	r3, [pc, #248]	; (8009404 <USBD_CDC_Init+0x1e4>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 020f 	and.w	r2, r3, #15
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	3324      	adds	r3, #36	; 0x24
 800931e:	2201      	movs	r2, #1
 8009320:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009322:	4b39      	ldr	r3, [pc, #228]	; (8009408 <USBD_CDC_Init+0x1e8>)
 8009324:	7819      	ldrb	r1, [r3, #0]
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	2202      	movs	r2, #2
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f005 f9c9 	bl	800e6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009330:	4b35      	ldr	r3, [pc, #212]	; (8009408 <USBD_CDC_Init+0x1e8>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 020f 	and.w	r2, r3, #15
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009348:	2201      	movs	r2, #1
 800934a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800934c:	4b2f      	ldr	r3, [pc, #188]	; (800940c <USBD_CDC_Init+0x1ec>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 020f 	and.w	r2, r3, #15
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3326      	adds	r3, #38	; 0x26
 8009362:	2210      	movs	r2, #16
 8009364:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009366:	4b29      	ldr	r3, [pc, #164]	; (800940c <USBD_CDC_Init+0x1ec>)
 8009368:	7819      	ldrb	r1, [r3, #0]
 800936a:	2308      	movs	r3, #8
 800936c:	2203      	movs	r2, #3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f005 f9a7 	bl	800e6c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009374:	4b25      	ldr	r3, [pc, #148]	; (800940c <USBD_CDC_Init+0x1ec>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	3324      	adds	r3, #36	; 0x24
 800938a:	2201      	movs	r2, #1
 800938c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	33b0      	adds	r3, #176	; 0xb0
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093c4:	2302      	movs	r3, #2
 80093c6:	e018      	b.n	80093fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7c1b      	ldrb	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10a      	bne.n	80093e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093d0:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <USBD_CDC_Init+0x1e8>)
 80093d2:	7819      	ldrb	r1, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f005 fa5e 	bl	800e8a0 <USBD_LL_PrepareReceive>
 80093e4:	e008      	b.n	80093f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093e6:	4b08      	ldr	r3, [pc, #32]	; (8009408 <USBD_CDC_Init+0x1e8>)
 80093e8:	7819      	ldrb	r1, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f0:	2340      	movs	r3, #64	; 0x40
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f005 fa54 	bl	800e8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	2000058b 	.word	0x2000058b
 8009408:	2000058c 	.word	0x2000058c
 800940c:	2000058d 	.word	0x2000058d

08009410 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800941c:	4b3a      	ldr	r3, [pc, #232]	; (8009508 <USBD_CDC_DeInit+0xf8>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f005 f973 	bl	800e70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009428:	4b37      	ldr	r3, [pc, #220]	; (8009508 <USBD_CDC_DeInit+0xf8>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f003 020f 	and.w	r2, r3, #15
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	440b      	add	r3, r1
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	2200      	movs	r2, #0
 8009440:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009442:	4b32      	ldr	r3, [pc, #200]	; (800950c <USBD_CDC_DeInit+0xfc>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f005 f960 	bl	800e70e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800944e:	4b2f      	ldr	r3, [pc, #188]	; (800950c <USBD_CDC_DeInit+0xfc>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	f003 020f 	and.w	r2, r3, #15
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009466:	2200      	movs	r2, #0
 8009468:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800946a:	4b29      	ldr	r3, [pc, #164]	; (8009510 <USBD_CDC_DeInit+0x100>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f005 f94c 	bl	800e70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009476:	4b26      	ldr	r3, [pc, #152]	; (8009510 <USBD_CDC_DeInit+0x100>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	3324      	adds	r3, #36	; 0x24
 800948c:	2200      	movs	r2, #0
 800948e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009490:	4b1f      	ldr	r3, [pc, #124]	; (8009510 <USBD_CDC_DeInit+0x100>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f003 020f 	and.w	r2, r3, #15
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	440b      	add	r3, r1
 80094a4:	3326      	adds	r3, #38	; 0x26
 80094a6:	2200      	movs	r2, #0
 80094a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	32b0      	adds	r2, #176	; 0xb0
 80094b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01f      	beq.n	80094fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	33b0      	adds	r3, #176	; 0xb0
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	32b0      	adds	r2, #176	; 0xb0
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	4618      	mov	r0, r3
 80094e0:	f005 fa20 	bl	800e924 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	32b0      	adds	r2, #176	; 0xb0
 80094ee:	2100      	movs	r1, #0
 80094f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000058b 	.word	0x2000058b
 800950c:	2000058c 	.word	0x2000058c
 8009510:	2000058d 	.word	0x2000058d

08009514 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	32b0      	adds	r2, #176	; 0xb0
 8009528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	e0bf      	b.n	80096c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800954c:	2b00      	cmp	r3, #0
 800954e:	d050      	beq.n	80095f2 <USBD_CDC_Setup+0xde>
 8009550:	2b20      	cmp	r3, #32
 8009552:	f040 80af 	bne.w	80096b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d03a      	beq.n	80095d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b25b      	sxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	da1b      	bge.n	80095a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	33b0      	adds	r3, #176	; 0xb0
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800957e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	88d2      	ldrh	r2, [r2, #6]
 8009584:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	88db      	ldrh	r3, [r3, #6]
 800958a:	2b07      	cmp	r3, #7
 800958c:	bf28      	it	cs
 800958e:	2307      	movcs	r3, #7
 8009590:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	89fa      	ldrh	r2, [r7, #14]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 fd43 	bl	800b024 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800959e:	e090      	b.n	80096c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	785a      	ldrb	r2, [r3, #1]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	88db      	ldrh	r3, [r3, #6]
 80095ae:	2b3f      	cmp	r3, #63	; 0x3f
 80095b0:	d803      	bhi.n	80095ba <USBD_CDC_Setup+0xa6>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	88db      	ldrh	r3, [r3, #6]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	e000      	b.n	80095bc <USBD_CDC_Setup+0xa8>
 80095ba:	2240      	movs	r2, #64	; 0x40
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095c2:	6939      	ldr	r1, [r7, #16]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80095ca:	461a      	mov	r2, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fd55 	bl	800b07c <USBD_CtlPrepareRx>
      break;
 80095d2:	e076      	b.n	80096c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	33b0      	adds	r3, #176	; 0xb0
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	7850      	ldrb	r0, [r2, #1]
 80095ea:	2200      	movs	r2, #0
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	4798      	blx	r3
      break;
 80095f0:	e067      	b.n	80096c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b0b      	cmp	r3, #11
 80095f8:	d851      	bhi.n	800969e <USBD_CDC_Setup+0x18a>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USBD_CDC_Setup+0xec>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009631 	.word	0x08009631
 8009604:	080096ad 	.word	0x080096ad
 8009608:	0800969f 	.word	0x0800969f
 800960c:	0800969f 	.word	0x0800969f
 8009610:	0800969f 	.word	0x0800969f
 8009614:	0800969f 	.word	0x0800969f
 8009618:	0800969f 	.word	0x0800969f
 800961c:	0800969f 	.word	0x0800969f
 8009620:	0800969f 	.word	0x0800969f
 8009624:	0800969f 	.word	0x0800969f
 8009628:	0800965b 	.word	0x0800965b
 800962c:	08009685 	.word	0x08009685
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b03      	cmp	r3, #3
 800963a:	d107      	bne.n	800964c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800963c:	f107 030a 	add.w	r3, r7, #10
 8009640:	2202      	movs	r2, #2
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fced 	bl	800b024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800964a:	e032      	b.n	80096b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 fc77 	bl	800af42 <USBD_CtlError>
            ret = USBD_FAIL;
 8009654:	2303      	movs	r3, #3
 8009656:	75fb      	strb	r3, [r7, #23]
          break;
 8009658:	e02b      	b.n	80096b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d107      	bne.n	8009676 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009666:	f107 030d 	add.w	r3, r7, #13
 800966a:	2201      	movs	r2, #1
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 fcd8 	bl	800b024 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009674:	e01d      	b.n	80096b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 fc62 	bl	800af42 <USBD_CtlError>
            ret = USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	75fb      	strb	r3, [r7, #23]
          break;
 8009682:	e016      	b.n	80096b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b03      	cmp	r3, #3
 800968e:	d00f      	beq.n	80096b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 fc55 	bl	800af42 <USBD_CtlError>
            ret = USBD_FAIL;
 8009698:	2303      	movs	r3, #3
 800969a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800969c:	e008      	b.n	80096b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 fc4e 	bl	800af42 <USBD_CtlError>
          ret = USBD_FAIL;
 80096a6:	2303      	movs	r3, #3
 80096a8:	75fb      	strb	r3, [r7, #23]
          break;
 80096aa:	e002      	b.n	80096b2 <USBD_CDC_Setup+0x19e>
          break;
 80096ac:	bf00      	nop
 80096ae:	e008      	b.n	80096c2 <USBD_CDC_Setup+0x1ae>
          break;
 80096b0:	bf00      	nop
      }
      break;
 80096b2:	e006      	b.n	80096c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fc43 	bl	800af42 <USBD_CtlError>
      ret = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	75fb      	strb	r3, [r7, #23]
      break;
 80096c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	32b0      	adds	r2, #176	; 0xb0
 80096ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e065      	b.n	80097c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	32b0      	adds	r2, #176	; 0xb0
 8009700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009704:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	f003 020f 	and.w	r2, r3, #15
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	4613      	mov	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	3318      	adds	r3, #24
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d02f      	beq.n	8009780 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	f003 020f 	and.w	r2, r3, #15
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	3318      	adds	r3, #24
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	f003 010f 	and.w	r1, r3, #15
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	460b      	mov	r3, r1
 8009740:	00db      	lsls	r3, r3, #3
 8009742:	440b      	add	r3, r1
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4403      	add	r3, r0
 8009748:	3348      	adds	r3, #72	; 0x48
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009756:	2b00      	cmp	r3, #0
 8009758:	d112      	bne.n	8009780 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	f003 020f 	and.w	r2, r3, #15
 8009760:	6879      	ldr	r1, [r7, #4]
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	440b      	add	r3, r1
 800976c:	3318      	adds	r3, #24
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009772:	78f9      	ldrb	r1, [r7, #3]
 8009774:	2300      	movs	r3, #0
 8009776:	2200      	movs	r2, #0
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f005 f870 	bl	800e85e <USBD_LL_Transmit>
 800977e:	e01f      	b.n	80097c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	33b0      	adds	r3, #176	; 0xb0
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d010      	beq.n	80097c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	33b0      	adds	r3, #176	; 0xb0
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	32b0      	adds	r2, #176	; 0xb0
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	32b0      	adds	r2, #176	; 0xb0
 80097f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e01a      	b.n	8009832 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097fc:	78fb      	ldrb	r3, [r7, #3]
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f005 f86e 	bl	800e8e2 <USBD_LL_GetRxDataSize>
 8009806:	4602      	mov	r2, r0
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	33b0      	adds	r3, #176	; 0xb0
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800982c:	4611      	mov	r1, r2
 800982e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	32b0      	adds	r2, #176	; 0xb0
 800984c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009850:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009858:	2303      	movs	r3, #3
 800985a:	e025      	b.n	80098a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	33b0      	adds	r3, #176	; 0xb0
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01a      	beq.n	80098a6 <USBD_CDC_EP0_RxReady+0x6c>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009876:	2bff      	cmp	r3, #255	; 0xff
 8009878:	d015      	beq.n	80098a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	33b0      	adds	r3, #176	; 0xb0
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009892:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800989a:	b292      	uxth	r2, r2
 800989c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	22ff      	movs	r2, #255	; 0xff
 80098a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098b8:	2182      	movs	r1, #130	; 0x82
 80098ba:	4818      	ldr	r0, [pc, #96]	; (800991c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098bc:	f000 fd09 	bl	800a2d2 <USBD_GetEpDesc>
 80098c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098c2:	2101      	movs	r1, #1
 80098c4:	4815      	ldr	r0, [pc, #84]	; (800991c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098c6:	f000 fd04 	bl	800a2d2 <USBD_GetEpDesc>
 80098ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098cc:	2181      	movs	r1, #129	; 0x81
 80098ce:	4813      	ldr	r0, [pc, #76]	; (800991c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098d0:	f000 fcff 	bl	800a2d2 <USBD_GetEpDesc>
 80098d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2210      	movs	r2, #16
 80098e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f0:	711a      	strb	r2, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d006      	beq.n	800990a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009904:	711a      	strb	r2, [r3, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2243      	movs	r2, #67	; 0x43
 800990e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000548 	.word	0x20000548

08009920 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009928:	2182      	movs	r1, #130	; 0x82
 800992a:	4818      	ldr	r0, [pc, #96]	; (800998c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800992c:	f000 fcd1 	bl	800a2d2 <USBD_GetEpDesc>
 8009930:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009932:	2101      	movs	r1, #1
 8009934:	4815      	ldr	r0, [pc, #84]	; (800998c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009936:	f000 fccc 	bl	800a2d2 <USBD_GetEpDesc>
 800993a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800993c:	2181      	movs	r1, #129	; 0x81
 800993e:	4813      	ldr	r0, [pc, #76]	; (800998c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009940:	f000 fcc7 	bl	800a2d2 <USBD_GetEpDesc>
 8009944:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2210      	movs	r2, #16
 8009950:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d006      	beq.n	8009966 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	2200      	movs	r2, #0
 800995c:	711a      	strb	r2, [r3, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f042 0202 	orr.w	r2, r2, #2
 8009964:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d006      	beq.n	800997a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	711a      	strb	r2, [r3, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f042 0202 	orr.w	r2, r2, #2
 8009978:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2243      	movs	r2, #67	; 0x43
 800997e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20000548 	.word	0x20000548

08009990 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009998:	2182      	movs	r1, #130	; 0x82
 800999a:	4818      	ldr	r0, [pc, #96]	; (80099fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800999c:	f000 fc99 	bl	800a2d2 <USBD_GetEpDesc>
 80099a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099a2:	2101      	movs	r1, #1
 80099a4:	4815      	ldr	r0, [pc, #84]	; (80099fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099a6:	f000 fc94 	bl	800a2d2 <USBD_GetEpDesc>
 80099aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099ac:	2181      	movs	r1, #129	; 0x81
 80099ae:	4813      	ldr	r0, [pc, #76]	; (80099fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099b0:	f000 fc8f 	bl	800a2d2 <USBD_GetEpDesc>
 80099b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2210      	movs	r2, #16
 80099c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d006      	beq.n	80099d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d0:	711a      	strb	r2, [r3, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d006      	beq.n	80099ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e4:	711a      	strb	r2, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2243      	movs	r2, #67	; 0x43
 80099ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000548 	.word	0x20000548

08009a00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000504 	.word	0x20000504

08009a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e009      	b.n	8009a48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	33b0      	adds	r3, #176	; 0xb0
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	32b0      	adds	r2, #176	; 0xb0
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e008      	b.n	8009a8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	32b0      	adds	r2, #176	; 0xb0
 8009aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e004      	b.n	8009ac6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
	...

08009ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32b0      	adds	r2, #176	; 0xb0
 8009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	32b0      	adds	r2, #176	; 0xb0
 8009af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e018      	b.n	8009b34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7c1b      	ldrb	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <USBD_CDC_ReceivePacket+0x68>)
 8009b0c:	7819      	ldrb	r1, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f004 fec1 	bl	800e8a0 <USBD_LL_PrepareReceive>
 8009b1e:	e008      	b.n	8009b32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <USBD_CDC_ReceivePacket+0x68>)
 8009b22:	7819      	ldrb	r1, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b2a:	2340      	movs	r3, #64	; 0x40
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f004 feb7 	bl	800e8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2000058c 	.word	0x2000058c

08009b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e01f      	b.n	8009b98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	79fa      	ldrb	r2, [r7, #7]
 8009b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f004 fd31 	bl	800e5f4 <USBD_LL_Init>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e025      	b.n	8009c04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32ae      	adds	r2, #174	; 0xae
 8009bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32ae      	adds	r2, #174	; 0xae
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	f107 020e 	add.w	r2, r7, #14
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f004 fd39 	bl	800e68c <USBD_LL_Start>
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	78fa      	ldrb	r2, [r7, #3]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 f908 	bl	800aece <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cda:	f003 031f 	and.w	r3, r3, #31
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d01a      	beq.n	8009d18 <USBD_LL_SetupStage+0x72>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d822      	bhi.n	8009d2c <USBD_LL_SetupStage+0x86>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <USBD_LL_SetupStage+0x4a>
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d00a      	beq.n	8009d04 <USBD_LL_SetupStage+0x5e>
 8009cee:	e01d      	b.n	8009d2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fb5f 	bl	800a3bc <USBD_StdDevReq>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]
      break;
 8009d02:	e020      	b.n	8009d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fbc7 	bl	800a4a0 <USBD_StdItfReq>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	e016      	b.n	8009d46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fc29 	bl	800a578 <USBD_StdEPReq>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2a:	e00c      	b.n	8009d46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f004 fd06 	bl	800e74c <USBD_LL_StallEP>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]
      break;
 8009d44:	bf00      	nop
  }

  return ret;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d62:	7afb      	ldrb	r3, [r7, #11]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d16e      	bne.n	8009e46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	f040 8098 	bne.w	8009eac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d913      	bls.n	8009db0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	1ad2      	subs	r2, r2, r3
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	bf28      	it	cs
 8009da2:	4613      	movcs	r3, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f001 f984 	bl	800b0b6 <USBD_CtlContinueRx>
 8009dae:	e07d      	b.n	8009eac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009db6:	f003 031f 	and.w	r3, r3, #31
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d014      	beq.n	8009de8 <USBD_LL_DataOutStage+0x98>
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d81d      	bhi.n	8009dfe <USBD_LL_DataOutStage+0xae>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <USBD_LL_DataOutStage+0x7c>
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d003      	beq.n	8009dd2 <USBD_LL_DataOutStage+0x82>
 8009dca:	e018      	b.n	8009dfe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75bb      	strb	r3, [r7, #22]
            break;
 8009dd0:	e018      	b.n	8009e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fa5e 	bl	800a29e <USBD_CoreFindIF>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75bb      	strb	r3, [r7, #22]
            break;
 8009de6:	e00d      	b.n	8009e04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4619      	mov	r1, r3
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 fa60 	bl	800a2b8 <USBD_CoreFindEP>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75bb      	strb	r3, [r7, #22]
            break;
 8009dfc:	e002      	b.n	8009e04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75bb      	strb	r3, [r7, #22]
            break;
 8009e02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e04:	7dbb      	ldrb	r3, [r7, #22]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d119      	bne.n	8009e3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d113      	bne.n	8009e3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e16:	7dba      	ldrb	r2, [r7, #22]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	32ae      	adds	r2, #174	; 0xae
 8009e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00b      	beq.n	8009e3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e26:	7dba      	ldrb	r2, [r7, #22]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e2e:	7dba      	ldrb	r2, [r7, #22]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	32ae      	adds	r2, #174	; 0xae
 8009e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f001 f94a 	bl	800b0d8 <USBD_CtlSendStatus>
 8009e44:	e032      	b.n	8009eac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fa31 	bl	800a2b8 <USBD_CoreFindEP>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e5a:	7dbb      	ldrb	r3, [r7, #22]
 8009e5c:	2bff      	cmp	r3, #255	; 0xff
 8009e5e:	d025      	beq.n	8009eac <USBD_LL_DataOutStage+0x15c>
 8009e60:	7dbb      	ldrb	r3, [r7, #22]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d122      	bne.n	8009eac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d117      	bne.n	8009ea2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e72:	7dba      	ldrb	r2, [r7, #22]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	32ae      	adds	r2, #174	; 0xae
 8009e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00f      	beq.n	8009ea2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e82:	7dba      	ldrb	r2, [r7, #22]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e8a:	7dba      	ldrb	r2, [r7, #22]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	32ae      	adds	r2, #174	; 0xae
 8009e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	7afa      	ldrb	r2, [r7, #11]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	4798      	blx	r3
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	e000      	b.n	8009eae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b086      	sub	sp, #24
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d16f      	bne.n	8009faa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3314      	adds	r3, #20
 8009ece:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d15a      	bne.n	8009f90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	689a      	ldr	r2, [r3, #8]
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d914      	bls.n	8009f10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f001 f8ac 	bl	800b05a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f02:	2300      	movs	r3, #0
 8009f04:	2200      	movs	r2, #0
 8009f06:	2100      	movs	r1, #0
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f004 fcc9 	bl	800e8a0 <USBD_LL_PrepareReceive>
 8009f0e:	e03f      	b.n	8009f90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d11c      	bne.n	8009f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d316      	bcc.n	8009f56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d20f      	bcs.n	8009f56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f36:	2200      	movs	r2, #0
 8009f38:	2100      	movs	r1, #0
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f001 f88d 	bl	800b05a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f004 fca6 	bl	800e8a0 <USBD_LL_PrepareReceive>
 8009f54:	e01c      	b.n	8009f90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d10f      	bne.n	8009f82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f82:	2180      	movs	r1, #128	; 0x80
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f004 fbe1 	bl	800e74c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f001 f8b7 	bl	800b0fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d03a      	beq.n	800a010 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fe42 	bl	8009c24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009fa8:	e032      	b.n	800a010 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f97f 	bl	800a2b8 <USBD_CoreFindEP>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	2bff      	cmp	r3, #255	; 0xff
 8009fc2:	d025      	beq.n	800a010 <USBD_LL_DataInStage+0x15a>
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d122      	bne.n	800a010 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d11c      	bne.n	800a010 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009fd6:	7dfa      	ldrb	r2, [r7, #23]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	32ae      	adds	r2, #174	; 0xae
 8009fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d014      	beq.n	800a010 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009fe6:	7dfa      	ldrb	r2, [r7, #23]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009fee:	7dfa      	ldrb	r2, [r7, #23]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	32ae      	adds	r2, #174	; 0xae
 8009ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	7afa      	ldrb	r2, [r7, #11]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	4798      	blx	r3
 800a002:	4603      	mov	r3, r0
 800a004:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a006:	7dbb      	ldrb	r3, [r7, #22]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a00c:	7dbb      	ldrb	r3, [r7, #22]
 800a00e:	e000      	b.n	800a012 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	2b00      	cmp	r3, #0
 800a054:	d014      	beq.n	800a080 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00e      	beq.n	800a080 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6852      	ldr	r2, [r2, #4]
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a07c:	2303      	movs	r3, #3
 800a07e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a080:	2340      	movs	r3, #64	; 0x40
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f004 fb1b 	bl	800e6c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2240      	movs	r2, #64	; 0x40
 800a098:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f004 fb0d 	bl	800e6c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2240      	movs	r2, #64	; 0x40
 800a0b2:	621a      	str	r2, [r3, #32]

  return ret;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d106      	bne.n	800a12c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a124:	b2da      	uxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d110      	bne.n	800a170 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00b      	beq.n	800a170 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	32ae      	adds	r2, #174	; 0xae
 800a190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a198:	2303      	movs	r3, #3
 800a19a:	e01c      	b.n	800a1d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	d115      	bne.n	800a1d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	32ae      	adds	r2, #174	; 0xae
 800a1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00b      	beq.n	800a1d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	32ae      	adds	r2, #174	; 0xae
 800a1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	32ae      	adds	r2, #174	; 0xae
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e01c      	b.n	800a23a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d115      	bne.n	800a238 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	32ae      	adds	r2, #174	; 0xae
 800a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	32ae      	adds	r2, #174	; 0xae
 800a22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	78fa      	ldrb	r2, [r7, #3]
 800a232:	4611      	mov	r1, r2
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a242:	b480      	push	{r7}
 800a244:	b083      	sub	sp, #12
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00e      	beq.n	800a294 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6852      	ldr	r2, [r2, #4]
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	4611      	mov	r1, r2
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a290:	2303      	movs	r3, #3
 800a292:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d920      	bls.n	800a33c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a302:	e013      	b.n	800a32c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a304:	f107 030a 	add.w	r3, r7, #10
 800a308:	4619      	mov	r1, r3
 800a30a:	6978      	ldr	r0, [r7, #20]
 800a30c:	f000 f81b 	bl	800a346 <USBD_GetNextDesc>
 800a310:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b05      	cmp	r3, #5
 800a318:	d108      	bne.n	800a32c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	789b      	ldrb	r3, [r3, #2]
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	429a      	cmp	r2, r3
 800a326:	d008      	beq.n	800a33a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	885b      	ldrh	r3, [r3, #2]
 800a330:	b29a      	uxth	r2, r3
 800a332:	897b      	ldrh	r3, [r7, #10]
 800a334:	429a      	cmp	r2, r3
 800a336:	d8e5      	bhi.n	800a304 <USBD_GetEpDesc+0x32>
 800a338:	e000      	b.n	800a33c <USBD_GetEpDesc+0x6a>
          break;
 800a33a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a33c:	693b      	ldr	r3, [r7, #16]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	4413      	add	r3, r2
 800a360:	b29a      	uxth	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a372:	68fb      	ldr	r3, [r7, #12]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	3301      	adds	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a39e:	8a3b      	ldrh	r3, [r7, #16]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	b21a      	sxth	r2, r3
 800a3a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3ae:	89fb      	ldrh	r3, [r7, #14]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d005      	beq.n	800a3e2 <USBD_StdDevReq+0x26>
 800a3d6:	2b40      	cmp	r3, #64	; 0x40
 800a3d8:	d857      	bhi.n	800a48a <USBD_StdDevReq+0xce>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00f      	beq.n	800a3fe <USBD_StdDevReq+0x42>
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d153      	bne.n	800a48a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	32ae      	adds	r2, #174	; 0xae
 800a3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a3fc:	e04a      	b.n	800a494 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	2b09      	cmp	r3, #9
 800a404:	d83b      	bhi.n	800a47e <USBD_StdDevReq+0xc2>
 800a406:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <USBD_StdDevReq+0x50>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a47f 	.word	0x0800a47f
 800a418:	0800a46b 	.word	0x0800a46b
 800a41c:	0800a47f 	.word	0x0800a47f
 800a420:	0800a43f 	.word	0x0800a43f
 800a424:	0800a435 	.word	0x0800a435
 800a428:	0800a47f 	.word	0x0800a47f
 800a42c:	0800a457 	.word	0x0800a457
 800a430:	0800a449 	.word	0x0800a449
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa3c 	bl	800a8b4 <USBD_GetDescriptor>
          break;
 800a43c:	e024      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fba1 	bl	800ab88 <USBD_SetAddress>
          break;
 800a446:	e01f      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fbe0 	bl	800ac10 <USBD_SetConfig>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]
          break;
 800a454:	e018      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fc83 	bl	800ad64 <USBD_GetConfig>
          break;
 800a45e:	e013      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fcb4 	bl	800add0 <USBD_GetStatus>
          break;
 800a468:	e00e      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fce3 	bl	800ae38 <USBD_SetFeature>
          break;
 800a472:	e009      	b.n	800a488 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fd07 	bl	800ae8a <USBD_ClrFeature>
          break;
 800a47c:	e004      	b.n	800a488 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fd5e 	bl	800af42 <USBD_CtlError>
          break;
 800a486:	bf00      	nop
      }
      break;
 800a488:	e004      	b.n	800a494 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fd58 	bl	800af42 <USBD_CtlError>
      break;
 800a492:	bf00      	nop
  }

  return ret;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop

0800a4a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4b6:	2b40      	cmp	r3, #64	; 0x40
 800a4b8:	d005      	beq.n	800a4c6 <USBD_StdItfReq+0x26>
 800a4ba:	2b40      	cmp	r3, #64	; 0x40
 800a4bc:	d852      	bhi.n	800a564 <USBD_StdItfReq+0xc4>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <USBD_StdItfReq+0x26>
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d14e      	bne.n	800a564 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d840      	bhi.n	800a556 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	889b      	ldrh	r3, [r3, #4]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d836      	bhi.n	800a54c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	889b      	ldrh	r3, [r3, #4]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fed9 	bl	800a29e <USBD_CoreFindIF>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2bff      	cmp	r3, #255	; 0xff
 800a4f4:	d01d      	beq.n	800a532 <USBD_StdItfReq+0x92>
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d11a      	bne.n	800a532 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a4fc:	7bba      	ldrb	r2, [r7, #14]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	32ae      	adds	r2, #174	; 0xae
 800a502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00f      	beq.n	800a52c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a50c:	7bba      	ldrb	r2, [r7, #14]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a514:	7bba      	ldrb	r2, [r7, #14]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	32ae      	adds	r2, #174	; 0xae
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a52a:	e004      	b.n	800a536 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a530:	e001      	b.n	800a536 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	88db      	ldrh	r3, [r3, #6]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d110      	bne.n	800a560 <USBD_StdItfReq+0xc0>
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10d      	bne.n	800a560 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fdc7 	bl	800b0d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a54a:	e009      	b.n	800a560 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fcf7 	bl	800af42 <USBD_CtlError>
          break;
 800a554:	e004      	b.n	800a560 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fcf2 	bl	800af42 <USBD_CtlError>
          break;
 800a55e:	e000      	b.n	800a562 <USBD_StdItfReq+0xc2>
          break;
 800a560:	bf00      	nop
      }
      break;
 800a562:	e004      	b.n	800a56e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fceb 	bl	800af42 <USBD_CtlError>
      break;
 800a56c:	bf00      	nop
  }

  return ret;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	889b      	ldrh	r3, [r3, #4]
 800a58a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d007      	beq.n	800a5a8 <USBD_StdEPReq+0x30>
 800a598:	2b40      	cmp	r3, #64	; 0x40
 800a59a:	f200 817f 	bhi.w	800a89c <USBD_StdEPReq+0x324>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02a      	beq.n	800a5f8 <USBD_StdEPReq+0x80>
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	f040 817a 	bne.w	800a89c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7ff fe83 	bl	800a2b8 <USBD_CoreFindEP>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5b6:	7b7b      	ldrb	r3, [r7, #13]
 800a5b8:	2bff      	cmp	r3, #255	; 0xff
 800a5ba:	f000 8174 	beq.w	800a8a6 <USBD_StdEPReq+0x32e>
 800a5be:	7b7b      	ldrb	r3, [r7, #13]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f040 8170 	bne.w	800a8a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5c6:	7b7a      	ldrb	r2, [r7, #13]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5ce:	7b7a      	ldrb	r2, [r7, #13]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	32ae      	adds	r2, #174	; 0xae
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 8163 	beq.w	800a8a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5e0:	7b7a      	ldrb	r2, [r7, #13]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	32ae      	adds	r2, #174	; 0xae
 800a5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5f6:	e156      	b.n	800a8a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d008      	beq.n	800a612 <USBD_StdEPReq+0x9a>
 800a600:	2b03      	cmp	r3, #3
 800a602:	f300 8145 	bgt.w	800a890 <USBD_StdEPReq+0x318>
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 809b 	beq.w	800a742 <USBD_StdEPReq+0x1ca>
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d03c      	beq.n	800a68a <USBD_StdEPReq+0x112>
 800a610:	e13e      	b.n	800a890 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d002      	beq.n	800a624 <USBD_StdEPReq+0xac>
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d016      	beq.n	800a650 <USBD_StdEPReq+0xd8>
 800a622:	e02c      	b.n	800a67e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a624:	7bbb      	ldrb	r3, [r7, #14]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00d      	beq.n	800a646 <USBD_StdEPReq+0xce>
 800a62a:	7bbb      	ldrb	r3, [r7, #14]
 800a62c:	2b80      	cmp	r3, #128	; 0x80
 800a62e:	d00a      	beq.n	800a646 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f004 f889 	bl	800e74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a63a:	2180      	movs	r1, #128	; 0x80
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f004 f885 	bl	800e74c <USBD_LL_StallEP>
 800a642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a644:	e020      	b.n	800a688 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc7a 	bl	800af42 <USBD_CtlError>
              break;
 800a64e:	e01b      	b.n	800a688 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10e      	bne.n	800a676 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <USBD_StdEPReq+0xfe>
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b80      	cmp	r3, #128	; 0x80
 800a662:	d008      	beq.n	800a676 <USBD_StdEPReq+0xfe>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	88db      	ldrh	r3, [r3, #6]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f004 f86b 	bl	800e74c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fd2e 	bl	800b0d8 <USBD_CtlSendStatus>

              break;
 800a67c:	e004      	b.n	800a688 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fc5e 	bl	800af42 <USBD_CtlError>
              break;
 800a686:	bf00      	nop
          }
          break;
 800a688:	e107      	b.n	800a89a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b02      	cmp	r3, #2
 800a694:	d002      	beq.n	800a69c <USBD_StdEPReq+0x124>
 800a696:	2b03      	cmp	r3, #3
 800a698:	d016      	beq.n	800a6c8 <USBD_StdEPReq+0x150>
 800a69a:	e04b      	b.n	800a734 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a69c:	7bbb      	ldrb	r3, [r7, #14]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00d      	beq.n	800a6be <USBD_StdEPReq+0x146>
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d00a      	beq.n	800a6be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f004 f84d 	bl	800e74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6b2:	2180      	movs	r1, #128	; 0x80
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f004 f849 	bl	800e74c <USBD_LL_StallEP>
 800a6ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6bc:	e040      	b.n	800a740 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fc3e 	bl	800af42 <USBD_CtlError>
              break;
 800a6c6:	e03b      	b.n	800a740 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	885b      	ldrh	r3, [r3, #2]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d136      	bne.n	800a73e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f004 f853 	bl	800e78a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fcf7 	bl	800b0d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fde2 	bl	800a2b8 <USBD_CoreFindEP>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6f8:	7b7b      	ldrb	r3, [r7, #13]
 800a6fa:	2bff      	cmp	r3, #255	; 0xff
 800a6fc:	d01f      	beq.n	800a73e <USBD_StdEPReq+0x1c6>
 800a6fe:	7b7b      	ldrb	r3, [r7, #13]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11c      	bne.n	800a73e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a704:	7b7a      	ldrb	r2, [r7, #13]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a70c:	7b7a      	ldrb	r2, [r7, #13]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32ae      	adds	r2, #174	; 0xae
 800a712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d010      	beq.n	800a73e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a71c:	7b7a      	ldrb	r2, [r7, #13]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	32ae      	adds	r2, #174	; 0xae
 800a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a732:	e004      	b.n	800a73e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fc03 	bl	800af42 <USBD_CtlError>
              break;
 800a73c:	e000      	b.n	800a740 <USBD_StdEPReq+0x1c8>
              break;
 800a73e:	bf00      	nop
          }
          break;
 800a740:	e0ab      	b.n	800a89a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d002      	beq.n	800a754 <USBD_StdEPReq+0x1dc>
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d032      	beq.n	800a7b8 <USBD_StdEPReq+0x240>
 800a752:	e097      	b.n	800a884 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <USBD_StdEPReq+0x1f2>
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b80      	cmp	r3, #128	; 0x80
 800a75e:	d004      	beq.n	800a76a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fbed 	bl	800af42 <USBD_CtlError>
                break;
 800a768:	e091      	b.n	800a88e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a76a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da0b      	bge.n	800a78a <USBD_StdEPReq+0x212>
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a778:	4613      	mov	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	3310      	adds	r3, #16
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	e00b      	b.n	800a7a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fc37 	bl	800b024 <USBD_CtlSendData>
              break;
 800a7b6:	e06a      	b.n	800a88e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	da11      	bge.n	800a7e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	f003 020f 	and.w	r2, r3, #15
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	3324      	adds	r3, #36	; 0x24
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d117      	bne.n	800a80a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fbb0 	bl	800af42 <USBD_CtlError>
                  break;
 800a7e2:	e054      	b.n	800a88e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	f003 020f 	and.w	r2, r3, #15
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fb9d 	bl	800af42 <USBD_CtlError>
                  break;
 800a808:	e041      	b.n	800a88e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a80a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	da0b      	bge.n	800a82a <USBD_StdEPReq+0x2b2>
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	3310      	adds	r3, #16
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4413      	add	r3, r2
 800a826:	3304      	adds	r3, #4
 800a828:	e00b      	b.n	800a842 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	4413      	add	r3, r2
 800a840:	3304      	adds	r3, #4
 800a842:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <USBD_StdEPReq+0x2d8>
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b80      	cmp	r3, #128	; 0x80
 800a84e:	d103      	bne.n	800a858 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e00e      	b.n	800a876 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f003 ffb3 	bl	800e7c8 <USBD_LL_IsStallEP>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e002      	b.n	800a876 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2202      	movs	r2, #2
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fbd1 	bl	800b024 <USBD_CtlSendData>
              break;
 800a882:	e004      	b.n	800a88e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fb5b 	bl	800af42 <USBD_CtlError>
              break;
 800a88c:	bf00      	nop
          }
          break;
 800a88e:	e004      	b.n	800a89a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fb55 	bl	800af42 <USBD_CtlError>
          break;
 800a898:	bf00      	nop
      }
      break;
 800a89a:	e005      	b.n	800a8a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb4f 	bl	800af42 <USBD_CtlError>
      break;
 800a8a4:	e000      	b.n	800a8a8 <USBD_StdEPReq+0x330>
      break;
 800a8a6:	bf00      	nop
  }

  return ret;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	885b      	ldrh	r3, [r3, #2]
 800a8ce:	0a1b      	lsrs	r3, r3, #8
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	2b06      	cmp	r3, #6
 800a8d6:	f200 8128 	bhi.w	800ab2a <USBD_GetDescriptor+0x276>
 800a8da:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <USBD_GetDescriptor+0x2c>)
 800a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e0:	0800a8fd 	.word	0x0800a8fd
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a955 	.word	0x0800a955
 800a8ec:	0800ab2b 	.word	0x0800ab2b
 800a8f0:	0800ab2b 	.word	0x0800ab2b
 800a8f4:	0800aacb 	.word	0x0800aacb
 800a8f8:	0800aaf7 	.word	0x0800aaf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	7c12      	ldrb	r2, [r2, #16]
 800a908:	f107 0108 	add.w	r1, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
      break;
 800a912:	e112      	b.n	800ab3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7c1b      	ldrb	r3, [r3, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10d      	bne.n	800a938 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a924:	f107 0208 	add.w	r2, r7, #8
 800a928:	4610      	mov	r0, r2
 800a92a:	4798      	blx	r3
 800a92c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3301      	adds	r3, #1
 800a932:	2202      	movs	r2, #2
 800a934:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a936:	e100      	b.n	800ab3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a940:	f107 0208 	add.w	r2, r7, #8
 800a944:	4610      	mov	r0, r2
 800a946:	4798      	blx	r3
 800a948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3301      	adds	r3, #1
 800a94e:	2202      	movs	r2, #2
 800a950:	701a      	strb	r2, [r3, #0]
      break;
 800a952:	e0f2      	b.n	800ab3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	885b      	ldrh	r3, [r3, #2]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	f200 80ac 	bhi.w	800aab8 <USBD_GetDescriptor+0x204>
 800a960:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <USBD_GetDescriptor+0xb4>)
 800a962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a966:	bf00      	nop
 800a968:	0800a981 	.word	0x0800a981
 800a96c:	0800a9b5 	.word	0x0800a9b5
 800a970:	0800a9e9 	.word	0x0800a9e9
 800a974:	0800aa1d 	.word	0x0800aa1d
 800a978:	0800aa51 	.word	0x0800aa51
 800a97c:	0800aa85 	.word	0x0800aa85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00b      	beq.n	800a9a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	7c12      	ldrb	r2, [r2, #16]
 800a998:	f107 0108 	add.w	r1, r7, #8
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9a2:	e091      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 facb 	bl	800af42 <USBD_CtlError>
            err++;
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9b2:	e089      	b.n	800aac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	7c12      	ldrb	r2, [r2, #16]
 800a9cc:	f107 0108 	add.w	r1, r7, #8
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	4798      	blx	r3
 800a9d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d6:	e077      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fab1 	bl	800af42 <USBD_CtlError>
            err++;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e6:	e06f      	b.n	800aac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	7c12      	ldrb	r2, [r2, #16]
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	4610      	mov	r0, r2
 800aa06:	4798      	blx	r3
 800aa08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa0a:	e05d      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa97 	bl	800af42 <USBD_CtlError>
            err++;
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	3301      	adds	r3, #1
 800aa18:	72fb      	strb	r3, [r7, #11]
          break;
 800aa1a:	e055      	b.n	800aac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00b      	beq.n	800aa40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	7c12      	ldrb	r2, [r2, #16]
 800aa34:	f107 0108 	add.w	r1, r7, #8
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4798      	blx	r3
 800aa3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3e:	e043      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa7d 	bl	800af42 <USBD_CtlError>
            err++;
 800aa48:	7afb      	ldrb	r3, [r7, #11]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4e:	e03b      	b.n	800aac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00b      	beq.n	800aa74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	7c12      	ldrb	r2, [r2, #16]
 800aa68:	f107 0108 	add.w	r1, r7, #8
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	4798      	blx	r3
 800aa70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa72:	e029      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fa63 	bl	800af42 <USBD_CtlError>
            err++;
 800aa7c:	7afb      	ldrb	r3, [r7, #11]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	72fb      	strb	r3, [r7, #11]
          break;
 800aa82:	e021      	b.n	800aac8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	7c12      	ldrb	r2, [r2, #16]
 800aa9c:	f107 0108 	add.w	r1, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa6:	e00f      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fa49 	bl	800af42 <USBD_CtlError>
            err++;
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	3301      	adds	r3, #1
 800aab4:	72fb      	strb	r3, [r7, #11]
          break;
 800aab6:	e007      	b.n	800aac8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fa41 	bl	800af42 <USBD_CtlError>
          err++;
 800aac0:	7afb      	ldrb	r3, [r7, #11]
 800aac2:	3301      	adds	r3, #1
 800aac4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aac6:	bf00      	nop
      }
      break;
 800aac8:	e037      	b.n	800ab3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	7c1b      	ldrb	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d109      	bne.n	800aae6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	f107 0208 	add.w	r2, r7, #8
 800aade:	4610      	mov	r0, r2
 800aae0:	4798      	blx	r3
 800aae2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aae4:	e029      	b.n	800ab3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fa2a 	bl	800af42 <USBD_CtlError>
        err++;
 800aaee:	7afb      	ldrb	r3, [r7, #11]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf4:	e021      	b.n	800ab3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	7c1b      	ldrb	r3, [r3, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10d      	bne.n	800ab1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab06:	f107 0208 	add.w	r2, r7, #8
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	4798      	blx	r3
 800ab0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3301      	adds	r3, #1
 800ab14:	2207      	movs	r2, #7
 800ab16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab18:	e00f      	b.n	800ab3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fa10 	bl	800af42 <USBD_CtlError>
        err++;
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	3301      	adds	r3, #1
 800ab26:	72fb      	strb	r3, [r7, #11]
      break;
 800ab28:	e007      	b.n	800ab3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa08 	bl	800af42 <USBD_CtlError>
      err++;
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	3301      	adds	r3, #1
 800ab36:	72fb      	strb	r3, [r7, #11]
      break;
 800ab38:	bf00      	nop
  }

  if (err != 0U)
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11e      	bne.n	800ab7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	88db      	ldrh	r3, [r3, #6]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d016      	beq.n	800ab76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab48:	893b      	ldrh	r3, [r7, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00e      	beq.n	800ab6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	88da      	ldrh	r2, [r3, #6]
 800ab52:	893b      	ldrh	r3, [r7, #8]
 800ab54:	4293      	cmp	r3, r2
 800ab56:	bf28      	it	cs
 800ab58:	4613      	movcs	r3, r2
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab5e:	893b      	ldrh	r3, [r7, #8]
 800ab60:	461a      	mov	r2, r3
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fa5d 	bl	800b024 <USBD_CtlSendData>
 800ab6a:	e009      	b.n	800ab80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f9e7 	bl	800af42 <USBD_CtlError>
 800ab74:	e004      	b.n	800ab80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 faae 	bl	800b0d8 <USBD_CtlSendStatus>
 800ab7c:	e000      	b.n	800ab80 <USBD_GetDescriptor+0x2cc>
    return;
 800ab7e:	bf00      	nop
  }
}
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop

0800ab88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	889b      	ldrh	r3, [r3, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d131      	bne.n	800abfe <USBD_SetAddress+0x76>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	88db      	ldrh	r3, [r3, #6]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d12d      	bne.n	800abfe <USBD_SetAddress+0x76>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	885b      	ldrh	r3, [r3, #2]
 800aba6:	2b7f      	cmp	r3, #127	; 0x7f
 800aba8:	d829      	bhi.n	800abfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	885b      	ldrh	r3, [r3, #2]
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d104      	bne.n	800abcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9bc 	bl	800af42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abca:	e01d      	b.n	800ac08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	7bfa      	ldrb	r2, [r7, #15]
 800abd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f003 fe21 	bl	800e820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa7a 	bl	800b0d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d004      	beq.n	800abf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2202      	movs	r2, #2
 800abee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf2:	e009      	b.n	800ac08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfc:	e004      	b.n	800ac08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f99e 	bl	800af42 <USBD_CtlError>
  }
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	885b      	ldrh	r3, [r3, #2]
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	4b4e      	ldr	r3, [pc, #312]	; (800ad60 <USBD_SetConfig+0x150>)
 800ac26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac28:	4b4d      	ldr	r3, [pc, #308]	; (800ad60 <USBD_SetConfig+0x150>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d905      	bls.n	800ac3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f985 	bl	800af42 <USBD_CtlError>
    return USBD_FAIL;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e08c      	b.n	800ad56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d002      	beq.n	800ac4e <USBD_SetConfig+0x3e>
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d029      	beq.n	800aca0 <USBD_SetConfig+0x90>
 800ac4c:	e075      	b.n	800ad3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac4e:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <USBD_SetConfig+0x150>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d020      	beq.n	800ac98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac56:	4b42      	ldr	r3, [pc, #264]	; (800ad60 <USBD_SetConfig+0x150>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac60:	4b3f      	ldr	r3, [pc, #252]	; (800ad60 <USBD_SetConfig+0x150>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7fe ffe7 	bl	8009c3a <USBD_SetClassConfig>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d008      	beq.n	800ac88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f962 	bl	800af42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac86:	e065      	b.n	800ad54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa25 	bl	800b0d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2203      	movs	r2, #3
 800ac92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac96:	e05d      	b.n	800ad54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa1d 	bl	800b0d8 <USBD_CtlSendStatus>
      break;
 800ac9e:	e059      	b.n	800ad54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aca0:	4b2f      	ldr	r3, [pc, #188]	; (800ad60 <USBD_SetConfig+0x150>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d112      	bne.n	800acce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800acb0:	4b2b      	ldr	r3, [pc, #172]	; (800ad60 <USBD_SetConfig+0x150>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acba:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <USBD_SetConfig+0x150>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fe ffd6 	bl	8009c72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa06 	bl	800b0d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800accc:	e042      	b.n	800ad54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800acce:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <USBD_SetConfig+0x150>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d02a      	beq.n	800ad32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7fe ffc4 	bl	8009c72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acea:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <USBD_SetConfig+0x150>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acf4:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <USBD_SetConfig+0x150>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7fe ff9d 	bl	8009c3a <USBD_SetClassConfig>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00f      	beq.n	800ad2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f918 	bl	800af42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fe ffa9 	bl	8009c72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad28:	e014      	b.n	800ad54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f9d4 	bl	800b0d8 <USBD_CtlSendStatus>
      break;
 800ad30:	e010      	b.n	800ad54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f9d0 	bl	800b0d8 <USBD_CtlSendStatus>
      break;
 800ad38:	e00c      	b.n	800ad54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f900 	bl	800af42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad42:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <USBD_SetConfig+0x150>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7fe ff92 	bl	8009c72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	73fb      	strb	r3, [r7, #15]
      break;
 800ad52:	bf00      	nop
  }

  return ret;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000878 	.word	0x20000878

0800ad64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	88db      	ldrh	r3, [r3, #6]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d004      	beq.n	800ad80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f8e2 	bl	800af42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad7e:	e023      	b.n	800adc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	dc02      	bgt.n	800ad92 <USBD_GetConfig+0x2e>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dc03      	bgt.n	800ad98 <USBD_GetConfig+0x34>
 800ad90:	e015      	b.n	800adbe <USBD_GetConfig+0x5a>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d00b      	beq.n	800adae <USBD_GetConfig+0x4a>
 800ad96:	e012      	b.n	800adbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3308      	adds	r3, #8
 800ada2:	2201      	movs	r2, #1
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f93c 	bl	800b024 <USBD_CtlSendData>
        break;
 800adac:	e00c      	b.n	800adc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	2201      	movs	r2, #1
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f934 	bl	800b024 <USBD_CtlSendData>
        break;
 800adbc:	e004      	b.n	800adc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f8be 	bl	800af42 <USBD_CtlError>
        break;
 800adc6:	bf00      	nop
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d81e      	bhi.n	800ae26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	88db      	ldrh	r3, [r3, #6]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d004      	beq.n	800adfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f8a5 	bl	800af42 <USBD_CtlError>
        break;
 800adf8:	e01a      	b.n	800ae30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f043 0202 	orr.w	r2, r3, #2
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	330c      	adds	r3, #12
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 f900 	bl	800b024 <USBD_CtlSendData>
      break;
 800ae24:	e004      	b.n	800ae30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae26:	6839      	ldr	r1, [r7, #0]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f88a 	bl	800af42 <USBD_CtlError>
      break;
 800ae2e:	bf00      	nop
  }
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	885b      	ldrh	r3, [r3, #2]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d107      	bne.n	800ae5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f940 	bl	800b0d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae58:	e013      	b.n	800ae82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d10b      	bne.n	800ae7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	889b      	ldrh	r3, [r3, #4]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f930 	bl	800b0d8 <USBD_CtlSendStatus>
}
 800ae78:	e003      	b.n	800ae82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f860 	bl	800af42 <USBD_CtlError>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d80b      	bhi.n	800aeba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	885b      	ldrh	r3, [r3, #2]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d10c      	bne.n	800aec4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f910 	bl	800b0d8 <USBD_CtlSendStatus>
      }
      break;
 800aeb8:	e004      	b.n	800aec4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f840 	bl	800af42 <USBD_CtlError>
      break;
 800aec2:	e000      	b.n	800aec6 <USBD_ClrFeature+0x3c>
      break;
 800aec4:	bf00      	nop
  }
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3301      	adds	r3, #1
 800aef6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7ff fa41 	bl	800a380 <SWAPBYTE>
 800aefe:	4603      	mov	r3, r0
 800af00:	461a      	mov	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3301      	adds	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fa34 	bl	800a380 <SWAPBYTE>
 800af18:	4603      	mov	r3, r0
 800af1a:	461a      	mov	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3301      	adds	r3, #1
 800af24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fa27 	bl	800a380 <SWAPBYTE>
 800af32:	4603      	mov	r3, r0
 800af34:	461a      	mov	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	80da      	strh	r2, [r3, #6]
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af4c:	2180      	movs	r1, #128	; 0x80
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f003 fbfc 	bl	800e74c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f003 fbf8 	bl	800e74c <USBD_LL_StallEP>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d036      	beq.n	800afe8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af7e:	6938      	ldr	r0, [r7, #16]
 800af80:	f000 f836 	bl	800aff0 <USBD_GetLen>
 800af84:	4603      	mov	r3, r0
 800af86:	3301      	adds	r3, #1
 800af88:	b29b      	uxth	r3, r3
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	4413      	add	r3, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	7812      	ldrb	r2, [r2, #0]
 800af9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af9e:	7dfb      	ldrb	r3, [r7, #23]
 800afa0:	3301      	adds	r3, #1
 800afa2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	4413      	add	r3, r2
 800afaa:	2203      	movs	r2, #3
 800afac:	701a      	strb	r2, [r3, #0]
  idx++;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	3301      	adds	r3, #1
 800afb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800afb4:	e013      	b.n	800afde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	4413      	add	r3, r2
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	7812      	ldrb	r2, [r2, #0]
 800afc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	3301      	adds	r3, #1
 800afc6:	613b      	str	r3, [r7, #16]
    idx++;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	3301      	adds	r3, #1
 800afcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	3301      	adds	r3, #1
 800afdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e7      	bne.n	800afb6 <USBD_GetString+0x52>
 800afe6:	e000      	b.n	800afea <USBD_GetString+0x86>
    return;
 800afe8:	bf00      	nop
  }
}
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b000:	e005      	b.n	800b00e <USBD_GetLen+0x1e>
  {
    len++;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	3301      	adds	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f5      	bne.n	800b002 <USBD_GetLen+0x12>
  }

  return len;
 800b016:	7bfb      	ldrb	r3, [r7, #15]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2202      	movs	r2, #2
 800b034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	2100      	movs	r1, #0
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f003 fc07 	bl	800e85e <USBD_LL_Transmit>

  return USBD_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	2100      	movs	r1, #0
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f003 fbf6 	bl	800e85e <USBD_LL_Transmit>

  return USBD_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2203      	movs	r2, #3
 800b08c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f003 fbfa 	bl	800e8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	60f8      	str	r0, [r7, #12]
 800b0be:	60b9      	str	r1, [r7, #8]
 800b0c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f003 fbe9 	bl	800e8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2204      	movs	r2, #4
 800b0e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f003 fbb5 	bl	800e85e <USBD_LL_Transmit>

  return USBD_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2205      	movs	r2, #5
 800b10a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b10e:	2300      	movs	r3, #0
 800b110:	2200      	movs	r2, #0
 800b112:	2100      	movs	r1, #0
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f003 fbc3 	bl	800e8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <__NVIC_SetPriority>:
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b134:	2b00      	cmp	r3, #0
 800b136:	db0a      	blt.n	800b14e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	490c      	ldr	r1, [pc, #48]	; (800b170 <__NVIC_SetPriority+0x4c>)
 800b13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b142:	0112      	lsls	r2, r2, #4
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	440b      	add	r3, r1
 800b148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b14c:	e00a      	b.n	800b164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	b2da      	uxtb	r2, r3
 800b152:	4908      	ldr	r1, [pc, #32]	; (800b174 <__NVIC_SetPriority+0x50>)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	3b04      	subs	r3, #4
 800b15c:	0112      	lsls	r2, r2, #4
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	440b      	add	r3, r1
 800b162:	761a      	strb	r2, [r3, #24]
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	e000e100 	.word	0xe000e100
 800b174:	e000ed00 	.word	0xe000ed00

0800b178 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b17c:	4b05      	ldr	r3, [pc, #20]	; (800b194 <SysTick_Handler+0x1c>)
 800b17e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b180:	f001 feb2 	bl	800cee8 <xTaskGetSchedulerState>
 800b184:	4603      	mov	r3, r0
 800b186:	2b01      	cmp	r3, #1
 800b188:	d001      	beq.n	800b18e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b18a:	f002 fc9d 	bl	800dac8 <xPortSysTickHandler>
  }
}
 800b18e:	bf00      	nop
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	e000e010 	.word	0xe000e010

0800b198 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b19c:	2100      	movs	r1, #0
 800b19e:	f06f 0004 	mvn.w	r0, #4
 800b1a2:	f7ff ffbf 	bl	800b124 <__NVIC_SetPriority>
#endif
}
 800b1a6:	bf00      	nop
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1b2:	f3ef 8305 	mrs	r3, IPSR
 800b1b6:	603b      	str	r3, [r7, #0]
  return(result);
 800b1b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1be:	f06f 0305 	mvn.w	r3, #5
 800b1c2:	607b      	str	r3, [r7, #4]
 800b1c4:	e00c      	b.n	800b1e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1c6:	4b0a      	ldr	r3, [pc, #40]	; (800b1f0 <osKernelInitialize+0x44>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1ce:	4b08      	ldr	r3, [pc, #32]	; (800b1f0 <osKernelInitialize+0x44>)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	607b      	str	r3, [r7, #4]
 800b1d8:	e002      	b.n	800b1e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b1da:	f04f 33ff 	mov.w	r3, #4294967295
 800b1de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1e0:	687b      	ldr	r3, [r7, #4]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	2000087c 	.word	0x2000087c

0800b1f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fa:	f3ef 8305 	mrs	r3, IPSR
 800b1fe:	603b      	str	r3, [r7, #0]
  return(result);
 800b200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b206:	f06f 0305 	mvn.w	r3, #5
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	e010      	b.n	800b230 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b20e:	4b0b      	ldr	r3, [pc, #44]	; (800b23c <osKernelStart+0x48>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d109      	bne.n	800b22a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b216:	f7ff ffbf 	bl	800b198 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b21a:	4b08      	ldr	r3, [pc, #32]	; (800b23c <osKernelStart+0x48>)
 800b21c:	2202      	movs	r2, #2
 800b21e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b220:	f001 fa1a 	bl	800c658 <vTaskStartScheduler>
      stat = osOK;
 800b224:	2300      	movs	r3, #0
 800b226:	607b      	str	r3, [r7, #4]
 800b228:	e002      	b.n	800b230 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b22a:	f04f 33ff 	mov.w	r3, #4294967295
 800b22e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b230:	687b      	ldr	r3, [r7, #4]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	2000087c 	.word	0x2000087c

0800b240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b08e      	sub	sp, #56	; 0x38
 800b244:	af04      	add	r7, sp, #16
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b24c:	2300      	movs	r3, #0
 800b24e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b250:	f3ef 8305 	mrs	r3, IPSR
 800b254:	617b      	str	r3, [r7, #20]
  return(result);
 800b256:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d17f      	bne.n	800b35c <osThreadNew+0x11c>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d07c      	beq.n	800b35c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b262:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b266:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b268:	2318      	movs	r3, #24
 800b26a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b270:	f04f 33ff 	mov.w	r3, #4294967295
 800b274:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d045      	beq.n	800b308 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <osThreadNew+0x4a>
        name = attr->name;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d008      	beq.n	800b2b0 <osThreadNew+0x70>
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	2b38      	cmp	r3, #56	; 0x38
 800b2a2:	d805      	bhi.n	800b2b0 <osThreadNew+0x70>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <osThreadNew+0x74>
        return (NULL);
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e054      	b.n	800b35e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	089b      	lsrs	r3, r3, #2
 800b2c2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00e      	beq.n	800b2ea <osThreadNew+0xaa>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	2b6b      	cmp	r3, #107	; 0x6b
 800b2d2:	d90a      	bls.n	800b2ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <osThreadNew+0xaa>
        mem = 1;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	e010      	b.n	800b30c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <osThreadNew+0xcc>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d108      	bne.n	800b30c <osThreadNew+0xcc>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d104      	bne.n	800b30c <osThreadNew+0xcc>
          mem = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	61bb      	str	r3, [r7, #24]
 800b306:	e001      	b.n	800b30c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d110      	bne.n	800b334 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b31a:	9202      	str	r2, [sp, #8]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	6a3a      	ldr	r2, [r7, #32]
 800b326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 feb9 	bl	800c0a0 <xTaskCreateStatic>
 800b32e:	4603      	mov	r3, r0
 800b330:	613b      	str	r3, [r7, #16]
 800b332:	e013      	b.n	800b35c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d110      	bne.n	800b35c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f107 0310 	add.w	r3, r7, #16
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 ff04 	bl	800c15a <xTaskCreate>
 800b352:	4603      	mov	r3, r0
 800b354:	2b01      	cmp	r3, #1
 800b356:	d001      	beq.n	800b35c <osThreadNew+0x11c>
            hTask = NULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b35c:	693b      	ldr	r3, [r7, #16]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3728      	adds	r7, #40	; 0x28
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36e:	f3ef 8305 	mrs	r3, IPSR
 800b372:	60bb      	str	r3, [r7, #8]
  return(result);
 800b374:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <osDelay+0x1c>
    stat = osErrorISR;
 800b37a:	f06f 0305 	mvn.w	r3, #5
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	e007      	b.n	800b392 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 f829 	bl	800c3e4 <vTaskDelay>
    }
  }

  return (stat);
 800b392:	68fb      	ldr	r3, [r7, #12]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ac:	f3ef 8305 	mrs	r3, IPSR
 800b3b0:	613b      	str	r3, [r7, #16]
  return(result);
 800b3b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d15f      	bne.n	800b478 <osMessageQueueNew+0xdc>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d05c      	beq.n	800b478 <osMessageQueueNew+0xdc>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d059      	beq.n	800b478 <osMessageQueueNew+0xdc>
    mem = -1;
 800b3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d029      	beq.n	800b424 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d012      	beq.n	800b3fe <osMessageQueueNew+0x62>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	2b4f      	cmp	r3, #79	; 0x4f
 800b3de:	d90e      	bls.n	800b3fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	695a      	ldr	r2, [r3, #20]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	68b9      	ldr	r1, [r7, #8]
 800b3f0:	fb01 f303 	mul.w	r3, r1, r3
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d302      	bcc.n	800b3fe <osMessageQueueNew+0x62>
        mem = 1;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	e014      	b.n	800b428 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d110      	bne.n	800b428 <osMessageQueueNew+0x8c>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10c      	bne.n	800b428 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b412:	2b00      	cmp	r3, #0
 800b414:	d108      	bne.n	800b428 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d104      	bne.n	800b428 <osMessageQueueNew+0x8c>
          mem = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	61bb      	str	r3, [r7, #24]
 800b422:	e001      	b.n	800b428 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d10b      	bne.n	800b446 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	691a      	ldr	r2, [r3, #16]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	2100      	movs	r1, #0
 800b438:	9100      	str	r1, [sp, #0]
 800b43a:	68b9      	ldr	r1, [r7, #8]
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f971 	bl	800b724 <xQueueGenericCreateStatic>
 800b442:	61f8      	str	r0, [r7, #28]
 800b444:	e008      	b.n	800b458 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d105      	bne.n	800b458 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b44c:	2200      	movs	r2, #0
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f9df 	bl	800b814 <xQueueGenericCreate>
 800b456:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00c      	beq.n	800b478 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d003      	beq.n	800b46c <osMessageQueueNew+0xd0>
        name = attr->name;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	e001      	b.n	800b470 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b470:	6979      	ldr	r1, [r7, #20]
 800b472:	69f8      	ldr	r0, [r7, #28]
 800b474:	f000 fdb6 	bl	800bfe4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b478:	69fb      	ldr	r3, [r7, #28]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3720      	adds	r7, #32
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4a07      	ldr	r2, [pc, #28]	; (800b4b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4a06      	ldr	r2, [pc, #24]	; (800b4b4 <vApplicationGetIdleTaskMemory+0x30>)
 800b49a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20000880 	.word	0x20000880
 800b4b4:	200008ec 	.word	0x200008ec

0800b4b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a07      	ldr	r2, [pc, #28]	; (800b4e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b4c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	4a06      	ldr	r2, [pc, #24]	; (800b4e8 <vApplicationGetTimerTaskMemory+0x30>)
 800b4ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4d6:	601a      	str	r2, [r3, #0]
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	20000cec 	.word	0x20000cec
 800b4e8:	20000d58 	.word	0x20000d58

0800b4ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f103 0208 	add.w	r2, r3, #8
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f04f 32ff 	mov.w	r2, #4294967295
 800b504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f103 0208 	add.w	r2, r3, #8
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f103 0208 	add.w	r2, r3, #8
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b53a:	bf00      	nop
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	689a      	ldr	r2, [r3, #8]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	1c5a      	adds	r2, r3, #1
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	601a      	str	r2, [r3, #0]
}
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a4:	d103      	bne.n	800b5ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	e00c      	b.n	800b5c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	e002      	b.n	800b5bc <vListInsert+0x2e>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d2f6      	bcs.n	800b5b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	601a      	str	r2, [r3, #0]
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	6892      	ldr	r2, [r2, #8]
 800b616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	6852      	ldr	r2, [r2, #4]
 800b620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d103      	bne.n	800b634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689a      	ldr	r2, [r3, #8]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	1e5a      	subs	r2, r3, #1
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b67e:	f002 f991 	bl	800d9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68a:	68f9      	ldr	r1, [r7, #12]
 800b68c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b68e:	fb01 f303 	mul.w	r3, r1, r3
 800b692:	441a      	add	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	68f9      	ldr	r1, [r7, #12]
 800b6b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6b4:	fb01 f303 	mul.w	r3, r1, r3
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	22ff      	movs	r2, #255	; 0xff
 800b6c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	22ff      	movs	r2, #255	; 0xff
 800b6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d114      	bne.n	800b6fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01a      	beq.n	800b712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3310      	adds	r3, #16
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fa43 	bl	800cb6c <xTaskRemoveFromEventList>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d012      	beq.n	800b712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6ec:	4b0c      	ldr	r3, [pc, #48]	; (800b720 <xQueueGenericReset+0xcc>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	e009      	b.n	800b712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3310      	adds	r3, #16
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff fef2 	bl	800b4ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3324      	adds	r3, #36	; 0x24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff feed 	bl	800b4ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b712:	f002 f977 	bl	800da04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b716:	2301      	movs	r3, #1
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	e000ed04 	.word	0xe000ed04

0800b724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08e      	sub	sp, #56	; 0x38
 800b728:	af02      	add	r7, sp, #8
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10a      	bne.n	800b74e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <xQueueGenericCreateStatic+0x52>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d001      	beq.n	800b77a <xQueueGenericCreateStatic+0x56>
 800b776:	2301      	movs	r3, #1
 800b778:	e000      	b.n	800b77c <xQueueGenericCreateStatic+0x58>
 800b77a:	2300      	movs	r3, #0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	623b      	str	r3, [r7, #32]
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <xQueueGenericCreateStatic+0x7e>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <xQueueGenericCreateStatic+0x82>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <xQueueGenericCreateStatic+0x84>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	61fb      	str	r3, [r7, #28]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7c2:	2350      	movs	r3, #80	; 0x50
 800b7c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2b50      	cmp	r3, #80	; 0x50
 800b7ca:	d00a      	beq.n	800b7e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	61bb      	str	r3, [r7, #24]
}
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00d      	beq.n	800b80a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4613      	mov	r3, r2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	68b9      	ldr	r1, [r7, #8]
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 f83f 	bl	800b888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3730      	adds	r7, #48	; 0x30
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af02      	add	r7, sp, #8
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4613      	mov	r3, r2
 800b820:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	613b      	str	r3, [r7, #16]
}
 800b83a:	bf00      	nop
 800b83c:	e7fe      	b.n	800b83c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	fb02 f303 	mul.w	r3, r2, r3
 800b846:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	3350      	adds	r3, #80	; 0x50
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 f9cb 	bl	800dbe8 <pvPortMalloc>
 800b852:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d011      	beq.n	800b87e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	3350      	adds	r3, #80	; 0x50
 800b862:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b86c:	79fa      	ldrb	r2, [r7, #7]
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4613      	mov	r3, r2
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f805 	bl	800b888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b87e:	69bb      	ldr	r3, [r7, #24]
	}
 800b880:	4618      	mov	r0, r3
 800b882:	3720      	adds	r7, #32
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	69ba      	ldr	r2, [r7, #24]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	e002      	b.n	800b8aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	69b8      	ldr	r0, [r7, #24]
 800b8ba:	f7ff fecb 	bl	800b654 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	; 0x38
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <xQueueGenericSend+0x32>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d103      	bne.n	800b910 <xQueueGenericSend+0x40>
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <xQueueGenericSend+0x44>
 800b910:	2301      	movs	r3, #1
 800b912:	e000      	b.n	800b916 <xQueueGenericSend+0x46>
 800b914:	2300      	movs	r3, #0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <xQueueGenericSend+0x60>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b92c:	bf00      	nop
 800b92e:	e7fe      	b.n	800b92e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d103      	bne.n	800b93e <xQueueGenericSend+0x6e>
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <xQueueGenericSend+0x72>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <xQueueGenericSend+0x74>
 800b942:	2300      	movs	r3, #0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericSend+0x8e>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	623b      	str	r3, [r7, #32]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b95e:	f001 fac3 	bl	800cee8 <xTaskGetSchedulerState>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <xQueueGenericSend+0x9e>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <xQueueGenericSend+0xa2>
 800b96e:	2301      	movs	r3, #1
 800b970:	e000      	b.n	800b974 <xQueueGenericSend+0xa4>
 800b972:	2300      	movs	r3, #0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <xQueueGenericSend+0xbe>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	61fb      	str	r3, [r7, #28]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b98e:	f002 f809 	bl	800d9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d302      	bcc.n	800b9a4 <xQueueGenericSend+0xd4>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d129      	bne.n	800b9f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	68b9      	ldr	r1, [r7, #8]
 800b9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9aa:	f000 fa0b 	bl	800bdc4 <prvCopyDataToQueue>
 800b9ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d010      	beq.n	800b9da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	3324      	adds	r3, #36	; 0x24
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f001 f8d5 	bl	800cb6c <xTaskRemoveFromEventList>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d013      	beq.n	800b9f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9c8:	4b3f      	ldr	r3, [pc, #252]	; (800bac8 <xQueueGenericSend+0x1f8>)
 800b9ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	e00a      	b.n	800b9f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9e0:	4b39      	ldr	r3, [pc, #228]	; (800bac8 <xQueueGenericSend+0x1f8>)
 800b9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e6:	601a      	str	r2, [r3, #0]
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9f0:	f002 f808 	bl	800da04 <vPortExitCritical>
				return pdPASS;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e063      	b.n	800bac0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d103      	bne.n	800ba06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9fe:	f002 f801 	bl	800da04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e05c      	b.n	800bac0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba0c:	f107 0314 	add.w	r3, r7, #20
 800ba10:	4618      	mov	r0, r3
 800ba12:	f001 f90f 	bl	800cc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba16:	2301      	movs	r3, #1
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba1a:	f001 fff3 	bl	800da04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba1e:	f000 fe81 	bl	800c724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba22:	f001 ffbf 	bl	800d9a4 <vPortEnterCritical>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba2c:	b25b      	sxtb	r3, r3
 800ba2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba32:	d103      	bne.n	800ba3c <xQueueGenericSend+0x16c>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba42:	b25b      	sxtb	r3, r3
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba48:	d103      	bne.n	800ba52 <xQueueGenericSend+0x182>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba52:	f001 ffd7 	bl	800da04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba56:	1d3a      	adds	r2, r7, #4
 800ba58:	f107 0314 	add.w	r3, r7, #20
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f8fe 	bl	800cc60 <xTaskCheckForTimeOut>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d124      	bne.n	800bab4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba6c:	f000 faa2 	bl	800bfb4 <prvIsQueueFull>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d018      	beq.n	800baa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	3310      	adds	r3, #16
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 f824 	bl	800cacc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba86:	f000 fa2d 	bl	800bee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba8a:	f000 fe59 	bl	800c740 <xTaskResumeAll>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f47f af7c 	bne.w	800b98e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba96:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <xQueueGenericSend+0x1f8>)
 800ba98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	e772      	b.n	800b98e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800baa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baaa:	f000 fa1b 	bl	800bee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baae:	f000 fe47 	bl	800c740 <xTaskResumeAll>
 800bab2:	e76c      	b.n	800b98e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab6:	f000 fa15 	bl	800bee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baba:	f000 fe41 	bl	800c740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800babe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3738      	adds	r7, #56	; 0x38
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b090      	sub	sp, #64	; 0x40
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d103      	bne.n	800bb08 <xQueueGenericSendFromISR+0x3c>
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <xQueueGenericSendFromISR+0x40>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e000      	b.n	800bb0e <xQueueGenericSendFromISR+0x42>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d103      	bne.n	800bb36 <xQueueGenericSendFromISR+0x6a>
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <xQueueGenericSendFromISR+0x6e>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e000      	b.n	800bb3c <xQueueGenericSendFromISR+0x70>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	623b      	str	r3, [r7, #32]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb56:	f002 f807 	bl	800db68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb5a:	f3ef 8211 	mrs	r2, BASEPRI
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	61fa      	str	r2, [r7, #28]
 800bb70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d302      	bcc.n	800bb88 <xQueueGenericSendFromISR+0xbc>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d12f      	bne.n	800bbe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	68b9      	ldr	r1, [r7, #8]
 800bb9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb9e:	f000 f911 	bl	800bdc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bba2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d112      	bne.n	800bbd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d016      	beq.n	800bbe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	3324      	adds	r3, #36	; 0x24
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 ffd7 	bl	800cb6c <xTaskRemoveFromEventList>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00e      	beq.n	800bbe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	e007      	b.n	800bbe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	b25a      	sxtb	r2, r3
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bbe6:	e001      	b.n	800bbec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bbf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3740      	adds	r7, #64	; 0x40
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08c      	sub	sp, #48	; 0x30
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc10:	2300      	movs	r3, #0
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <xQueueReceive+0x30>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	623b      	str	r3, [r7, #32]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <xQueueReceive+0x3e>
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <xQueueReceive+0x42>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e000      	b.n	800bc48 <xQueueReceive+0x44>
 800bc46:	2300      	movs	r3, #0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <xQueueReceive+0x5e>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	61fb      	str	r3, [r7, #28]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc62:	f001 f941 	bl	800cee8 <xTaskGetSchedulerState>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <xQueueReceive+0x6e>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <xQueueReceive+0x72>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <xQueueReceive+0x74>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueReceive+0x8e>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	61bb      	str	r3, [r7, #24]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc92:	f001 fe87 	bl	800d9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d01f      	beq.n	800bce2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca6:	f000 f8f7 	bl	800be98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	1e5a      	subs	r2, r3, #1
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00f      	beq.n	800bcda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	3310      	adds	r3, #16
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 ff54 	bl	800cb6c <xTaskRemoveFromEventList>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d007      	beq.n	800bcda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcca:	4b3d      	ldr	r3, [pc, #244]	; (800bdc0 <xQueueReceive+0x1bc>)
 800bccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcda:	f001 fe93 	bl	800da04 <vPortExitCritical>
				return pdPASS;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e069      	b.n	800bdb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d103      	bne.n	800bcf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bce8:	f001 fe8c 	bl	800da04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e062      	b.n	800bdb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d106      	bne.n	800bd04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcf6:	f107 0310 	add.w	r3, r7, #16
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 ff9a 	bl	800cc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd00:	2301      	movs	r3, #1
 800bd02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd04:	f001 fe7e 	bl	800da04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd08:	f000 fd0c 	bl	800c724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd0c:	f001 fe4a 	bl	800d9a4 <vPortEnterCritical>
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd16:	b25b      	sxtb	r3, r3
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1c:	d103      	bne.n	800bd26 <xQueueReceive+0x122>
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd2c:	b25b      	sxtb	r3, r3
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d103      	bne.n	800bd3c <xQueueReceive+0x138>
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd3c:	f001 fe62 	bl	800da04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd40:	1d3a      	adds	r2, r7, #4
 800bd42:	f107 0310 	add.w	r3, r7, #16
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 ff89 	bl	800cc60 <xTaskCheckForTimeOut>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d123      	bne.n	800bd9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd56:	f000 f917 	bl	800bf88 <prvIsQueueEmpty>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d017      	beq.n	800bd90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	3324      	adds	r3, #36	; 0x24
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 feaf 	bl	800cacc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd70:	f000 f8b8 	bl	800bee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd74:	f000 fce4 	bl	800c740 <xTaskResumeAll>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d189      	bne.n	800bc92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd7e:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <xQueueReceive+0x1bc>)
 800bd80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	e780      	b.n	800bc92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd92:	f000 f8a7 	bl	800bee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd96:	f000 fcd3 	bl	800c740 <xTaskResumeAll>
 800bd9a:	e77a      	b.n	800bc92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9e:	f000 f8a1 	bl	800bee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bda2:	f000 fccd 	bl	800c740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bda8:	f000 f8ee 	bl	800bf88 <prvIsQueueEmpty>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f43f af6f 	beq.w	800bc92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3730      	adds	r7, #48	; 0x30
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	e000ed04 	.word	0xe000ed04

0800bdc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10d      	bne.n	800bdfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d14d      	bne.n	800be86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f001 f898 	bl	800cf24 <xTaskPriorityDisinherit>
 800bdf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	e043      	b.n	800be86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d119      	bne.n	800be38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6858      	ldr	r0, [r3, #4]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0c:	461a      	mov	r2, r3
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	f002 fdf8 	bl	800ea04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1c:	441a      	add	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d32b      	bcc.n	800be86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	605a      	str	r2, [r3, #4]
 800be36:	e026      	b.n	800be86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	68d8      	ldr	r0, [r3, #12]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be40:	461a      	mov	r2, r3
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	f002 fdde 	bl	800ea04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68da      	ldr	r2, [r3, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be50:	425b      	negs	r3, r3
 800be52:	441a      	add	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d207      	bcs.n	800be74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	689a      	ldr	r2, [r3, #8]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6c:	425b      	negs	r3, r3
 800be6e:	441a      	add	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b02      	cmp	r3, #2
 800be78:	d105      	bne.n	800be86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	3b01      	subs	r3, #1
 800be84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800be8e:	697b      	ldr	r3, [r7, #20]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d018      	beq.n	800bedc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	441a      	add	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	68da      	ldr	r2, [r3, #12]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d303      	bcc.n	800becc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	68d9      	ldr	r1, [r3, #12]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed4:	461a      	mov	r2, r3
 800bed6:	6838      	ldr	r0, [r7, #0]
 800bed8:	f002 fd94 	bl	800ea04 <memcpy>
	}
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800beec:	f001 fd5a 	bl	800d9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bef8:	e011      	b.n	800bf1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d012      	beq.n	800bf28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3324      	adds	r3, #36	; 0x24
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 fe30 	bl	800cb6c <xTaskRemoveFromEventList>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf12:	f000 ff07 	bl	800cd24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dce9      	bgt.n	800befa <prvUnlockQueue+0x16>
 800bf26:	e000      	b.n	800bf2a <prvUnlockQueue+0x46>
					break;
 800bf28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf32:	f001 fd67 	bl	800da04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf36:	f001 fd35 	bl	800d9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf42:	e011      	b.n	800bf68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d012      	beq.n	800bf72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3310      	adds	r3, #16
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 fe0b 	bl	800cb6c <xTaskRemoveFromEventList>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf5c:	f000 fee2 	bl	800cd24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dce9      	bgt.n	800bf44 <prvUnlockQueue+0x60>
 800bf70:	e000      	b.n	800bf74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	22ff      	movs	r2, #255	; 0xff
 800bf78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bf7c:	f001 fd42 	bl	800da04 <vPortExitCritical>
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf90:	f001 fd08 	bl	800d9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d102      	bne.n	800bfa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e001      	b.n	800bfa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfa6:	f001 fd2d 	bl	800da04 <vPortExitCritical>

	return xReturn;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfbc:	f001 fcf2 	bl	800d9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d102      	bne.n	800bfd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	e001      	b.n	800bfd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfd6:	f001 fd15 	bl	800da04 <vPortExitCritical>

	return xReturn;
 800bfda:	68fb      	ldr	r3, [r7, #12]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfee:	2300      	movs	r3, #0
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	e014      	b.n	800c01e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bff4:	4a0f      	ldr	r2, [pc, #60]	; (800c034 <vQueueAddToRegistry+0x50>)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10b      	bne.n	800c018 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c000:	490c      	ldr	r1, [pc, #48]	; (800c034 <vQueueAddToRegistry+0x50>)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c00a:	4a0a      	ldr	r2, [pc, #40]	; (800c034 <vQueueAddToRegistry+0x50>)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	4413      	add	r3, r2
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c016:	e006      	b.n	800c026 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3301      	adds	r3, #1
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b07      	cmp	r3, #7
 800c022:	d9e7      	bls.n	800bff4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	20001558 	.word	0x20001558

0800c038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c048:	f001 fcac 	bl	800d9a4 <vPortEnterCritical>
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c052:	b25b      	sxtb	r3, r3
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c058:	d103      	bne.n	800c062 <vQueueWaitForMessageRestricted+0x2a>
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d103      	bne.n	800c078 <vQueueWaitForMessageRestricted+0x40>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c078:	f001 fcc4 	bl	800da04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c080:	2b00      	cmp	r3, #0
 800c082:	d106      	bne.n	800c092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3324      	adds	r3, #36	; 0x24
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fd41 	bl	800cb14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c092:	6978      	ldr	r0, [r7, #20]
 800c094:	f7ff ff26 	bl	800bee4 <prvUnlockQueue>
	}
 800c098:	bf00      	nop
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08e      	sub	sp, #56	; 0x38
 800c0a4:	af04      	add	r7, sp, #16
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10a      	bne.n	800c0ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	623b      	str	r3, [r7, #32]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	61fb      	str	r3, [r7, #28]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c0e6:	236c      	movs	r3, #108	; 0x6c
 800c0e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	2b6c      	cmp	r3, #108	; 0x6c
 800c0ee:	d00a      	beq.n	800c106 <xTaskCreateStatic+0x66>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	61bb      	str	r3, [r7, #24]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c106:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d01e      	beq.n	800c14c <xTaskCreateStatic+0xac>
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01b      	beq.n	800c14c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c11c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	2202      	movs	r2, #2
 800c122:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c126:	2300      	movs	r3, #0
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	9302      	str	r3, [sp, #8]
 800c12e:	f107 0314 	add.w	r3, r7, #20
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f000 f850 	bl	800c1e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c146:	f000 f8dd 	bl	800c304 <prvAddNewTaskToReadyList>
 800c14a:	e001      	b.n	800c150 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c14c:	2300      	movs	r3, #0
 800c14e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c150:	697b      	ldr	r3, [r7, #20]
	}
 800c152:	4618      	mov	r0, r3
 800c154:	3728      	adds	r7, #40	; 0x28
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b08c      	sub	sp, #48	; 0x30
 800c15e:	af04      	add	r7, sp, #16
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	4613      	mov	r3, r2
 800c168:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c16a:	88fb      	ldrh	r3, [r7, #6]
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 fd3a 	bl	800dbe8 <pvPortMalloc>
 800c174:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00e      	beq.n	800c19a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c17c:	206c      	movs	r0, #108	; 0x6c
 800c17e:	f001 fd33 	bl	800dbe8 <pvPortMalloc>
 800c182:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	631a      	str	r2, [r3, #48]	; 0x30
 800c190:	e005      	b.n	800c19e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c192:	6978      	ldr	r0, [r7, #20]
 800c194:	f001 fdf4 	bl	800dd80 <vPortFree>
 800c198:	e001      	b.n	800c19e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c19a:	2300      	movs	r3, #0
 800c19c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1ac:	88fa      	ldrh	r2, [r7, #6]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	9302      	str	r3, [sp, #8]
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f000 f80e 	bl	800c1e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1c8:	69f8      	ldr	r0, [r7, #28]
 800c1ca:	f000 f89b 	bl	800c304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	e002      	b.n	800c1da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c1da:	69bb      	ldr	r3, [r7, #24]
	}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3720      	adds	r7, #32
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	21a5      	movs	r1, #165	; 0xa5
 800c1fe:	f002 fc0f 	bl	800ea20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c20c:	3b01      	subs	r3, #1
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	f003 0307 	and.w	r3, r3, #7
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	617b      	str	r3, [r7, #20]
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d01f      	beq.n	800c282 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c242:	2300      	movs	r3, #0
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	e012      	b.n	800c26e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	4413      	add	r3, r2
 800c24e:	7819      	ldrb	r1, [r3, #0]
 800c250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	4413      	add	r3, r2
 800c256:	3334      	adds	r3, #52	; 0x34
 800c258:	460a      	mov	r2, r1
 800c25a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	4413      	add	r3, r2
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d006      	beq.n	800c276 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	3301      	adds	r3, #1
 800c26c:	61fb      	str	r3, [r7, #28]
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	2b1d      	cmp	r3, #29
 800c272:	d9e9      	bls.n	800c248 <prvInitialiseNewTask+0x64>
 800c274:	e000      	b.n	800c278 <prvInitialiseNewTask+0x94>
			{
				break;
 800c276:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c280:	e003      	b.n	800c28a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	2b37      	cmp	r3, #55	; 0x37
 800c28e:	d901      	bls.n	800c294 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c290:	2337      	movs	r3, #55	; 0x37
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c298:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c29e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff f93e 	bl	800b52c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	3318      	adds	r3, #24
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff f939 	bl	800b52c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	68f9      	ldr	r1, [r7, #12]
 800c2e2:	69b8      	ldr	r0, [r7, #24]
 800c2e4:	f001 fa2e 	bl	800d744 <pxPortInitialiseStack>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2fa:	bf00      	nop
 800c2fc:	3720      	adds	r7, #32
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c30c:	f001 fb4a 	bl	800d9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c310:	4b2d      	ldr	r3, [pc, #180]	; (800c3c8 <prvAddNewTaskToReadyList+0xc4>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3301      	adds	r3, #1
 800c316:	4a2c      	ldr	r2, [pc, #176]	; (800c3c8 <prvAddNewTaskToReadyList+0xc4>)
 800c318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c31a:	4b2c      	ldr	r3, [pc, #176]	; (800c3cc <prvAddNewTaskToReadyList+0xc8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d109      	bne.n	800c336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c322:	4a2a      	ldr	r2, [pc, #168]	; (800c3cc <prvAddNewTaskToReadyList+0xc8>)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c328:	4b27      	ldr	r3, [pc, #156]	; (800c3c8 <prvAddNewTaskToReadyList+0xc4>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d110      	bne.n	800c352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c330:	f000 fd1c 	bl	800cd6c <prvInitialiseTaskLists>
 800c334:	e00d      	b.n	800c352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c336:	4b26      	ldr	r3, [pc, #152]	; (800c3d0 <prvAddNewTaskToReadyList+0xcc>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c33e:	4b23      	ldr	r3, [pc, #140]	; (800c3cc <prvAddNewTaskToReadyList+0xc8>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	429a      	cmp	r2, r3
 800c34a:	d802      	bhi.n	800c352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c34c:	4a1f      	ldr	r2, [pc, #124]	; (800c3cc <prvAddNewTaskToReadyList+0xc8>)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c352:	4b20      	ldr	r3, [pc, #128]	; (800c3d4 <prvAddNewTaskToReadyList+0xd0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	4a1e      	ldr	r2, [pc, #120]	; (800c3d4 <prvAddNewTaskToReadyList+0xd0>)
 800c35a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c35c:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <prvAddNewTaskToReadyList+0xd0>)
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c368:	4b1b      	ldr	r3, [pc, #108]	; (800c3d8 <prvAddNewTaskToReadyList+0xd4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d903      	bls.n	800c378 <prvAddNewTaskToReadyList+0x74>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	4a18      	ldr	r2, [pc, #96]	; (800c3d8 <prvAddNewTaskToReadyList+0xd4>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4a15      	ldr	r2, [pc, #84]	; (800c3dc <prvAddNewTaskToReadyList+0xd8>)
 800c386:	441a      	add	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7ff f8d9 	bl	800b546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c394:	f001 fb36 	bl	800da04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c398:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <prvAddNewTaskToReadyList+0xcc>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00e      	beq.n	800c3be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <prvAddNewTaskToReadyList+0xc8>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d207      	bcs.n	800c3be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3ae:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <prvAddNewTaskToReadyList+0xdc>)
 800c3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20001a6c 	.word	0x20001a6c
 800c3cc:	20001598 	.word	0x20001598
 800c3d0:	20001a78 	.word	0x20001a78
 800c3d4:	20001a88 	.word	0x20001a88
 800c3d8:	20001a74 	.word	0x20001a74
 800c3dc:	2000159c 	.word	0x2000159c
 800c3e0:	e000ed04 	.word	0xe000ed04

0800c3e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d017      	beq.n	800c426 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3f6:	4b13      	ldr	r3, [pc, #76]	; (800c444 <vTaskDelay+0x60>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <vTaskDelay+0x30>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60bb      	str	r3, [r7, #8]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c414:	f000 f986 	bl	800c724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c418:	2100      	movs	r1, #0
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fdf0 	bl	800d000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c420:	f000 f98e 	bl	800c740 <xTaskResumeAll>
 800c424:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d107      	bne.n	800c43c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <vTaskDelay+0x64>)
 800c42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c43c:	bf00      	nop
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	20001a94 	.word	0x20001a94
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c454:	f001 faa6 	bl	800d9a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d102      	bne.n	800c464 <vTaskSuspend+0x18>
 800c45e:	4b30      	ldr	r3, [pc, #192]	; (800c520 <vTaskSuspend+0xd4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	e000      	b.n	800c466 <vTaskSuspend+0x1a>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff f8c7 	bl	800b600 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	2b00      	cmp	r3, #0
 800c478:	d004      	beq.n	800c484 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3318      	adds	r3, #24
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff f8be 	bl	800b600 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	3304      	adds	r3, #4
 800c488:	4619      	mov	r1, r3
 800c48a:	4826      	ldr	r0, [pc, #152]	; (800c524 <vTaskSuspend+0xd8>)
 800c48c:	f7ff f85b 	bl	800b546 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d103      	bne.n	800c4a4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c4a4:	f001 faae 	bl	800da04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c4a8:	4b1f      	ldr	r3, [pc, #124]	; (800c528 <vTaskSuspend+0xdc>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c4b0:	f001 fa78 	bl	800d9a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c4b4:	f000 fcf8 	bl	800cea8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c4b8:	f001 faa4 	bl	800da04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c4bc:	4b18      	ldr	r3, [pc, #96]	; (800c520 <vTaskSuspend+0xd4>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d127      	bne.n	800c516 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <vTaskSuspend+0xdc>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d017      	beq.n	800c4fe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c4ce:	4b17      	ldr	r3, [pc, #92]	; (800c52c <vTaskSuspend+0xe0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <vTaskSuspend+0xa0>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60bb      	str	r3, [r7, #8]
}
 800c4e8:	bf00      	nop
 800c4ea:	e7fe      	b.n	800c4ea <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c4ec:	4b10      	ldr	r3, [pc, #64]	; (800c530 <vTaskSuspend+0xe4>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4fc:	e00b      	b.n	800c516 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c4fe:	4b09      	ldr	r3, [pc, #36]	; (800c524 <vTaskSuspend+0xd8>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <vTaskSuspend+0xe8>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d103      	bne.n	800c512 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c50a:	4b05      	ldr	r3, [pc, #20]	; (800c520 <vTaskSuspend+0xd4>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
	}
 800c510:	e001      	b.n	800c516 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c512:	f000 fa7d 	bl	800ca10 <vTaskSwitchContext>
	}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20001598 	.word	0x20001598
 800c524:	20001a58 	.word	0x20001a58
 800c528:	20001a78 	.word	0x20001a78
 800c52c:	20001a94 	.word	0x20001a94
 800c530:	e000ed04 	.word	0xe000ed04
 800c534:	20001a6c 	.word	0x20001a6c

0800c538 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c540:	2300      	movs	r3, #0
 800c542:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10a      	bne.n	800c564 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	60fb      	str	r3, [r7, #12]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	695b      	ldr	r3, [r3, #20]
 800c568:	4a0a      	ldr	r2, [pc, #40]	; (800c594 <prvTaskIsTaskSuspended+0x5c>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d10a      	bne.n	800c584 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	4a09      	ldr	r2, [pc, #36]	; (800c598 <prvTaskIsTaskSuspended+0x60>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d005      	beq.n	800c584 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c580:	2301      	movs	r3, #1
 800c582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c584:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c586:	4618      	mov	r0, r3
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	20001a58 	.word	0x20001a58
 800c598:	20001a2c 	.word	0x20001a2c

0800c59c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <vTaskResume+0x28>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	60bb      	str	r3, [r7, #8]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c5c4:	4b20      	ldr	r3, [pc, #128]	; (800c648 <vTaskResume+0xac>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d038      	beq.n	800c640 <vTaskResume+0xa4>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d035      	beq.n	800c640 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c5d4:	f001 f9e6 	bl	800d9a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff ffad 	bl	800c538 <prvTaskIsTaskSuspended>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d02b      	beq.n	800c63c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7ff f809 	bl	800b600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	4b16      	ldr	r3, [pc, #88]	; (800c64c <vTaskResume+0xb0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d903      	bls.n	800c602 <vTaskResume+0x66>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fe:	4a13      	ldr	r2, [pc, #76]	; (800c64c <vTaskResume+0xb0>)
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4a10      	ldr	r2, [pc, #64]	; (800c650 <vTaskResume+0xb4>)
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3304      	adds	r3, #4
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f7fe ff94 	bl	800b546 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c622:	4b09      	ldr	r3, [pc, #36]	; (800c648 <vTaskResume+0xac>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	429a      	cmp	r2, r3
 800c62a:	d307      	bcc.n	800c63c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c62c:	4b09      	ldr	r3, [pc, #36]	; (800c654 <vTaskResume+0xb8>)
 800c62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c63c:	f001 f9e2 	bl	800da04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	20001598 	.word	0x20001598
 800c64c:	20001a74 	.word	0x20001a74
 800c650:	2000159c 	.word	0x2000159c
 800c654:	e000ed04 	.word	0xe000ed04

0800c658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c666:	463a      	mov	r2, r7
 800c668:	1d39      	adds	r1, r7, #4
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe ff08 	bl	800b484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	9202      	str	r2, [sp, #8]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	2300      	movs	r3, #0
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	2300      	movs	r3, #0
 800c684:	460a      	mov	r2, r1
 800c686:	4921      	ldr	r1, [pc, #132]	; (800c70c <vTaskStartScheduler+0xb4>)
 800c688:	4821      	ldr	r0, [pc, #132]	; (800c710 <vTaskStartScheduler+0xb8>)
 800c68a:	f7ff fd09 	bl	800c0a0 <xTaskCreateStatic>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a20      	ldr	r2, [pc, #128]	; (800c714 <vTaskStartScheduler+0xbc>)
 800c692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c694:	4b1f      	ldr	r3, [pc, #124]	; (800c714 <vTaskStartScheduler+0xbc>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e001      	b.n	800c6a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d102      	bne.n	800c6b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6ac:	f000 fcfc 	bl	800d0a8 <xTimerCreateTimerTask>
 800c6b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d116      	bne.n	800c6e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	613b      	str	r3, [r7, #16]
}
 800c6ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6cc:	4b12      	ldr	r3, [pc, #72]	; (800c718 <vTaskStartScheduler+0xc0>)
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6d4:	4b11      	ldr	r3, [pc, #68]	; (800c71c <vTaskStartScheduler+0xc4>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <vTaskStartScheduler+0xc8>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6e0:	f001 f8be 	bl	800d860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6e4:	e00e      	b.n	800c704 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ec:	d10a      	bne.n	800c704 <vTaskStartScheduler+0xac>
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	60fb      	str	r3, [r7, #12]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <vTaskStartScheduler+0xaa>
}
 800c704:	bf00      	nop
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	0800f508 	.word	0x0800f508
 800c710:	0800cd3d 	.word	0x0800cd3d
 800c714:	20001a90 	.word	0x20001a90
 800c718:	20001a8c 	.word	0x20001a8c
 800c71c:	20001a78 	.word	0x20001a78
 800c720:	20001a70 	.word	0x20001a70

0800c724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c724:	b480      	push	{r7}
 800c726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c728:	4b04      	ldr	r3, [pc, #16]	; (800c73c <vTaskSuspendAll+0x18>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	4a03      	ldr	r2, [pc, #12]	; (800c73c <vTaskSuspendAll+0x18>)
 800c730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c732:	bf00      	nop
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20001a94 	.word	0x20001a94

0800c740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c74e:	4b42      	ldr	r3, [pc, #264]	; (800c858 <xTaskResumeAll+0x118>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10a      	bne.n	800c76c <xTaskResumeAll+0x2c>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	603b      	str	r3, [r7, #0]
}
 800c768:	bf00      	nop
 800c76a:	e7fe      	b.n	800c76a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c76c:	f001 f91a 	bl	800d9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c770:	4b39      	ldr	r3, [pc, #228]	; (800c858 <xTaskResumeAll+0x118>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3b01      	subs	r3, #1
 800c776:	4a38      	ldr	r2, [pc, #224]	; (800c858 <xTaskResumeAll+0x118>)
 800c778:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c77a:	4b37      	ldr	r3, [pc, #220]	; (800c858 <xTaskResumeAll+0x118>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d162      	bne.n	800c848 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c782:	4b36      	ldr	r3, [pc, #216]	; (800c85c <xTaskResumeAll+0x11c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d05e      	beq.n	800c848 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c78a:	e02f      	b.n	800c7ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c78c:	4b34      	ldr	r3, [pc, #208]	; (800c860 <xTaskResumeAll+0x120>)
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	3318      	adds	r3, #24
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fe ff31 	bl	800b600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe ff2c 	bl	800b600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ac:	4b2d      	ldr	r3, [pc, #180]	; (800c864 <xTaskResumeAll+0x124>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d903      	bls.n	800c7bc <xTaskResumeAll+0x7c>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <xTaskResumeAll+0x124>)
 800c7ba:	6013      	str	r3, [r2, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4a27      	ldr	r2, [pc, #156]	; (800c868 <xTaskResumeAll+0x128>)
 800c7ca:	441a      	add	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	f7fe feb7 	bl	800b546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7dc:	4b23      	ldr	r3, [pc, #140]	; (800c86c <xTaskResumeAll+0x12c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d302      	bcc.n	800c7ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c7e6:	4b22      	ldr	r3, [pc, #136]	; (800c870 <xTaskResumeAll+0x130>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <xTaskResumeAll+0x120>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1cb      	bne.n	800c78c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7fa:	f000 fb55 	bl	800cea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c7fe:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <xTaskResumeAll+0x134>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d010      	beq.n	800c82c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c80a:	f000 f847 	bl	800c89c <xTaskIncrementTick>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c814:	4b16      	ldr	r3, [pc, #88]	; (800c870 <xTaskResumeAll+0x130>)
 800c816:	2201      	movs	r2, #1
 800c818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1f1      	bne.n	800c80a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c826:	4b13      	ldr	r3, [pc, #76]	; (800c874 <xTaskResumeAll+0x134>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <xTaskResumeAll+0x130>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d009      	beq.n	800c848 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c834:	2301      	movs	r3, #1
 800c836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <xTaskResumeAll+0x138>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c848:	f001 f8dc 	bl	800da04 <vPortExitCritical>

	return xAlreadyYielded;
 800c84c:	68bb      	ldr	r3, [r7, #8]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20001a94 	.word	0x20001a94
 800c85c:	20001a6c 	.word	0x20001a6c
 800c860:	20001a2c 	.word	0x20001a2c
 800c864:	20001a74 	.word	0x20001a74
 800c868:	2000159c 	.word	0x2000159c
 800c86c:	20001598 	.word	0x20001598
 800c870:	20001a80 	.word	0x20001a80
 800c874:	20001a7c 	.word	0x20001a7c
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <xTaskGetTickCount+0x1c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c888:	687b      	ldr	r3, [r7, #4]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	20001a70 	.word	0x20001a70

0800c89c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8a6:	4b4f      	ldr	r3, [pc, #316]	; (800c9e4 <xTaskIncrementTick+0x148>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f040 808f 	bne.w	800c9ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8b0:	4b4d      	ldr	r3, [pc, #308]	; (800c9e8 <xTaskIncrementTick+0x14c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8b8:	4a4b      	ldr	r2, [pc, #300]	; (800c9e8 <xTaskIncrementTick+0x14c>)
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d120      	bne.n	800c906 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8c4:	4b49      	ldr	r3, [pc, #292]	; (800c9ec <xTaskIncrementTick+0x150>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00a      	beq.n	800c8e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	603b      	str	r3, [r7, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <xTaskIncrementTick+0x46>
 800c8e4:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <xTaskIncrementTick+0x150>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	4b41      	ldr	r3, [pc, #260]	; (800c9f0 <xTaskIncrementTick+0x154>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a3f      	ldr	r2, [pc, #252]	; (800c9ec <xTaskIncrementTick+0x150>)
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	4a3f      	ldr	r2, [pc, #252]	; (800c9f0 <xTaskIncrementTick+0x154>)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	4b3e      	ldr	r3, [pc, #248]	; (800c9f4 <xTaskIncrementTick+0x158>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	4a3d      	ldr	r2, [pc, #244]	; (800c9f4 <xTaskIncrementTick+0x158>)
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	f000 fad1 	bl	800cea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c906:	4b3c      	ldr	r3, [pc, #240]	; (800c9f8 <xTaskIncrementTick+0x15c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d349      	bcc.n	800c9a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c910:	4b36      	ldr	r3, [pc, #216]	; (800c9ec <xTaskIncrementTick+0x150>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d104      	bne.n	800c924 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c91a:	4b37      	ldr	r3, [pc, #220]	; (800c9f8 <xTaskIncrementTick+0x15c>)
 800c91c:	f04f 32ff 	mov.w	r2, #4294967295
 800c920:	601a      	str	r2, [r3, #0]
					break;
 800c922:	e03f      	b.n	800c9a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c924:	4b31      	ldr	r3, [pc, #196]	; (800c9ec <xTaskIncrementTick+0x150>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d203      	bcs.n	800c944 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c93c:	4a2e      	ldr	r2, [pc, #184]	; (800c9f8 <xTaskIncrementTick+0x15c>)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c942:	e02f      	b.n	800c9a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	3304      	adds	r3, #4
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe fe59 	bl	800b600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d004      	beq.n	800c960 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	3318      	adds	r3, #24
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fe50 	bl	800b600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <xTaskIncrementTick+0x160>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d903      	bls.n	800c974 <xTaskIncrementTick+0xd8>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	4a22      	ldr	r2, [pc, #136]	; (800c9fc <xTaskIncrementTick+0x160>)
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4613      	mov	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4a1f      	ldr	r2, [pc, #124]	; (800ca00 <xTaskIncrementTick+0x164>)
 800c982:	441a      	add	r2, r3
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4610      	mov	r0, r2
 800c98c:	f7fe fddb 	bl	800b546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c994:	4b1b      	ldr	r3, [pc, #108]	; (800ca04 <xTaskIncrementTick+0x168>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d3b8      	bcc.n	800c910 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9a2:	e7b5      	b.n	800c910 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <xTaskIncrementTick+0x168>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9aa:	4915      	ldr	r1, [pc, #84]	; (800ca00 <xTaskIncrementTick+0x164>)
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	440b      	add	r3, r1
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d901      	bls.n	800c9c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c9c0:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <xTaskIncrementTick+0x16c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d007      	beq.n	800c9d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e004      	b.n	800c9d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ca0c <xTaskIncrementTick+0x170>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	4a0d      	ldr	r2, [pc, #52]	; (800ca0c <xTaskIncrementTick+0x170>)
 800c9d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c9d8:	697b      	ldr	r3, [r7, #20]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20001a94 	.word	0x20001a94
 800c9e8:	20001a70 	.word	0x20001a70
 800c9ec:	20001a24 	.word	0x20001a24
 800c9f0:	20001a28 	.word	0x20001a28
 800c9f4:	20001a84 	.word	0x20001a84
 800c9f8:	20001a8c 	.word	0x20001a8c
 800c9fc:	20001a74 	.word	0x20001a74
 800ca00:	2000159c 	.word	0x2000159c
 800ca04:	20001598 	.word	0x20001598
 800ca08:	20001a80 	.word	0x20001a80
 800ca0c:	20001a7c 	.word	0x20001a7c

0800ca10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca16:	4b28      	ldr	r3, [pc, #160]	; (800cab8 <vTaskSwitchContext+0xa8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d003      	beq.n	800ca26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca1e:	4b27      	ldr	r3, [pc, #156]	; (800cabc <vTaskSwitchContext+0xac>)
 800ca20:	2201      	movs	r2, #1
 800ca22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca24:	e041      	b.n	800caaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ca26:	4b25      	ldr	r3, [pc, #148]	; (800cabc <vTaskSwitchContext+0xac>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca2c:	4b24      	ldr	r3, [pc, #144]	; (800cac0 <vTaskSwitchContext+0xb0>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e010      	b.n	800ca56 <vTaskSwitchContext+0x46>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <vTaskSwitchContext+0x40>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <vTaskSwitchContext+0x3e>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	491b      	ldr	r1, [pc, #108]	; (800cac4 <vTaskSwitchContext+0xb4>)
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	440b      	add	r3, r1
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0e4      	beq.n	800ca34 <vTaskSwitchContext+0x24>
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a13      	ldr	r2, [pc, #76]	; (800cac4 <vTaskSwitchContext+0xb4>)
 800ca76:	4413      	add	r3, r2
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	605a      	str	r2, [r3, #4]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d104      	bne.n	800ca9a <vTaskSwitchContext+0x8a>
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	605a      	str	r2, [r3, #4]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <vTaskSwitchContext+0xb8>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	4a06      	ldr	r2, [pc, #24]	; (800cac0 <vTaskSwitchContext+0xb0>)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6013      	str	r3, [r2, #0]
}
 800caaa:	bf00      	nop
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	20001a94 	.word	0x20001a94
 800cabc:	20001a80 	.word	0x20001a80
 800cac0:	20001a74 	.word	0x20001a74
 800cac4:	2000159c 	.word	0x2000159c
 800cac8:	20001598 	.word	0x20001598

0800cacc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10a      	bne.n	800caf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	60fb      	str	r3, [r7, #12]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800caf2:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <vTaskPlaceOnEventList+0x44>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3318      	adds	r3, #24
 800caf8:	4619      	mov	r1, r3
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7fe fd47 	bl	800b58e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb00:	2101      	movs	r1, #1
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f000 fa7c 	bl	800d000 <prvAddCurrentTaskToDelayedList>
}
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	20001598 	.word	0x20001598

0800cb14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d10a      	bne.n	800cb3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	617b      	str	r3, [r7, #20]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <vTaskPlaceOnEventListRestricted+0x54>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3318      	adds	r3, #24
 800cb42:	4619      	mov	r1, r3
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f7fe fcfe 	bl	800b546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295
 800cb54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	68b8      	ldr	r0, [r7, #8]
 800cb5a:	f000 fa51 	bl	800d000 <prvAddCurrentTaskToDelayedList>
	}
 800cb5e:	bf00      	nop
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20001598 	.word	0x20001598

0800cb6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	60fb      	str	r3, [r7, #12]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	3318      	adds	r3, #24
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fe fd2f 	bl	800b600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cba2:	4b1e      	ldr	r3, [pc, #120]	; (800cc1c <xTaskRemoveFromEventList+0xb0>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d11d      	bne.n	800cbe6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3304      	adds	r3, #4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe fd26 	bl	800b600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <xTaskRemoveFromEventList+0xb4>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d903      	bls.n	800cbc8 <xTaskRemoveFromEventList+0x5c>
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	4a16      	ldr	r2, [pc, #88]	; (800cc20 <xTaskRemoveFromEventList+0xb4>)
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbcc:	4613      	mov	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4a13      	ldr	r2, [pc, #76]	; (800cc24 <xTaskRemoveFromEventList+0xb8>)
 800cbd6:	441a      	add	r2, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4610      	mov	r0, r2
 800cbe0:	f7fe fcb1 	bl	800b546 <vListInsertEnd>
 800cbe4:	e005      	b.n	800cbf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	3318      	adds	r3, #24
 800cbea:	4619      	mov	r1, r3
 800cbec:	480e      	ldr	r0, [pc, #56]	; (800cc28 <xTaskRemoveFromEventList+0xbc>)
 800cbee:	f7fe fcaa 	bl	800b546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <xTaskRemoveFromEventList+0xc0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d905      	bls.n	800cc0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc00:	2301      	movs	r3, #1
 800cc02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <xTaskRemoveFromEventList+0xc4>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	e001      	b.n	800cc10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc10:	697b      	ldr	r3, [r7, #20]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20001a94 	.word	0x20001a94
 800cc20:	20001a74 	.word	0x20001a74
 800cc24:	2000159c 	.word	0x2000159c
 800cc28:	20001a2c 	.word	0x20001a2c
 800cc2c:	20001598 	.word	0x20001598
 800cc30:	20001a80 	.word	0x20001a80

0800cc34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc3c:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <vTaskInternalSetTimeOutState+0x24>)
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc44:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <vTaskInternalSetTimeOutState+0x28>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	605a      	str	r2, [r3, #4]
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr
 800cc58:	20001a84 	.word	0x20001a84
 800cc5c:	20001a70 	.word	0x20001a70

0800cc60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b088      	sub	sp, #32
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	613b      	str	r3, [r7, #16]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10a      	bne.n	800cca2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	60fb      	str	r3, [r7, #12]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cca2:	f000 fe7f 	bl	800d9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cca6:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <xTaskCheckForTimeOut+0xbc>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d102      	bne.n	800ccc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	61fb      	str	r3, [r7, #28]
 800ccc4:	e023      	b.n	800cd0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	4b15      	ldr	r3, [pc, #84]	; (800cd20 <xTaskCheckForTimeOut+0xc0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d007      	beq.n	800cce2 <xTaskCheckForTimeOut+0x82>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	69ba      	ldr	r2, [r7, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d302      	bcc.n	800cce2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	61fb      	str	r3, [r7, #28]
 800cce0:	e015      	b.n	800cd0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d20b      	bcs.n	800cd04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	1ad2      	subs	r2, r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ff9b 	bl	800cc34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61fb      	str	r3, [r7, #28]
 800cd02:	e004      	b.n	800cd0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd0e:	f000 fe79 	bl	800da04 <vPortExitCritical>

	return xReturn;
 800cd12:	69fb      	ldr	r3, [r7, #28]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3720      	adds	r7, #32
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20001a70 	.word	0x20001a70
 800cd20:	20001a84 	.word	0x20001a84

0800cd24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd28:	4b03      	ldr	r3, [pc, #12]	; (800cd38 <vTaskMissedYield+0x14>)
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20001a80 	.word	0x20001a80

0800cd3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd44:	f000 f852 	bl	800cdec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd48:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <prvIdleTask+0x28>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d9f9      	bls.n	800cd44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd50:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <prvIdleTask+0x2c>)
 800cd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd60:	e7f0      	b.n	800cd44 <prvIdleTask+0x8>
 800cd62:	bf00      	nop
 800cd64:	2000159c 	.word	0x2000159c
 800cd68:	e000ed04 	.word	0xe000ed04

0800cd6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd72:	2300      	movs	r3, #0
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	e00c      	b.n	800cd92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4a12      	ldr	r2, [pc, #72]	; (800cdcc <prvInitialiseTaskLists+0x60>)
 800cd84:	4413      	add	r3, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fbb0 	bl	800b4ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	607b      	str	r3, [r7, #4]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b37      	cmp	r3, #55	; 0x37
 800cd96:	d9ef      	bls.n	800cd78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd98:	480d      	ldr	r0, [pc, #52]	; (800cdd0 <prvInitialiseTaskLists+0x64>)
 800cd9a:	f7fe fba7 	bl	800b4ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd9e:	480d      	ldr	r0, [pc, #52]	; (800cdd4 <prvInitialiseTaskLists+0x68>)
 800cda0:	f7fe fba4 	bl	800b4ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cda4:	480c      	ldr	r0, [pc, #48]	; (800cdd8 <prvInitialiseTaskLists+0x6c>)
 800cda6:	f7fe fba1 	bl	800b4ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdaa:	480c      	ldr	r0, [pc, #48]	; (800cddc <prvInitialiseTaskLists+0x70>)
 800cdac:	f7fe fb9e 	bl	800b4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdb0:	480b      	ldr	r0, [pc, #44]	; (800cde0 <prvInitialiseTaskLists+0x74>)
 800cdb2:	f7fe fb9b 	bl	800b4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdb6:	4b0b      	ldr	r3, [pc, #44]	; (800cde4 <prvInitialiseTaskLists+0x78>)
 800cdb8:	4a05      	ldr	r2, [pc, #20]	; (800cdd0 <prvInitialiseTaskLists+0x64>)
 800cdba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <prvInitialiseTaskLists+0x7c>)
 800cdbe:	4a05      	ldr	r2, [pc, #20]	; (800cdd4 <prvInitialiseTaskLists+0x68>)
 800cdc0:	601a      	str	r2, [r3, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	2000159c 	.word	0x2000159c
 800cdd0:	200019fc 	.word	0x200019fc
 800cdd4:	20001a10 	.word	0x20001a10
 800cdd8:	20001a2c 	.word	0x20001a2c
 800cddc:	20001a40 	.word	0x20001a40
 800cde0:	20001a58 	.word	0x20001a58
 800cde4:	20001a24 	.word	0x20001a24
 800cde8:	20001a28 	.word	0x20001a28

0800cdec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdf2:	e019      	b.n	800ce28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cdf4:	f000 fdd6 	bl	800d9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdf8:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <prvCheckTasksWaitingTermination+0x50>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fbfb 	bl	800b600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	; (800ce40 <prvCheckTasksWaitingTermination+0x54>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	4a0b      	ldr	r2, [pc, #44]	; (800ce40 <prvCheckTasksWaitingTermination+0x54>)
 800ce12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce14:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <prvCheckTasksWaitingTermination+0x58>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	4a0a      	ldr	r2, [pc, #40]	; (800ce44 <prvCheckTasksWaitingTermination+0x58>)
 800ce1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce1e:	f000 fdf1 	bl	800da04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f810 	bl	800ce48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce28:	4b06      	ldr	r3, [pc, #24]	; (800ce44 <prvCheckTasksWaitingTermination+0x58>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e1      	bne.n	800cdf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001a40 	.word	0x20001a40
 800ce40:	20001a6c 	.word	0x20001a6c
 800ce44:	20001a54 	.word	0x20001a54

0800ce48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d108      	bne.n	800ce6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 ff8e 	bl	800dd80 <vPortFree>
				vPortFree( pxTCB );
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 ff8b 	bl	800dd80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce6a:	e018      	b.n	800ce9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d103      	bne.n	800ce7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 ff82 	bl	800dd80 <vPortFree>
	}
 800ce7c:	e00f      	b.n	800ce9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d00a      	beq.n	800ce9e <prvDeleteTCB+0x56>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	60fb      	str	r3, [r7, #12]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <prvDeleteTCB+0x54>
	}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <prvResetNextTaskUnblockTime+0x38>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d104      	bne.n	800cec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <prvResetNextTaskUnblockTime+0x3c>)
 800ceba:	f04f 32ff 	mov.w	r2, #4294967295
 800cebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cec0:	e008      	b.n	800ced4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <prvResetNextTaskUnblockTime+0x38>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	4a04      	ldr	r2, [pc, #16]	; (800cee4 <prvResetNextTaskUnblockTime+0x3c>)
 800ced2:	6013      	str	r3, [r2, #0]
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20001a24 	.word	0x20001a24
 800cee4:	20001a8c 	.word	0x20001a8c

0800cee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ceee:	4b0b      	ldr	r3, [pc, #44]	; (800cf1c <xTaskGetSchedulerState+0x34>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d102      	bne.n	800cefc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cef6:	2301      	movs	r3, #1
 800cef8:	607b      	str	r3, [r7, #4]
 800cefa:	e008      	b.n	800cf0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cefc:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <xTaskGetSchedulerState+0x38>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d102      	bne.n	800cf0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf04:	2302      	movs	r3, #2
 800cf06:	607b      	str	r3, [r7, #4]
 800cf08:	e001      	b.n	800cf0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf0e:	687b      	ldr	r3, [r7, #4]
	}
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20001a78 	.word	0x20001a78
 800cf20:	20001a94 	.word	0x20001a94

0800cf24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d056      	beq.n	800cfe8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf3a:	4b2e      	ldr	r3, [pc, #184]	; (800cff4 <xTaskPriorityDisinherit+0xd0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d00a      	beq.n	800cf5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	60fb      	str	r3, [r7, #12]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10a      	bne.n	800cf78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60bb      	str	r3, [r7, #8]
}
 800cf74:	bf00      	nop
 800cf76:	e7fe      	b.n	800cf76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf7c:	1e5a      	subs	r2, r3, #1
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d02c      	beq.n	800cfe8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d128      	bne.n	800cfe8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe fb30 	bl	800b600 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb8:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <xTaskPriorityDisinherit+0xd4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d903      	bls.n	800cfc8 <xTaskPriorityDisinherit+0xa4>
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	4a0c      	ldr	r2, [pc, #48]	; (800cff8 <xTaskPriorityDisinherit+0xd4>)
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfcc:	4613      	mov	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4a09      	ldr	r2, [pc, #36]	; (800cffc <xTaskPriorityDisinherit+0xd8>)
 800cfd6:	441a      	add	r2, r3
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	3304      	adds	r3, #4
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4610      	mov	r0, r2
 800cfe0:	f7fe fab1 	bl	800b546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfe8:	697b      	ldr	r3, [r7, #20]
	}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20001598 	.word	0x20001598
 800cff8:	20001a74 	.word	0x20001a74
 800cffc:	2000159c 	.word	0x2000159c

0800d000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d00a:	4b21      	ldr	r3, [pc, #132]	; (800d090 <prvAddCurrentTaskToDelayedList+0x90>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d010:	4b20      	ldr	r3, [pc, #128]	; (800d094 <prvAddCurrentTaskToDelayedList+0x94>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3304      	adds	r3, #4
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe faf2 	bl	800b600 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d022:	d10a      	bne.n	800d03a <prvAddCurrentTaskToDelayedList+0x3a>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d007      	beq.n	800d03a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d02a:	4b1a      	ldr	r3, [pc, #104]	; (800d094 <prvAddCurrentTaskToDelayedList+0x94>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3304      	adds	r3, #4
 800d030:	4619      	mov	r1, r3
 800d032:	4819      	ldr	r0, [pc, #100]	; (800d098 <prvAddCurrentTaskToDelayedList+0x98>)
 800d034:	f7fe fa87 	bl	800b546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d038:	e026      	b.n	800d088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4413      	add	r3, r2
 800d040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d042:	4b14      	ldr	r3, [pc, #80]	; (800d094 <prvAddCurrentTaskToDelayedList+0x94>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d209      	bcs.n	800d066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d052:	4b12      	ldr	r3, [pc, #72]	; (800d09c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	4b0f      	ldr	r3, [pc, #60]	; (800d094 <prvAddCurrentTaskToDelayedList+0x94>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3304      	adds	r3, #4
 800d05c:	4619      	mov	r1, r3
 800d05e:	4610      	mov	r0, r2
 800d060:	f7fe fa95 	bl	800b58e <vListInsert>
}
 800d064:	e010      	b.n	800d088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d066:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <prvAddCurrentTaskToDelayedList+0x94>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3304      	adds	r3, #4
 800d070:	4619      	mov	r1, r3
 800d072:	4610      	mov	r0, r2
 800d074:	f7fe fa8b 	bl	800b58e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d202      	bcs.n	800d088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d082:	4a08      	ldr	r2, [pc, #32]	; (800d0a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	6013      	str	r3, [r2, #0]
}
 800d088:	bf00      	nop
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	20001a70 	.word	0x20001a70
 800d094:	20001598 	.word	0x20001598
 800d098:	20001a58 	.word	0x20001a58
 800d09c:	20001a28 	.word	0x20001a28
 800d0a0:	20001a24 	.word	0x20001a24
 800d0a4:	20001a8c 	.word	0x20001a8c

0800d0a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08a      	sub	sp, #40	; 0x28
 800d0ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0b2:	f000 fb07 	bl	800d6c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0b6:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <xTimerCreateTimerTask+0x80>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d021      	beq.n	800d102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0c6:	1d3a      	adds	r2, r7, #4
 800d0c8:	f107 0108 	add.w	r1, r7, #8
 800d0cc:	f107 030c 	add.w	r3, r7, #12
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe f9f1 	bl	800b4b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	9202      	str	r2, [sp, #8]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	460a      	mov	r2, r1
 800d0e8:	4910      	ldr	r1, [pc, #64]	; (800d12c <xTimerCreateTimerTask+0x84>)
 800d0ea:	4811      	ldr	r0, [pc, #68]	; (800d130 <xTimerCreateTimerTask+0x88>)
 800d0ec:	f7fe ffd8 	bl	800c0a0 <xTaskCreateStatic>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	4a10      	ldr	r2, [pc, #64]	; (800d134 <xTimerCreateTimerTask+0x8c>)
 800d0f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <xTimerCreateTimerTask+0x8c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0fe:	2301      	movs	r3, #1
 800d100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	613b      	str	r3, [r7, #16]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d11e:	697b      	ldr	r3, [r7, #20]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20001ac8 	.word	0x20001ac8
 800d12c:	0800f510 	.word	0x0800f510
 800d130:	0800d26d 	.word	0x0800d26d
 800d134:	20001acc 	.word	0x20001acc

0800d138 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08a      	sub	sp, #40	; 0x28
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d146:	2300      	movs	r3, #0
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	623b      	str	r3, [r7, #32]
}
 800d162:	bf00      	nop
 800d164:	e7fe      	b.n	800d164 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d166:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <xTimerGenericCommand+0x98>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d02a      	beq.n	800d1c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b05      	cmp	r3, #5
 800d17e:	dc18      	bgt.n	800d1b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d180:	f7ff feb2 	bl	800cee8 <xTaskGetSchedulerState>
 800d184:	4603      	mov	r3, r0
 800d186:	2b02      	cmp	r3, #2
 800d188:	d109      	bne.n	800d19e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d18a:	4b11      	ldr	r3, [pc, #68]	; (800d1d0 <xTimerGenericCommand+0x98>)
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	f107 0110 	add.w	r1, r7, #16
 800d192:	2300      	movs	r3, #0
 800d194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d196:	f7fe fb9b 	bl	800b8d0 <xQueueGenericSend>
 800d19a:	6278      	str	r0, [r7, #36]	; 0x24
 800d19c:	e012      	b.n	800d1c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <xTimerGenericCommand+0x98>)
 800d1a0:	6818      	ldr	r0, [r3, #0]
 800d1a2:	f107 0110 	add.w	r1, r7, #16
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f7fe fb91 	bl	800b8d0 <xQueueGenericSend>
 800d1ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d1b0:	e008      	b.n	800d1c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1b2:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <xTimerGenericCommand+0x98>)
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	f107 0110 	add.w	r1, r7, #16
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	f7fe fc85 	bl	800bacc <xQueueGenericSendFromISR>
 800d1c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3728      	adds	r7, #40	; 0x28
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20001ac8 	.word	0x20001ac8

0800d1d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1de:	4b22      	ldr	r3, [pc, #136]	; (800d268 <prvProcessExpiredTimer+0x94>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fa07 	bl	800b600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1f8:	f003 0304 	and.w	r3, r3, #4
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d022      	beq.n	800d246 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	699a      	ldr	r2, [r3, #24]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	18d1      	adds	r1, r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	6978      	ldr	r0, [r7, #20]
 800d20e:	f000 f8d1 	bl	800d3b4 <prvInsertTimerInActiveList>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01f      	beq.n	800d258 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d218:	2300      	movs	r3, #0
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	2300      	movs	r3, #0
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	2100      	movs	r1, #0
 800d222:	6978      	ldr	r0, [r7, #20]
 800d224:	f7ff ff88 	bl	800d138 <xTimerGenericCommand>
 800d228:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d113      	bne.n	800d258 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	60fb      	str	r3, [r7, #12]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d24c:	f023 0301 	bic.w	r3, r3, #1
 800d250:	b2da      	uxtb	r2, r3
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	6a1b      	ldr	r3, [r3, #32]
 800d25c:	6978      	ldr	r0, [r7, #20]
 800d25e:	4798      	blx	r3
}
 800d260:	bf00      	nop
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20001ac0 	.word	0x20001ac0

0800d26c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d274:	f107 0308 	add.w	r3, r7, #8
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f857 	bl	800d32c <prvGetNextExpireTime>
 800d27e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	4619      	mov	r1, r3
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 f803 	bl	800d290 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d28a:	f000 f8d5 	bl	800d438 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d28e:	e7f1      	b.n	800d274 <prvTimerTask+0x8>

0800d290 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d29a:	f7ff fa43 	bl	800c724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d29e:	f107 0308 	add.w	r3, r7, #8
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f866 	bl	800d374 <prvSampleTimeNow>
 800d2a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d130      	bne.n	800d312 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10a      	bne.n	800d2cc <prvProcessTimerOrBlockTask+0x3c>
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d806      	bhi.n	800d2cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2be:	f7ff fa3f 	bl	800c740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ff85 	bl	800d1d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2ca:	e024      	b.n	800d316 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d008      	beq.n	800d2e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2d2:	4b13      	ldr	r3, [pc, #76]	; (800d320 <prvProcessTimerOrBlockTask+0x90>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <prvProcessTimerOrBlockTask+0x50>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <prvProcessTimerOrBlockTask+0x52>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2e4:	4b0f      	ldr	r3, [pc, #60]	; (800d324 <prvProcessTimerOrBlockTask+0x94>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f7fe fea1 	bl	800c038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2f6:	f7ff fa23 	bl	800c740 <xTaskResumeAll>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10a      	bne.n	800d316 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d300:	4b09      	ldr	r3, [pc, #36]	; (800d328 <prvProcessTimerOrBlockTask+0x98>)
 800d302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	f3bf 8f6f 	isb	sy
}
 800d310:	e001      	b.n	800d316 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d312:	f7ff fa15 	bl	800c740 <xTaskResumeAll>
}
 800d316:	bf00      	nop
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001ac4 	.word	0x20001ac4
 800d324:	20001ac8 	.word	0x20001ac8
 800d328:	e000ed04 	.word	0xe000ed04

0800d32c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d334:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <prvGetNextExpireTime+0x44>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <prvGetNextExpireTime+0x16>
 800d33e:	2201      	movs	r2, #1
 800d340:	e000      	b.n	800d344 <prvGetNextExpireTime+0x18>
 800d342:	2200      	movs	r2, #0
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d105      	bne.n	800d35c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <prvGetNextExpireTime+0x44>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	e001      	b.n	800d360 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d35c:	2300      	movs	r3, #0
 800d35e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20001ac0 	.word	0x20001ac0

0800d374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d37c:	f7ff fa7e 	bl	800c87c <xTaskGetTickCount>
 800d380:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d382:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <prvSampleTimeNow+0x3c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d205      	bcs.n	800d398 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d38c:	f000 f936 	bl	800d5fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e002      	b.n	800d39e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d39e:	4a04      	ldr	r2, [pc, #16]	; (800d3b0 <prvSampleTimeNow+0x3c>)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20001ad0 	.word	0x20001ad0

0800d3b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d812      	bhi.n	800d400 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d302      	bcc.n	800d3ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	617b      	str	r3, [r7, #20]
 800d3ec:	e01b      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3ee:	4b10      	ldr	r3, [pc, #64]	; (800d430 <prvInsertTimerInActiveList+0x7c>)
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	f7fe f8c8 	bl	800b58e <vListInsert>
 800d3fe:	e012      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d206      	bcs.n	800d416 <prvInsertTimerInActiveList+0x62>
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d302      	bcc.n	800d416 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e007      	b.n	800d426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d416:	4b07      	ldr	r3, [pc, #28]	; (800d434 <prvInsertTimerInActiveList+0x80>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3304      	adds	r3, #4
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fe f8b4 	bl	800b58e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	20001ac4 	.word	0x20001ac4
 800d434:	20001ac0 	.word	0x20001ac0

0800d438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d43e:	e0ca      	b.n	800d5d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	da18      	bge.n	800d478 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d446:	1d3b      	adds	r3, r7, #4
 800d448:	3304      	adds	r3, #4
 800d44a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	61fb      	str	r3, [r7, #28]
}
 800d464:	bf00      	nop
 800d466:	e7fe      	b.n	800d466 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d46e:	6850      	ldr	r0, [r2, #4]
 800d470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d472:	6892      	ldr	r2, [r2, #8]
 800d474:	4611      	mov	r1, r2
 800d476:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f2c0 80aa 	blt.w	800d5d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	3304      	adds	r3, #4
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe f8b5 	bl	800b600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d496:	463b      	mov	r3, r7
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff ff6b 	bl	800d374 <prvSampleTimeNow>
 800d49e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b09      	cmp	r3, #9
 800d4a4:	f200 8097 	bhi.w	800d5d6 <prvProcessReceivedCommands+0x19e>
 800d4a8:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <prvProcessReceivedCommands+0x78>)
 800d4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ae:	bf00      	nop
 800d4b0:	0800d4d9 	.word	0x0800d4d9
 800d4b4:	0800d4d9 	.word	0x0800d4d9
 800d4b8:	0800d4d9 	.word	0x0800d4d9
 800d4bc:	0800d54d 	.word	0x0800d54d
 800d4c0:	0800d561 	.word	0x0800d561
 800d4c4:	0800d5ab 	.word	0x0800d5ab
 800d4c8:	0800d4d9 	.word	0x0800d4d9
 800d4cc:	0800d4d9 	.word	0x0800d4d9
 800d4d0:	0800d54d 	.word	0x0800d54d
 800d4d4:	0800d561 	.word	0x0800d561
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4de:	f043 0301 	orr.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	18d1      	adds	r1, r2, r3
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f8:	f7ff ff5c 	bl	800d3b4 <prvInsertTimerInActiveList>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d069      	beq.n	800d5d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d510:	f003 0304 	and.w	r3, r3, #4
 800d514:	2b00      	cmp	r3, #0
 800d516:	d05e      	beq.n	800d5d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	441a      	add	r2, r3
 800d520:	2300      	movs	r3, #0
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	2300      	movs	r3, #0
 800d526:	2100      	movs	r1, #0
 800d528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52a:	f7ff fe05 	bl	800d138 <xTimerGenericCommand>
 800d52e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d14f      	bne.n	800d5d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	61bb      	str	r3, [r7, #24]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d552:	f023 0301 	bic.w	r3, r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d55e:	e03a      	b.n	800d5d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d566:	f043 0301 	orr.w	r3, r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10a      	bne.n	800d596 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	617b      	str	r3, [r7, #20]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	699a      	ldr	r2, [r3, #24]
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	18d1      	adds	r1, r2, r3
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5a4:	f7ff ff06 	bl	800d3b4 <prvInsertTimerInActiveList>
					break;
 800d5a8:	e015      	b.n	800d5d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d103      	bne.n	800d5c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ba:	f000 fbe1 	bl	800dd80 <vPortFree>
 800d5be:	e00a      	b.n	800d5d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5c6:	f023 0301 	bic.w	r3, r3, #1
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5d2:	e000      	b.n	800d5d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d5d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5d6:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <prvProcessReceivedCommands+0x1c0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	1d39      	adds	r1, r7, #4
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fb10 	bl	800bc04 <xQueueReceive>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f47f af2a 	bne.w	800d440 <prvProcessReceivedCommands+0x8>
	}
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	3730      	adds	r7, #48	; 0x30
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20001ac8 	.word	0x20001ac8

0800d5fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d602:	e048      	b.n	800d696 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d604:	4b2d      	ldr	r3, [pc, #180]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d60e:	4b2b      	ldr	r3, [pc, #172]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fd ffef 	bl	800b600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d630:	f003 0304 	and.w	r3, r3, #4
 800d634:	2b00      	cmp	r3, #0
 800d636:	d02e      	beq.n	800d696 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	699b      	ldr	r3, [r3, #24]
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	4413      	add	r3, r2
 800d640:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	429a      	cmp	r2, r3
 800d648:	d90e      	bls.n	800d668 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d656:	4b19      	ldr	r3, [pc, #100]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3304      	adds	r3, #4
 800d65e:	4619      	mov	r1, r3
 800d660:	4610      	mov	r0, r2
 800d662:	f7fd ff94 	bl	800b58e <vListInsert>
 800d666:	e016      	b.n	800d696 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d668:	2300      	movs	r3, #0
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	2300      	movs	r3, #0
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	2100      	movs	r1, #0
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f7ff fd60 	bl	800d138 <xTimerGenericCommand>
 800d678:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	603b      	str	r3, [r7, #0]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1b1      	bne.n	800d604 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6a0:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <prvSwitchTimerLists+0xc4>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a04      	ldr	r2, [pc, #16]	; (800d6bc <prvSwitchTimerLists+0xc0>)
 800d6ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6ae:	4a04      	ldr	r2, [pc, #16]	; (800d6c0 <prvSwitchTimerLists+0xc4>)
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	6013      	str	r3, [r2, #0]
}
 800d6b4:	bf00      	nop
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20001ac0 	.word	0x20001ac0
 800d6c0:	20001ac4 	.word	0x20001ac4

0800d6c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6ca:	f000 f96b 	bl	800d9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6ce:	4b15      	ldr	r3, [pc, #84]	; (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d120      	bne.n	800d718 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6d6:	4814      	ldr	r0, [pc, #80]	; (800d728 <prvCheckForValidListAndQueue+0x64>)
 800d6d8:	f7fd ff08 	bl	800b4ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6dc:	4813      	ldr	r0, [pc, #76]	; (800d72c <prvCheckForValidListAndQueue+0x68>)
 800d6de:	f7fd ff05 	bl	800b4ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6e2:	4b13      	ldr	r3, [pc, #76]	; (800d730 <prvCheckForValidListAndQueue+0x6c>)
 800d6e4:	4a10      	ldr	r2, [pc, #64]	; (800d728 <prvCheckForValidListAndQueue+0x64>)
 800d6e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6e8:	4b12      	ldr	r3, [pc, #72]	; (800d734 <prvCheckForValidListAndQueue+0x70>)
 800d6ea:	4a10      	ldr	r2, [pc, #64]	; (800d72c <prvCheckForValidListAndQueue+0x68>)
 800d6ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	4b11      	ldr	r3, [pc, #68]	; (800d738 <prvCheckForValidListAndQueue+0x74>)
 800d6f4:	4a11      	ldr	r2, [pc, #68]	; (800d73c <prvCheckForValidListAndQueue+0x78>)
 800d6f6:	2110      	movs	r1, #16
 800d6f8:	200a      	movs	r0, #10
 800d6fa:	f7fe f813 	bl	800b724 <xQueueGenericCreateStatic>
 800d6fe:	4603      	mov	r3, r0
 800d700:	4a08      	ldr	r2, [pc, #32]	; (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d702:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d704:	4b07      	ldr	r3, [pc, #28]	; (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d005      	beq.n	800d718 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	490b      	ldr	r1, [pc, #44]	; (800d740 <prvCheckForValidListAndQueue+0x7c>)
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fc66 	bl	800bfe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d718:	f000 f974 	bl	800da04 <vPortExitCritical>
}
 800d71c:	bf00      	nop
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20001ac8 	.word	0x20001ac8
 800d728:	20001a98 	.word	0x20001a98
 800d72c:	20001aac 	.word	0x20001aac
 800d730:	20001ac0 	.word	0x20001ac0
 800d734:	20001ac4 	.word	0x20001ac4
 800d738:	20001b74 	.word	0x20001b74
 800d73c:	20001ad4 	.word	0x20001ad4
 800d740:	0800f518 	.word	0x0800f518

0800d744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3b04      	subs	r3, #4
 800d754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d75c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3b04      	subs	r3, #4
 800d762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f023 0201 	bic.w	r2, r3, #1
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3b04      	subs	r3, #4
 800d772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d774:	4a0c      	ldr	r2, [pc, #48]	; (800d7a8 <pxPortInitialiseStack+0x64>)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3b14      	subs	r3, #20
 800d77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3b04      	subs	r3, #4
 800d78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f06f 0202 	mvn.w	r2, #2
 800d792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3b20      	subs	r3, #32
 800d798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d79a:	68fb      	ldr	r3, [r7, #12]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	0800d7ad 	.word	0x0800d7ad

0800d7ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7b6:	4b12      	ldr	r3, [pc, #72]	; (800d800 <prvTaskExitError+0x54>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7be:	d00a      	beq.n	800d7d6 <prvTaskExitError+0x2a>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	60fb      	str	r3, [r7, #12]
}
 800d7d2:	bf00      	nop
 800d7d4:	e7fe      	b.n	800d7d4 <prvTaskExitError+0x28>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	60bb      	str	r3, [r7, #8]
}
 800d7e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7ea:	bf00      	nop
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0fc      	beq.n	800d7ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20000590 	.word	0x20000590
	...

0800d810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d810:	4b07      	ldr	r3, [pc, #28]	; (800d830 <pxCurrentTCBConst2>)
 800d812:	6819      	ldr	r1, [r3, #0]
 800d814:	6808      	ldr	r0, [r1, #0]
 800d816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81a:	f380 8809 	msr	PSP, r0
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f04f 0000 	mov.w	r0, #0
 800d826:	f380 8811 	msr	BASEPRI, r0
 800d82a:	4770      	bx	lr
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst2>:
 800d830:	20001598 	.word	0x20001598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d838:	4808      	ldr	r0, [pc, #32]	; (800d85c <prvPortStartFirstTask+0x24>)
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	6800      	ldr	r0, [r0, #0]
 800d83e:	f380 8808 	msr	MSP, r0
 800d842:	f04f 0000 	mov.w	r0, #0
 800d846:	f380 8814 	msr	CONTROL, r0
 800d84a:	b662      	cpsie	i
 800d84c:	b661      	cpsie	f
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	df00      	svc	0
 800d858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d85a:	bf00      	nop
 800d85c:	e000ed08 	.word	0xe000ed08

0800d860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d866:	4b46      	ldr	r3, [pc, #280]	; (800d980 <xPortStartScheduler+0x120>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a46      	ldr	r2, [pc, #280]	; (800d984 <xPortStartScheduler+0x124>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d10a      	bne.n	800d886 <xPortStartScheduler+0x26>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	613b      	str	r3, [r7, #16]
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d886:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <xPortStartScheduler+0x120>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a3f      	ldr	r2, [pc, #252]	; (800d988 <xPortStartScheduler+0x128>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d10a      	bne.n	800d8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	60fb      	str	r3, [r7, #12]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8a6:	4b39      	ldr	r3, [pc, #228]	; (800d98c <xPortStartScheduler+0x12c>)
 800d8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	22ff      	movs	r2, #255	; 0xff
 800d8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	4b31      	ldr	r3, [pc, #196]	; (800d990 <xPortStartScheduler+0x130>)
 800d8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8ce:	4b31      	ldr	r3, [pc, #196]	; (800d994 <xPortStartScheduler+0x134>)
 800d8d0:	2207      	movs	r2, #7
 800d8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8d4:	e009      	b.n	800d8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d8d6:	4b2f      	ldr	r3, [pc, #188]	; (800d994 <xPortStartScheduler+0x134>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	4a2d      	ldr	r2, [pc, #180]	; (800d994 <xPortStartScheduler+0x134>)
 800d8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f2:	2b80      	cmp	r3, #128	; 0x80
 800d8f4:	d0ef      	beq.n	800d8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8f6:	4b27      	ldr	r3, [pc, #156]	; (800d994 <xPortStartScheduler+0x134>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f1c3 0307 	rsb	r3, r3, #7
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	d00a      	beq.n	800d918 <xPortStartScheduler+0xb8>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	60bb      	str	r3, [r7, #8]
}
 800d914:	bf00      	nop
 800d916:	e7fe      	b.n	800d916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d918:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <xPortStartScheduler+0x134>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	021b      	lsls	r3, r3, #8
 800d91e:	4a1d      	ldr	r2, [pc, #116]	; (800d994 <xPortStartScheduler+0x134>)
 800d920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d922:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <xPortStartScheduler+0x134>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d92a:	4a1a      	ldr	r2, [pc, #104]	; (800d994 <xPortStartScheduler+0x134>)
 800d92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	b2da      	uxtb	r2, r3
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d936:	4b18      	ldr	r3, [pc, #96]	; (800d998 <xPortStartScheduler+0x138>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <xPortStartScheduler+0x138>)
 800d93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d942:	4b15      	ldr	r3, [pc, #84]	; (800d998 <xPortStartScheduler+0x138>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a14      	ldr	r2, [pc, #80]	; (800d998 <xPortStartScheduler+0x138>)
 800d948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d94e:	f000 f8dd 	bl	800db0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d952:	4b12      	ldr	r3, [pc, #72]	; (800d99c <xPortStartScheduler+0x13c>)
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d958:	f000 f8fc 	bl	800db54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d95c:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <xPortStartScheduler+0x140>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a0f      	ldr	r2, [pc, #60]	; (800d9a0 <xPortStartScheduler+0x140>)
 800d962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d968:	f7ff ff66 	bl	800d838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d96c:	f7ff f850 	bl	800ca10 <vTaskSwitchContext>
	prvTaskExitError();
 800d970:	f7ff ff1c 	bl	800d7ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	e000ed00 	.word	0xe000ed00
 800d984:	410fc271 	.word	0x410fc271
 800d988:	410fc270 	.word	0x410fc270
 800d98c:	e000e400 	.word	0xe000e400
 800d990:	20001bc4 	.word	0x20001bc4
 800d994:	20001bc8 	.word	0x20001bc8
 800d998:	e000ed20 	.word	0xe000ed20
 800d99c:	20000590 	.word	0x20000590
 800d9a0:	e000ef34 	.word	0xe000ef34

0800d9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	607b      	str	r3, [r7, #4]
}
 800d9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <vPortEnterCritical+0x58>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	4a0d      	ldr	r2, [pc, #52]	; (800d9fc <vPortEnterCritical+0x58>)
 800d9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9c8:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <vPortEnterCritical+0x58>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d10f      	bne.n	800d9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <vPortEnterCritical+0x5c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	603b      	str	r3, [r7, #0]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <vPortEnterCritical+0x4a>
	}
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	20000590 	.word	0x20000590
 800da00:	e000ed04 	.word	0xe000ed04

0800da04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da0a:	4b12      	ldr	r3, [pc, #72]	; (800da54 <vPortExitCritical+0x50>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10a      	bne.n	800da28 <vPortExitCritical+0x24>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	607b      	str	r3, [r7, #4]
}
 800da24:	bf00      	nop
 800da26:	e7fe      	b.n	800da26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <vPortExitCritical+0x50>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	4a09      	ldr	r2, [pc, #36]	; (800da54 <vPortExitCritical+0x50>)
 800da30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da32:	4b08      	ldr	r3, [pc, #32]	; (800da54 <vPortExitCritical+0x50>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d105      	bne.n	800da46 <vPortExitCritical+0x42>
 800da3a:	2300      	movs	r3, #0
 800da3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	f383 8811 	msr	BASEPRI, r3
}
 800da44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	20000590 	.word	0x20000590
	...

0800da60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da60:	f3ef 8009 	mrs	r0, PSP
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	4b15      	ldr	r3, [pc, #84]	; (800dac0 <pxCurrentTCBConst>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	f01e 0f10 	tst.w	lr, #16
 800da70:	bf08      	it	eq
 800da72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7a:	6010      	str	r0, [r2, #0]
 800da7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da84:	f380 8811 	msr	BASEPRI, r0
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f7fe ffbe 	bl	800ca10 <vTaskSwitchContext>
 800da94:	f04f 0000 	mov.w	r0, #0
 800da98:	f380 8811 	msr	BASEPRI, r0
 800da9c:	bc09      	pop	{r0, r3}
 800da9e:	6819      	ldr	r1, [r3, #0]
 800daa0:	6808      	ldr	r0, [r1, #0]
 800daa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa6:	f01e 0f10 	tst.w	lr, #16
 800daaa:	bf08      	it	eq
 800daac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dab0:	f380 8809 	msr	PSP, r0
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	f3af 8000 	nop.w

0800dac0 <pxCurrentTCBConst>:
 800dac0:	20001598 	.word	0x20001598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop

0800dac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	607b      	str	r3, [r7, #4]
}
 800dae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dae2:	f7fe fedb 	bl	800c89c <xTaskIncrementTick>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800daec:	4b06      	ldr	r3, [pc, #24]	; (800db08 <xPortSysTickHandler+0x40>)
 800daee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	2300      	movs	r3, #0
 800daf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f383 8811 	msr	BASEPRI, r3
}
 800dafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db10:	4b0b      	ldr	r3, [pc, #44]	; (800db40 <vPortSetupTimerInterrupt+0x34>)
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <vPortSetupTimerInterrupt+0x38>)
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db1c:	4b0a      	ldr	r3, [pc, #40]	; (800db48 <vPortSetupTimerInterrupt+0x3c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a0a      	ldr	r2, [pc, #40]	; (800db4c <vPortSetupTimerInterrupt+0x40>)
 800db22:	fba2 2303 	umull	r2, r3, r2, r3
 800db26:	099b      	lsrs	r3, r3, #6
 800db28:	4a09      	ldr	r2, [pc, #36]	; (800db50 <vPortSetupTimerInterrupt+0x44>)
 800db2a:	3b01      	subs	r3, #1
 800db2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db2e:	4b04      	ldr	r3, [pc, #16]	; (800db40 <vPortSetupTimerInterrupt+0x34>)
 800db30:	2207      	movs	r2, #7
 800db32:	601a      	str	r2, [r3, #0]
}
 800db34:	bf00      	nop
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	e000e010 	.word	0xe000e010
 800db44:	e000e018 	.word	0xe000e018
 800db48:	200004f8 	.word	0x200004f8
 800db4c:	10624dd3 	.word	0x10624dd3
 800db50:	e000e014 	.word	0xe000e014

0800db54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db64 <vPortEnableVFP+0x10>
 800db58:	6801      	ldr	r1, [r0, #0]
 800db5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db5e:	6001      	str	r1, [r0, #0]
 800db60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db62:	bf00      	nop
 800db64:	e000ed88 	.word	0xe000ed88

0800db68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db6e:	f3ef 8305 	mrs	r3, IPSR
 800db72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b0f      	cmp	r3, #15
 800db78:	d914      	bls.n	800dba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db7a:	4a17      	ldr	r2, [pc, #92]	; (800dbd8 <vPortValidateInterruptPriority+0x70>)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db84:	4b15      	ldr	r3, [pc, #84]	; (800dbdc <vPortValidateInterruptPriority+0x74>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	7afa      	ldrb	r2, [r7, #11]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d20a      	bcs.n	800dba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	607b      	str	r3, [r7, #4]
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dba4:	4b0e      	ldr	r3, [pc, #56]	; (800dbe0 <vPortValidateInterruptPriority+0x78>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <vPortValidateInterruptPriority+0x7c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d90a      	bls.n	800dbca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	603b      	str	r3, [r7, #0]
}
 800dbc6:	bf00      	nop
 800dbc8:	e7fe      	b.n	800dbc8 <vPortValidateInterruptPriority+0x60>
	}
 800dbca:	bf00      	nop
 800dbcc:	3714      	adds	r7, #20
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	e000e3f0 	.word	0xe000e3f0
 800dbdc:	20001bc4 	.word	0x20001bc4
 800dbe0:	e000ed0c 	.word	0xe000ed0c
 800dbe4:	20001bc8 	.word	0x20001bc8

0800dbe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08a      	sub	sp, #40	; 0x28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbf4:	f7fe fd96 	bl	800c724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbf8:	4b5b      	ldr	r3, [pc, #364]	; (800dd68 <pvPortMalloc+0x180>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc00:	f000 f920 	bl	800de44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc04:	4b59      	ldr	r3, [pc, #356]	; (800dd6c <pvPortMalloc+0x184>)
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f040 8093 	bne.w	800dd38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d01d      	beq.n	800dc54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dc18:	2208      	movs	r2, #8
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d014      	beq.n	800dc54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f023 0307 	bic.w	r3, r3, #7
 800dc30:	3308      	adds	r3, #8
 800dc32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f003 0307 	and.w	r3, r3, #7
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <pvPortMalloc+0x6c>
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	617b      	str	r3, [r7, #20]
}
 800dc50:	bf00      	nop
 800dc52:	e7fe      	b.n	800dc52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d06e      	beq.n	800dd38 <pvPortMalloc+0x150>
 800dc5a:	4b45      	ldr	r3, [pc, #276]	; (800dd70 <pvPortMalloc+0x188>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d869      	bhi.n	800dd38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc64:	4b43      	ldr	r3, [pc, #268]	; (800dd74 <pvPortMalloc+0x18c>)
 800dc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc68:	4b42      	ldr	r3, [pc, #264]	; (800dd74 <pvPortMalloc+0x18c>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc6e:	e004      	b.n	800dc7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d903      	bls.n	800dc8c <pvPortMalloc+0xa4>
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1f1      	bne.n	800dc70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc8c:	4b36      	ldr	r3, [pc, #216]	; (800dd68 <pvPortMalloc+0x180>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d050      	beq.n	800dd38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2208      	movs	r2, #8
 800dc9c:	4413      	add	r3, r2
 800dc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	1ad2      	subs	r2, r2, r3
 800dcb0:	2308      	movs	r3, #8
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d91f      	bls.n	800dcf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <pvPortMalloc+0xf8>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	613b      	str	r3, [r7, #16]
}
 800dcdc:	bf00      	nop
 800dcde:	e7fe      	b.n	800dcde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	1ad2      	subs	r2, r2, r3
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcf2:	69b8      	ldr	r0, [r7, #24]
 800dcf4:	f000 f908 	bl	800df08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcf8:	4b1d      	ldr	r3, [pc, #116]	; (800dd70 <pvPortMalloc+0x188>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	4a1b      	ldr	r2, [pc, #108]	; (800dd70 <pvPortMalloc+0x188>)
 800dd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd06:	4b1a      	ldr	r3, [pc, #104]	; (800dd70 <pvPortMalloc+0x188>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b1b      	ldr	r3, [pc, #108]	; (800dd78 <pvPortMalloc+0x190>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d203      	bcs.n	800dd1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd12:	4b17      	ldr	r3, [pc, #92]	; (800dd70 <pvPortMalloc+0x188>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a18      	ldr	r2, [pc, #96]	; (800dd78 <pvPortMalloc+0x190>)
 800dd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	4b13      	ldr	r3, [pc, #76]	; (800dd6c <pvPortMalloc+0x184>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	431a      	orrs	r2, r3
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd2e:	4b13      	ldr	r3, [pc, #76]	; (800dd7c <pvPortMalloc+0x194>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	3301      	adds	r3, #1
 800dd34:	4a11      	ldr	r2, [pc, #68]	; (800dd7c <pvPortMalloc+0x194>)
 800dd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd38:	f7fe fd02 	bl	800c740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	f003 0307 	and.w	r3, r3, #7
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00a      	beq.n	800dd5c <pvPortMalloc+0x174>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	60fb      	str	r3, [r7, #12]
}
 800dd58:	bf00      	nop
 800dd5a:	e7fe      	b.n	800dd5a <pvPortMalloc+0x172>
	return pvReturn;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3728      	adds	r7, #40	; 0x28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200057d4 	.word	0x200057d4
 800dd6c:	200057e8 	.word	0x200057e8
 800dd70:	200057d8 	.word	0x200057d8
 800dd74:	200057cc 	.word	0x200057cc
 800dd78:	200057dc 	.word	0x200057dc
 800dd7c:	200057e0 	.word	0x200057e0

0800dd80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d04d      	beq.n	800de2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd92:	2308      	movs	r3, #8
 800dd94:	425b      	negs	r3, r3
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	4413      	add	r3, r2
 800dd9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	685a      	ldr	r2, [r3, #4]
 800dda4:	4b24      	ldr	r3, [pc, #144]	; (800de38 <vPortFree+0xb8>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4013      	ands	r3, r2
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10a      	bne.n	800ddc4 <vPortFree+0x44>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	60fb      	str	r3, [r7, #12]
}
 800ddc0:	bf00      	nop
 800ddc2:	e7fe      	b.n	800ddc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00a      	beq.n	800dde2 <vPortFree+0x62>
	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	60bb      	str	r3, [r7, #8]
}
 800ddde:	bf00      	nop
 800dde0:	e7fe      	b.n	800dde0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	685a      	ldr	r2, [r3, #4]
 800dde6:	4b14      	ldr	r3, [pc, #80]	; (800de38 <vPortFree+0xb8>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4013      	ands	r3, r2
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01e      	beq.n	800de2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d11a      	bne.n	800de2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	4b0e      	ldr	r3, [pc, #56]	; (800de38 <vPortFree+0xb8>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	43db      	mvns	r3, r3
 800de02:	401a      	ands	r2, r3
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de08:	f7fe fc8c 	bl	800c724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	685a      	ldr	r2, [r3, #4]
 800de10:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <vPortFree+0xbc>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4413      	add	r3, r2
 800de16:	4a09      	ldr	r2, [pc, #36]	; (800de3c <vPortFree+0xbc>)
 800de18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de1a:	6938      	ldr	r0, [r7, #16]
 800de1c:	f000 f874 	bl	800df08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <vPortFree+0xc0>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	3301      	adds	r3, #1
 800de26:	4a06      	ldr	r2, [pc, #24]	; (800de40 <vPortFree+0xc0>)
 800de28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de2a:	f7fe fc89 	bl	800c740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de2e:	bf00      	nop
 800de30:	3718      	adds	r7, #24
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	200057e8 	.word	0x200057e8
 800de3c:	200057d8 	.word	0x200057d8
 800de40:	200057e4 	.word	0x200057e4

0800de44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800de4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de50:	4b27      	ldr	r3, [pc, #156]	; (800def0 <prvHeapInit+0xac>)
 800de52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f003 0307 	and.w	r3, r3, #7
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00c      	beq.n	800de78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	3307      	adds	r3, #7
 800de62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f023 0307 	bic.w	r3, r3, #7
 800de6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	4a1f      	ldr	r2, [pc, #124]	; (800def0 <prvHeapInit+0xac>)
 800de74:	4413      	add	r3, r2
 800de76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de7c:	4a1d      	ldr	r2, [pc, #116]	; (800def4 <prvHeapInit+0xb0>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de82:	4b1c      	ldr	r3, [pc, #112]	; (800def4 <prvHeapInit+0xb0>)
 800de84:	2200      	movs	r2, #0
 800de86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	4413      	add	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de90:	2208      	movs	r2, #8
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	1a9b      	subs	r3, r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f023 0307 	bic.w	r3, r3, #7
 800de9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4a15      	ldr	r2, [pc, #84]	; (800def8 <prvHeapInit+0xb4>)
 800dea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dea6:	4b14      	ldr	r3, [pc, #80]	; (800def8 <prvHeapInit+0xb4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2200      	movs	r2, #0
 800deac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800deae:	4b12      	ldr	r3, [pc, #72]	; (800def8 <prvHeapInit+0xb4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	1ad2      	subs	r2, r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dec4:	4b0c      	ldr	r3, [pc, #48]	; (800def8 <prvHeapInit+0xb4>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	4a0a      	ldr	r2, [pc, #40]	; (800defc <prvHeapInit+0xb8>)
 800ded2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	4a09      	ldr	r2, [pc, #36]	; (800df00 <prvHeapInit+0xbc>)
 800deda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dedc:	4b09      	ldr	r3, [pc, #36]	; (800df04 <prvHeapInit+0xc0>)
 800dede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dee2:	601a      	str	r2, [r3, #0]
}
 800dee4:	bf00      	nop
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	20001bcc 	.word	0x20001bcc
 800def4:	200057cc 	.word	0x200057cc
 800def8:	200057d4 	.word	0x200057d4
 800defc:	200057dc 	.word	0x200057dc
 800df00:	200057d8 	.word	0x200057d8
 800df04:	200057e8 	.word	0x200057e8

0800df08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df10:	4b28      	ldr	r3, [pc, #160]	; (800dfb4 <prvInsertBlockIntoFreeList+0xac>)
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e002      	b.n	800df1c <prvInsertBlockIntoFreeList+0x14>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	429a      	cmp	r2, r3
 800df24:	d8f7      	bhi.n	800df16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	4413      	add	r3, r2
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	429a      	cmp	r2, r3
 800df36:	d108      	bne.n	800df4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	441a      	add	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	68ba      	ldr	r2, [r7, #8]
 800df54:	441a      	add	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d118      	bne.n	800df90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	429a      	cmp	r2, r3
 800df68:	d00d      	beq.n	800df86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	685a      	ldr	r2, [r3, #4]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	441a      	add	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	e008      	b.n	800df98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df86:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	e003      	b.n	800df98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d002      	beq.n	800dfa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfa6:	bf00      	nop
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	200057cc 	.word	0x200057cc
 800dfb8:	200057d4 	.word	0x200057d4

0800dfbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4912      	ldr	r1, [pc, #72]	; (800e00c <MX_USB_DEVICE_Init+0x50>)
 800dfc4:	4812      	ldr	r0, [pc, #72]	; (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfc6:	f7fb fdbb 	bl	8009b40 <USBD_Init>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dfd0:	f7f4 f952 	bl	8002278 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dfd4:	490f      	ldr	r1, [pc, #60]	; (800e014 <MX_USB_DEVICE_Init+0x58>)
 800dfd6:	480e      	ldr	r0, [pc, #56]	; (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfd8:	f7fb fde2 	bl	8009ba0 <USBD_RegisterClass>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dfe2:	f7f4 f949 	bl	8002278 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dfe6:	490c      	ldr	r1, [pc, #48]	; (800e018 <MX_USB_DEVICE_Init+0x5c>)
 800dfe8:	4809      	ldr	r0, [pc, #36]	; (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dfea:	f7fb fd19 	bl	8009a20 <USBD_CDC_RegisterInterface>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dff4:	f7f4 f940 	bl	8002278 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dff8:	4805      	ldr	r0, [pc, #20]	; (800e010 <MX_USB_DEVICE_Init+0x54>)
 800dffa:	f7fb fe07 	bl	8009c0c <USBD_Start>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e004:	f7f4 f938 	bl	8002278 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e008:	bf00      	nop
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	200005a8 	.word	0x200005a8
 800e010:	200057ec 	.word	0x200057ec
 800e014:	20000510 	.word	0x20000510
 800e018:	20000594 	.word	0x20000594

0800e01c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e020:	2200      	movs	r2, #0
 800e022:	4905      	ldr	r1, [pc, #20]	; (800e038 <CDC_Init_FS+0x1c>)
 800e024:	4805      	ldr	r0, [pc, #20]	; (800e03c <CDC_Init_FS+0x20>)
 800e026:	f7fb fd15 	bl	8009a54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e02a:	4905      	ldr	r1, [pc, #20]	; (800e040 <CDC_Init_FS+0x24>)
 800e02c:	4803      	ldr	r0, [pc, #12]	; (800e03c <CDC_Init_FS+0x20>)
 800e02e:	f7fb fd33 	bl	8009a98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e032:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e034:	4618      	mov	r0, r3
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20005ec8 	.word	0x20005ec8
 800e03c:	200057ec 	.word	0x200057ec
 800e040:	20005ac8 	.word	0x20005ac8

0800e044 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e044:	b480      	push	{r7}
 800e046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e048:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	6039      	str	r1, [r7, #0]
 800e05e:	71fb      	strb	r3, [r7, #7]
 800e060:	4613      	mov	r3, r2
 800e062:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	2b23      	cmp	r3, #35	; 0x23
 800e068:	d84a      	bhi.n	800e100 <CDC_Control_FS+0xac>
 800e06a:	a201      	add	r2, pc, #4	; (adr r2, 800e070 <CDC_Control_FS+0x1c>)
 800e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e070:	0800e101 	.word	0x0800e101
 800e074:	0800e101 	.word	0x0800e101
 800e078:	0800e101 	.word	0x0800e101
 800e07c:	0800e101 	.word	0x0800e101
 800e080:	0800e101 	.word	0x0800e101
 800e084:	0800e101 	.word	0x0800e101
 800e088:	0800e101 	.word	0x0800e101
 800e08c:	0800e101 	.word	0x0800e101
 800e090:	0800e101 	.word	0x0800e101
 800e094:	0800e101 	.word	0x0800e101
 800e098:	0800e101 	.word	0x0800e101
 800e09c:	0800e101 	.word	0x0800e101
 800e0a0:	0800e101 	.word	0x0800e101
 800e0a4:	0800e101 	.word	0x0800e101
 800e0a8:	0800e101 	.word	0x0800e101
 800e0ac:	0800e101 	.word	0x0800e101
 800e0b0:	0800e101 	.word	0x0800e101
 800e0b4:	0800e101 	.word	0x0800e101
 800e0b8:	0800e101 	.word	0x0800e101
 800e0bc:	0800e101 	.word	0x0800e101
 800e0c0:	0800e101 	.word	0x0800e101
 800e0c4:	0800e101 	.word	0x0800e101
 800e0c8:	0800e101 	.word	0x0800e101
 800e0cc:	0800e101 	.word	0x0800e101
 800e0d0:	0800e101 	.word	0x0800e101
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e101 	.word	0x0800e101
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e101 	.word	0x0800e101
 800e0f8:	0800e101 	.word	0x0800e101
 800e0fc:	0800e101 	.word	0x0800e101
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e100:	bf00      	nop
  }

  return (USBD_OK);
 800e102:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e104:	4618      	mov	r0, r3
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4805      	ldr	r0, [pc, #20]	; (800e134 <CDC_Receive_FS+0x24>)
 800e11e:	f7fb fcbb 	bl	8009a98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e122:	4804      	ldr	r0, [pc, #16]	; (800e134 <CDC_Receive_FS+0x24>)
 800e124:	f7fb fcd6 	bl	8009ad4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e128:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	200057ec 	.word	0x200057ec

0800e138 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	371c      	adds	r7, #28
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
	...

0800e15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	6039      	str	r1, [r7, #0]
 800e166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2212      	movs	r2, #18
 800e16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e16e:	4b03      	ldr	r3, [pc, #12]	; (800e17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	200005c4 	.word	0x200005c4

0800e180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	4603      	mov	r3, r0
 800e188:	6039      	str	r1, [r7, #0]
 800e18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2204      	movs	r2, #4
 800e190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e192:	4b03      	ldr	r3, [pc, #12]	; (800e1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	200005d8 	.word	0x200005d8

0800e1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	6039      	str	r1, [r7, #0]
 800e1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d105      	bne.n	800e1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	4907      	ldr	r1, [pc, #28]	; (800e1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1ba:	4808      	ldr	r0, [pc, #32]	; (800e1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e1bc:	f7fc fed2 	bl	800af64 <USBD_GetString>
 800e1c0:	e004      	b.n	800e1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	4904      	ldr	r1, [pc, #16]	; (800e1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1c6:	4805      	ldr	r0, [pc, #20]	; (800e1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800e1c8:	f7fc fecc 	bl	800af64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1cc:	4b02      	ldr	r3, [pc, #8]	; (800e1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	200062c8 	.word	0x200062c8
 800e1dc:	0800f520 	.word	0x0800f520

0800e1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	6039      	str	r1, [r7, #0]
 800e1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	4904      	ldr	r1, [pc, #16]	; (800e200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1f0:	4804      	ldr	r0, [pc, #16]	; (800e204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1f2:	f7fc feb7 	bl	800af64 <USBD_GetString>
  return USBD_StrDesc;
 800e1f6:	4b02      	ldr	r3, [pc, #8]	; (800e200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	200062c8 	.word	0x200062c8
 800e204:	0800f538 	.word	0x0800f538

0800e208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	6039      	str	r1, [r7, #0]
 800e212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	221a      	movs	r2, #26
 800e218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e21a:	f000 f843 	bl	800e2a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e21e:	4b02      	ldr	r3, [pc, #8]	; (800e228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	200005dc 	.word	0x200005dc

0800e22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	4603      	mov	r3, r0
 800e234:	6039      	str	r1, [r7, #0]
 800e236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d105      	bne.n	800e24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e23e:	683a      	ldr	r2, [r7, #0]
 800e240:	4907      	ldr	r1, [pc, #28]	; (800e260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e242:	4808      	ldr	r0, [pc, #32]	; (800e264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e244:	f7fc fe8e 	bl	800af64 <USBD_GetString>
 800e248:	e004      	b.n	800e254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	4904      	ldr	r1, [pc, #16]	; (800e260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e24e:	4805      	ldr	r0, [pc, #20]	; (800e264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e250:	f7fc fe88 	bl	800af64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e254:	4b02      	ldr	r3, [pc, #8]	; (800e260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200062c8 	.word	0x200062c8
 800e264:	0800f54c 	.word	0x0800f54c

0800e268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	6039      	str	r1, [r7, #0]
 800e272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e274:	79fb      	ldrb	r3, [r7, #7]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d105      	bne.n	800e286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e27a:	683a      	ldr	r2, [r7, #0]
 800e27c:	4907      	ldr	r1, [pc, #28]	; (800e29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e27e:	4808      	ldr	r0, [pc, #32]	; (800e2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e280:	f7fc fe70 	bl	800af64 <USBD_GetString>
 800e284:	e004      	b.n	800e290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	4904      	ldr	r1, [pc, #16]	; (800e29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e28a:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e28c:	f7fc fe6a 	bl	800af64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e290:	4b02      	ldr	r3, [pc, #8]	; (800e29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	200062c8 	.word	0x200062c8
 800e2a0:	0800f558 	.word	0x0800f558

0800e2a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	; (800e2e8 <Get_SerialNum+0x44>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2b0:	4b0e      	ldr	r3, [pc, #56]	; (800e2ec <Get_SerialNum+0x48>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2b6:	4b0e      	ldr	r3, [pc, #56]	; (800e2f0 <Get_SerialNum+0x4c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d009      	beq.n	800e2de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2ca:	2208      	movs	r2, #8
 800e2cc:	4909      	ldr	r1, [pc, #36]	; (800e2f4 <Get_SerialNum+0x50>)
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	f000 f814 	bl	800e2fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e2d4:	2204      	movs	r2, #4
 800e2d6:	4908      	ldr	r1, [pc, #32]	; (800e2f8 <Get_SerialNum+0x54>)
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f000 f80f 	bl	800e2fc <IntToUnicode>
  }
}
 800e2de:	bf00      	nop
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	1fff7a10 	.word	0x1fff7a10
 800e2ec:	1fff7a14 	.word	0x1fff7a14
 800e2f0:	1fff7a18 	.word	0x1fff7a18
 800e2f4:	200005de 	.word	0x200005de
 800e2f8:	200005ee 	.word	0x200005ee

0800e2fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b087      	sub	sp, #28
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	4613      	mov	r3, r2
 800e308:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e30a:	2300      	movs	r3, #0
 800e30c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e30e:	2300      	movs	r3, #0
 800e310:	75fb      	strb	r3, [r7, #23]
 800e312:	e027      	b.n	800e364 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	0f1b      	lsrs	r3, r3, #28
 800e318:	2b09      	cmp	r3, #9
 800e31a:	d80b      	bhi.n	800e334 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	0f1b      	lsrs	r3, r3, #28
 800e320:	b2da      	uxtb	r2, r3
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	4619      	mov	r1, r3
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	440b      	add	r3, r1
 800e32c:	3230      	adds	r2, #48	; 0x30
 800e32e:	b2d2      	uxtb	r2, r2
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	e00a      	b.n	800e34a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	0f1b      	lsrs	r3, r3, #28
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	4619      	mov	r1, r3
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	440b      	add	r3, r1
 800e344:	3237      	adds	r2, #55	; 0x37
 800e346:	b2d2      	uxtb	r2, r2
 800e348:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e350:	7dfb      	ldrb	r3, [r7, #23]
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	3301      	adds	r3, #1
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	4413      	add	r3, r2
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	3301      	adds	r3, #1
 800e362:	75fb      	strb	r3, [r7, #23]
 800e364:	7dfa      	ldrb	r2, [r7, #23]
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d3d3      	bcc.n	800e314 <IntToUnicode+0x18>
  }
}
 800e36c:	bf00      	nop
 800e36e:	bf00      	nop
 800e370:	371c      	adds	r7, #28
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
	...

0800e37c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08a      	sub	sp, #40	; 0x28
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e384:	f107 0314 	add.w	r3, r7, #20
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]
 800e38c:	605a      	str	r2, [r3, #4]
 800e38e:	609a      	str	r2, [r3, #8]
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e39c:	d13a      	bne.n	800e414 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e39e:	2300      	movs	r3, #0
 800e3a0:	613b      	str	r3, [r7, #16]
 800e3a2:	4b1e      	ldr	r3, [pc, #120]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3a6:	4a1d      	ldr	r2, [pc, #116]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e3ae:	4b1b      	ldr	r3, [pc, #108]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	613b      	str	r3, [r7, #16]
 800e3b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e3ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e3be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3c0:	2302      	movs	r3, #2
 800e3c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e3cc:	230a      	movs	r3, #10
 800e3ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3d0:	f107 0314 	add.w	r3, r7, #20
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4812      	ldr	r0, [pc, #72]	; (800e420 <HAL_PCD_MspInit+0xa4>)
 800e3d8:	f7f4 fd52 	bl	8002e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e0:	4a0e      	ldr	r2, [pc, #56]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e6:	6353      	str	r3, [r2, #52]	; 0x34
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	4b0b      	ldr	r3, [pc, #44]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3f0:	4a0a      	ldr	r2, [pc, #40]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3f6:	6453      	str	r3, [r2, #68]	; 0x44
 800e3f8:	4b08      	ldr	r3, [pc, #32]	; (800e41c <HAL_PCD_MspInit+0xa0>)
 800e3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e400:	60fb      	str	r3, [r7, #12]
 800e402:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e404:	2200      	movs	r2, #0
 800e406:	2105      	movs	r1, #5
 800e408:	2043      	movs	r0, #67	; 0x43
 800e40a:	f7f4 fd0f 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e40e:	2043      	movs	r0, #67	; 0x43
 800e410:	f7f4 fd28 	bl	8002e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e414:	bf00      	nop
 800e416:	3728      	adds	r7, #40	; 0x28
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	40023800 	.word	0x40023800
 800e420:	40020000 	.word	0x40020000

0800e424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e438:	4619      	mov	r1, r3
 800e43a:	4610      	mov	r0, r2
 800e43c:	f7fb fc33 	bl	8009ca6 <USBD_LL_SetupStage>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e45a:	78fa      	ldrb	r2, [r7, #3]
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	4613      	mov	r3, r2
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	440b      	add	r3, r1
 800e468:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	4619      	mov	r1, r3
 800e472:	f7fb fc6d 	bl	8009d50 <USBD_LL_DataOutStage>
}
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b082      	sub	sp, #8
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	460b      	mov	r3, r1
 800e488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e490:	78fa      	ldrb	r2, [r7, #3]
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	4613      	mov	r3, r2
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	440b      	add	r3, r1
 800e49e:	334c      	adds	r3, #76	; 0x4c
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	78fb      	ldrb	r3, [r7, #3]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f7fb fd06 	bl	8009eb6 <USBD_LL_DataInStage>
}
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fb fe3a 	bl	800a13a <USBD_LL_SOF>
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d001      	beq.n	800e4e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e4e2:	f7f3 fec9 	bl	8002278 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4ec:	7bfa      	ldrb	r2, [r7, #15]
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fb fde4 	bl	800a0be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fb fd8c 	bl	800a01a <USBD_LL_Reset>
}
 800e502:	bf00      	nop
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fb fddf 	bl	800a0de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6812      	ldr	r2, [r2, #0]
 800e52e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e532:	f043 0301 	orr.w	r3, r3, #1
 800e536:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a1b      	ldr	r3, [r3, #32]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d005      	beq.n	800e54c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e540:	4b04      	ldr	r3, [pc, #16]	; (800e554 <HAL_PCD_SuspendCallback+0x48>)
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	4a03      	ldr	r2, [pc, #12]	; (800e554 <HAL_PCD_SuspendCallback+0x48>)
 800e546:	f043 0306 	orr.w	r3, r3, #6
 800e54a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	e000ed00 	.word	0xe000ed00

0800e558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e566:	4618      	mov	r0, r3
 800e568:	f7fb fdcf 	bl	800a10a <USBD_LL_Resume>
}
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	460b      	mov	r3, r1
 800e57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e586:	78fa      	ldrb	r2, [r7, #3]
 800e588:	4611      	mov	r1, r2
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fb fe27 	bl	800a1de <USBD_LL_IsoOUTIncomplete>
}
 800e590:	bf00      	nop
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5aa:	78fa      	ldrb	r2, [r7, #3]
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fb fde3 	bl	800a17a <USBD_LL_IsoINIncomplete>
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fb fe39 	bl	800a242 <USBD_LL_DevConnected>
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fb fe36 	bl	800a258 <USBD_LL_DevDisconnected>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d13c      	bne.n	800e67e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e604:	4a20      	ldr	r2, [pc, #128]	; (800e688 <USBD_LL_Init+0x94>)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a1e      	ldr	r2, [pc, #120]	; (800e688 <USBD_LL_Init+0x94>)
 800e610:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e614:	4b1c      	ldr	r3, [pc, #112]	; (800e688 <USBD_LL_Init+0x94>)
 800e616:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e61a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e61c:	4b1a      	ldr	r3, [pc, #104]	; (800e688 <USBD_LL_Init+0x94>)
 800e61e:	2204      	movs	r2, #4
 800e620:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e622:	4b19      	ldr	r3, [pc, #100]	; (800e688 <USBD_LL_Init+0x94>)
 800e624:	2202      	movs	r2, #2
 800e626:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e628:	4b17      	ldr	r3, [pc, #92]	; (800e688 <USBD_LL_Init+0x94>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e62e:	4b16      	ldr	r3, [pc, #88]	; (800e688 <USBD_LL_Init+0x94>)
 800e630:	2202      	movs	r2, #2
 800e632:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e634:	4b14      	ldr	r3, [pc, #80]	; (800e688 <USBD_LL_Init+0x94>)
 800e636:	2200      	movs	r2, #0
 800e638:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e63a:	4b13      	ldr	r3, [pc, #76]	; (800e688 <USBD_LL_Init+0x94>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e640:	4b11      	ldr	r3, [pc, #68]	; (800e688 <USBD_LL_Init+0x94>)
 800e642:	2200      	movs	r2, #0
 800e644:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e646:	4b10      	ldr	r3, [pc, #64]	; (800e688 <USBD_LL_Init+0x94>)
 800e648:	2200      	movs	r2, #0
 800e64a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e64c:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <USBD_LL_Init+0x94>)
 800e64e:	2200      	movs	r2, #0
 800e650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e652:	480d      	ldr	r0, [pc, #52]	; (800e688 <USBD_LL_Init+0x94>)
 800e654:	f7f5 fd89 	bl	800416a <HAL_PCD_Init>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d001      	beq.n	800e662 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e65e:	f7f3 fe0b 	bl	8002278 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e662:	2180      	movs	r1, #128	; 0x80
 800e664:	4808      	ldr	r0, [pc, #32]	; (800e688 <USBD_LL_Init+0x94>)
 800e666:	f7f6 ffe0 	bl	800562a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e66a:	2240      	movs	r2, #64	; 0x40
 800e66c:	2100      	movs	r1, #0
 800e66e:	4806      	ldr	r0, [pc, #24]	; (800e688 <USBD_LL_Init+0x94>)
 800e670:	f7f6 ff94 	bl	800559c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e674:	2280      	movs	r2, #128	; 0x80
 800e676:	2101      	movs	r1, #1
 800e678:	4803      	ldr	r0, [pc, #12]	; (800e688 <USBD_LL_Init+0x94>)
 800e67a:	f7f6 ff8f 	bl	800559c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	200064c8 	.word	0x200064c8

0800e68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f5 fe7e 	bl	80043a4 <HAL_PCD_Start>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 f942 	bl	800e938 <USBD_Get_USB_Status>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	4608      	mov	r0, r1
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	70fb      	strb	r3, [r7, #3]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70bb      	strb	r3, [r7, #2]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6ea:	78bb      	ldrb	r3, [r7, #2]
 800e6ec:	883a      	ldrh	r2, [r7, #0]
 800e6ee:	78f9      	ldrb	r1, [r7, #3]
 800e6f0:	f7f6 fb4f 	bl	8004d92 <HAL_PCD_EP_Open>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f91c 	bl	800e938 <USBD_Get_USB_Status>
 800e700:	4603      	mov	r3, r0
 800e702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e704:	7bbb      	ldrb	r3, [r7, #14]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b084      	sub	sp, #16
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e728:	78fa      	ldrb	r2, [r7, #3]
 800e72a:	4611      	mov	r1, r2
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7f6 fb98 	bl	8004e62 <HAL_PCD_EP_Close>
 800e732:	4603      	mov	r3, r0
 800e734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 f8fd 	bl	800e938 <USBD_Get_USB_Status>
 800e73e:	4603      	mov	r3, r0
 800e740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e742:	7bbb      	ldrb	r3, [r7, #14]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e766:	78fa      	ldrb	r2, [r7, #3]
 800e768:	4611      	mov	r1, r2
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f6 fc70 	bl	8005050 <HAL_PCD_EP_SetStall>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f8de 	bl	800e938 <USBD_Get_USB_Status>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e780:	7bbb      	ldrb	r3, [r7, #14]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b084      	sub	sp, #16
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	460b      	mov	r3, r1
 800e794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7a4:	78fa      	ldrb	r2, [r7, #3]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f6 fcb5 	bl	8005118 <HAL_PCD_EP_ClrStall>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 f8bf 	bl	800e938 <USBD_Get_USB_Status>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	da0b      	bge.n	800e7fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ea:	68f9      	ldr	r1, [r7, #12]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	4413      	add	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	440b      	add	r3, r1
 800e7f6:	333e      	adds	r3, #62	; 0x3e
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	e00b      	b.n	800e814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	4613      	mov	r3, r2
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	440b      	add	r3, r1
 800e80e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e82c:	2300      	movs	r3, #0
 800e82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e83a:	78fa      	ldrb	r2, [r7, #3]
 800e83c:	4611      	mov	r1, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f6 fa82 	bl	8004d48 <HAL_PCD_SetAddress>
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 f874 	bl	800e938 <USBD_Get_USB_Status>
 800e850:	4603      	mov	r3, r0
 800e852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e854:	7bbb      	ldrb	r3, [r7, #14]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b086      	sub	sp, #24
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	603b      	str	r3, [r7, #0]
 800e86a:	460b      	mov	r3, r1
 800e86c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e86e:	2300      	movs	r3, #0
 800e870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e872:	2300      	movs	r3, #0
 800e874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e87c:	7af9      	ldrb	r1, [r7, #11]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	f7f6 fb9b 	bl	8004fbc <HAL_PCD_EP_Transmit>
 800e886:	4603      	mov	r3, r0
 800e888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e88a:	7dfb      	ldrb	r3, [r7, #23]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f000 f853 	bl	800e938 <USBD_Get_USB_Status>
 800e892:	4603      	mov	r3, r0
 800e894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e896:	7dbb      	ldrb	r3, [r7, #22]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	607a      	str	r2, [r7, #4]
 800e8aa:	603b      	str	r3, [r7, #0]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e8be:	7af9      	ldrb	r1, [r7, #11]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	f7f6 fb17 	bl	8004ef6 <HAL_PCD_EP_Receive>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 f832 	bl	800e938 <USBD_Get_USB_Status>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b082      	sub	sp, #8
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8f4:	78fa      	ldrb	r2, [r7, #3]
 800e8f6:	4611      	mov	r1, r2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7f6 fb47 	bl	8004f8c <HAL_PCD_EP_GetRxCount>
 800e8fe:	4603      	mov	r3, r0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e910:	4b03      	ldr	r3, [pc, #12]	; (800e920 <USBD_static_malloc+0x18>)
}
 800e912:	4618      	mov	r0, r3
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	200069d4 	.word	0x200069d4

0800e924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]

}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e942:	2300      	movs	r3, #0
 800e944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e946:	79fb      	ldrb	r3, [r7, #7]
 800e948:	2b03      	cmp	r3, #3
 800e94a:	d817      	bhi.n	800e97c <USBD_Get_USB_Status+0x44>
 800e94c:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <USBD_Get_USB_Status+0x1c>)
 800e94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e952:	bf00      	nop
 800e954:	0800e965 	.word	0x0800e965
 800e958:	0800e96b 	.word	0x0800e96b
 800e95c:	0800e971 	.word	0x0800e971
 800e960:	0800e977 	.word	0x0800e977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
    break;
 800e968:	e00b      	b.n	800e982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e96a:	2303      	movs	r3, #3
 800e96c:	73fb      	strb	r3, [r7, #15]
    break;
 800e96e:	e008      	b.n	800e982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e970:	2301      	movs	r3, #1
 800e972:	73fb      	strb	r3, [r7, #15]
    break;
 800e974:	e005      	b.n	800e982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e976:	2303      	movs	r3, #3
 800e978:	73fb      	strb	r3, [r7, #15]
    break;
 800e97a:	e002      	b.n	800e982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e97c:	2303      	movs	r3, #3
 800e97e:	73fb      	strb	r3, [r7, #15]
    break;
 800e980:	bf00      	nop
  }
  return usb_status;
 800e982:	7bfb      	ldrb	r3, [r7, #15]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <__errno>:
 800e990:	4b01      	ldr	r3, [pc, #4]	; (800e998 <__errno+0x8>)
 800e992:	6818      	ldr	r0, [r3, #0]
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	200005f8 	.word	0x200005f8

0800e99c <__libc_init_array>:
 800e99c:	b570      	push	{r4, r5, r6, lr}
 800e99e:	4d0d      	ldr	r5, [pc, #52]	; (800e9d4 <__libc_init_array+0x38>)
 800e9a0:	4c0d      	ldr	r4, [pc, #52]	; (800e9d8 <__libc_init_array+0x3c>)
 800e9a2:	1b64      	subs	r4, r4, r5
 800e9a4:	10a4      	asrs	r4, r4, #2
 800e9a6:	2600      	movs	r6, #0
 800e9a8:	42a6      	cmp	r6, r4
 800e9aa:	d109      	bne.n	800e9c0 <__libc_init_array+0x24>
 800e9ac:	4d0b      	ldr	r5, [pc, #44]	; (800e9dc <__libc_init_array+0x40>)
 800e9ae:	4c0c      	ldr	r4, [pc, #48]	; (800e9e0 <__libc_init_array+0x44>)
 800e9b0:	f000 fcb2 	bl	800f318 <_init>
 800e9b4:	1b64      	subs	r4, r4, r5
 800e9b6:	10a4      	asrs	r4, r4, #2
 800e9b8:	2600      	movs	r6, #0
 800e9ba:	42a6      	cmp	r6, r4
 800e9bc:	d105      	bne.n	800e9ca <__libc_init_array+0x2e>
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9c4:	4798      	blx	r3
 800e9c6:	3601      	adds	r6, #1
 800e9c8:	e7ee      	b.n	800e9a8 <__libc_init_array+0xc>
 800e9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ce:	4798      	blx	r3
 800e9d0:	3601      	adds	r6, #1
 800e9d2:	e7f2      	b.n	800e9ba <__libc_init_array+0x1e>
 800e9d4:	0800f944 	.word	0x0800f944
 800e9d8:	0800f944 	.word	0x0800f944
 800e9dc:	0800f944 	.word	0x0800f944
 800e9e0:	0800f948 	.word	0x0800f948

0800e9e4 <malloc>:
 800e9e4:	4b02      	ldr	r3, [pc, #8]	; (800e9f0 <malloc+0xc>)
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	f000 b88d 	b.w	800eb08 <_malloc_r>
 800e9ee:	bf00      	nop
 800e9f0:	200005f8 	.word	0x200005f8

0800e9f4 <free>:
 800e9f4:	4b02      	ldr	r3, [pc, #8]	; (800ea00 <free+0xc>)
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	6818      	ldr	r0, [r3, #0]
 800e9fa:	f000 b819 	b.w	800ea30 <_free_r>
 800e9fe:	bf00      	nop
 800ea00:	200005f8 	.word	0x200005f8

0800ea04 <memcpy>:
 800ea04:	440a      	add	r2, r1
 800ea06:	4291      	cmp	r1, r2
 800ea08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea0c:	d100      	bne.n	800ea10 <memcpy+0xc>
 800ea0e:	4770      	bx	lr
 800ea10:	b510      	push	{r4, lr}
 800ea12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea1a:	4291      	cmp	r1, r2
 800ea1c:	d1f9      	bne.n	800ea12 <memcpy+0xe>
 800ea1e:	bd10      	pop	{r4, pc}

0800ea20 <memset>:
 800ea20:	4402      	add	r2, r0
 800ea22:	4603      	mov	r3, r0
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d100      	bne.n	800ea2a <memset+0xa>
 800ea28:	4770      	bx	lr
 800ea2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea2e:	e7f9      	b.n	800ea24 <memset+0x4>

0800ea30 <_free_r>:
 800ea30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea32:	2900      	cmp	r1, #0
 800ea34:	d044      	beq.n	800eac0 <_free_r+0x90>
 800ea36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea3a:	9001      	str	r0, [sp, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea42:	bfb8      	it	lt
 800ea44:	18e4      	addlt	r4, r4, r3
 800ea46:	f000 f917 	bl	800ec78 <__malloc_lock>
 800ea4a:	4a1e      	ldr	r2, [pc, #120]	; (800eac4 <_free_r+0x94>)
 800ea4c:	9801      	ldr	r0, [sp, #4]
 800ea4e:	6813      	ldr	r3, [r2, #0]
 800ea50:	b933      	cbnz	r3, 800ea60 <_free_r+0x30>
 800ea52:	6063      	str	r3, [r4, #4]
 800ea54:	6014      	str	r4, [r2, #0]
 800ea56:	b003      	add	sp, #12
 800ea58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea5c:	f000 b912 	b.w	800ec84 <__malloc_unlock>
 800ea60:	42a3      	cmp	r3, r4
 800ea62:	d908      	bls.n	800ea76 <_free_r+0x46>
 800ea64:	6825      	ldr	r5, [r4, #0]
 800ea66:	1961      	adds	r1, r4, r5
 800ea68:	428b      	cmp	r3, r1
 800ea6a:	bf01      	itttt	eq
 800ea6c:	6819      	ldreq	r1, [r3, #0]
 800ea6e:	685b      	ldreq	r3, [r3, #4]
 800ea70:	1949      	addeq	r1, r1, r5
 800ea72:	6021      	streq	r1, [r4, #0]
 800ea74:	e7ed      	b.n	800ea52 <_free_r+0x22>
 800ea76:	461a      	mov	r2, r3
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	b10b      	cbz	r3, 800ea80 <_free_r+0x50>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d9fa      	bls.n	800ea76 <_free_r+0x46>
 800ea80:	6811      	ldr	r1, [r2, #0]
 800ea82:	1855      	adds	r5, r2, r1
 800ea84:	42a5      	cmp	r5, r4
 800ea86:	d10b      	bne.n	800eaa0 <_free_r+0x70>
 800ea88:	6824      	ldr	r4, [r4, #0]
 800ea8a:	4421      	add	r1, r4
 800ea8c:	1854      	adds	r4, r2, r1
 800ea8e:	42a3      	cmp	r3, r4
 800ea90:	6011      	str	r1, [r2, #0]
 800ea92:	d1e0      	bne.n	800ea56 <_free_r+0x26>
 800ea94:	681c      	ldr	r4, [r3, #0]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	6053      	str	r3, [r2, #4]
 800ea9a:	4421      	add	r1, r4
 800ea9c:	6011      	str	r1, [r2, #0]
 800ea9e:	e7da      	b.n	800ea56 <_free_r+0x26>
 800eaa0:	d902      	bls.n	800eaa8 <_free_r+0x78>
 800eaa2:	230c      	movs	r3, #12
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	e7d6      	b.n	800ea56 <_free_r+0x26>
 800eaa8:	6825      	ldr	r5, [r4, #0]
 800eaaa:	1961      	adds	r1, r4, r5
 800eaac:	428b      	cmp	r3, r1
 800eaae:	bf04      	itt	eq
 800eab0:	6819      	ldreq	r1, [r3, #0]
 800eab2:	685b      	ldreq	r3, [r3, #4]
 800eab4:	6063      	str	r3, [r4, #4]
 800eab6:	bf04      	itt	eq
 800eab8:	1949      	addeq	r1, r1, r5
 800eaba:	6021      	streq	r1, [r4, #0]
 800eabc:	6054      	str	r4, [r2, #4]
 800eabe:	e7ca      	b.n	800ea56 <_free_r+0x26>
 800eac0:	b003      	add	sp, #12
 800eac2:	bd30      	pop	{r4, r5, pc}
 800eac4:	20006bf4 	.word	0x20006bf4

0800eac8 <sbrk_aligned>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	4e0e      	ldr	r6, [pc, #56]	; (800eb04 <sbrk_aligned+0x3c>)
 800eacc:	460c      	mov	r4, r1
 800eace:	6831      	ldr	r1, [r6, #0]
 800ead0:	4605      	mov	r5, r0
 800ead2:	b911      	cbnz	r1, 800eada <sbrk_aligned+0x12>
 800ead4:	f000 f88c 	bl	800ebf0 <_sbrk_r>
 800ead8:	6030      	str	r0, [r6, #0]
 800eada:	4621      	mov	r1, r4
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f887 	bl	800ebf0 <_sbrk_r>
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	d00a      	beq.n	800eafc <sbrk_aligned+0x34>
 800eae6:	1cc4      	adds	r4, r0, #3
 800eae8:	f024 0403 	bic.w	r4, r4, #3
 800eaec:	42a0      	cmp	r0, r4
 800eaee:	d007      	beq.n	800eb00 <sbrk_aligned+0x38>
 800eaf0:	1a21      	subs	r1, r4, r0
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 f87c 	bl	800ebf0 <_sbrk_r>
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d101      	bne.n	800eb00 <sbrk_aligned+0x38>
 800eafc:	f04f 34ff 	mov.w	r4, #4294967295
 800eb00:	4620      	mov	r0, r4
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	20006bf8 	.word	0x20006bf8

0800eb08 <_malloc_r>:
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	1ccd      	adds	r5, r1, #3
 800eb0e:	f025 0503 	bic.w	r5, r5, #3
 800eb12:	3508      	adds	r5, #8
 800eb14:	2d0c      	cmp	r5, #12
 800eb16:	bf38      	it	cc
 800eb18:	250c      	movcc	r5, #12
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	4607      	mov	r7, r0
 800eb1e:	db01      	blt.n	800eb24 <_malloc_r+0x1c>
 800eb20:	42a9      	cmp	r1, r5
 800eb22:	d905      	bls.n	800eb30 <_malloc_r+0x28>
 800eb24:	230c      	movs	r3, #12
 800eb26:	603b      	str	r3, [r7, #0]
 800eb28:	2600      	movs	r6, #0
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb30:	4e2e      	ldr	r6, [pc, #184]	; (800ebec <_malloc_r+0xe4>)
 800eb32:	f000 f8a1 	bl	800ec78 <__malloc_lock>
 800eb36:	6833      	ldr	r3, [r6, #0]
 800eb38:	461c      	mov	r4, r3
 800eb3a:	bb34      	cbnz	r4, 800eb8a <_malloc_r+0x82>
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f7ff ffc2 	bl	800eac8 <sbrk_aligned>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	4604      	mov	r4, r0
 800eb48:	d14d      	bne.n	800ebe6 <_malloc_r+0xde>
 800eb4a:	6834      	ldr	r4, [r6, #0]
 800eb4c:	4626      	mov	r6, r4
 800eb4e:	2e00      	cmp	r6, #0
 800eb50:	d140      	bne.n	800ebd4 <_malloc_r+0xcc>
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	4631      	mov	r1, r6
 800eb56:	4638      	mov	r0, r7
 800eb58:	eb04 0803 	add.w	r8, r4, r3
 800eb5c:	f000 f848 	bl	800ebf0 <_sbrk_r>
 800eb60:	4580      	cmp	r8, r0
 800eb62:	d13a      	bne.n	800ebda <_malloc_r+0xd2>
 800eb64:	6821      	ldr	r1, [r4, #0]
 800eb66:	3503      	adds	r5, #3
 800eb68:	1a6d      	subs	r5, r5, r1
 800eb6a:	f025 0503 	bic.w	r5, r5, #3
 800eb6e:	3508      	adds	r5, #8
 800eb70:	2d0c      	cmp	r5, #12
 800eb72:	bf38      	it	cc
 800eb74:	250c      	movcc	r5, #12
 800eb76:	4629      	mov	r1, r5
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f7ff ffa5 	bl	800eac8 <sbrk_aligned>
 800eb7e:	3001      	adds	r0, #1
 800eb80:	d02b      	beq.n	800ebda <_malloc_r+0xd2>
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	442b      	add	r3, r5
 800eb86:	6023      	str	r3, [r4, #0]
 800eb88:	e00e      	b.n	800eba8 <_malloc_r+0xa0>
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	1b52      	subs	r2, r2, r5
 800eb8e:	d41e      	bmi.n	800ebce <_malloc_r+0xc6>
 800eb90:	2a0b      	cmp	r2, #11
 800eb92:	d916      	bls.n	800ebc2 <_malloc_r+0xba>
 800eb94:	1961      	adds	r1, r4, r5
 800eb96:	42a3      	cmp	r3, r4
 800eb98:	6025      	str	r5, [r4, #0]
 800eb9a:	bf18      	it	ne
 800eb9c:	6059      	strne	r1, [r3, #4]
 800eb9e:	6863      	ldr	r3, [r4, #4]
 800eba0:	bf08      	it	eq
 800eba2:	6031      	streq	r1, [r6, #0]
 800eba4:	5162      	str	r2, [r4, r5]
 800eba6:	604b      	str	r3, [r1, #4]
 800eba8:	4638      	mov	r0, r7
 800ebaa:	f104 060b 	add.w	r6, r4, #11
 800ebae:	f000 f869 	bl	800ec84 <__malloc_unlock>
 800ebb2:	f026 0607 	bic.w	r6, r6, #7
 800ebb6:	1d23      	adds	r3, r4, #4
 800ebb8:	1af2      	subs	r2, r6, r3
 800ebba:	d0b6      	beq.n	800eb2a <_malloc_r+0x22>
 800ebbc:	1b9b      	subs	r3, r3, r6
 800ebbe:	50a3      	str	r3, [r4, r2]
 800ebc0:	e7b3      	b.n	800eb2a <_malloc_r+0x22>
 800ebc2:	6862      	ldr	r2, [r4, #4]
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	bf0c      	ite	eq
 800ebc8:	6032      	streq	r2, [r6, #0]
 800ebca:	605a      	strne	r2, [r3, #4]
 800ebcc:	e7ec      	b.n	800eba8 <_malloc_r+0xa0>
 800ebce:	4623      	mov	r3, r4
 800ebd0:	6864      	ldr	r4, [r4, #4]
 800ebd2:	e7b2      	b.n	800eb3a <_malloc_r+0x32>
 800ebd4:	4634      	mov	r4, r6
 800ebd6:	6876      	ldr	r6, [r6, #4]
 800ebd8:	e7b9      	b.n	800eb4e <_malloc_r+0x46>
 800ebda:	230c      	movs	r3, #12
 800ebdc:	603b      	str	r3, [r7, #0]
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f000 f850 	bl	800ec84 <__malloc_unlock>
 800ebe4:	e7a1      	b.n	800eb2a <_malloc_r+0x22>
 800ebe6:	6025      	str	r5, [r4, #0]
 800ebe8:	e7de      	b.n	800eba8 <_malloc_r+0xa0>
 800ebea:	bf00      	nop
 800ebec:	20006bf4 	.word	0x20006bf4

0800ebf0 <_sbrk_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d06      	ldr	r5, [pc, #24]	; (800ec0c <_sbrk_r+0x1c>)
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	602b      	str	r3, [r5, #0]
 800ebfc:	f7f3 ff86 	bl	8002b0c <_sbrk>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_sbrk_r+0x1a>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_sbrk_r+0x1a>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	20006bfc 	.word	0x20006bfc

0800ec10 <siprintf>:
 800ec10:	b40e      	push	{r1, r2, r3}
 800ec12:	b500      	push	{lr}
 800ec14:	b09c      	sub	sp, #112	; 0x70
 800ec16:	ab1d      	add	r3, sp, #116	; 0x74
 800ec18:	9002      	str	r0, [sp, #8]
 800ec1a:	9006      	str	r0, [sp, #24]
 800ec1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec20:	4809      	ldr	r0, [pc, #36]	; (800ec48 <siprintf+0x38>)
 800ec22:	9107      	str	r1, [sp, #28]
 800ec24:	9104      	str	r1, [sp, #16]
 800ec26:	4909      	ldr	r1, [pc, #36]	; (800ec4c <siprintf+0x3c>)
 800ec28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec2c:	9105      	str	r1, [sp, #20]
 800ec2e:	6800      	ldr	r0, [r0, #0]
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	a902      	add	r1, sp, #8
 800ec34:	f000 f888 	bl	800ed48 <_svfiprintf_r>
 800ec38:	9b02      	ldr	r3, [sp, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	701a      	strb	r2, [r3, #0]
 800ec3e:	b01c      	add	sp, #112	; 0x70
 800ec40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec44:	b003      	add	sp, #12
 800ec46:	4770      	bx	lr
 800ec48:	200005f8 	.word	0x200005f8
 800ec4c:	ffff0208 	.word	0xffff0208

0800ec50 <strncpy>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	3901      	subs	r1, #1
 800ec54:	4603      	mov	r3, r0
 800ec56:	b132      	cbz	r2, 800ec66 <strncpy+0x16>
 800ec58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec5c:	f803 4b01 	strb.w	r4, [r3], #1
 800ec60:	3a01      	subs	r2, #1
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d1f7      	bne.n	800ec56 <strncpy+0x6>
 800ec66:	441a      	add	r2, r3
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d100      	bne.n	800ec70 <strncpy+0x20>
 800ec6e:	bd10      	pop	{r4, pc}
 800ec70:	f803 1b01 	strb.w	r1, [r3], #1
 800ec74:	e7f9      	b.n	800ec6a <strncpy+0x1a>
	...

0800ec78 <__malloc_lock>:
 800ec78:	4801      	ldr	r0, [pc, #4]	; (800ec80 <__malloc_lock+0x8>)
 800ec7a:	f000 baf9 	b.w	800f270 <__retarget_lock_acquire_recursive>
 800ec7e:	bf00      	nop
 800ec80:	20006c00 	.word	0x20006c00

0800ec84 <__malloc_unlock>:
 800ec84:	4801      	ldr	r0, [pc, #4]	; (800ec8c <__malloc_unlock+0x8>)
 800ec86:	f000 baf4 	b.w	800f272 <__retarget_lock_release_recursive>
 800ec8a:	bf00      	nop
 800ec8c:	20006c00 	.word	0x20006c00

0800ec90 <__ssputs_r>:
 800ec90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec94:	688e      	ldr	r6, [r1, #8]
 800ec96:	429e      	cmp	r6, r3
 800ec98:	4682      	mov	sl, r0
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	4690      	mov	r8, r2
 800ec9e:	461f      	mov	r7, r3
 800eca0:	d838      	bhi.n	800ed14 <__ssputs_r+0x84>
 800eca2:	898a      	ldrh	r2, [r1, #12]
 800eca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eca8:	d032      	beq.n	800ed10 <__ssputs_r+0x80>
 800ecaa:	6825      	ldr	r5, [r4, #0]
 800ecac:	6909      	ldr	r1, [r1, #16]
 800ecae:	eba5 0901 	sub.w	r9, r5, r1
 800ecb2:	6965      	ldr	r5, [r4, #20]
 800ecb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	444b      	add	r3, r9
 800ecc0:	106d      	asrs	r5, r5, #1
 800ecc2:	429d      	cmp	r5, r3
 800ecc4:	bf38      	it	cc
 800ecc6:	461d      	movcc	r5, r3
 800ecc8:	0553      	lsls	r3, r2, #21
 800ecca:	d531      	bpl.n	800ed30 <__ssputs_r+0xa0>
 800eccc:	4629      	mov	r1, r5
 800ecce:	f7ff ff1b 	bl	800eb08 <_malloc_r>
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	b950      	cbnz	r0, 800ecec <__ssputs_r+0x5c>
 800ecd6:	230c      	movs	r3, #12
 800ecd8:	f8ca 3000 	str.w	r3, [sl]
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecec:	6921      	ldr	r1, [r4, #16]
 800ecee:	464a      	mov	r2, r9
 800ecf0:	f7ff fe88 	bl	800ea04 <memcpy>
 800ecf4:	89a3      	ldrh	r3, [r4, #12]
 800ecf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecfe:	81a3      	strh	r3, [r4, #12]
 800ed00:	6126      	str	r6, [r4, #16]
 800ed02:	6165      	str	r5, [r4, #20]
 800ed04:	444e      	add	r6, r9
 800ed06:	eba5 0509 	sub.w	r5, r5, r9
 800ed0a:	6026      	str	r6, [r4, #0]
 800ed0c:	60a5      	str	r5, [r4, #8]
 800ed0e:	463e      	mov	r6, r7
 800ed10:	42be      	cmp	r6, r7
 800ed12:	d900      	bls.n	800ed16 <__ssputs_r+0x86>
 800ed14:	463e      	mov	r6, r7
 800ed16:	6820      	ldr	r0, [r4, #0]
 800ed18:	4632      	mov	r2, r6
 800ed1a:	4641      	mov	r1, r8
 800ed1c:	f000 faaa 	bl	800f274 <memmove>
 800ed20:	68a3      	ldr	r3, [r4, #8]
 800ed22:	1b9b      	subs	r3, r3, r6
 800ed24:	60a3      	str	r3, [r4, #8]
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	4433      	add	r3, r6
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	e7db      	b.n	800ece8 <__ssputs_r+0x58>
 800ed30:	462a      	mov	r2, r5
 800ed32:	f000 fab9 	bl	800f2a8 <_realloc_r>
 800ed36:	4606      	mov	r6, r0
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d1e1      	bne.n	800ed00 <__ssputs_r+0x70>
 800ed3c:	6921      	ldr	r1, [r4, #16]
 800ed3e:	4650      	mov	r0, sl
 800ed40:	f7ff fe76 	bl	800ea30 <_free_r>
 800ed44:	e7c7      	b.n	800ecd6 <__ssputs_r+0x46>
	...

0800ed48 <_svfiprintf_r>:
 800ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4c:	4698      	mov	r8, r3
 800ed4e:	898b      	ldrh	r3, [r1, #12]
 800ed50:	061b      	lsls	r3, r3, #24
 800ed52:	b09d      	sub	sp, #116	; 0x74
 800ed54:	4607      	mov	r7, r0
 800ed56:	460d      	mov	r5, r1
 800ed58:	4614      	mov	r4, r2
 800ed5a:	d50e      	bpl.n	800ed7a <_svfiprintf_r+0x32>
 800ed5c:	690b      	ldr	r3, [r1, #16]
 800ed5e:	b963      	cbnz	r3, 800ed7a <_svfiprintf_r+0x32>
 800ed60:	2140      	movs	r1, #64	; 0x40
 800ed62:	f7ff fed1 	bl	800eb08 <_malloc_r>
 800ed66:	6028      	str	r0, [r5, #0]
 800ed68:	6128      	str	r0, [r5, #16]
 800ed6a:	b920      	cbnz	r0, 800ed76 <_svfiprintf_r+0x2e>
 800ed6c:	230c      	movs	r3, #12
 800ed6e:	603b      	str	r3, [r7, #0]
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	e0d1      	b.n	800ef1a <_svfiprintf_r+0x1d2>
 800ed76:	2340      	movs	r3, #64	; 0x40
 800ed78:	616b      	str	r3, [r5, #20]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed7e:	2320      	movs	r3, #32
 800ed80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed88:	2330      	movs	r3, #48	; 0x30
 800ed8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef34 <_svfiprintf_r+0x1ec>
 800ed8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed92:	f04f 0901 	mov.w	r9, #1
 800ed96:	4623      	mov	r3, r4
 800ed98:	469a      	mov	sl, r3
 800ed9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed9e:	b10a      	cbz	r2, 800eda4 <_svfiprintf_r+0x5c>
 800eda0:	2a25      	cmp	r2, #37	; 0x25
 800eda2:	d1f9      	bne.n	800ed98 <_svfiprintf_r+0x50>
 800eda4:	ebba 0b04 	subs.w	fp, sl, r4
 800eda8:	d00b      	beq.n	800edc2 <_svfiprintf_r+0x7a>
 800edaa:	465b      	mov	r3, fp
 800edac:	4622      	mov	r2, r4
 800edae:	4629      	mov	r1, r5
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff ff6d 	bl	800ec90 <__ssputs_r>
 800edb6:	3001      	adds	r0, #1
 800edb8:	f000 80aa 	beq.w	800ef10 <_svfiprintf_r+0x1c8>
 800edbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edbe:	445a      	add	r2, fp
 800edc0:	9209      	str	r2, [sp, #36]	; 0x24
 800edc2:	f89a 3000 	ldrb.w	r3, [sl]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 80a2 	beq.w	800ef10 <_svfiprintf_r+0x1c8>
 800edcc:	2300      	movs	r3, #0
 800edce:	f04f 32ff 	mov.w	r2, #4294967295
 800edd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edd6:	f10a 0a01 	add.w	sl, sl, #1
 800edda:	9304      	str	r3, [sp, #16]
 800eddc:	9307      	str	r3, [sp, #28]
 800edde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ede2:	931a      	str	r3, [sp, #104]	; 0x68
 800ede4:	4654      	mov	r4, sl
 800ede6:	2205      	movs	r2, #5
 800ede8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edec:	4851      	ldr	r0, [pc, #324]	; (800ef34 <_svfiprintf_r+0x1ec>)
 800edee:	f7f1 f9ff 	bl	80001f0 <memchr>
 800edf2:	9a04      	ldr	r2, [sp, #16]
 800edf4:	b9d8      	cbnz	r0, 800ee2e <_svfiprintf_r+0xe6>
 800edf6:	06d0      	lsls	r0, r2, #27
 800edf8:	bf44      	itt	mi
 800edfa:	2320      	movmi	r3, #32
 800edfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee00:	0711      	lsls	r1, r2, #28
 800ee02:	bf44      	itt	mi
 800ee04:	232b      	movmi	r3, #43	; 0x2b
 800ee06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee10:	d015      	beq.n	800ee3e <_svfiprintf_r+0xf6>
 800ee12:	9a07      	ldr	r2, [sp, #28]
 800ee14:	4654      	mov	r4, sl
 800ee16:	2000      	movs	r0, #0
 800ee18:	f04f 0c0a 	mov.w	ip, #10
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee22:	3b30      	subs	r3, #48	; 0x30
 800ee24:	2b09      	cmp	r3, #9
 800ee26:	d94e      	bls.n	800eec6 <_svfiprintf_r+0x17e>
 800ee28:	b1b0      	cbz	r0, 800ee58 <_svfiprintf_r+0x110>
 800ee2a:	9207      	str	r2, [sp, #28]
 800ee2c:	e014      	b.n	800ee58 <_svfiprintf_r+0x110>
 800ee2e:	eba0 0308 	sub.w	r3, r0, r8
 800ee32:	fa09 f303 	lsl.w	r3, r9, r3
 800ee36:	4313      	orrs	r3, r2
 800ee38:	9304      	str	r3, [sp, #16]
 800ee3a:	46a2      	mov	sl, r4
 800ee3c:	e7d2      	b.n	800ede4 <_svfiprintf_r+0x9c>
 800ee3e:	9b03      	ldr	r3, [sp, #12]
 800ee40:	1d19      	adds	r1, r3, #4
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	9103      	str	r1, [sp, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	bfbb      	ittet	lt
 800ee4a:	425b      	neglt	r3, r3
 800ee4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ee50:	9307      	strge	r3, [sp, #28]
 800ee52:	9307      	strlt	r3, [sp, #28]
 800ee54:	bfb8      	it	lt
 800ee56:	9204      	strlt	r2, [sp, #16]
 800ee58:	7823      	ldrb	r3, [r4, #0]
 800ee5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee5c:	d10c      	bne.n	800ee78 <_svfiprintf_r+0x130>
 800ee5e:	7863      	ldrb	r3, [r4, #1]
 800ee60:	2b2a      	cmp	r3, #42	; 0x2a
 800ee62:	d135      	bne.n	800eed0 <_svfiprintf_r+0x188>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	1d1a      	adds	r2, r3, #4
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	9203      	str	r2, [sp, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfb8      	it	lt
 800ee70:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee74:	3402      	adds	r4, #2
 800ee76:	9305      	str	r3, [sp, #20]
 800ee78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef44 <_svfiprintf_r+0x1fc>
 800ee7c:	7821      	ldrb	r1, [r4, #0]
 800ee7e:	2203      	movs	r2, #3
 800ee80:	4650      	mov	r0, sl
 800ee82:	f7f1 f9b5 	bl	80001f0 <memchr>
 800ee86:	b140      	cbz	r0, 800ee9a <_svfiprintf_r+0x152>
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	eba0 000a 	sub.w	r0, r0, sl
 800ee8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ee92:	9b04      	ldr	r3, [sp, #16]
 800ee94:	4303      	orrs	r3, r0
 800ee96:	3401      	adds	r4, #1
 800ee98:	9304      	str	r3, [sp, #16]
 800ee9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee9e:	4826      	ldr	r0, [pc, #152]	; (800ef38 <_svfiprintf_r+0x1f0>)
 800eea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eea4:	2206      	movs	r2, #6
 800eea6:	f7f1 f9a3 	bl	80001f0 <memchr>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d038      	beq.n	800ef20 <_svfiprintf_r+0x1d8>
 800eeae:	4b23      	ldr	r3, [pc, #140]	; (800ef3c <_svfiprintf_r+0x1f4>)
 800eeb0:	bb1b      	cbnz	r3, 800eefa <_svfiprintf_r+0x1b2>
 800eeb2:	9b03      	ldr	r3, [sp, #12]
 800eeb4:	3307      	adds	r3, #7
 800eeb6:	f023 0307 	bic.w	r3, r3, #7
 800eeba:	3308      	adds	r3, #8
 800eebc:	9303      	str	r3, [sp, #12]
 800eebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec0:	4433      	add	r3, r6
 800eec2:	9309      	str	r3, [sp, #36]	; 0x24
 800eec4:	e767      	b.n	800ed96 <_svfiprintf_r+0x4e>
 800eec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeca:	460c      	mov	r4, r1
 800eecc:	2001      	movs	r0, #1
 800eece:	e7a5      	b.n	800ee1c <_svfiprintf_r+0xd4>
 800eed0:	2300      	movs	r3, #0
 800eed2:	3401      	adds	r4, #1
 800eed4:	9305      	str	r3, [sp, #20]
 800eed6:	4619      	mov	r1, r3
 800eed8:	f04f 0c0a 	mov.w	ip, #10
 800eedc:	4620      	mov	r0, r4
 800eede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eee2:	3a30      	subs	r2, #48	; 0x30
 800eee4:	2a09      	cmp	r2, #9
 800eee6:	d903      	bls.n	800eef0 <_svfiprintf_r+0x1a8>
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d0c5      	beq.n	800ee78 <_svfiprintf_r+0x130>
 800eeec:	9105      	str	r1, [sp, #20]
 800eeee:	e7c3      	b.n	800ee78 <_svfiprintf_r+0x130>
 800eef0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eef4:	4604      	mov	r4, r0
 800eef6:	2301      	movs	r3, #1
 800eef8:	e7f0      	b.n	800eedc <_svfiprintf_r+0x194>
 800eefa:	ab03      	add	r3, sp, #12
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	462a      	mov	r2, r5
 800ef00:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <_svfiprintf_r+0x1f8>)
 800ef02:	a904      	add	r1, sp, #16
 800ef04:	4638      	mov	r0, r7
 800ef06:	f3af 8000 	nop.w
 800ef0a:	1c42      	adds	r2, r0, #1
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	d1d6      	bne.n	800eebe <_svfiprintf_r+0x176>
 800ef10:	89ab      	ldrh	r3, [r5, #12]
 800ef12:	065b      	lsls	r3, r3, #25
 800ef14:	f53f af2c 	bmi.w	800ed70 <_svfiprintf_r+0x28>
 800ef18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef1a:	b01d      	add	sp, #116	; 0x74
 800ef1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef20:	ab03      	add	r3, sp, #12
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	462a      	mov	r2, r5
 800ef26:	4b06      	ldr	r3, [pc, #24]	; (800ef40 <_svfiprintf_r+0x1f8>)
 800ef28:	a904      	add	r1, sp, #16
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	f000 f87a 	bl	800f024 <_printf_i>
 800ef30:	e7eb      	b.n	800ef0a <_svfiprintf_r+0x1c2>
 800ef32:	bf00      	nop
 800ef34:	0800f908 	.word	0x0800f908
 800ef38:	0800f912 	.word	0x0800f912
 800ef3c:	00000000 	.word	0x00000000
 800ef40:	0800ec91 	.word	0x0800ec91
 800ef44:	0800f90e 	.word	0x0800f90e

0800ef48 <_printf_common>:
 800ef48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef4c:	4616      	mov	r6, r2
 800ef4e:	4699      	mov	r9, r3
 800ef50:	688a      	ldr	r2, [r1, #8]
 800ef52:	690b      	ldr	r3, [r1, #16]
 800ef54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	bfb8      	it	lt
 800ef5c:	4613      	movlt	r3, r2
 800ef5e:	6033      	str	r3, [r6, #0]
 800ef60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef64:	4607      	mov	r7, r0
 800ef66:	460c      	mov	r4, r1
 800ef68:	b10a      	cbz	r2, 800ef6e <_printf_common+0x26>
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	6033      	str	r3, [r6, #0]
 800ef6e:	6823      	ldr	r3, [r4, #0]
 800ef70:	0699      	lsls	r1, r3, #26
 800ef72:	bf42      	ittt	mi
 800ef74:	6833      	ldrmi	r3, [r6, #0]
 800ef76:	3302      	addmi	r3, #2
 800ef78:	6033      	strmi	r3, [r6, #0]
 800ef7a:	6825      	ldr	r5, [r4, #0]
 800ef7c:	f015 0506 	ands.w	r5, r5, #6
 800ef80:	d106      	bne.n	800ef90 <_printf_common+0x48>
 800ef82:	f104 0a19 	add.w	sl, r4, #25
 800ef86:	68e3      	ldr	r3, [r4, #12]
 800ef88:	6832      	ldr	r2, [r6, #0]
 800ef8a:	1a9b      	subs	r3, r3, r2
 800ef8c:	42ab      	cmp	r3, r5
 800ef8e:	dc26      	bgt.n	800efde <_printf_common+0x96>
 800ef90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef94:	1e13      	subs	r3, r2, #0
 800ef96:	6822      	ldr	r2, [r4, #0]
 800ef98:	bf18      	it	ne
 800ef9a:	2301      	movne	r3, #1
 800ef9c:	0692      	lsls	r2, r2, #26
 800ef9e:	d42b      	bmi.n	800eff8 <_printf_common+0xb0>
 800efa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efa4:	4649      	mov	r1, r9
 800efa6:	4638      	mov	r0, r7
 800efa8:	47c0      	blx	r8
 800efaa:	3001      	adds	r0, #1
 800efac:	d01e      	beq.n	800efec <_printf_common+0xa4>
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	68e5      	ldr	r5, [r4, #12]
 800efb2:	6832      	ldr	r2, [r6, #0]
 800efb4:	f003 0306 	and.w	r3, r3, #6
 800efb8:	2b04      	cmp	r3, #4
 800efba:	bf08      	it	eq
 800efbc:	1aad      	subeq	r5, r5, r2
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	6922      	ldr	r2, [r4, #16]
 800efc2:	bf0c      	ite	eq
 800efc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efc8:	2500      	movne	r5, #0
 800efca:	4293      	cmp	r3, r2
 800efcc:	bfc4      	itt	gt
 800efce:	1a9b      	subgt	r3, r3, r2
 800efd0:	18ed      	addgt	r5, r5, r3
 800efd2:	2600      	movs	r6, #0
 800efd4:	341a      	adds	r4, #26
 800efd6:	42b5      	cmp	r5, r6
 800efd8:	d11a      	bne.n	800f010 <_printf_common+0xc8>
 800efda:	2000      	movs	r0, #0
 800efdc:	e008      	b.n	800eff0 <_printf_common+0xa8>
 800efde:	2301      	movs	r3, #1
 800efe0:	4652      	mov	r2, sl
 800efe2:	4649      	mov	r1, r9
 800efe4:	4638      	mov	r0, r7
 800efe6:	47c0      	blx	r8
 800efe8:	3001      	adds	r0, #1
 800efea:	d103      	bne.n	800eff4 <_printf_common+0xac>
 800efec:	f04f 30ff 	mov.w	r0, #4294967295
 800eff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff4:	3501      	adds	r5, #1
 800eff6:	e7c6      	b.n	800ef86 <_printf_common+0x3e>
 800eff8:	18e1      	adds	r1, r4, r3
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	2030      	movs	r0, #48	; 0x30
 800effe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f002:	4422      	add	r2, r4
 800f004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f00c:	3302      	adds	r3, #2
 800f00e:	e7c7      	b.n	800efa0 <_printf_common+0x58>
 800f010:	2301      	movs	r3, #1
 800f012:	4622      	mov	r2, r4
 800f014:	4649      	mov	r1, r9
 800f016:	4638      	mov	r0, r7
 800f018:	47c0      	blx	r8
 800f01a:	3001      	adds	r0, #1
 800f01c:	d0e6      	beq.n	800efec <_printf_common+0xa4>
 800f01e:	3601      	adds	r6, #1
 800f020:	e7d9      	b.n	800efd6 <_printf_common+0x8e>
	...

0800f024 <_printf_i>:
 800f024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	7e0f      	ldrb	r7, [r1, #24]
 800f02a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f02c:	2f78      	cmp	r7, #120	; 0x78
 800f02e:	4691      	mov	r9, r2
 800f030:	4680      	mov	r8, r0
 800f032:	460c      	mov	r4, r1
 800f034:	469a      	mov	sl, r3
 800f036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f03a:	d807      	bhi.n	800f04c <_printf_i+0x28>
 800f03c:	2f62      	cmp	r7, #98	; 0x62
 800f03e:	d80a      	bhi.n	800f056 <_printf_i+0x32>
 800f040:	2f00      	cmp	r7, #0
 800f042:	f000 80d8 	beq.w	800f1f6 <_printf_i+0x1d2>
 800f046:	2f58      	cmp	r7, #88	; 0x58
 800f048:	f000 80a3 	beq.w	800f192 <_printf_i+0x16e>
 800f04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f054:	e03a      	b.n	800f0cc <_printf_i+0xa8>
 800f056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f05a:	2b15      	cmp	r3, #21
 800f05c:	d8f6      	bhi.n	800f04c <_printf_i+0x28>
 800f05e:	a101      	add	r1, pc, #4	; (adr r1, 800f064 <_printf_i+0x40>)
 800f060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f064:	0800f0bd 	.word	0x0800f0bd
 800f068:	0800f0d1 	.word	0x0800f0d1
 800f06c:	0800f04d 	.word	0x0800f04d
 800f070:	0800f04d 	.word	0x0800f04d
 800f074:	0800f04d 	.word	0x0800f04d
 800f078:	0800f04d 	.word	0x0800f04d
 800f07c:	0800f0d1 	.word	0x0800f0d1
 800f080:	0800f04d 	.word	0x0800f04d
 800f084:	0800f04d 	.word	0x0800f04d
 800f088:	0800f04d 	.word	0x0800f04d
 800f08c:	0800f04d 	.word	0x0800f04d
 800f090:	0800f1dd 	.word	0x0800f1dd
 800f094:	0800f101 	.word	0x0800f101
 800f098:	0800f1bf 	.word	0x0800f1bf
 800f09c:	0800f04d 	.word	0x0800f04d
 800f0a0:	0800f04d 	.word	0x0800f04d
 800f0a4:	0800f1ff 	.word	0x0800f1ff
 800f0a8:	0800f04d 	.word	0x0800f04d
 800f0ac:	0800f101 	.word	0x0800f101
 800f0b0:	0800f04d 	.word	0x0800f04d
 800f0b4:	0800f04d 	.word	0x0800f04d
 800f0b8:	0800f1c7 	.word	0x0800f1c7
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	1d1a      	adds	r2, r3, #4
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	602a      	str	r2, [r5, #0]
 800f0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e0a3      	b.n	800f218 <_printf_i+0x1f4>
 800f0d0:	6820      	ldr	r0, [r4, #0]
 800f0d2:	6829      	ldr	r1, [r5, #0]
 800f0d4:	0606      	lsls	r6, r0, #24
 800f0d6:	f101 0304 	add.w	r3, r1, #4
 800f0da:	d50a      	bpl.n	800f0f2 <_printf_i+0xce>
 800f0dc:	680e      	ldr	r6, [r1, #0]
 800f0de:	602b      	str	r3, [r5, #0]
 800f0e0:	2e00      	cmp	r6, #0
 800f0e2:	da03      	bge.n	800f0ec <_printf_i+0xc8>
 800f0e4:	232d      	movs	r3, #45	; 0x2d
 800f0e6:	4276      	negs	r6, r6
 800f0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0ec:	485e      	ldr	r0, [pc, #376]	; (800f268 <_printf_i+0x244>)
 800f0ee:	230a      	movs	r3, #10
 800f0f0:	e019      	b.n	800f126 <_printf_i+0x102>
 800f0f2:	680e      	ldr	r6, [r1, #0]
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0fa:	bf18      	it	ne
 800f0fc:	b236      	sxthne	r6, r6
 800f0fe:	e7ef      	b.n	800f0e0 <_printf_i+0xbc>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	6820      	ldr	r0, [r4, #0]
 800f104:	1d19      	adds	r1, r3, #4
 800f106:	6029      	str	r1, [r5, #0]
 800f108:	0601      	lsls	r1, r0, #24
 800f10a:	d501      	bpl.n	800f110 <_printf_i+0xec>
 800f10c:	681e      	ldr	r6, [r3, #0]
 800f10e:	e002      	b.n	800f116 <_printf_i+0xf2>
 800f110:	0646      	lsls	r6, r0, #25
 800f112:	d5fb      	bpl.n	800f10c <_printf_i+0xe8>
 800f114:	881e      	ldrh	r6, [r3, #0]
 800f116:	4854      	ldr	r0, [pc, #336]	; (800f268 <_printf_i+0x244>)
 800f118:	2f6f      	cmp	r7, #111	; 0x6f
 800f11a:	bf0c      	ite	eq
 800f11c:	2308      	moveq	r3, #8
 800f11e:	230a      	movne	r3, #10
 800f120:	2100      	movs	r1, #0
 800f122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f126:	6865      	ldr	r5, [r4, #4]
 800f128:	60a5      	str	r5, [r4, #8]
 800f12a:	2d00      	cmp	r5, #0
 800f12c:	bfa2      	ittt	ge
 800f12e:	6821      	ldrge	r1, [r4, #0]
 800f130:	f021 0104 	bicge.w	r1, r1, #4
 800f134:	6021      	strge	r1, [r4, #0]
 800f136:	b90e      	cbnz	r6, 800f13c <_printf_i+0x118>
 800f138:	2d00      	cmp	r5, #0
 800f13a:	d04d      	beq.n	800f1d8 <_printf_i+0x1b4>
 800f13c:	4615      	mov	r5, r2
 800f13e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f142:	fb03 6711 	mls	r7, r3, r1, r6
 800f146:	5dc7      	ldrb	r7, [r0, r7]
 800f148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f14c:	4637      	mov	r7, r6
 800f14e:	42bb      	cmp	r3, r7
 800f150:	460e      	mov	r6, r1
 800f152:	d9f4      	bls.n	800f13e <_printf_i+0x11a>
 800f154:	2b08      	cmp	r3, #8
 800f156:	d10b      	bne.n	800f170 <_printf_i+0x14c>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	07de      	lsls	r6, r3, #31
 800f15c:	d508      	bpl.n	800f170 <_printf_i+0x14c>
 800f15e:	6923      	ldr	r3, [r4, #16]
 800f160:	6861      	ldr	r1, [r4, #4]
 800f162:	4299      	cmp	r1, r3
 800f164:	bfde      	ittt	le
 800f166:	2330      	movle	r3, #48	; 0x30
 800f168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f16c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f170:	1b52      	subs	r2, r2, r5
 800f172:	6122      	str	r2, [r4, #16]
 800f174:	f8cd a000 	str.w	sl, [sp]
 800f178:	464b      	mov	r3, r9
 800f17a:	aa03      	add	r2, sp, #12
 800f17c:	4621      	mov	r1, r4
 800f17e:	4640      	mov	r0, r8
 800f180:	f7ff fee2 	bl	800ef48 <_printf_common>
 800f184:	3001      	adds	r0, #1
 800f186:	d14c      	bne.n	800f222 <_printf_i+0x1fe>
 800f188:	f04f 30ff 	mov.w	r0, #4294967295
 800f18c:	b004      	add	sp, #16
 800f18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f192:	4835      	ldr	r0, [pc, #212]	; (800f268 <_printf_i+0x244>)
 800f194:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f198:	6829      	ldr	r1, [r5, #0]
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1a0:	6029      	str	r1, [r5, #0]
 800f1a2:	061d      	lsls	r5, r3, #24
 800f1a4:	d514      	bpl.n	800f1d0 <_printf_i+0x1ac>
 800f1a6:	07df      	lsls	r7, r3, #31
 800f1a8:	bf44      	itt	mi
 800f1aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f1ae:	6023      	strmi	r3, [r4, #0]
 800f1b0:	b91e      	cbnz	r6, 800f1ba <_printf_i+0x196>
 800f1b2:	6823      	ldr	r3, [r4, #0]
 800f1b4:	f023 0320 	bic.w	r3, r3, #32
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	2310      	movs	r3, #16
 800f1bc:	e7b0      	b.n	800f120 <_printf_i+0xfc>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	f043 0320 	orr.w	r3, r3, #32
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	2378      	movs	r3, #120	; 0x78
 800f1c8:	4828      	ldr	r0, [pc, #160]	; (800f26c <_printf_i+0x248>)
 800f1ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1ce:	e7e3      	b.n	800f198 <_printf_i+0x174>
 800f1d0:	0659      	lsls	r1, r3, #25
 800f1d2:	bf48      	it	mi
 800f1d4:	b2b6      	uxthmi	r6, r6
 800f1d6:	e7e6      	b.n	800f1a6 <_printf_i+0x182>
 800f1d8:	4615      	mov	r5, r2
 800f1da:	e7bb      	b.n	800f154 <_printf_i+0x130>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	6826      	ldr	r6, [r4, #0]
 800f1e0:	6961      	ldr	r1, [r4, #20]
 800f1e2:	1d18      	adds	r0, r3, #4
 800f1e4:	6028      	str	r0, [r5, #0]
 800f1e6:	0635      	lsls	r5, r6, #24
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	d501      	bpl.n	800f1f0 <_printf_i+0x1cc>
 800f1ec:	6019      	str	r1, [r3, #0]
 800f1ee:	e002      	b.n	800f1f6 <_printf_i+0x1d2>
 800f1f0:	0670      	lsls	r0, r6, #25
 800f1f2:	d5fb      	bpl.n	800f1ec <_printf_i+0x1c8>
 800f1f4:	8019      	strh	r1, [r3, #0]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	6123      	str	r3, [r4, #16]
 800f1fa:	4615      	mov	r5, r2
 800f1fc:	e7ba      	b.n	800f174 <_printf_i+0x150>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	1d1a      	adds	r2, r3, #4
 800f202:	602a      	str	r2, [r5, #0]
 800f204:	681d      	ldr	r5, [r3, #0]
 800f206:	6862      	ldr	r2, [r4, #4]
 800f208:	2100      	movs	r1, #0
 800f20a:	4628      	mov	r0, r5
 800f20c:	f7f0 fff0 	bl	80001f0 <memchr>
 800f210:	b108      	cbz	r0, 800f216 <_printf_i+0x1f2>
 800f212:	1b40      	subs	r0, r0, r5
 800f214:	6060      	str	r0, [r4, #4]
 800f216:	6863      	ldr	r3, [r4, #4]
 800f218:	6123      	str	r3, [r4, #16]
 800f21a:	2300      	movs	r3, #0
 800f21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f220:	e7a8      	b.n	800f174 <_printf_i+0x150>
 800f222:	6923      	ldr	r3, [r4, #16]
 800f224:	462a      	mov	r2, r5
 800f226:	4649      	mov	r1, r9
 800f228:	4640      	mov	r0, r8
 800f22a:	47d0      	blx	sl
 800f22c:	3001      	adds	r0, #1
 800f22e:	d0ab      	beq.n	800f188 <_printf_i+0x164>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	079b      	lsls	r3, r3, #30
 800f234:	d413      	bmi.n	800f25e <_printf_i+0x23a>
 800f236:	68e0      	ldr	r0, [r4, #12]
 800f238:	9b03      	ldr	r3, [sp, #12]
 800f23a:	4298      	cmp	r0, r3
 800f23c:	bfb8      	it	lt
 800f23e:	4618      	movlt	r0, r3
 800f240:	e7a4      	b.n	800f18c <_printf_i+0x168>
 800f242:	2301      	movs	r3, #1
 800f244:	4632      	mov	r2, r6
 800f246:	4649      	mov	r1, r9
 800f248:	4640      	mov	r0, r8
 800f24a:	47d0      	blx	sl
 800f24c:	3001      	adds	r0, #1
 800f24e:	d09b      	beq.n	800f188 <_printf_i+0x164>
 800f250:	3501      	adds	r5, #1
 800f252:	68e3      	ldr	r3, [r4, #12]
 800f254:	9903      	ldr	r1, [sp, #12]
 800f256:	1a5b      	subs	r3, r3, r1
 800f258:	42ab      	cmp	r3, r5
 800f25a:	dcf2      	bgt.n	800f242 <_printf_i+0x21e>
 800f25c:	e7eb      	b.n	800f236 <_printf_i+0x212>
 800f25e:	2500      	movs	r5, #0
 800f260:	f104 0619 	add.w	r6, r4, #25
 800f264:	e7f5      	b.n	800f252 <_printf_i+0x22e>
 800f266:	bf00      	nop
 800f268:	0800f919 	.word	0x0800f919
 800f26c:	0800f92a 	.word	0x0800f92a

0800f270 <__retarget_lock_acquire_recursive>:
 800f270:	4770      	bx	lr

0800f272 <__retarget_lock_release_recursive>:
 800f272:	4770      	bx	lr

0800f274 <memmove>:
 800f274:	4288      	cmp	r0, r1
 800f276:	b510      	push	{r4, lr}
 800f278:	eb01 0402 	add.w	r4, r1, r2
 800f27c:	d902      	bls.n	800f284 <memmove+0x10>
 800f27e:	4284      	cmp	r4, r0
 800f280:	4623      	mov	r3, r4
 800f282:	d807      	bhi.n	800f294 <memmove+0x20>
 800f284:	1e43      	subs	r3, r0, #1
 800f286:	42a1      	cmp	r1, r4
 800f288:	d008      	beq.n	800f29c <memmove+0x28>
 800f28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f28e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f292:	e7f8      	b.n	800f286 <memmove+0x12>
 800f294:	4402      	add	r2, r0
 800f296:	4601      	mov	r1, r0
 800f298:	428a      	cmp	r2, r1
 800f29a:	d100      	bne.n	800f29e <memmove+0x2a>
 800f29c:	bd10      	pop	{r4, pc}
 800f29e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2a6:	e7f7      	b.n	800f298 <memmove+0x24>

0800f2a8 <_realloc_r>:
 800f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	4614      	mov	r4, r2
 800f2b0:	460e      	mov	r6, r1
 800f2b2:	b921      	cbnz	r1, 800f2be <_realloc_r+0x16>
 800f2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	f7ff bc25 	b.w	800eb08 <_malloc_r>
 800f2be:	b92a      	cbnz	r2, 800f2cc <_realloc_r+0x24>
 800f2c0:	f7ff fbb6 	bl	800ea30 <_free_r>
 800f2c4:	4625      	mov	r5, r4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2cc:	f000 f81b 	bl	800f306 <_malloc_usable_size_r>
 800f2d0:	4284      	cmp	r4, r0
 800f2d2:	4607      	mov	r7, r0
 800f2d4:	d802      	bhi.n	800f2dc <_realloc_r+0x34>
 800f2d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2da:	d812      	bhi.n	800f302 <_realloc_r+0x5a>
 800f2dc:	4621      	mov	r1, r4
 800f2de:	4640      	mov	r0, r8
 800f2e0:	f7ff fc12 	bl	800eb08 <_malloc_r>
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d0ed      	beq.n	800f2c6 <_realloc_r+0x1e>
 800f2ea:	42bc      	cmp	r4, r7
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	4631      	mov	r1, r6
 800f2f0:	bf28      	it	cs
 800f2f2:	463a      	movcs	r2, r7
 800f2f4:	f7ff fb86 	bl	800ea04 <memcpy>
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4640      	mov	r0, r8
 800f2fc:	f7ff fb98 	bl	800ea30 <_free_r>
 800f300:	e7e1      	b.n	800f2c6 <_realloc_r+0x1e>
 800f302:	4635      	mov	r5, r6
 800f304:	e7df      	b.n	800f2c6 <_realloc_r+0x1e>

0800f306 <_malloc_usable_size_r>:
 800f306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f30a:	1f18      	subs	r0, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bfbc      	itt	lt
 800f310:	580b      	ldrlt	r3, [r1, r0]
 800f312:	18c0      	addlt	r0, r0, r3
 800f314:	4770      	bx	lr
	...

0800f318 <_init>:
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	bf00      	nop
 800f31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f31e:	bc08      	pop	{r3}
 800f320:	469e      	mov	lr, r3
 800f322:	4770      	bx	lr

0800f324 <_fini>:
 800f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f326:	bf00      	nop
 800f328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32a:	bc08      	pop	{r3}
 800f32c:	469e      	mov	lr, r3
 800f32e:	4770      	bx	lr
